
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f80b 	bl	2000001e <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app()
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	setup_for_graphic_display();
20000014:	f000 fce3 	bl	200009de <setup_for_graphic_display>
}
20000018:	46c0      	nop			; (mov r8, r8)
2000001a:	46bd      	mov	sp, r7
2000001c:	bd80      	pop	{r7, pc}

2000001e <main>:

int main(int argc, char **argv)
{
2000001e:	b580      	push	{r7, lr}
20000020:	b084      	sub	sp, #16
20000022:	af00      	add	r7, sp, #0
20000024:	6078      	str	r0, [r7, #4]
20000026:	6039      	str	r1, [r7, #0]
	POBJECT p = &ball;
20000028:	4b0a      	ldr	r3, [pc, #40]	; (20000054 <main+0x36>)
2000002a:	60fb      	str	r3, [r7, #12]
	init_app();
2000002c:	f7ff fff0 	bl	20000010 <init_app>
	graphic_initialize();
20000030:	f000 fb5f 	bl	200006f2 <graphic_initialize>
#ifndef SIMULATOR
	graphic_clearscreen();
#endif
	p->set_speed(p, 4, 1);
20000034:	68fb      	ldr	r3, [r7, #12]
20000036:	6a1b      	ldr	r3, [r3, #32]
20000038:	68f8      	ldr	r0, [r7, #12]
2000003a:	2201      	movs	r2, #1
2000003c:	2104      	movs	r1, #4
2000003e:	4798      	blx	r3
	while(1){
		p->move(p);
20000040:	68fb      	ldr	r3, [r7, #12]
20000042:	69db      	ldr	r3, [r3, #28]
20000044:	68fa      	ldr	r2, [r7, #12]
20000046:	0010      	movs	r0, r2
20000048:	4798      	blx	r3
		delay_milli(40);
2000004a:	2028      	movs	r0, #40	; 0x28
2000004c:	f000 fead 	bl	20000daa <delay_milli>
		p->move(p);
20000050:	e7f6      	b.n	20000040 <main+0x22>
20000052:	46c0      	nop			; (mov r8, r8)
20000054:	20000f40 	andcs	r0, r0, r0, asr #30

20000058 <setup_for_keypad>:
#include "gpio.h"
#include "sys_delay.h"
#include <stdint.h>

void setup_for_keypad(GPIO* _gpio) {
20000058:	b580      	push	{r7, lr}
2000005a:	b082      	sub	sp, #8
2000005c:	af00      	add	r7, sp, #0
2000005e:	6078      	str	r0, [r7, #4]
	// Sätt pinnar 15-12 till utportar
	// och pinnar 11-8 till inportar.
    _gpio->moder &= 0x0000FFFF;
20000060:	687b      	ldr	r3, [r7, #4]
20000062:	681b      	ldr	r3, [r3, #0]
20000064:	041b      	lsls	r3, r3, #16
20000066:	0c1a      	lsrs	r2, r3, #16
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	601a      	str	r2, [r3, #0]
    _gpio->moder |= 0x5500FFFF;
2000006c:	687b      	ldr	r3, [r7, #4]
2000006e:	681b      	ldr	r3, [r3, #0]
20000070:	4a11      	ldr	r2, [pc, #68]	; (200000b8 <setup_for_keypad+0x60>)
20000072:	431a      	orrs	r2, r3
20000074:	687b      	ldr	r3, [r7, #4]
20000076:	601a      	str	r2, [r3, #0]

	// Sätt pinnar 15-12 till "push-pull"
	// och pinnar 11-8 till "open drain".
    _gpio->otyper &= 0xFFFF00FF;
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	889b      	ldrh	r3, [r3, #4]
2000007c:	22ff      	movs	r2, #255	; 0xff
2000007e:	4013      	ands	r3, r2
20000080:	b29a      	uxth	r2, r3
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	809a      	strh	r2, [r3, #4]
    _gpio->otyper |= 0x00000F00;
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	889b      	ldrh	r3, [r3, #4]
2000008a:	22f0      	movs	r2, #240	; 0xf0
2000008c:	0112      	lsls	r2, r2, #4
2000008e:	4313      	orrs	r3, r2
20000090:	b29a      	uxth	r2, r3
20000092:	687b      	ldr	r3, [r7, #4]
20000094:	809a      	strh	r2, [r3, #4]

	// Sätt pinnar 15-12 till "floating"
	// och pinnar 11-8 till "pull-down"
    _gpio->pupdr &= 0x0000FFFF;
20000096:	687b      	ldr	r3, [r7, #4]
20000098:	68db      	ldr	r3, [r3, #12]
2000009a:	041b      	lsls	r3, r3, #16
2000009c:	0c1a      	lsrs	r2, r3, #16
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	60da      	str	r2, [r3, #12]
    _gpio->pupdr |= 0x00AA0000;
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	68db      	ldr	r3, [r3, #12]
200000a6:	22aa      	movs	r2, #170	; 0xaa
200000a8:	0412      	lsls	r2, r2, #16
200000aa:	431a      	orrs	r2, r3
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	60da      	str	r2, [r3, #12]
}
200000b0:	46c0      	nop			; (mov r8, r8)
200000b2:	46bd      	mov	sp, r7
200000b4:	b002      	add	sp, #8
200000b6:	bd80      	pop	{r7, pc}
200000b8:	5500ffff 	strpl	pc, [r0, #-4095]	; 0xfffff001

200000bc <setup_for_seg_disp>:

void setup_for_seg_disp(GPIO* _gpio) {
200000bc:	b580      	push	{r7, lr}
200000be:	b082      	sub	sp, #8
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
	// Sätt pinnar 7-0 till utportar
	_gpio->moder &= 0xFFFF0000;
200000c4:	687b      	ldr	r3, [r7, #4]
200000c6:	681b      	ldr	r3, [r3, #0]
200000c8:	0c1b      	lsrs	r3, r3, #16
200000ca:	041a      	lsls	r2, r3, #16
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	601a      	str	r2, [r3, #0]
	_gpio->moder |= 0x00005555;
200000d0:	687b      	ldr	r3, [r7, #4]
200000d2:	681b      	ldr	r3, [r3, #0]
200000d4:	4a11      	ldr	r2, [pc, #68]	; (2000011c <setup_for_seg_disp+0x60>)
200000d6:	431a      	orrs	r2, r3
200000d8:	687b      	ldr	r3, [r7, #4]
200000da:	601a      	str	r2, [r3, #0]

	// Sätt pinnar 7-0 till "push-pull"
	_gpio->otyper &= 0xFFFFFF00;
200000dc:	687b      	ldr	r3, [r7, #4]
200000de:	889b      	ldrh	r3, [r3, #4]
200000e0:	22ff      	movs	r2, #255	; 0xff
200000e2:	4393      	bics	r3, r2
200000e4:	b29a      	uxth	r2, r3
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	809a      	strh	r2, [r3, #4]
	_gpio->otyper |= 0x000000FF;
200000ea:	687b      	ldr	r3, [r7, #4]
200000ec:	889b      	ldrh	r3, [r3, #4]
200000ee:	22ff      	movs	r2, #255	; 0xff
200000f0:	4313      	orrs	r3, r2
200000f2:	b29a      	uxth	r2, r3
200000f4:	687b      	ldr	r3, [r7, #4]
200000f6:	809a      	strh	r2, [r3, #4]

	// Sätter pinnar 4-0 till "pull-down"
	_gpio->pupdr &= 0xFFFFFF00;
200000f8:	687b      	ldr	r3, [r7, #4]
200000fa:	68db      	ldr	r3, [r3, #12]
200000fc:	22ff      	movs	r2, #255	; 0xff
200000fe:	4393      	bics	r3, r2
20000100:	001a      	movs	r2, r3
20000102:	687b      	ldr	r3, [r7, #4]
20000104:	60da      	str	r2, [r3, #12]
	_gpio->pupdr |= 0x000000AA;
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	68db      	ldr	r3, [r3, #12]
2000010a:	22aa      	movs	r2, #170	; 0xaa
2000010c:	431a      	orrs	r2, r3
2000010e:	687b      	ldr	r3, [r7, #4]
20000110:	60da      	str	r2, [r3, #12]
}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	46bd      	mov	sp, r7
20000116:	b002      	add	sp, #8
20000118:	bd80      	pop	{r7, pc}
2000011a:	46c0      	nop			; (mov r8, r8)
2000011c:	00005555 	andeq	r5, r0, r5, asr r5

20000120 <keyb>:

unsigned char keyb(void) {
20000120:	b590      	push	{r4, r7, lr}
20000122:	b087      	sub	sp, #28
20000124:	af00      	add	r7, sp, #0
	unsigned char keys[] = {
20000126:	1d3b      	adds	r3, r7, #4
20000128:	4a1f      	ldr	r2, [pc, #124]	; (200001a8 <keyb+0x88>)
2000012a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000012c:	c313      	stmia	r3!, {r0, r1, r4}
2000012e:	6812      	ldr	r2, [r2, #0]
20000130:	601a      	str	r2, [r3, #0]
		4,  5,  6,  11,
		7,  8,  9,  12,
		14, 0,  15, 13
	};
	unsigned char row, col;
	for(row = 0; row < 4; row++) {
20000132:	2317      	movs	r3, #23
20000134:	18fb      	adds	r3, r7, r3
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]
2000013a:	e02a      	b.n	20000192 <keyb+0x72>
		deactivate_rows(GPIO_D);
2000013c:	4b1b      	ldr	r3, [pc, #108]	; (200001ac <keyb+0x8c>)
2000013e:	0018      	movs	r0, r3
20000140:	f000 f886 	bl	20000250 <deactivate_rows>
		activate_row(GPIO_D, row);
20000144:	2317      	movs	r3, #23
20000146:	18fb      	adds	r3, r7, r3
20000148:	781b      	ldrb	r3, [r3, #0]
2000014a:	4a18      	ldr	r2, [pc, #96]	; (200001ac <keyb+0x8c>)
2000014c:	0019      	movs	r1, r3
2000014e:	0010      	movs	r0, r2
20000150:	f000 f856 	bl	20000200 <activate_row>
		col = read_col(GPIO_D);
20000154:	2316      	movs	r3, #22
20000156:	18fc      	adds	r4, r7, r3
20000158:	4b14      	ldr	r3, [pc, #80]	; (200001ac <keyb+0x8c>)
2000015a:	0018      	movs	r0, r3
2000015c:	f000 f883 	bl	20000266 <read_col>
20000160:	0003      	movs	r3, r0
20000162:	7023      	strb	r3, [r4, #0]
		if(col != 0xFF) {
20000164:	2316      	movs	r3, #22
20000166:	18fb      	adds	r3, r7, r3
20000168:	781b      	ldrb	r3, [r3, #0]
2000016a:	2bff      	cmp	r3, #255	; 0xff
2000016c:	d00a      	beq.n	20000184 <keyb+0x64>
			return keys[ 4 * row + col];
2000016e:	2317      	movs	r3, #23
20000170:	18fb      	adds	r3, r7, r3
20000172:	781b      	ldrb	r3, [r3, #0]
20000174:	009a      	lsls	r2, r3, #2
20000176:	2316      	movs	r3, #22
20000178:	18fb      	adds	r3, r7, r3
2000017a:	781b      	ldrb	r3, [r3, #0]
2000017c:	18d3      	adds	r3, r2, r3
2000017e:	1d3a      	adds	r2, r7, #4
20000180:	5cd3      	ldrb	r3, [r2, r3]
20000182:	e00c      	b.n	2000019e <keyb+0x7e>
	for(row = 0; row < 4; row++) {
20000184:	2317      	movs	r3, #23
20000186:	18fb      	adds	r3, r7, r3
20000188:	781a      	ldrb	r2, [r3, #0]
2000018a:	2317      	movs	r3, #23
2000018c:	18fb      	adds	r3, r7, r3
2000018e:	3201      	adds	r2, #1
20000190:	701a      	strb	r2, [r3, #0]
20000192:	2317      	movs	r3, #23
20000194:	18fb      	adds	r3, r7, r3
20000196:	781b      	ldrb	r3, [r3, #0]
20000198:	2b03      	cmp	r3, #3
2000019a:	d9cf      	bls.n	2000013c <keyb+0x1c>
		}
	}
	return 0xFF;
2000019c:	23ff      	movs	r3, #255	; 0xff
}
2000019e:	0018      	movs	r0, r3
200001a0:	46bd      	mov	sp, r7
200001a2:	b007      	add	sp, #28
200001a4:	bd90      	pop	{r4, r7, pc}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	20000fbc 			; <UNDEFINED> instruction: 0x20000fbc
200001ac:	40020c00 	andmi	r0, r2, r0, lsl #24

200001b0 <out7seg>:

void out7seg(GPIO* _gpio, unsigned char c) {
200001b0:	b590      	push	{r4, r7, lr}
200001b2:	b08b      	sub	sp, #44	; 0x2c
200001b4:	af00      	add	r7, sp, #0
200001b6:	6078      	str	r0, [r7, #4]
200001b8:	000a      	movs	r2, r1
200001ba:	1cfb      	adds	r3, r7, #3
200001bc:	701a      	strb	r2, [r3, #0]
    unsigned short result[] = {
200001be:	2308      	movs	r3, #8
200001c0:	18fb      	adds	r3, r7, r3
200001c2:	4a0e      	ldr	r2, [pc, #56]	; (200001fc <out7seg+0x4c>)
200001c4:	ca13      	ldmia	r2!, {r0, r1, r4}
200001c6:	c313      	stmia	r3!, {r0, r1, r4}
200001c8:	ca13      	ldmia	r2!, {r0, r1, r4}
200001ca:	c313      	stmia	r3!, {r0, r1, r4}
200001cc:	ca03      	ldmia	r2!, {r0, r1}
200001ce:	c303      	stmia	r3!, {r0, r1}
		0x5E, // D
		0x80, // E
		0x76  // F
	};

    if(c > 0xF) {
200001d0:	1cfb      	adds	r3, r7, #3
200001d2:	781b      	ldrb	r3, [r3, #0]
200001d4:	2b0f      	cmp	r3, #15
200001d6:	d903      	bls.n	200001e0 <out7seg+0x30>
		_gpio->odrLow = 0x00;
200001d8:	687b      	ldr	r3, [r7, #4]
200001da:	2200      	movs	r2, #0
200001dc:	751a      	strb	r2, [r3, #20]
    } else {
		_gpio->odrLow = result[c];
    }
}
200001de:	e008      	b.n	200001f2 <out7seg+0x42>
		_gpio->odrLow = result[c];
200001e0:	1cfb      	adds	r3, r7, #3
200001e2:	781a      	ldrb	r2, [r3, #0]
200001e4:	2308      	movs	r3, #8
200001e6:	18fb      	adds	r3, r7, r3
200001e8:	0052      	lsls	r2, r2, #1
200001ea:	5ad3      	ldrh	r3, [r2, r3]
200001ec:	b2da      	uxtb	r2, r3
200001ee:	687b      	ldr	r3, [r7, #4]
200001f0:	751a      	strb	r2, [r3, #20]
}
200001f2:	46c0      	nop			; (mov r8, r8)
200001f4:	46bd      	mov	sp, r7
200001f6:	b00b      	add	sp, #44	; 0x2c
200001f8:	bd90      	pop	{r4, r7, pc}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	20000fcc 	andcs	r0, r0, ip, asr #31

20000200 <activate_row>:

void activate_row(GPIO* _gpio, unsigned char row) {
20000200:	b580      	push	{r7, lr}
20000202:	b082      	sub	sp, #8
20000204:	af00      	add	r7, sp, #0
20000206:	6078      	str	r0, [r7, #4]
20000208:	000a      	movs	r2, r1
2000020a:	1cfb      	adds	r3, r7, #3
2000020c:	701a      	strb	r2, [r3, #0]
	switch(row){
2000020e:	1cfb      	adds	r3, r7, #3
20000210:	781b      	ldrb	r3, [r3, #0]
20000212:	2b01      	cmp	r3, #1
20000214:	d00c      	beq.n	20000230 <activate_row+0x30>
20000216:	dc02      	bgt.n	2000021e <activate_row+0x1e>
20000218:	2b00      	cmp	r3, #0
2000021a:	d005      	beq.n	20000228 <activate_row+0x28>
		case 0: _gpio->odrHigh = 0x10; break;
		case 1: _gpio->odrHigh = 0x20; break;
		case 2: _gpio->odrHigh = 0x40; break;
		case 3: _gpio->odrHigh = 0x80; break;
	}
}
2000021c:	e014      	b.n	20000248 <activate_row+0x48>
	switch(row){
2000021e:	2b02      	cmp	r3, #2
20000220:	d00a      	beq.n	20000238 <activate_row+0x38>
20000222:	2b03      	cmp	r3, #3
20000224:	d00c      	beq.n	20000240 <activate_row+0x40>
}
20000226:	e00f      	b.n	20000248 <activate_row+0x48>
		case 0: _gpio->odrHigh = 0x10; break;
20000228:	687b      	ldr	r3, [r7, #4]
2000022a:	2210      	movs	r2, #16
2000022c:	755a      	strb	r2, [r3, #21]
2000022e:	e00b      	b.n	20000248 <activate_row+0x48>
		case 1: _gpio->odrHigh = 0x20; break;
20000230:	687b      	ldr	r3, [r7, #4]
20000232:	2220      	movs	r2, #32
20000234:	755a      	strb	r2, [r3, #21]
20000236:	e007      	b.n	20000248 <activate_row+0x48>
		case 2: _gpio->odrHigh = 0x40; break;
20000238:	687b      	ldr	r3, [r7, #4]
2000023a:	2240      	movs	r2, #64	; 0x40
2000023c:	755a      	strb	r2, [r3, #21]
2000023e:	e003      	b.n	20000248 <activate_row+0x48>
		case 3: _gpio->odrHigh = 0x80; break;
20000240:	687b      	ldr	r3, [r7, #4]
20000242:	2280      	movs	r2, #128	; 0x80
20000244:	755a      	strb	r2, [r3, #21]
20000246:	46c0      	nop			; (mov r8, r8)
}
20000248:	46c0      	nop			; (mov r8, r8)
2000024a:	46bd      	mov	sp, r7
2000024c:	b002      	add	sp, #8
2000024e:	bd80      	pop	{r7, pc}

20000250 <deactivate_rows>:

void deactivate_rows(GPIO* _gpio) {
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	6078      	str	r0, [r7, #4]
	_gpio->odrHigh = 0x00;
20000258:	687b      	ldr	r3, [r7, #4]
2000025a:	2200      	movs	r2, #0
2000025c:	755a      	strb	r2, [r3, #21]
}
2000025e:	46c0      	nop			; (mov r8, r8)
20000260:	46bd      	mov	sp, r7
20000262:	b002      	add	sp, #8
20000264:	bd80      	pop	{r7, pc}

20000266 <read_col>:

unsigned char read_col(GPIO* _gpio) {
20000266:	b580      	push	{r7, lr}
20000268:	b082      	sub	sp, #8
2000026a:	af00      	add	r7, sp, #0
2000026c:	6078      	str	r0, [r7, #4]
	if(_gpio->idrHigh & 0x01) return 0;
2000026e:	687b      	ldr	r3, [r7, #4]
20000270:	7c5b      	ldrb	r3, [r3, #17]
20000272:	001a      	movs	r2, r3
20000274:	2301      	movs	r3, #1
20000276:	4013      	ands	r3, r2
20000278:	d001      	beq.n	2000027e <read_col+0x18>
2000027a:	2300      	movs	r3, #0
2000027c:	e018      	b.n	200002b0 <read_col+0x4a>
	if(_gpio->idrHigh & 0x02) return 1;
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	7c5b      	ldrb	r3, [r3, #17]
20000282:	001a      	movs	r2, r3
20000284:	2302      	movs	r3, #2
20000286:	4013      	ands	r3, r2
20000288:	d001      	beq.n	2000028e <read_col+0x28>
2000028a:	2301      	movs	r3, #1
2000028c:	e010      	b.n	200002b0 <read_col+0x4a>
	if(_gpio->idrHigh & 0x04) return 2;
2000028e:	687b      	ldr	r3, [r7, #4]
20000290:	7c5b      	ldrb	r3, [r3, #17]
20000292:	001a      	movs	r2, r3
20000294:	2304      	movs	r3, #4
20000296:	4013      	ands	r3, r2
20000298:	d001      	beq.n	2000029e <read_col+0x38>
2000029a:	2302      	movs	r3, #2
2000029c:	e008      	b.n	200002b0 <read_col+0x4a>
	if(_gpio->idrHigh & 0x08) return 3;
2000029e:	687b      	ldr	r3, [r7, #4]
200002a0:	7c5b      	ldrb	r3, [r3, #17]
200002a2:	001a      	movs	r2, r3
200002a4:	2308      	movs	r3, #8
200002a6:	4013      	ands	r3, r2
200002a8:	d001      	beq.n	200002ae <read_col+0x48>
200002aa:	2303      	movs	r3, #3
200002ac:	e000      	b.n	200002b0 <read_col+0x4a>
	return 0xFF;
200002ae:	23ff      	movs	r3, #255	; 0xff
}
200002b0:	0018      	movs	r0, r3
200002b2:	46bd      	mov	sp, r7
200002b4:	b002      	add	sp, #8
200002b6:	bd80      	pop	{r7, pc}

200002b8 <setup_for_ascii_display>:

void setup_for_ascii_display() {
200002b8:	b580      	push	{r7, lr}
200002ba:	af00      	add	r7, sp, #0
	// Sätt alla pinnar till utportar.
	GPIO_E->moder = 0x55555555;
200002bc:	4b05      	ldr	r3, [pc, #20]	; (200002d4 <setup_for_ascii_display+0x1c>)
200002be:	4a06      	ldr	r2, [pc, #24]	; (200002d8 <setup_for_ascii_display+0x20>)
200002c0:	601a      	str	r2, [r3, #0]

	// Sätt utportar till "push/pull".
	//GPIO_E->otyper = 0x00000000;

	// Sätt utportars hastighet till medium.
	GPIO_E->ospeedr = 0x55555555;
200002c2:	4b04      	ldr	r3, [pc, #16]	; (200002d4 <setup_for_ascii_display+0x1c>)
200002c4:	4a04      	ldr	r2, [pc, #16]	; (200002d8 <setup_for_ascii_display+0x20>)
200002c6:	609a      	str	r2, [r3, #8]
	//GPIO_E->ospeedr = 0x00000000;

	// inportar är "pull-up"
	//GPIO_E->pupdr = 0x55550000;

	ascii_init();
200002c8:	f000 f808 	bl	200002dc <ascii_init>
}
200002cc:	46c0      	nop			; (mov r8, r8)
200002ce:	46bd      	mov	sp, r7
200002d0:	bd80      	pop	{r7, pc}
200002d2:	46c0      	nop			; (mov r8, r8)
200002d4:	40021000 	andmi	r1, r2, r0
200002d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002dc <ascii_init>:

void ascii_init(void) {
200002dc:	b580      	push	{r7, lr}
200002de:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80)
200002e0:	46c0      	nop			; (mov r8, r8)
200002e2:	f000 f8bd 	bl	20000460 <ascii_read_status>
200002e6:	0003      	movs	r3, r0
200002e8:	001a      	movs	r2, r3
200002ea:	2380      	movs	r3, #128	; 0x80
200002ec:	4013      	ands	r3, r2
200002ee:	2b80      	cmp	r3, #128	; 0x80
200002f0:	d0f7      	beq.n	200002e2 <ascii_init+0x6>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
200002f2:	2014      	movs	r0, #20
200002f4:	f000 fd37 	bl	20000d66 <delay_mikro>
	// Function Set - 2 rader, 5x8 punkters tecken.
	ascii_write_cmd(0x38);
200002f8:	2038      	movs	r0, #56	; 0x38
200002fa:	f000 f887 	bl	2000040c <ascii_write_cmd>
	delay_mikro(39);
200002fe:	2027      	movs	r0, #39	; 0x27
20000300:	f000 fd31 	bl	20000d66 <delay_mikro>


	while((ascii_read_status() & 0x80) == 0x80)
20000304:	46c0      	nop			; (mov r8, r8)
20000306:	f000 f8ab 	bl	20000460 <ascii_read_status>
2000030a:	0003      	movs	r3, r0
2000030c:	001a      	movs	r2, r3
2000030e:	2380      	movs	r3, #128	; 0x80
20000310:	4013      	ands	r3, r2
20000312:	2b80      	cmp	r3, #128	; 0x80
20000314:	d0f7      	beq.n	20000306 <ascii_init+0x2a>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
20000316:	2014      	movs	r0, #20
20000318:	f000 fd25 	bl	20000d66 <delay_mikro>
	// Tänd display, tänd markör ("cursor"), konstant visning.
	ascii_write_cmd(0x0E);
2000031c:	200e      	movs	r0, #14
2000031e:	f000 f875 	bl	2000040c <ascii_write_cmd>
	delay_mikro(39);
20000322:	2027      	movs	r0, #39	; 0x27
20000324:	f000 fd1f 	bl	20000d66 <delay_mikro>

	while((ascii_read_status() & 0x80) == 0x80)
20000328:	46c0      	nop			; (mov r8, r8)
2000032a:	f000 f899 	bl	20000460 <ascii_read_status>
2000032e:	0003      	movs	r3, r0
20000330:	001a      	movs	r2, r3
20000332:	2380      	movs	r3, #128	; 0x80
20000334:	4013      	ands	r3, r2
20000336:	2b80      	cmp	r3, #128	; 0x80
20000338:	d0f7      	beq.n	2000032a <ascii_init+0x4e>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
2000033a:	2014      	movs	r0, #20
2000033c:	f000 fd13 	bl	20000d66 <delay_mikro>
	// Clear display.
	ascii_write_cmd(0x01);
20000340:	2001      	movs	r0, #1
20000342:	f000 f863 	bl	2000040c <ascii_write_cmd>
	delay_mikro(39);
20000346:	2027      	movs	r0, #39	; 0x27
20000348:	f000 fd0d 	bl	20000d66 <delay_mikro>

	while((ascii_read_status() & 0x80) == 0x80)
2000034c:	46c0      	nop			; (mov r8, r8)
2000034e:	f000 f887 	bl	20000460 <ascii_read_status>
20000352:	0003      	movs	r3, r0
20000354:	001a      	movs	r2, r3
20000356:	2380      	movs	r3, #128	; 0x80
20000358:	4013      	ands	r3, r2
2000035a:	2b80      	cmp	r3, #128	; 0x80
2000035c:	d0f7      	beq.n	2000034e <ascii_init+0x72>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
2000035e:	2014      	movs	r0, #20
20000360:	f000 fd01 	bl	20000d66 <delay_mikro>
	// Adressering med "increment", inget skift av adressbuffern.
	ascii_write_cmd(0x04);
20000364:	2004      	movs	r0, #4
20000366:	f000 f851 	bl	2000040c <ascii_write_cmd>
	delay_mikro(39);
2000036a:	2027      	movs	r0, #39	; 0x27
2000036c:	f000 fcfb 	bl	20000d66 <delay_mikro>
}
20000370:	46c0      	nop			; (mov r8, r8)
20000372:	46bd      	mov	sp, r7
20000374:	bd80      	pop	{r7, pc}

20000376 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x) {
20000376:	b580      	push	{r7, lr}
20000378:	b084      	sub	sp, #16
2000037a:	af00      	add	r7, sp, #0
2000037c:	0002      	movs	r2, r0
2000037e:	1dfb      	adds	r3, r7, #7
20000380:	701a      	strb	r2, [r3, #0]
	//GPIO_E->odrLow |= x;

	unsigned char c;
	c = GPIO_E->odrLow;
20000382:	4a0d      	ldr	r2, [pc, #52]	; (200003b8 <ascii_ctrl_bit_set+0x42>)
20000384:	230f      	movs	r3, #15
20000386:	18fb      	adds	r3, r7, r3
20000388:	7d12      	ldrb	r2, [r2, #20]
2000038a:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
2000038c:	1dfa      	adds	r2, r7, #7
2000038e:	230f      	movs	r3, #15
20000390:	18fb      	adds	r3, r7, r3
20000392:	7812      	ldrb	r2, [r2, #0]
20000394:	781b      	ldrb	r3, [r3, #0]
20000396:	4313      	orrs	r3, r2
20000398:	b2da      	uxtb	r2, r3
2000039a:	230f      	movs	r3, #15
2000039c:	18fb      	adds	r3, r7, r3
2000039e:	2104      	movs	r1, #4
200003a0:	430a      	orrs	r2, r1
200003a2:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
200003a4:	4a04      	ldr	r2, [pc, #16]	; (200003b8 <ascii_ctrl_bit_set+0x42>)
200003a6:	230f      	movs	r3, #15
200003a8:	18fb      	adds	r3, r7, r3
200003aa:	781b      	ldrb	r3, [r3, #0]
200003ac:	7513      	strb	r3, [r2, #20]
}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	46bd      	mov	sp, r7
200003b2:	b004      	add	sp, #16
200003b4:	bd80      	pop	{r7, pc}
200003b6:	46c0      	nop			; (mov r8, r8)
200003b8:	40021000 	andmi	r1, r2, r0

200003bc <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x) {
200003bc:	b580      	push	{r7, lr}
200003be:	b084      	sub	sp, #16
200003c0:	af00      	add	r7, sp, #0
200003c2:	0002      	movs	r2, r0
200003c4:	1dfb      	adds	r3, r7, #7
200003c6:	701a      	strb	r2, [r3, #0]
	//GPIO_E->odrLow &= (~x);

	unsigned char c;
	c = GPIO_E->odrLow;
200003c8:	4a0f      	ldr	r2, [pc, #60]	; (20000408 <ascii_ctrl_bit_clear+0x4c>)
200003ca:	230f      	movs	r3, #15
200003cc:	18fb      	adds	r3, r7, r3
200003ce:	7d12      	ldrb	r2, [r2, #20]
200003d0:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
200003d2:	1dfb      	adds	r3, r7, #7
200003d4:	781b      	ldrb	r3, [r3, #0]
200003d6:	b25b      	sxtb	r3, r3
200003d8:	43db      	mvns	r3, r3
200003da:	b25b      	sxtb	r3, r3
200003dc:	220f      	movs	r2, #15
200003de:	18ba      	adds	r2, r7, r2
200003e0:	7812      	ldrb	r2, [r2, #0]
200003e2:	b252      	sxtb	r2, r2
200003e4:	4013      	ands	r3, r2
200003e6:	b25b      	sxtb	r3, r3
200003e8:	2204      	movs	r2, #4
200003ea:	4313      	orrs	r3, r2
200003ec:	b25a      	sxtb	r2, r3
200003ee:	230f      	movs	r3, #15
200003f0:	18fb      	adds	r3, r7, r3
200003f2:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
200003f4:	4a04      	ldr	r2, [pc, #16]	; (20000408 <ascii_ctrl_bit_clear+0x4c>)
200003f6:	230f      	movs	r3, #15
200003f8:	18fb      	adds	r3, r7, r3
200003fa:	781b      	ldrb	r3, [r3, #0]
200003fc:	7513      	strb	r3, [r2, #20]
}
200003fe:	46c0      	nop			; (mov r8, r8)
20000400:	46bd      	mov	sp, r7
20000402:	b004      	add	sp, #16
20000404:	bd80      	pop	{r7, pc}
20000406:	46c0      	nop			; (mov r8, r8)
20000408:	40021000 	andmi	r1, r2, r0

2000040c <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
2000040c:	b580      	push	{r7, lr}
2000040e:	b082      	sub	sp, #8
20000410:	af00      	add	r7, sp, #0
20000412:	0002      	movs	r2, r0
20000414:	1dfb      	adds	r3, r7, #7
20000416:	701a      	strb	r2, [r3, #0]
	// Doesn't wait or check for the status flag...
	ascii_ctrl_bit_clear(B_RS);
20000418:	2001      	movs	r0, #1
2000041a:	f7ff ffcf 	bl	200003bc <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
2000041e:	2002      	movs	r0, #2
20000420:	f7ff ffcc 	bl	200003bc <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000424:	1dfb      	adds	r3, r7, #7
20000426:	781b      	ldrb	r3, [r3, #0]
20000428:	0018      	movs	r0, r3
2000042a:	f000 f861 	bl	200004f0 <ascii_write_controller>
}
2000042e:	46c0      	nop			; (mov r8, r8)
20000430:	46bd      	mov	sp, r7
20000432:	b002      	add	sp, #8
20000434:	bd80      	pop	{r7, pc}

20000436 <ascii_write_data>:

void ascii_write_data(unsigned char data) {
20000436:	b580      	push	{r7, lr}
20000438:	b082      	sub	sp, #8
2000043a:	af00      	add	r7, sp, #0
2000043c:	0002      	movs	r2, r0
2000043e:	1dfb      	adds	r3, r7, #7
20000440:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000442:	2001      	movs	r0, #1
20000444:	f7ff ff97 	bl	20000376 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000448:	2002      	movs	r0, #2
2000044a:	f7ff ffb7 	bl	200003bc <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
2000044e:	1dfb      	adds	r3, r7, #7
20000450:	781b      	ldrb	r3, [r3, #0]
20000452:	0018      	movs	r0, r3
20000454:	f000 f84c 	bl	200004f0 <ascii_write_controller>
}
20000458:	46c0      	nop			; (mov r8, r8)
2000045a:	46bd      	mov	sp, r7
2000045c:	b002      	add	sp, #8
2000045e:	bd80      	pop	{r7, pc}

20000460 <ascii_read_status>:

unsigned char ascii_read_status(void) {
20000460:	b590      	push	{r4, r7, lr}
20000462:	b083      	sub	sp, #12
20000464:	af00      	add	r7, sp, #0
	unsigned char read_value;

	// Sätt pinnar 15-8 till ingångar.
	GPIO_E->moder &= 0x0000FFFF;
20000466:	4b0e      	ldr	r3, [pc, #56]	; (200004a0 <ascii_read_status+0x40>)
20000468:	4a0d      	ldr	r2, [pc, #52]	; (200004a0 <ascii_read_status+0x40>)
2000046a:	6812      	ldr	r2, [r2, #0]
2000046c:	0412      	lsls	r2, r2, #16
2000046e:	0c12      	lsrs	r2, r2, #16
20000470:	601a      	str	r2, [r3, #0]

	ascii_ctrl_bit_clear(B_RS);
20000472:	2001      	movs	r0, #1
20000474:	f7ff ffa2 	bl	200003bc <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000478:	2002      	movs	r0, #2
2000047a:	f7ff ff7c 	bl	20000376 <ascii_ctrl_bit_set>
	read_value = ascii_read_controller();
2000047e:	1dfc      	adds	r4, r7, #7
20000480:	f000 f84e 	bl	20000520 <ascii_read_controller>
20000484:	0003      	movs	r3, r0
20000486:	7023      	strb	r3, [r4, #0]

	// Sätt pinnar 15-8 till utgångar igen.
	GPIO_E->moder |= 0x55550000;
20000488:	4b05      	ldr	r3, [pc, #20]	; (200004a0 <ascii_read_status+0x40>)
2000048a:	4a05      	ldr	r2, [pc, #20]	; (200004a0 <ascii_read_status+0x40>)
2000048c:	6812      	ldr	r2, [r2, #0]
2000048e:	4905      	ldr	r1, [pc, #20]	; (200004a4 <ascii_read_status+0x44>)
20000490:	430a      	orrs	r2, r1
20000492:	601a      	str	r2, [r3, #0]

	return read_value;
20000494:	1dfb      	adds	r3, r7, #7
20000496:	781b      	ldrb	r3, [r3, #0]
}
20000498:	0018      	movs	r0, r3
2000049a:	46bd      	mov	sp, r7
2000049c:	b003      	add	sp, #12
2000049e:	bd90      	pop	{r4, r7, pc}
200004a0:	40021000 	andmi	r1, r2, r0
200004a4:	55550000 	ldrbpl	r0, [r5, #-0]

200004a8 <ascii_read_data>:

unsigned char ascii_read_data(void) {
200004a8:	b590      	push	{r4, r7, lr}
200004aa:	b083      	sub	sp, #12
200004ac:	af00      	add	r7, sp, #0
	unsigned char read_value;

	// Sätt pinnar 15-8 till ingångar.
	GPIO_E->moder &= 0x0000FFFF;
200004ae:	4b0e      	ldr	r3, [pc, #56]	; (200004e8 <ascii_read_data+0x40>)
200004b0:	4a0d      	ldr	r2, [pc, #52]	; (200004e8 <ascii_read_data+0x40>)
200004b2:	6812      	ldr	r2, [r2, #0]
200004b4:	0412      	lsls	r2, r2, #16
200004b6:	0c12      	lsrs	r2, r2, #16
200004b8:	601a      	str	r2, [r3, #0]

	ascii_ctrl_bit_set(B_RS);
200004ba:	2001      	movs	r0, #1
200004bc:	f7ff ff5b 	bl	20000376 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200004c0:	2002      	movs	r0, #2
200004c2:	f7ff ff58 	bl	20000376 <ascii_ctrl_bit_set>
	read_value = ascii_read_controller();
200004c6:	1dfc      	adds	r4, r7, #7
200004c8:	f000 f82a 	bl	20000520 <ascii_read_controller>
200004cc:	0003      	movs	r3, r0
200004ce:	7023      	strb	r3, [r4, #0]

	// Sätt pinnar 15-8 till utgångar igen.
	GPIO_E->moder |= 0xFFFF0000;
200004d0:	4b05      	ldr	r3, [pc, #20]	; (200004e8 <ascii_read_data+0x40>)
200004d2:	4a05      	ldr	r2, [pc, #20]	; (200004e8 <ascii_read_data+0x40>)
200004d4:	6812      	ldr	r2, [r2, #0]
200004d6:	4905      	ldr	r1, [pc, #20]	; (200004ec <ascii_read_data+0x44>)
200004d8:	430a      	orrs	r2, r1
200004da:	601a      	str	r2, [r3, #0]

	return read_value;
200004dc:	1dfb      	adds	r3, r7, #7
200004de:	781b      	ldrb	r3, [r3, #0]
}
200004e0:	0018      	movs	r0, r3
200004e2:	46bd      	mov	sp, r7
200004e4:	b003      	add	sp, #12
200004e6:	bd90      	pop	{r4, r7, pc}
200004e8:	40021000 	andmi	r1, r2, r0
200004ec:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

200004f0 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
200004f0:	b580      	push	{r7, lr}
200004f2:	b082      	sub	sp, #8
200004f4:	af00      	add	r7, sp, #0
200004f6:	0002      	movs	r2, r0
200004f8:	1dfb      	adds	r3, r7, #7
200004fa:	701a      	strb	r2, [r3, #0]
	// Delay40ns is redundant
	ascii_ctrl_bit_set(B_E);
200004fc:	2040      	movs	r0, #64	; 0x40
200004fe:	f7ff ff3a 	bl	20000376 <ascii_ctrl_bit_set>
	GPIO_E->odrHigh = byte;
20000502:	4a06      	ldr	r2, [pc, #24]	; (2000051c <ascii_write_controller+0x2c>)
20000504:	1dfb      	adds	r3, r7, #7
20000506:	781b      	ldrb	r3, [r3, #0]
20000508:	7553      	strb	r3, [r2, #21]
	delay_250ns();
2000050a:	f000 fc03 	bl	20000d14 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
2000050e:	2040      	movs	r0, #64	; 0x40
20000510:	f7ff ff54 	bl	200003bc <ascii_ctrl_bit_clear>
	// Delay10ns is redundant
}
20000514:	46c0      	nop			; (mov r8, r8)
20000516:	46bd      	mov	sp, r7
20000518:	b002      	add	sp, #8
2000051a:	bd80      	pop	{r7, pc}
2000051c:	40021000 	andmi	r1, r2, r0

20000520 <ascii_read_controller>:

unsigned char ascii_read_controller(void) {
20000520:	b580      	push	{r7, lr}
20000522:	b082      	sub	sp, #8
20000524:	af00      	add	r7, sp, #0
	unsigned char read_value;
	ascii_ctrl_bit_set(B_E);
20000526:	2040      	movs	r0, #64	; 0x40
20000528:	f7ff ff25 	bl	20000376 <ascii_ctrl_bit_set>
	delay_250ns();
2000052c:	f000 fbf2 	bl	20000d14 <delay_250ns>
	delay_250ns();
20000530:	f000 fbf0 	bl	20000d14 <delay_250ns>
	read_value = GPIO_E->idrHigh;
20000534:	4a06      	ldr	r2, [pc, #24]	; (20000550 <ascii_read_controller+0x30>)
20000536:	1dfb      	adds	r3, r7, #7
20000538:	7c52      	ldrb	r2, [r2, #17]
2000053a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
2000053c:	2040      	movs	r0, #64	; 0x40
2000053e:	f7ff ff3d 	bl	200003bc <ascii_ctrl_bit_clear>
	return read_value;
20000542:	1dfb      	adds	r3, r7, #7
20000544:	781b      	ldrb	r3, [r3, #0]
}
20000546:	0018      	movs	r0, r3
20000548:	46bd      	mov	sp, r7
2000054a:	b002      	add	sp, #8
2000054c:	bd80      	pop	{r7, pc}
2000054e:	46c0      	nop			; (mov r8, r8)
20000550:	40021000 	andmi	r1, r2, r0

20000554 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y) {
20000554:	b580      	push	{r7, lr}
20000556:	b084      	sub	sp, #16
20000558:	af00      	add	r7, sp, #0
2000055a:	6078      	str	r0, [r7, #4]
2000055c:	6039      	str	r1, [r7, #0]
	if(!(y == 1 || y == 2)) return;
2000055e:	683b      	ldr	r3, [r7, #0]
20000560:	2b01      	cmp	r3, #1
20000562:	d002      	beq.n	2000056a <ascii_gotoxy+0x16>
20000564:	683b      	ldr	r3, [r7, #0]
20000566:	2b02      	cmp	r3, #2
20000568:	d11a      	bne.n	200005a0 <ascii_gotoxy+0x4c>
	unsigned char address = x - 1;
2000056a:	687b      	ldr	r3, [r7, #4]
2000056c:	b2da      	uxtb	r2, r3
2000056e:	230f      	movs	r3, #15
20000570:	18fb      	adds	r3, r7, r3
20000572:	3a01      	subs	r2, #1
20000574:	701a      	strb	r2, [r3, #0]
	if(y == 2){
20000576:	683b      	ldr	r3, [r7, #0]
20000578:	2b02      	cmp	r3, #2
2000057a:	d106      	bne.n	2000058a <ascii_gotoxy+0x36>
		address += 0x40;
2000057c:	230f      	movs	r3, #15
2000057e:	18fb      	adds	r3, r7, r3
20000580:	220f      	movs	r2, #15
20000582:	18ba      	adds	r2, r7, r2
20000584:	7812      	ldrb	r2, [r2, #0]
20000586:	3240      	adds	r2, #64	; 0x40
20000588:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
2000058a:	230f      	movs	r3, #15
2000058c:	18fb      	adds	r3, r7, r3
2000058e:	781b      	ldrb	r3, [r3, #0]
20000590:	2280      	movs	r2, #128	; 0x80
20000592:	4252      	negs	r2, r2
20000594:	4313      	orrs	r3, r2
20000596:	b2db      	uxtb	r3, r3
20000598:	0018      	movs	r0, r3
2000059a:	f7ff ff37 	bl	2000040c <ascii_write_cmd>
2000059e:	e000      	b.n	200005a2 <ascii_gotoxy+0x4e>
	if(!(y == 1 || y == 2)) return;
200005a0:	46c0      	nop			; (mov r8, r8)
}
200005a2:	46bd      	mov	sp, r7
200005a4:	b004      	add	sp, #16
200005a6:	bd80      	pop	{r7, pc}

200005a8 <ascii_write_char>:

void ascii_write_char(unsigned char c) {
200005a8:	b580      	push	{r7, lr}
200005aa:	b082      	sub	sp, #8
200005ac:	af00      	add	r7, sp, #0
200005ae:	0002      	movs	r2, r0
200005b0:	1dfb      	adds	r3, r7, #7
200005b2:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80)
200005b4:	46c0      	nop			; (mov r8, r8)
200005b6:	f7ff ff53 	bl	20000460 <ascii_read_status>
200005ba:	0003      	movs	r3, r0
200005bc:	001a      	movs	r2, r3
200005be:	2380      	movs	r3, #128	; 0x80
200005c0:	4013      	ands	r3, r2
200005c2:	2b80      	cmp	r3, #128	; 0x80
200005c4:	d0f7      	beq.n	200005b6 <ascii_write_char+0xe>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(8);
200005c6:	2008      	movs	r0, #8
200005c8:	f000 fbcd 	bl	20000d66 <delay_mikro>
	ascii_write_data(c);
200005cc:	1dfb      	adds	r3, r7, #7
200005ce:	781b      	ldrb	r3, [r3, #0]
200005d0:	0018      	movs	r0, r3
200005d2:	f7ff ff30 	bl	20000436 <ascii_write_data>
	delay_mikro(43);
200005d6:	202b      	movs	r0, #43	; 0x2b
200005d8:	f000 fbc5 	bl	20000d66 <delay_mikro>
	//delay_mikro(100000);
}
200005dc:	46c0      	nop			; (mov r8, r8)
200005de:	46bd      	mov	sp, r7
200005e0:	b002      	add	sp, #8
200005e2:	bd80      	pop	{r7, pc}

200005e4 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x) {
200005e4:	b580      	push	{r7, lr}
200005e6:	b084      	sub	sp, #16
200005e8:	af00      	add	r7, sp, #0
200005ea:	0002      	movs	r2, r0
200005ec:	1dfb      	adds	r3, r7, #7
200005ee:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
200005f0:	4a12      	ldr	r2, [pc, #72]	; (2000063c <graphic_ctrl_bit_set+0x58>)
200005f2:	230f      	movs	r3, #15
200005f4:	18fb      	adds	r3, r7, r3
200005f6:	7d12      	ldrb	r2, [r2, #20]
200005f8:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
200005fa:	230f      	movs	r3, #15
200005fc:	18fb      	adds	r3, r7, r3
200005fe:	220f      	movs	r2, #15
20000600:	18ba      	adds	r2, r7, r2
20000602:	7812      	ldrb	r2, [r2, #0]
20000604:	2104      	movs	r1, #4
20000606:	438a      	bics	r2, r1
20000608:	701a      	strb	r2, [r3, #0]
	c |= (~B_SELECT & x);
2000060a:	1dfb      	adds	r3, r7, #7
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	b25b      	sxtb	r3, r3
20000610:	2204      	movs	r2, #4
20000612:	4393      	bics	r3, r2
20000614:	b25a      	sxtb	r2, r3
20000616:	230f      	movs	r3, #15
20000618:	18fb      	adds	r3, r7, r3
2000061a:	781b      	ldrb	r3, [r3, #0]
2000061c:	b25b      	sxtb	r3, r3
2000061e:	4313      	orrs	r3, r2
20000620:	b25a      	sxtb	r2, r3
20000622:	230f      	movs	r3, #15
20000624:	18fb      	adds	r3, r7, r3
20000626:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
20000628:	4a04      	ldr	r2, [pc, #16]	; (2000063c <graphic_ctrl_bit_set+0x58>)
2000062a:	230f      	movs	r3, #15
2000062c:	18fb      	adds	r3, r7, r3
2000062e:	781b      	ldrb	r3, [r3, #0]
20000630:	7513      	strb	r3, [r2, #20]
}
20000632:	46c0      	nop			; (mov r8, r8)
20000634:	46bd      	mov	sp, r7
20000636:	b004      	add	sp, #16
20000638:	bd80      	pop	{r7, pc}
2000063a:	46c0      	nop			; (mov r8, r8)
2000063c:	40021000 	andmi	r1, r2, r0

20000640 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
20000640:	b580      	push	{r7, lr}
20000642:	b084      	sub	sp, #16
20000644:	af00      	add	r7, sp, #0
20000646:	0002      	movs	r2, r0
20000648:	1dfb      	adds	r3, r7, #7
2000064a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
2000064c:	4a11      	ldr	r2, [pc, #68]	; (20000694 <graphic_ctrl_bit_clear+0x54>)
2000064e:	230f      	movs	r3, #15
20000650:	18fb      	adds	r3, r7, r3
20000652:	7d12      	ldrb	r2, [r2, #20]
20000654:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000656:	230f      	movs	r3, #15
20000658:	18fb      	adds	r3, r7, r3
2000065a:	220f      	movs	r2, #15
2000065c:	18ba      	adds	r2, r7, r2
2000065e:	7812      	ldrb	r2, [r2, #0]
20000660:	2104      	movs	r1, #4
20000662:	438a      	bics	r2, r1
20000664:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20000666:	1dfb      	adds	r3, r7, #7
20000668:	781b      	ldrb	r3, [r3, #0]
2000066a:	b25b      	sxtb	r3, r3
2000066c:	43db      	mvns	r3, r3
2000066e:	b25b      	sxtb	r3, r3
20000670:	220f      	movs	r2, #15
20000672:	18ba      	adds	r2, r7, r2
20000674:	7812      	ldrb	r2, [r2, #0]
20000676:	b252      	sxtb	r2, r2
20000678:	4013      	ands	r3, r2
2000067a:	b25a      	sxtb	r2, r3
2000067c:	230f      	movs	r3, #15
2000067e:	18fb      	adds	r3, r7, r3
20000680:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
20000682:	4a04      	ldr	r2, [pc, #16]	; (20000694 <graphic_ctrl_bit_clear+0x54>)
20000684:	230f      	movs	r3, #15
20000686:	18fb      	adds	r3, r7, r3
20000688:	781b      	ldrb	r3, [r3, #0]
2000068a:	7513      	strb	r3, [r2, #20]
}
2000068c:	46c0      	nop			; (mov r8, r8)
2000068e:	46bd      	mov	sp, r7
20000690:	b004      	add	sp, #16
20000692:	bd80      	pop	{r7, pc}
20000694:	40021000 	andmi	r1, r2, r0

20000698 <select_controller>:

void select_controller(uint8_t controller) {
20000698:	b580      	push	{r7, lr}
2000069a:	b082      	sub	sp, #8
2000069c:	af00      	add	r7, sp, #0
2000069e:	0002      	movs	r2, r0
200006a0:	1dfb      	adds	r3, r7, #7
200006a2:	701a      	strb	r2, [r3, #0]
	switch(controller){
200006a4:	1dfb      	adds	r3, r7, #7
200006a6:	781b      	ldrb	r3, [r3, #0]
200006a8:	2b08      	cmp	r3, #8
200006aa:	d00c      	beq.n	200006c6 <select_controller+0x2e>
200006ac:	dc02      	bgt.n	200006b4 <select_controller+0x1c>
200006ae:	2b00      	cmp	r3, #0
200006b0:	d005      	beq.n	200006be <select_controller+0x26>
			break;
		case B_CS1|B_CS2 :
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
200006b2:	e01a      	b.n	200006ea <select_controller+0x52>
	switch(controller){
200006b4:	2b10      	cmp	r3, #16
200006b6:	d00d      	beq.n	200006d4 <select_controller+0x3c>
200006b8:	2b18      	cmp	r3, #24
200006ba:	d012      	beq.n	200006e2 <select_controller+0x4a>
}
200006bc:	e015      	b.n	200006ea <select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
200006be:	2018      	movs	r0, #24
200006c0:	f7ff ffbe 	bl	20000640 <graphic_ctrl_bit_clear>
			break;
200006c4:	e011      	b.n	200006ea <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1);
200006c6:	2008      	movs	r0, #8
200006c8:	f7ff ff8c 	bl	200005e4 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
200006cc:	2010      	movs	r0, #16
200006ce:	f7ff ffb7 	bl	20000640 <graphic_ctrl_bit_clear>
			break;
200006d2:	e00a      	b.n	200006ea <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS2);
200006d4:	2010      	movs	r0, #16
200006d6:	f7ff ff85 	bl	200005e4 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS1);
200006da:	2008      	movs	r0, #8
200006dc:	f7ff ffb0 	bl	20000640 <graphic_ctrl_bit_clear>
			break;
200006e0:	e003      	b.n	200006ea <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
200006e2:	2018      	movs	r0, #24
200006e4:	f7ff ff7e 	bl	200005e4 <graphic_ctrl_bit_set>
			break;
200006e8:	46c0      	nop			; (mov r8, r8)
}
200006ea:	46c0      	nop			; (mov r8, r8)
200006ec:	46bd      	mov	sp, r7
200006ee:	b002      	add	sp, #8
200006f0:	bd80      	pop	{r7, pc}

200006f2 <graphic_initialize>:

void graphic_initialize(void) {
200006f2:	b580      	push	{r7, lr}
200006f4:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200006f6:	2040      	movs	r0, #64	; 0x40
200006f8:	f7ff ff74 	bl	200005e4 <graphic_ctrl_bit_set>
	delay_mikro(10);
200006fc:	200a      	movs	r0, #10
200006fe:	f000 fb32 	bl	20000d66 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000702:	2078      	movs	r0, #120	; 0x78
20000704:	f7ff ff9c 	bl	20000640 <graphic_ctrl_bit_clear>
	delay_mikro(30);
20000708:	201e      	movs	r0, #30
2000070a:	f000 fb2c 	bl	20000d66 <delay_mikro>
	graphic_ctrl_bit_set(B_RST);
2000070e:	2020      	movs	r0, #32
20000710:	f7ff ff68 	bl	200005e4 <graphic_ctrl_bit_set>
	delay_mikro(100);
20000714:	2064      	movs	r0, #100	; 0x64
20000716:	f000 fb26 	bl	20000d66 <delay_mikro>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
2000071a:	2118      	movs	r1, #24
2000071c:	203e      	movs	r0, #62	; 0x3e
2000071e:	f000 f8d3 	bl	200008c8 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000722:	2118      	movs	r1, #24
20000724:	203f      	movs	r0, #63	; 0x3f
20000726:	f000 f8cf 	bl	200008c8 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000072a:	2118      	movs	r1, #24
2000072c:	20c0      	movs	r0, #192	; 0xc0
2000072e:	f000 f8cb 	bl	200008c8 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000732:	2118      	movs	r1, #24
20000734:	2040      	movs	r0, #64	; 0x40
20000736:	f000 f8c7 	bl	200008c8 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
2000073a:	2118      	movs	r1, #24
2000073c:	20b8      	movs	r0, #184	; 0xb8
2000073e:	f000 f8c3 	bl	200008c8 <graphic_write_command>
	select_controller(0);
20000742:	2000      	movs	r0, #0
20000744:	f7ff ffa8 	bl	20000698 <select_controller>
}
20000748:	46c0      	nop			; (mov r8, r8)
2000074a:	46bd      	mov	sp, r7
2000074c:	bd80      	pop	{r7, pc}

2000074e <graphic_wait_ready>:

void graphic_wait_ready(void) {
2000074e:	b580      	push	{r7, lr}
20000750:	b082      	sub	sp, #8
20000752:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000754:	2040      	movs	r0, #64	; 0x40
20000756:	f7ff ff73 	bl	20000640 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
2000075a:	4b14      	ldr	r3, [pc, #80]	; (200007ac <graphic_wait_ready+0x5e>)
2000075c:	4a14      	ldr	r2, [pc, #80]	; (200007b0 <graphic_wait_ready+0x62>)
2000075e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000760:	2001      	movs	r0, #1
20000762:	f7ff ff6d 	bl	20000640 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000766:	2002      	movs	r0, #2
20000768:	f7ff ff3c 	bl	200005e4 <graphic_ctrl_bit_set>
	delay_500ns();
2000076c:	f000 faf2 	bl	20000d54 <delay_500ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
20000770:	2040      	movs	r0, #64	; 0x40
20000772:	f7ff ff37 	bl	200005e4 <graphic_ctrl_bit_set>
		delay_500ns();
20000776:	f000 faed 	bl	20000d54 <delay_500ns>
		c = GPIO_E->idrHigh & LCD_BUSY;
2000077a:	4b0c      	ldr	r3, [pc, #48]	; (200007ac <graphic_wait_ready+0x5e>)
2000077c:	7c5b      	ldrb	r3, [r3, #17]
2000077e:	b2da      	uxtb	r2, r3
20000780:	1dfb      	adds	r3, r7, #7
20000782:	217f      	movs	r1, #127	; 0x7f
20000784:	438a      	bics	r2, r1
20000786:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000788:	2040      	movs	r0, #64	; 0x40
2000078a:	f7ff ff59 	bl	20000640 <graphic_ctrl_bit_clear>
		delay_500ns();
2000078e:	f000 fae1 	bl	20000d54 <delay_500ns>
		if( c == 0 ) break;
20000792:	1dfb      	adds	r3, r7, #7
20000794:	781b      	ldrb	r3, [r3, #0]
20000796:	2b00      	cmp	r3, #0
20000798:	d000      	beq.n	2000079c <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000079a:	e7e9      	b.n	20000770 <graphic_wait_ready+0x22>
		if( c == 0 ) break;
2000079c:	46c0      	nop			; (mov r8, r8)
	}
	GPIO_E->moder = 0x55555555; // 15-0 outputs
2000079e:	4b03      	ldr	r3, [pc, #12]	; (200007ac <graphic_wait_ready+0x5e>)
200007a0:	4a04      	ldr	r2, [pc, #16]	; (200007b4 <graphic_wait_ready+0x66>)
200007a2:	601a      	str	r2, [r3, #0]
}
200007a4:	46c0      	nop			; (mov r8, r8)
200007a6:	46bd      	mov	sp, r7
200007a8:	b002      	add	sp, #8
200007aa:	bd80      	pop	{r7, pc}
200007ac:	40021000 	andmi	r1, r2, r0
200007b0:	00005555 	andeq	r5, r0, r5, asr r5
200007b4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200007b8 <graphic_read>:

uint8_t graphic_read(uint8_t controller) {
200007b8:	b580      	push	{r7, lr}
200007ba:	b084      	sub	sp, #16
200007bc:	af00      	add	r7, sp, #0
200007be:	0002      	movs	r2, r0
200007c0:	1dfb      	adds	r3, r7, #7
200007c2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200007c4:	2040      	movs	r0, #64	; 0x40
200007c6:	f7ff ff3b 	bl	20000640 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555;
200007ca:	4b1c      	ldr	r3, [pc, #112]	; (2000083c <graphic_read+0x84>)
200007cc:	4a1c      	ldr	r2, [pc, #112]	; (20000840 <graphic_read+0x88>)
200007ce:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200007d0:	2002      	movs	r0, #2
200007d2:	f7ff ff07 	bl	200005e4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RS);
200007d6:	2001      	movs	r0, #1
200007d8:	f7ff ff04 	bl	200005e4 <graphic_ctrl_bit_set>
	select_controller(controller);
200007dc:	1dfb      	adds	r3, r7, #7
200007de:	781b      	ldrb	r3, [r3, #0]
200007e0:	0018      	movs	r0, r3
200007e2:	f7ff ff59 	bl	20000698 <select_controller>
	delay_500ns();
200007e6:	f000 fab5 	bl	20000d54 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200007ea:	2040      	movs	r0, #64	; 0x40
200007ec:	f7ff fefa 	bl	200005e4 <graphic_ctrl_bit_set>
	delay_500ns();
200007f0:	f000 fab0 	bl	20000d54 <delay_500ns>
	uint8_t rv = GPIO_E->idrHigh;
200007f4:	4a11      	ldr	r2, [pc, #68]	; (2000083c <graphic_read+0x84>)
200007f6:	230f      	movs	r3, #15
200007f8:	18fb      	adds	r3, r7, r3
200007fa:	7c52      	ldrb	r2, [r2, #17]
200007fc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200007fe:	2040      	movs	r0, #64	; 0x40
20000800:	f7ff ff1e 	bl	20000640 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x55555555;
20000804:	4b0d      	ldr	r3, [pc, #52]	; (2000083c <graphic_read+0x84>)
20000806:	4a0f      	ldr	r2, [pc, #60]	; (20000844 <graphic_read+0x8c>)
20000808:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1) {
2000080a:	1dfb      	adds	r3, r7, #7
2000080c:	781b      	ldrb	r3, [r3, #0]
2000080e:	2b08      	cmp	r3, #8
20000810:	d104      	bne.n	2000081c <graphic_read+0x64>
		select_controller(B_CS1);
20000812:	2008      	movs	r0, #8
20000814:	f7ff ff40 	bl	20000698 <select_controller>
		graphic_wait_ready();
20000818:	f7ff ff99 	bl	2000074e <graphic_wait_ready>
	}
	if(controller == B_CS2){
2000081c:	1dfb      	adds	r3, r7, #7
2000081e:	781b      	ldrb	r3, [r3, #0]
20000820:	2b10      	cmp	r3, #16
20000822:	d104      	bne.n	2000082e <graphic_read+0x76>
		select_controller(B_CS2);
20000824:	2010      	movs	r0, #16
20000826:	f7ff ff37 	bl	20000698 <select_controller>
		graphic_wait_ready();
2000082a:	f7ff ff90 	bl	2000074e <graphic_wait_ready>
	}
	// graphic_read = RV (what???)
	return rv;
2000082e:	230f      	movs	r3, #15
20000830:	18fb      	adds	r3, r7, r3
20000832:	781b      	ldrb	r3, [r3, #0]
}
20000834:	0018      	movs	r0, r3
20000836:	46bd      	mov	sp, r7
20000838:	b004      	add	sp, #16
2000083a:	bd80      	pop	{r7, pc}
2000083c:	40021000 	andmi	r1, r2, r0
20000840:	00005555 	andeq	r5, r0, r5, asr r5
20000844:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000848 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20000848:	b580      	push	{r7, lr}
2000084a:	b082      	sub	sp, #8
2000084c:	af00      	add	r7, sp, #0
2000084e:	0002      	movs	r2, r0
20000850:	1dfb      	adds	r3, r7, #7
20000852:	701a      	strb	r2, [r3, #0]
20000854:	1dbb      	adds	r3, r7, #6
20000856:	1c0a      	adds	r2, r1, #0
20000858:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrHigh = value;
2000085a:	4a1a      	ldr	r2, [pc, #104]	; (200008c4 <graphic_write+0x7c>)
2000085c:	1dfb      	adds	r3, r7, #7
2000085e:	781b      	ldrb	r3, [r3, #0]
20000860:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
20000862:	1dbb      	adds	r3, r7, #6
20000864:	781b      	ldrb	r3, [r3, #0]
20000866:	0018      	movs	r0, r3
20000868:	f7ff ff16 	bl	20000698 <select_controller>
	delay_500ns();
2000086c:	f000 fa72 	bl	20000d54 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000870:	2040      	movs	r0, #64	; 0x40
20000872:	f7ff feb7 	bl	200005e4 <graphic_ctrl_bit_set>
	delay_500ns();
20000876:	f000 fa6d 	bl	20000d54 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000087a:	2040      	movs	r0, #64	; 0x40
2000087c:	f7ff fee0 	bl	20000640 <graphic_ctrl_bit_clear>
	if(controller & B_CS1) {
20000880:	1dbb      	adds	r3, r7, #6
20000882:	781b      	ldrb	r3, [r3, #0]
20000884:	2208      	movs	r2, #8
20000886:	4013      	ands	r3, r2
20000888:	d004      	beq.n	20000894 <graphic_write+0x4c>
		select_controller(B_CS1);
2000088a:	2008      	movs	r0, #8
2000088c:	f7ff ff04 	bl	20000698 <select_controller>
		graphic_wait_ready();
20000890:	f7ff ff5d 	bl	2000074e <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20000894:	1dbb      	adds	r3, r7, #6
20000896:	781b      	ldrb	r3, [r3, #0]
20000898:	2210      	movs	r2, #16
2000089a:	4013      	ands	r3, r2
2000089c:	d004      	beq.n	200008a8 <graphic_write+0x60>
		select_controller(B_CS2);
2000089e:	2010      	movs	r0, #16
200008a0:	f7ff fefa 	bl	20000698 <select_controller>
		graphic_wait_ready();
200008a4:	f7ff ff53 	bl	2000074e <graphic_wait_ready>
	}
	GPIO_E->odrHigh = 0;
200008a8:	4b06      	ldr	r3, [pc, #24]	; (200008c4 <graphic_write+0x7c>)
200008aa:	2200      	movs	r2, #0
200008ac:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
200008ae:	2040      	movs	r0, #64	; 0x40
200008b0:	f7ff fe98 	bl	200005e4 <graphic_ctrl_bit_set>
	select_controller(0);
200008b4:	2000      	movs	r0, #0
200008b6:	f7ff feef 	bl	20000698 <select_controller>
}
200008ba:	46c0      	nop			; (mov r8, r8)
200008bc:	46bd      	mov	sp, r7
200008be:	b002      	add	sp, #8
200008c0:	bd80      	pop	{r7, pc}
200008c2:	46c0      	nop			; (mov r8, r8)
200008c4:	40021000 	andmi	r1, r2, r0

200008c8 <graphic_write_command>:

void graphic_write_command(uint8_t commandToWrite, uint8_t controller) {
200008c8:	b580      	push	{r7, lr}
200008ca:	b082      	sub	sp, #8
200008cc:	af00      	add	r7, sp, #0
200008ce:	0002      	movs	r2, r0
200008d0:	1dfb      	adds	r3, r7, #7
200008d2:	701a      	strb	r2, [r3, #0]
200008d4:	1dbb      	adds	r3, r7, #6
200008d6:	1c0a      	adds	r2, r1, #0
200008d8:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200008da:	2040      	movs	r0, #64	; 0x40
200008dc:	f7ff feb0 	bl	20000640 <graphic_ctrl_bit_clear>
	select_controller(controller);
200008e0:	1dbb      	adds	r3, r7, #6
200008e2:	781b      	ldrb	r3, [r3, #0]
200008e4:	0018      	movs	r0, r3
200008e6:	f7ff fed7 	bl	20000698 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200008ea:	2003      	movs	r0, #3
200008ec:	f7ff fea8 	bl	20000640 <graphic_ctrl_bit_clear>
	graphic_write(commandToWrite, controller);
200008f0:	1dbb      	adds	r3, r7, #6
200008f2:	781a      	ldrb	r2, [r3, #0]
200008f4:	1dfb      	adds	r3, r7, #7
200008f6:	781b      	ldrb	r3, [r3, #0]
200008f8:	0011      	movs	r1, r2
200008fa:	0018      	movs	r0, r3
200008fc:	f7ff ffa4 	bl	20000848 <graphic_write>
}
20000900:	46c0      	nop			; (mov r8, r8)
20000902:	46bd      	mov	sp, r7
20000904:	b002      	add	sp, #8
20000906:	bd80      	pop	{r7, pc}

20000908 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller) {
20000908:	b580      	push	{r7, lr}
2000090a:	b082      	sub	sp, #8
2000090c:	af00      	add	r7, sp, #0
2000090e:	0002      	movs	r2, r0
20000910:	1dfb      	adds	r3, r7, #7
20000912:	701a      	strb	r2, [r3, #0]
20000914:	1dbb      	adds	r3, r7, #6
20000916:	1c0a      	adds	r2, r1, #0
20000918:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000091a:	2040      	movs	r0, #64	; 0x40
2000091c:	f7ff fe90 	bl	20000640 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000920:	1dbb      	adds	r3, r7, #6
20000922:	781b      	ldrb	r3, [r3, #0]
20000924:	0018      	movs	r0, r3
20000926:	f7ff feb7 	bl	20000698 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000092a:	2001      	movs	r0, #1
2000092c:	f7ff fe5a 	bl	200005e4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000930:	2002      	movs	r0, #2
20000932:	f7ff fe85 	bl	20000640 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000936:	1dbb      	adds	r3, r7, #6
20000938:	781a      	ldrb	r2, [r3, #0]
2000093a:	1dfb      	adds	r3, r7, #7
2000093c:	781b      	ldrb	r3, [r3, #0]
2000093e:	0011      	movs	r1, r2
20000940:	0018      	movs	r0, r3
20000942:	f7ff ff81 	bl	20000848 <graphic_write>
}
20000946:	46c0      	nop			; (mov r8, r8)
20000948:	46bd      	mov	sp, r7
2000094a:	b002      	add	sp, #8
2000094c:	bd80      	pop	{r7, pc}

2000094e <graphic_read_data>:

uint8_t graphic_read_data(unsigned char controller) {
2000094e:	b580      	push	{r7, lr}
20000950:	b082      	sub	sp, #8
20000952:	af00      	add	r7, sp, #0
20000954:	0002      	movs	r2, r0
20000956:	1dfb      	adds	r3, r7, #7
20000958:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
2000095a:	1dfb      	adds	r3, r7, #7
2000095c:	781b      	ldrb	r3, [r3, #0]
2000095e:	0018      	movs	r0, r3
20000960:	f7ff ff2a 	bl	200007b8 <graphic_read>
	return graphic_read(controller);
20000964:	1dfb      	adds	r3, r7, #7
20000966:	781b      	ldrb	r3, [r3, #0]
20000968:	0018      	movs	r0, r3
2000096a:	f7ff ff25 	bl	200007b8 <graphic_read>
2000096e:	0003      	movs	r3, r0
}
20000970:	0018      	movs	r0, r3
20000972:	46bd      	mov	sp, r7
20000974:	b002      	add	sp, #8
20000976:	bd80      	pop	{r7, pc}

20000978 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20000978:	b580      	push	{r7, lr}
2000097a:	b082      	sub	sp, #8
2000097c:	af00      	add	r7, sp, #0
	uint8_t page, add;
	for(page = 0; page < 8; page++){
2000097e:	1dfb      	adds	r3, r7, #7
20000980:	2200      	movs	r2, #0
20000982:	701a      	strb	r2, [r3, #0]
20000984:	e023      	b.n	200009ce <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE	| page, B_CS1|B_CS2);
20000986:	1dfb      	adds	r3, r7, #7
20000988:	781b      	ldrb	r3, [r3, #0]
2000098a:	2248      	movs	r2, #72	; 0x48
2000098c:	4252      	negs	r2, r2
2000098e:	4313      	orrs	r3, r2
20000990:	b2db      	uxtb	r3, r3
20000992:	2118      	movs	r1, #24
20000994:	0018      	movs	r0, r3
20000996:	f7ff ff97 	bl	200008c8 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD	| 0, 	B_CS1|B_CS2);
2000099a:	2118      	movs	r1, #24
2000099c:	2040      	movs	r0, #64	; 0x40
2000099e:	f7ff ff93 	bl	200008c8 <graphic_write_command>
		for(add = 0; add < 64; add++){
200009a2:	1dbb      	adds	r3, r7, #6
200009a4:	2200      	movs	r2, #0
200009a6:	701a      	strb	r2, [r3, #0]
200009a8:	e008      	b.n	200009bc <graphic_clear_screen+0x44>
			graphic_write_data(0,B_CS1|B_CS2);
200009aa:	2118      	movs	r1, #24
200009ac:	2000      	movs	r0, #0
200009ae:	f7ff ffab 	bl	20000908 <graphic_write_data>
		for(add = 0; add < 64; add++){
200009b2:	1dbb      	adds	r3, r7, #6
200009b4:	781a      	ldrb	r2, [r3, #0]
200009b6:	1dbb      	adds	r3, r7, #6
200009b8:	3201      	adds	r2, #1
200009ba:	701a      	strb	r2, [r3, #0]
200009bc:	1dbb      	adds	r3, r7, #6
200009be:	781b      	ldrb	r3, [r3, #0]
200009c0:	2b3f      	cmp	r3, #63	; 0x3f
200009c2:	d9f2      	bls.n	200009aa <graphic_clear_screen+0x32>
	for(page = 0; page < 8; page++){
200009c4:	1dfb      	adds	r3, r7, #7
200009c6:	781a      	ldrb	r2, [r3, #0]
200009c8:	1dfb      	adds	r3, r7, #7
200009ca:	3201      	adds	r2, #1
200009cc:	701a      	strb	r2, [r3, #0]
200009ce:	1dfb      	adds	r3, r7, #7
200009d0:	781b      	ldrb	r3, [r3, #0]
200009d2:	2b07      	cmp	r3, #7
200009d4:	d9d7      	bls.n	20000986 <graphic_clear_screen+0xe>
		}
	}
}
200009d6:	46c0      	nop			; (mov r8, r8)
200009d8:	46bd      	mov	sp, r7
200009da:	b002      	add	sp, #8
200009dc:	bd80      	pop	{r7, pc}

200009de <setup_for_graphic_display>:

void setup_for_graphic_display(void){
200009de:	b580      	push	{r7, lr}
200009e0:	af00      	add	r7, sp, #0
	GPIO_E->moder = 0x55555555;
200009e2:	4b04      	ldr	r3, [pc, #16]	; (200009f4 <setup_for_graphic_display+0x16>)
200009e4:	4a04      	ldr	r2, [pc, #16]	; (200009f8 <setup_for_graphic_display+0x1a>)
200009e6:	601a      	str	r2, [r3, #0]
	GPIO_E->ospeedr = 0x55555555;
200009e8:	4b02      	ldr	r3, [pc, #8]	; (200009f4 <setup_for_graphic_display+0x16>)
200009ea:	4a03      	ldr	r2, [pc, #12]	; (200009f8 <setup_for_graphic_display+0x1a>)
200009ec:	609a      	str	r2, [r3, #8]
}
200009ee:	46c0      	nop			; (mov r8, r8)
200009f0:	46bd      	mov	sp, r7
200009f2:	bd80      	pop	{r7, pc}
200009f4:	40021000 	andmi	r1, r2, r0
200009f8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200009fc <pixel>:

void pixel(unsigned char x, unsigned char y, unsigned char set) {
200009fc:	b590      	push	{r4, r7, lr}
200009fe:	b085      	sub	sp, #20
20000a00:	af00      	add	r7, sp, #0
20000a02:	0004      	movs	r4, r0
20000a04:	0008      	movs	r0, r1
20000a06:	0011      	movs	r1, r2
20000a08:	1dfb      	adds	r3, r7, #7
20000a0a:	1c22      	adds	r2, r4, #0
20000a0c:	701a      	strb	r2, [r3, #0]
20000a0e:	1dbb      	adds	r3, r7, #6
20000a10:	1c02      	adds	r2, r0, #0
20000a12:	701a      	strb	r2, [r3, #0]
20000a14:	1d7b      	adds	r3, r7, #5
20000a16:	1c0a      	adds	r2, r1, #0
20000a18:	701a      	strb	r2, [r3, #0]
	// Kontrollera att x och y är i tillåtna intervall. 
	if(x > 128 || x < 1 || y > 64 || y < 1) return;
20000a1a:	1dfb      	adds	r3, r7, #7
20000a1c:	781b      	ldrb	r3, [r3, #0]
20000a1e:	2b80      	cmp	r3, #128	; 0x80
20000a20:	d900      	bls.n	20000a24 <pixel+0x28>
20000a22:	e0aa      	b.n	20000b7a <pixel+0x17e>
20000a24:	1dfb      	adds	r3, r7, #7
20000a26:	781b      	ldrb	r3, [r3, #0]
20000a28:	2b00      	cmp	r3, #0
20000a2a:	d100      	bne.n	20000a2e <pixel+0x32>
20000a2c:	e0a5      	b.n	20000b7a <pixel+0x17e>
20000a2e:	1dbb      	adds	r3, r7, #6
20000a30:	781b      	ldrb	r3, [r3, #0]
20000a32:	2b40      	cmp	r3, #64	; 0x40
20000a34:	d900      	bls.n	20000a38 <pixel+0x3c>
20000a36:	e0a0      	b.n	20000b7a <pixel+0x17e>
20000a38:	1dbb      	adds	r3, r7, #6
20000a3a:	781b      	ldrb	r3, [r3, #0]
20000a3c:	2b00      	cmp	r3, #0
20000a3e:	d100      	bne.n	20000a42 <pixel+0x46>
20000a40:	e09b      	b.n	20000b7a <pixel+0x17e>
	if(set != 0 && set != 1) return;
20000a42:	1d7b      	adds	r3, r7, #5
20000a44:	781b      	ldrb	r3, [r3, #0]
20000a46:	2b00      	cmp	r3, #0
20000a48:	d004      	beq.n	20000a54 <pixel+0x58>
20000a4a:	1d7b      	adds	r3, r7, #5
20000a4c:	781b      	ldrb	r3, [r3, #0]
20000a4e:	2b01      	cmp	r3, #1
20000a50:	d000      	beq.n	20000a54 <pixel+0x58>
20000a52:	e094      	b.n	20000b7e <pixel+0x182>
	
	uint8_t index = (y - 1) / 8;
20000a54:	1dbb      	adds	r3, r7, #6
20000a56:	781b      	ldrb	r3, [r3, #0]
20000a58:	3b01      	subs	r3, #1
20000a5a:	2b00      	cmp	r3, #0
20000a5c:	da00      	bge.n	20000a60 <pixel+0x64>
20000a5e:	3307      	adds	r3, #7
20000a60:	10db      	asrs	r3, r3, #3
20000a62:	001a      	movs	r2, r3
20000a64:	230d      	movs	r3, #13
20000a66:	18fb      	adds	r3, r7, r3
20000a68:	701a      	strb	r2, [r3, #0]
	uint8_t mask;
	mask = 1 << ( (y - 1) % 8);
20000a6a:	1dbb      	adds	r3, r7, #6
20000a6c:	781b      	ldrb	r3, [r3, #0]
20000a6e:	3b01      	subs	r3, #1
20000a70:	4a45      	ldr	r2, [pc, #276]	; (20000b88 <pixel+0x18c>)
20000a72:	4013      	ands	r3, r2
20000a74:	d504      	bpl.n	20000a80 <pixel+0x84>
20000a76:	3b01      	subs	r3, #1
20000a78:	2208      	movs	r2, #8
20000a7a:	4252      	negs	r2, r2
20000a7c:	4313      	orrs	r3, r2
20000a7e:	3301      	adds	r3, #1
20000a80:	001a      	movs	r2, r3
20000a82:	2301      	movs	r3, #1
20000a84:	4093      	lsls	r3, r2
20000a86:	001a      	movs	r2, r3
20000a88:	230f      	movs	r3, #15
20000a8a:	18fb      	adds	r3, r7, r3
20000a8c:	701a      	strb	r2, [r3, #0]
	if(set == 0){
20000a8e:	1d7b      	adds	r3, r7, #5
20000a90:	781b      	ldrb	r3, [r3, #0]
20000a92:	2b00      	cmp	r3, #0
20000a94:	d106      	bne.n	20000aa4 <pixel+0xa8>
		mask = ~mask; // biten ska nollställas
20000a96:	230f      	movs	r3, #15
20000a98:	18fb      	adds	r3, r7, r3
20000a9a:	220f      	movs	r2, #15
20000a9c:	18ba      	adds	r2, r7, r2
20000a9e:	7812      	ldrb	r2, [r2, #0]
20000aa0:	43d2      	mvns	r2, r2
20000aa2:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t controller;
	
	// Bestäm fysiska koordinater och välj styrkrets
	if(x > 64){
20000aa4:	1dfb      	adds	r3, r7, #7
20000aa6:	781b      	ldrb	r3, [r3, #0]
20000aa8:	2b40      	cmp	r3, #64	; 0x40
20000aaa:	d909      	bls.n	20000ac0 <pixel+0xc4>
		controller = B_CS2;
20000aac:	230e      	movs	r3, #14
20000aae:	18fb      	adds	r3, r7, r3
20000ab0:	2210      	movs	r2, #16
20000ab2:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000ab4:	1dfb      	adds	r3, r7, #7
20000ab6:	1dfa      	adds	r2, r7, #7
20000ab8:	7812      	ldrb	r2, [r2, #0]
20000aba:	3a41      	subs	r2, #65	; 0x41
20000abc:	701a      	strb	r2, [r3, #0]
20000abe:	e008      	b.n	20000ad2 <pixel+0xd6>
	}else{
		controller = B_CS1;
20000ac0:	230e      	movs	r3, #14
20000ac2:	18fb      	adds	r3, r7, r3
20000ac4:	2208      	movs	r2, #8
20000ac6:	701a      	strb	r2, [r3, #0]
		x = x - 1;
20000ac8:	1dfb      	adds	r3, r7, #7
20000aca:	1dfa      	adds	r2, r7, #7
20000acc:	7812      	ldrb	r2, [r2, #0]
20000ace:	3a01      	subs	r2, #1
20000ad0:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x, controller);
20000ad2:	1dfb      	adds	r3, r7, #7
20000ad4:	781b      	ldrb	r3, [r3, #0]
20000ad6:	2240      	movs	r2, #64	; 0x40
20000ad8:	4313      	orrs	r3, r2
20000ada:	b2da      	uxtb	r2, r3
20000adc:	230e      	movs	r3, #14
20000ade:	18fb      	adds	r3, r7, r3
20000ae0:	781b      	ldrb	r3, [r3, #0]
20000ae2:	0019      	movs	r1, r3
20000ae4:	0010      	movs	r0, r2
20000ae6:	f7ff feef 	bl	200008c8 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000aea:	230d      	movs	r3, #13
20000aec:	18fb      	adds	r3, r7, r3
20000aee:	781b      	ldrb	r3, [r3, #0]
20000af0:	2248      	movs	r2, #72	; 0x48
20000af2:	4252      	negs	r2, r2
20000af4:	4313      	orrs	r3, r2
20000af6:	b2da      	uxtb	r2, r3
20000af8:	230e      	movs	r3, #14
20000afa:	18fb      	adds	r3, r7, r3
20000afc:	781b      	ldrb	r3, [r3, #0]
20000afe:	0019      	movs	r1, r3
20000b00:	0010      	movs	r0, r2
20000b02:	f7ff fee1 	bl	200008c8 <graphic_write_command>
	uint8_t temp = graphic_read_data(controller);
20000b06:	230c      	movs	r3, #12
20000b08:	18fc      	adds	r4, r7, r3
20000b0a:	230e      	movs	r3, #14
20000b0c:	18fb      	adds	r3, r7, r3
20000b0e:	781b      	ldrb	r3, [r3, #0]
20000b10:	0018      	movs	r0, r3
20000b12:	f7ff ff1c 	bl	2000094e <graphic_read_data>
20000b16:	0003      	movs	r3, r0
20000b18:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000b1a:	1dfb      	adds	r3, r7, #7
20000b1c:	781b      	ldrb	r3, [r3, #0]
20000b1e:	2240      	movs	r2, #64	; 0x40
20000b20:	4313      	orrs	r3, r2
20000b22:	b2da      	uxtb	r2, r3
20000b24:	230e      	movs	r3, #14
20000b26:	18fb      	adds	r3, r7, r3
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	0019      	movs	r1, r3
20000b2c:	0010      	movs	r0, r2
20000b2e:	f7ff fecb 	bl	200008c8 <graphic_write_command>
	
	if(set == 1){
20000b32:	1d7b      	adds	r3, r7, #5
20000b34:	781b      	ldrb	r3, [r3, #0]
20000b36:	2b01      	cmp	r3, #1
20000b38:	d10a      	bne.n	20000b50 <pixel+0x154>
		mask = mask | temp;
20000b3a:	230f      	movs	r3, #15
20000b3c:	18fb      	adds	r3, r7, r3
20000b3e:	220f      	movs	r2, #15
20000b40:	18b9      	adds	r1, r7, r2
20000b42:	220c      	movs	r2, #12
20000b44:	18ba      	adds	r2, r7, r2
20000b46:	7809      	ldrb	r1, [r1, #0]
20000b48:	7812      	ldrb	r2, [r2, #0]
20000b4a:	430a      	orrs	r2, r1
20000b4c:	701a      	strb	r2, [r3, #0]
20000b4e:	e009      	b.n	20000b64 <pixel+0x168>
	}else{
		mask = mask & temp;
20000b50:	230f      	movs	r3, #15
20000b52:	18fb      	adds	r3, r7, r3
20000b54:	220f      	movs	r2, #15
20000b56:	18ba      	adds	r2, r7, r2
20000b58:	210c      	movs	r1, #12
20000b5a:	1879      	adds	r1, r7, r1
20000b5c:	7812      	ldrb	r2, [r2, #0]
20000b5e:	7809      	ldrb	r1, [r1, #0]
20000b60:	400a      	ands	r2, r1
20000b62:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);	
20000b64:	230e      	movs	r3, #14
20000b66:	18fb      	adds	r3, r7, r3
20000b68:	781a      	ldrb	r2, [r3, #0]
20000b6a:	230f      	movs	r3, #15
20000b6c:	18fb      	adds	r3, r7, r3
20000b6e:	781b      	ldrb	r3, [r3, #0]
20000b70:	0011      	movs	r1, r2
20000b72:	0018      	movs	r0, r3
20000b74:	f7ff fec8 	bl	20000908 <graphic_write_data>
20000b78:	e002      	b.n	20000b80 <pixel+0x184>
	if(x > 128 || x < 1 || y > 64 || y < 1) return;
20000b7a:	46c0      	nop			; (mov r8, r8)
20000b7c:	e000      	b.n	20000b80 <pixel+0x184>
	if(set != 0 && set != 1) return;
20000b7e:	46c0      	nop			; (mov r8, r8)
20000b80:	46bd      	mov	sp, r7
20000b82:	b005      	add	sp, #20
20000b84:	bd90      	pop	{r4, r7, pc}
20000b86:	46c0      	nop			; (mov r8, r8)
20000b88:	80000007 	andhi	r0, r0, r7

20000b8c <set_object_speed>:
#include "geometry.h"

void set_object_speed(POBJECT o, int speedx, int speedy) {
20000b8c:	b580      	push	{r7, lr}
20000b8e:	b084      	sub	sp, #16
20000b90:	af00      	add	r7, sp, #0
20000b92:	60f8      	str	r0, [r7, #12]
20000b94:	60b9      	str	r1, [r7, #8]
20000b96:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000b98:	68fb      	ldr	r3, [r7, #12]
20000b9a:	68ba      	ldr	r2, [r7, #8]
20000b9c:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000b9e:	68fb      	ldr	r3, [r7, #12]
20000ba0:	687a      	ldr	r2, [r7, #4]
20000ba2:	609a      	str	r2, [r3, #8]
}
20000ba4:	46c0      	nop			; (mov r8, r8)
20000ba6:	46bd      	mov	sp, r7
20000ba8:	b004      	add	sp, #16
20000baa:	bd80      	pop	{r7, pc}

20000bac <draw_object>:

void draw_object(POBJECT o) {
20000bac:	b580      	push	{r7, lr}
20000bae:	b084      	sub	sp, #16
20000bb0:	af00      	add	r7, sp, #0
20000bb2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numpoints; i++) {
20000bb4:	2300      	movs	r3, #0
20000bb6:	60fb      	str	r3, [r7, #12]
20000bb8:	e01c      	b.n	20000bf4 <draw_object+0x48>
		pixel(
			o->posx + o->geo->px[i].x,
20000bba:	687b      	ldr	r3, [r7, #4]
20000bbc:	68da      	ldr	r2, [r3, #12]
20000bbe:	687b      	ldr	r3, [r7, #4]
20000bc0:	6819      	ldr	r1, [r3, #0]
20000bc2:	68fb      	ldr	r3, [r7, #12]
20000bc4:	3304      	adds	r3, #4
20000bc6:	005b      	lsls	r3, r3, #1
20000bc8:	18cb      	adds	r3, r1, r3
20000bca:	3304      	adds	r3, #4
20000bcc:	781b      	ldrb	r3, [r3, #0]
		pixel(
20000bce:	18d0      	adds	r0, r2, r3
			o->posy + o->geo->px[i].y,
20000bd0:	687b      	ldr	r3, [r7, #4]
20000bd2:	691a      	ldr	r2, [r3, #16]
20000bd4:	687b      	ldr	r3, [r7, #4]
20000bd6:	6819      	ldr	r1, [r3, #0]
20000bd8:	68fb      	ldr	r3, [r7, #12]
20000bda:	3304      	adds	r3, #4
20000bdc:	005b      	lsls	r3, r3, #1
20000bde:	18cb      	adds	r3, r1, r3
20000be0:	3305      	adds	r3, #5
20000be2:	781b      	ldrb	r3, [r3, #0]
		pixel(
20000be4:	18d3      	adds	r3, r2, r3
20000be6:	2201      	movs	r2, #1
20000be8:	0019      	movs	r1, r3
20000bea:	f7ff ff07 	bl	200009fc <pixel>
	for(int i = 0; i < o->geo->numpoints; i++) {
20000bee:	68fb      	ldr	r3, [r7, #12]
20000bf0:	3301      	adds	r3, #1
20000bf2:	60fb      	str	r3, [r7, #12]
20000bf4:	687b      	ldr	r3, [r7, #4]
20000bf6:	681b      	ldr	r3, [r3, #0]
20000bf8:	681a      	ldr	r2, [r3, #0]
20000bfa:	68fb      	ldr	r3, [r7, #12]
20000bfc:	429a      	cmp	r2, r3
20000bfe:	dcdc      	bgt.n	20000bba <draw_object+0xe>
			1
		);
	}
}
20000c00:	46c0      	nop			; (mov r8, r8)
20000c02:	46bd      	mov	sp, r7
20000c04:	b004      	add	sp, #16
20000c06:	bd80      	pop	{r7, pc}

20000c08 <clear_object>:

void clear_object(POBJECT o) {
20000c08:	b580      	push	{r7, lr}
20000c0a:	b084      	sub	sp, #16
20000c0c:	af00      	add	r7, sp, #0
20000c0e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numpoints; i++) {
20000c10:	2300      	movs	r3, #0
20000c12:	60fb      	str	r3, [r7, #12]
20000c14:	e01c      	b.n	20000c50 <clear_object+0x48>
		pixel(
			o->posx + o->geo->px[i].x,
20000c16:	687b      	ldr	r3, [r7, #4]
20000c18:	68da      	ldr	r2, [r3, #12]
20000c1a:	687b      	ldr	r3, [r7, #4]
20000c1c:	6819      	ldr	r1, [r3, #0]
20000c1e:	68fb      	ldr	r3, [r7, #12]
20000c20:	3304      	adds	r3, #4
20000c22:	005b      	lsls	r3, r3, #1
20000c24:	18cb      	adds	r3, r1, r3
20000c26:	3304      	adds	r3, #4
20000c28:	781b      	ldrb	r3, [r3, #0]
		pixel(
20000c2a:	18d0      	adds	r0, r2, r3
			o->posy + o->geo->px[i].y,
20000c2c:	687b      	ldr	r3, [r7, #4]
20000c2e:	691a      	ldr	r2, [r3, #16]
20000c30:	687b      	ldr	r3, [r7, #4]
20000c32:	6819      	ldr	r1, [r3, #0]
20000c34:	68fb      	ldr	r3, [r7, #12]
20000c36:	3304      	adds	r3, #4
20000c38:	005b      	lsls	r3, r3, #1
20000c3a:	18cb      	adds	r3, r1, r3
20000c3c:	3305      	adds	r3, #5
20000c3e:	781b      	ldrb	r3, [r3, #0]
		pixel(
20000c40:	18d3      	adds	r3, r2, r3
20000c42:	2200      	movs	r2, #0
20000c44:	0019      	movs	r1, r3
20000c46:	f7ff fed9 	bl	200009fc <pixel>
	for(int i = 0; i < o->geo->numpoints; i++) {
20000c4a:	68fb      	ldr	r3, [r7, #12]
20000c4c:	3301      	adds	r3, #1
20000c4e:	60fb      	str	r3, [r7, #12]
20000c50:	687b      	ldr	r3, [r7, #4]
20000c52:	681b      	ldr	r3, [r3, #0]
20000c54:	681a      	ldr	r2, [r3, #0]
20000c56:	68fb      	ldr	r3, [r7, #12]
20000c58:	429a      	cmp	r2, r3
20000c5a:	dcdc      	bgt.n	20000c16 <clear_object+0xe>
			0
		);
	}
}
20000c5c:	46c0      	nop			; (mov r8, r8)
20000c5e:	46bd      	mov	sp, r7
20000c60:	b004      	add	sp, #16
20000c62:	bd80      	pop	{r7, pc}

20000c64 <move_object>:

void move_object(POBJECT o) {
20000c64:	b580      	push	{r7, lr}
20000c66:	b084      	sub	sp, #16
20000c68:	af00      	add	r7, sp, #0
20000c6a:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000c6c:	687b      	ldr	r3, [r7, #4]
20000c6e:	0018      	movs	r0, r3
20000c70:	f7ff ffca 	bl	20000c08 <clear_object>
	unsigned char newx, newy;
	newx = o->posx + o->dirx;
20000c74:	687b      	ldr	r3, [r7, #4]
20000c76:	68db      	ldr	r3, [r3, #12]
20000c78:	b2d9      	uxtb	r1, r3
20000c7a:	687b      	ldr	r3, [r7, #4]
20000c7c:	685b      	ldr	r3, [r3, #4]
20000c7e:	b2da      	uxtb	r2, r3
20000c80:	230f      	movs	r3, #15
20000c82:	18fb      	adds	r3, r7, r3
20000c84:	188a      	adds	r2, r1, r2
20000c86:	701a      	strb	r2, [r3, #0]
	newy = o->posy + o->diry;
20000c88:	687b      	ldr	r3, [r7, #4]
20000c8a:	691b      	ldr	r3, [r3, #16]
20000c8c:	b2d9      	uxtb	r1, r3
20000c8e:	687b      	ldr	r3, [r7, #4]
20000c90:	689b      	ldr	r3, [r3, #8]
20000c92:	b2da      	uxtb	r2, r3
20000c94:	230e      	movs	r3, #14
20000c96:	18fb      	adds	r3, r7, r3
20000c98:	188a      	adds	r2, r1, r2
20000c9a:	701a      	strb	r2, [r3, #0]
	if(newx < 1 || newx + o->geo->sizex > 128) {
20000c9c:	230f      	movs	r3, #15
20000c9e:	18fb      	adds	r3, r7, r3
20000ca0:	781b      	ldrb	r3, [r3, #0]
20000ca2:	2b00      	cmp	r3, #0
20000ca4:	d008      	beq.n	20000cb8 <move_object+0x54>
20000ca6:	230f      	movs	r3, #15
20000ca8:	18fb      	adds	r3, r7, r3
20000caa:	781a      	ldrb	r2, [r3, #0]
20000cac:	687b      	ldr	r3, [r7, #4]
20000cae:	681b      	ldr	r3, [r3, #0]
20000cb0:	685b      	ldr	r3, [r3, #4]
20000cb2:	18d3      	adds	r3, r2, r3
20000cb4:	2b80      	cmp	r3, #128	; 0x80
20000cb6:	dd04      	ble.n	20000cc2 <move_object+0x5e>
		o->dirx = -1 * o->dirx;
20000cb8:	687b      	ldr	r3, [r7, #4]
20000cba:	685b      	ldr	r3, [r3, #4]
20000cbc:	425a      	negs	r2, r3
20000cbe:	687b      	ldr	r3, [r7, #4]
20000cc0:	605a      	str	r2, [r3, #4]
	}
	if(newy < 1 || newy + o->geo->sizey > 64) {
20000cc2:	230e      	movs	r3, #14
20000cc4:	18fb      	adds	r3, r7, r3
20000cc6:	781b      	ldrb	r3, [r3, #0]
20000cc8:	2b00      	cmp	r3, #0
20000cca:	d008      	beq.n	20000cde <move_object+0x7a>
20000ccc:	230e      	movs	r3, #14
20000cce:	18fb      	adds	r3, r7, r3
20000cd0:	781a      	ldrb	r2, [r3, #0]
20000cd2:	687b      	ldr	r3, [r7, #4]
20000cd4:	681b      	ldr	r3, [r3, #0]
20000cd6:	689b      	ldr	r3, [r3, #8]
20000cd8:	18d3      	adds	r3, r2, r3
20000cda:	2b40      	cmp	r3, #64	; 0x40
20000cdc:	dd04      	ble.n	20000ce8 <move_object+0x84>
		o->diry = -1 * o->diry;
20000cde:	687b      	ldr	r3, [r7, #4]
20000ce0:	689b      	ldr	r3, [r3, #8]
20000ce2:	425a      	negs	r2, r3
20000ce4:	687b      	ldr	r3, [r7, #4]
20000ce6:	609a      	str	r2, [r3, #8]
	}
	o->posx += o->dirx;
20000ce8:	687b      	ldr	r3, [r7, #4]
20000cea:	68da      	ldr	r2, [r3, #12]
20000cec:	687b      	ldr	r3, [r7, #4]
20000cee:	685b      	ldr	r3, [r3, #4]
20000cf0:	18d2      	adds	r2, r2, r3
20000cf2:	687b      	ldr	r3, [r7, #4]
20000cf4:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
20000cf6:	687b      	ldr	r3, [r7, #4]
20000cf8:	691a      	ldr	r2, [r3, #16]
20000cfa:	687b      	ldr	r3, [r7, #4]
20000cfc:	689b      	ldr	r3, [r3, #8]
20000cfe:	18d2      	adds	r2, r2, r3
20000d00:	687b      	ldr	r3, [r7, #4]
20000d02:	611a      	str	r2, [r3, #16]
	
	draw_object(o);
20000d04:	687b      	ldr	r3, [r7, #4]
20000d06:	0018      	movs	r0, r3
20000d08:	f7ff ff50 	bl	20000bac <draw_object>
20000d0c:	46c0      	nop			; (mov r8, r8)
20000d0e:	46bd      	mov	sp, r7
20000d10:	b004      	add	sp, #16
20000d12:	bd80      	pop	{r7, pc}

20000d14 <delay_250ns>:
/// Delays the thread 250 ns.
///
/// NOTE: 		The routine is not exact but takes a MINIMUM of 
///				250 ns.
void delay_250ns( void )
{
20000d14:	b580      	push	{r7, lr}
20000d16:	af00      	add	r7, sp, #0
	// ----------------------
	// = Återställ räknaren =
	// ----------------------
	// Nollställ register STK_CTRL.
	SYS_TICK->STK_CTRL = 0;
20000d18:	4b0c      	ldr	r3, [pc, #48]	; (20000d4c <delay_250ns+0x38>)
20000d1a:	2200      	movs	r2, #0
20000d1c:	601a      	str	r2, [r3, #0]
	// = Ladda in räknarvärdet =
	// -------------------------
	// 		168 ticks/µs 		* 1000
	// => 	168'000 ticks/ns 	/ 4
	// => 	42'000 ticks for a wait of 250 ns.
	SYS_TICK->STK_LOAD = 0x0000A410;
20000d1e:	4b0b      	ldr	r3, [pc, #44]	; (20000d4c <delay_250ns+0x38>)
20000d20:	4a0b      	ldr	r2, [pc, #44]	; (20000d50 <delay_250ns+0x3c>)
20000d22:	605a      	str	r2, [r3, #4]
	
	// -----------------------------
	// = Nollställ räknarregistret =
	// -----------------------------
	// Nolställ register STK_VAL.
	SYS_TICK->STK_VAL = 0;
20000d24:	4b09      	ldr	r3, [pc, #36]	; (20000d4c <delay_250ns+0x38>)
20000d26:	2200      	movs	r2, #0
20000d28:	609a      	str	r2, [r3, #8]
	// ---------------------
	// = Start om räknaren =
	// ---------------------
	// Ettställ bitar 2 och 0.
	// Nollställ bitar 31-3 och 1.
	SYS_TICK->STK_CTRL = 0x00000005;
20000d2a:	4b08      	ldr	r3, [pc, #32]	; (20000d4c <delay_250ns+0x38>)
20000d2c:	2205      	movs	r2, #5
20000d2e:	601a      	str	r2, [r3, #0]
	
	// -----------------------------------------
	// = Vänta tills räknaren har räknat klart =
	// -----------------------------------------
	// Väntar tills COUNTFLAG = 1.
	while(SYS_TICK->STK_CTRL & 0x00010000) { }
20000d30:	46c0      	nop			; (mov r8, r8)
20000d32:	4b06      	ldr	r3, [pc, #24]	; (20000d4c <delay_250ns+0x38>)
20000d34:	681a      	ldr	r2, [r3, #0]
20000d36:	2380      	movs	r3, #128	; 0x80
20000d38:	025b      	lsls	r3, r3, #9
20000d3a:	4013      	ands	r3, r2
20000d3c:	d1f9      	bne.n	20000d32 <delay_250ns+0x1e>
	
	// ----------------------
	// = Återställ räknaren =
	// ----------------------
	// Nollställ register STK_CTRL.
	SYS_TICK->STK_CTRL = 0;
20000d3e:	4b03      	ldr	r3, [pc, #12]	; (20000d4c <delay_250ns+0x38>)
20000d40:	2200      	movs	r2, #0
20000d42:	601a      	str	r2, [r3, #0]
}
20000d44:	46c0      	nop			; (mov r8, r8)
20000d46:	46bd      	mov	sp, r7
20000d48:	bd80      	pop	{r7, pc}
20000d4a:	46c0      	nop			; (mov r8, r8)
20000d4c:	e000e010 	and	lr, r0, r0, lsl r0
20000d50:	0000a410 	andeq	sl, r0, r0, lsl r4

20000d54 <delay_500ns>:
/// Dealys the thread 500 ns.
/// 
/// NOTE:		The routine is not exact but takes a MINIMUM of
///				500 ns.
void delay_500ns( void )
{
20000d54:	b580      	push	{r7, lr}
20000d56:	af00      	add	r7, sp, #0
	delay_250ns();
20000d58:	f7ff ffdc 	bl	20000d14 <delay_250ns>
	delay_250ns();
20000d5c:	f7ff ffda 	bl	20000d14 <delay_250ns>
}
20000d60:	46c0      	nop			; (mov r8, r8)
20000d62:	46bd      	mov	sp, r7
20000d64:	bd80      	pop	{r7, pc}

20000d66 <delay_mikro>:
///				'delay_250ns()' function is suboptimal as you reset
///				the STK_CTRL register twice between every iteration
///				of the for loop.
/// 			
void delay_mikro( unsigned int us )
{
20000d66:	b580      	push	{r7, lr}
20000d68:	b084      	sub	sp, #16
20000d6a:	af00      	add	r7, sp, #0
20000d6c:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
	us = us / 1000;
20000d6e:	687a      	ldr	r2, [r7, #4]
20000d70:	23fa      	movs	r3, #250	; 0xfa
20000d72:	0099      	lsls	r1, r3, #2
20000d74:	0010      	movs	r0, r2
20000d76:	f000 f83d 	bl	20000df4 <__udivsi3>
20000d7a:	0003      	movs	r3, r0
20000d7c:	607b      	str	r3, [r7, #4]
	us++;
20000d7e:	687b      	ldr	r3, [r7, #4]
20000d80:	3301      	adds	r3, #1
20000d82:	607b      	str	r3, [r7, #4]
#endif
	// Convert the given time to a number of 250 ns delays.
	unsigned int delays = us * 4;
20000d84:	687b      	ldr	r3, [r7, #4]
20000d86:	009b      	lsls	r3, r3, #2
20000d88:	60bb      	str	r3, [r7, #8]
	unsigned int i;
	for(i = 0; i < delays; i++)
20000d8a:	2300      	movs	r3, #0
20000d8c:	60fb      	str	r3, [r7, #12]
20000d8e:	e004      	b.n	20000d9a <delay_mikro+0x34>
	{
		delay_250ns();
20000d90:	f7ff ffc0 	bl	20000d14 <delay_250ns>
	for(i = 0; i < delays; i++)
20000d94:	68fb      	ldr	r3, [r7, #12]
20000d96:	3301      	adds	r3, #1
20000d98:	60fb      	str	r3, [r7, #12]
20000d9a:	68fa      	ldr	r2, [r7, #12]
20000d9c:	68bb      	ldr	r3, [r7, #8]
20000d9e:	429a      	cmp	r2, r3
20000da0:	d3f6      	bcc.n	20000d90 <delay_mikro+0x2a>
	}
}
20000da2:	46c0      	nop			; (mov r8, r8)
20000da4:	46bd      	mov	sp, r7
20000da6:	b004      	add	sp, #16
20000da8:	bd80      	pop	{r7, pc}

20000daa <delay_milli>:
///				'delay_250ns()' function is suboptimal as you reset
///				the 'STK_CTRL' register twice between every iteration
///				of the for loop.
/// 			
void delay_milli( unsigned int ms )
{
20000daa:	b580      	push	{r7, lr}
20000dac:	b084      	sub	sp, #16
20000dae:	af00      	add	r7, sp, #0
20000db0:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
	ms = ms / 1000;
20000db2:	687a      	ldr	r2, [r7, #4]
20000db4:	23fa      	movs	r3, #250	; 0xfa
20000db6:	0099      	lsls	r1, r3, #2
20000db8:	0010      	movs	r0, r2
20000dba:	f000 f81b 	bl	20000df4 <__udivsi3>
20000dbe:	0003      	movs	r3, r0
20000dc0:	607b      	str	r3, [r7, #4]
	ms++;
20000dc2:	687b      	ldr	r3, [r7, #4]
20000dc4:	3301      	adds	r3, #1
20000dc6:	607b      	str	r3, [r7, #4]
#endif
	// Convert the given time to a number of 250 ns delays.
	unsigned int delays = ms * 4000;
20000dc8:	687b      	ldr	r3, [r7, #4]
20000dca:	22fa      	movs	r2, #250	; 0xfa
20000dcc:	0112      	lsls	r2, r2, #4
20000dce:	4353      	muls	r3, r2
20000dd0:	60bb      	str	r3, [r7, #8]
	unsigned int i;
	for(i = 0; i < delays; i++)
20000dd2:	2300      	movs	r3, #0
20000dd4:	60fb      	str	r3, [r7, #12]
20000dd6:	e004      	b.n	20000de2 <delay_milli+0x38>
	{
		delay_250ns();
20000dd8:	f7ff ff9c 	bl	20000d14 <delay_250ns>
	for(i = 0; i < delays; i++)
20000ddc:	68fb      	ldr	r3, [r7, #12]
20000dde:	3301      	adds	r3, #1
20000de0:	60fb      	str	r3, [r7, #12]
20000de2:	68fa      	ldr	r2, [r7, #12]
20000de4:	68bb      	ldr	r3, [r7, #8]
20000de6:	429a      	cmp	r2, r3
20000de8:	d3f6      	bcc.n	20000dd8 <delay_milli+0x2e>
	}
20000dea:	46c0      	nop			; (mov r8, r8)
20000dec:	46bd      	mov	sp, r7
20000dee:	b004      	add	sp, #16
20000df0:	bd80      	pop	{r7, pc}
20000df2:	46c0      	nop			; (mov r8, r8)

20000df4 <__udivsi3>:
20000df4:	2200      	movs	r2, #0
20000df6:	0843      	lsrs	r3, r0, #1
20000df8:	428b      	cmp	r3, r1
20000dfa:	d374      	bcc.n	20000ee6 <__udivsi3+0xf2>
20000dfc:	0903      	lsrs	r3, r0, #4
20000dfe:	428b      	cmp	r3, r1
20000e00:	d35f      	bcc.n	20000ec2 <__udivsi3+0xce>
20000e02:	0a03      	lsrs	r3, r0, #8
20000e04:	428b      	cmp	r3, r1
20000e06:	d344      	bcc.n	20000e92 <__udivsi3+0x9e>
20000e08:	0b03      	lsrs	r3, r0, #12
20000e0a:	428b      	cmp	r3, r1
20000e0c:	d328      	bcc.n	20000e60 <__udivsi3+0x6c>
20000e0e:	0c03      	lsrs	r3, r0, #16
20000e10:	428b      	cmp	r3, r1
20000e12:	d30d      	bcc.n	20000e30 <__udivsi3+0x3c>
20000e14:	22ff      	movs	r2, #255	; 0xff
20000e16:	0209      	lsls	r1, r1, #8
20000e18:	ba12      	rev	r2, r2
20000e1a:	0c03      	lsrs	r3, r0, #16
20000e1c:	428b      	cmp	r3, r1
20000e1e:	d302      	bcc.n	20000e26 <__udivsi3+0x32>
20000e20:	1212      	asrs	r2, r2, #8
20000e22:	0209      	lsls	r1, r1, #8
20000e24:	d065      	beq.n	20000ef2 <__udivsi3+0xfe>
20000e26:	0b03      	lsrs	r3, r0, #12
20000e28:	428b      	cmp	r3, r1
20000e2a:	d319      	bcc.n	20000e60 <__udivsi3+0x6c>
20000e2c:	e000      	b.n	20000e30 <__udivsi3+0x3c>
20000e2e:	0a09      	lsrs	r1, r1, #8
20000e30:	0bc3      	lsrs	r3, r0, #15
20000e32:	428b      	cmp	r3, r1
20000e34:	d301      	bcc.n	20000e3a <__udivsi3+0x46>
20000e36:	03cb      	lsls	r3, r1, #15
20000e38:	1ac0      	subs	r0, r0, r3
20000e3a:	4152      	adcs	r2, r2
20000e3c:	0b83      	lsrs	r3, r0, #14
20000e3e:	428b      	cmp	r3, r1
20000e40:	d301      	bcc.n	20000e46 <__udivsi3+0x52>
20000e42:	038b      	lsls	r3, r1, #14
20000e44:	1ac0      	subs	r0, r0, r3
20000e46:	4152      	adcs	r2, r2
20000e48:	0b43      	lsrs	r3, r0, #13
20000e4a:	428b      	cmp	r3, r1
20000e4c:	d301      	bcc.n	20000e52 <__udivsi3+0x5e>
20000e4e:	034b      	lsls	r3, r1, #13
20000e50:	1ac0      	subs	r0, r0, r3
20000e52:	4152      	adcs	r2, r2
20000e54:	0b03      	lsrs	r3, r0, #12
20000e56:	428b      	cmp	r3, r1
20000e58:	d301      	bcc.n	20000e5e <__udivsi3+0x6a>
20000e5a:	030b      	lsls	r3, r1, #12
20000e5c:	1ac0      	subs	r0, r0, r3
20000e5e:	4152      	adcs	r2, r2
20000e60:	0ac3      	lsrs	r3, r0, #11
20000e62:	428b      	cmp	r3, r1
20000e64:	d301      	bcc.n	20000e6a <__udivsi3+0x76>
20000e66:	02cb      	lsls	r3, r1, #11
20000e68:	1ac0      	subs	r0, r0, r3
20000e6a:	4152      	adcs	r2, r2
20000e6c:	0a83      	lsrs	r3, r0, #10
20000e6e:	428b      	cmp	r3, r1
20000e70:	d301      	bcc.n	20000e76 <__udivsi3+0x82>
20000e72:	028b      	lsls	r3, r1, #10
20000e74:	1ac0      	subs	r0, r0, r3
20000e76:	4152      	adcs	r2, r2
20000e78:	0a43      	lsrs	r3, r0, #9
20000e7a:	428b      	cmp	r3, r1
20000e7c:	d301      	bcc.n	20000e82 <__udivsi3+0x8e>
20000e7e:	024b      	lsls	r3, r1, #9
20000e80:	1ac0      	subs	r0, r0, r3
20000e82:	4152      	adcs	r2, r2
20000e84:	0a03      	lsrs	r3, r0, #8
20000e86:	428b      	cmp	r3, r1
20000e88:	d301      	bcc.n	20000e8e <__udivsi3+0x9a>
20000e8a:	020b      	lsls	r3, r1, #8
20000e8c:	1ac0      	subs	r0, r0, r3
20000e8e:	4152      	adcs	r2, r2
20000e90:	d2cd      	bcs.n	20000e2e <__udivsi3+0x3a>
20000e92:	09c3      	lsrs	r3, r0, #7
20000e94:	428b      	cmp	r3, r1
20000e96:	d301      	bcc.n	20000e9c <__udivsi3+0xa8>
20000e98:	01cb      	lsls	r3, r1, #7
20000e9a:	1ac0      	subs	r0, r0, r3
20000e9c:	4152      	adcs	r2, r2
20000e9e:	0983      	lsrs	r3, r0, #6
20000ea0:	428b      	cmp	r3, r1
20000ea2:	d301      	bcc.n	20000ea8 <__udivsi3+0xb4>
20000ea4:	018b      	lsls	r3, r1, #6
20000ea6:	1ac0      	subs	r0, r0, r3
20000ea8:	4152      	adcs	r2, r2
20000eaa:	0943      	lsrs	r3, r0, #5
20000eac:	428b      	cmp	r3, r1
20000eae:	d301      	bcc.n	20000eb4 <__udivsi3+0xc0>
20000eb0:	014b      	lsls	r3, r1, #5
20000eb2:	1ac0      	subs	r0, r0, r3
20000eb4:	4152      	adcs	r2, r2
20000eb6:	0903      	lsrs	r3, r0, #4
20000eb8:	428b      	cmp	r3, r1
20000eba:	d301      	bcc.n	20000ec0 <__udivsi3+0xcc>
20000ebc:	010b      	lsls	r3, r1, #4
20000ebe:	1ac0      	subs	r0, r0, r3
20000ec0:	4152      	adcs	r2, r2
20000ec2:	08c3      	lsrs	r3, r0, #3
20000ec4:	428b      	cmp	r3, r1
20000ec6:	d301      	bcc.n	20000ecc <__udivsi3+0xd8>
20000ec8:	00cb      	lsls	r3, r1, #3
20000eca:	1ac0      	subs	r0, r0, r3
20000ecc:	4152      	adcs	r2, r2
20000ece:	0883      	lsrs	r3, r0, #2
20000ed0:	428b      	cmp	r3, r1
20000ed2:	d301      	bcc.n	20000ed8 <__udivsi3+0xe4>
20000ed4:	008b      	lsls	r3, r1, #2
20000ed6:	1ac0      	subs	r0, r0, r3
20000ed8:	4152      	adcs	r2, r2
20000eda:	0843      	lsrs	r3, r0, #1
20000edc:	428b      	cmp	r3, r1
20000ede:	d301      	bcc.n	20000ee4 <__udivsi3+0xf0>
20000ee0:	004b      	lsls	r3, r1, #1
20000ee2:	1ac0      	subs	r0, r0, r3
20000ee4:	4152      	adcs	r2, r2
20000ee6:	1a41      	subs	r1, r0, r1
20000ee8:	d200      	bcs.n	20000eec <__udivsi3+0xf8>
20000eea:	4601      	mov	r1, r0
20000eec:	4152      	adcs	r2, r2
20000eee:	4610      	mov	r0, r2
20000ef0:	4770      	bx	lr
20000ef2:	e7ff      	b.n	20000ef4 <__udivsi3+0x100>
20000ef4:	b501      	push	{r0, lr}
20000ef6:	2000      	movs	r0, #0
20000ef8:	f000 f806 	bl	20000f08 <__aeabi_idiv0>
20000efc:	bd02      	pop	{r1, pc}
20000efe:	46c0      	nop			; (mov r8, r8)

20000f00 <__aeabi_uidivmod>:
20000f00:	2900      	cmp	r1, #0
20000f02:	d0f7      	beq.n	20000ef4 <__udivsi3+0x100>
20000f04:	e776      	b.n	20000df4 <__udivsi3>
20000f06:	4770      	bx	lr

20000f08 <__aeabi_idiv0>:
20000f08:	4770      	bx	lr
20000f0a:	46c0      	nop			; (mov r8, r8)

20000f0c <ball_geometry>:
20000f0c:	0000000c 	andeq	r0, r0, ip
20000f10:	00000004 	andeq	r0, r0, r4
20000f14:	00000004 	andeq	r0, r0, r4
20000f18:	02000100 	andeq	r0, r0, #0, 2
20000f1c:	01010001 	tsteq	r1, r1
20000f20:	03010201 	movweq	r0, #4609	; 0x1201
20000f24:	01020002 	tsteq	r2, r2
20000f28:	03020202 	movweq	r0, #8706	; 0x2202
20000f2c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000f40 <ball>:
20000f40:	20000f0c 	andcs	r0, r0, ip, lsl #30
	...
20000f4c:	00000001 	andeq	r0, r0, r1
20000f50:	00000001 	andeq	r0, r0, r1
20000f54:	20000bad 	andcs	r0, r0, sp, lsr #23
20000f58:	20000c09 	andcs	r0, r0, r9, lsl #24
20000f5c:	20000c65 	andcs	r0, r0, r5, ror #24
20000f60:	20000b8d 	andcs	r0, r0, sp, lsl #23

20000f64 <ball_geometry>:
20000f64:	0000000c 	andeq	r0, r0, ip
20000f68:	00000004 	andeq	r0, r0, r4
20000f6c:	00000004 	andeq	r0, r0, r4
20000f70:	02000100 	andeq	r0, r0, #0, 2
20000f74:	01010001 	tsteq	r1, r1
20000f78:	03010201 	movweq	r0, #4609	; 0x1201
20000f7c:	01020002 	tsteq	r2, r2
20000f80:	03020202 	movweq	r0, #8706	; 0x2202
20000f84:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000f98 <ball>:
20000f98:	20000f64 	andcs	r0, r0, r4, ror #30
	...
20000fa4:	00000001 	andeq	r0, r0, r1
20000fa8:	00000001 	andeq	r0, r0, r1
20000fac:	20000bad 	andcs	r0, r0, sp, lsr #23
20000fb0:	20000c09 	andcs	r0, r0, r9, lsl #24
20000fb4:	20000c65 	andcs	r0, r0, r5, ror #24
20000fb8:	20000b8d 	andcs	r0, r0, sp, lsl #23
20000fbc:	0a030201 	beq	200c17c8 <ball+0xc0830>
20000fc0:	0b060504 	bleq	201823d8 <ball+0x181440>
20000fc4:	0c090807 	stceq	8, cr0, [r9], {7}
20000fc8:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000f98 <ball>
20000fcc:	0006003f 	andeq	r0, r6, pc, lsr r0
20000fd0:	004f005b 	subeq	r0, pc, fp, asr r0	; <UNPREDICTABLE>
20000fd4:	006d0066 	rsbeq	r0, sp, r6, rrx
20000fd8:	0007007d 	andeq	r0, r7, sp, ror r0
20000fdc:	006f007f 	rsbeq	r0, pc, pc, ror r0	; <UNPREDICTABLE>
20000fe0:	007c0077 	rsbseq	r0, ip, r7, ror r0
20000fe4:	005e0058 	subseq	r0, lr, r8, asr r0
20000fe8:	00760080 	rsbseq	r0, r6, r0, lsl #1

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000259 	andeq	r0, r0, r9, asr r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000041 	andeq	r0, r0, r1, asr #32
  10:	0000050c 	andeq	r0, r0, ip, lsl #10
	...
  20:	01560200 	cmpeq	r6, r0, lsl #4
  24:	02020000 	andeq	r0, r2, #0
  28:	00004206 	andeq	r4, r0, r6, lsl #4
  2c:	00780300 	rsbseq	r0, r8, r0, lsl #6
  30:	00420702 	subeq	r0, r2, r2, lsl #14
  34:	03000000 	movweq	r0, #0
  38:	08020079 	stmdaeq	r2, {r0, r3, r4, r5, r6}
  3c:	00000042 	andeq	r0, r0, r2, asr #32
  40:	01040001 	tsteq	r4, r1
  44:	00014308 	andeq	r4, r1, r8, lsl #6
  48:	010a0500 	tsteq	sl, r0, lsl #10
  4c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
  50:	00000021 	andeq	r0, r0, r1, lsr #32
  54:	0000de02 	andeq	sp, r0, r2, lsl #28
  58:	0b023400 	bleq	8d060 <startup-0x1ff72fa0>
  5c:	00000090 	muleq	r0, r0, r0
  60:	00013906 	andeq	r3, r1, r6, lsl #18
  64:	900c0200 	andls	r0, ip, r0, lsl #4
  68:	00000000 	andeq	r0, r0, r0
  6c:	00012d06 	andeq	r2, r1, r6, lsl #26
  70:	900d0200 	andls	r0, sp, r0, lsl #4
  74:	04000000 	streq	r0, [r0], #-0
  78:	00013306 	andeq	r3, r1, r6, lsl #6
  7c:	900e0200 	andls	r0, lr, r0, lsl #4
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787003 	rsbseq	r7, r8, r3
  88:	00970f02 	addseq	r0, r7, r2, lsl #30
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	04001300 	streq	r1, [r0], #-768	; 0xfffffd00
  a8:	00e80704 	rsceq	r0, r8, r4, lsl #14
  ac:	01050000 	mrseq	r0, (UNDEF: 5)
  b0:	02000001 	andeq	r0, r0, #1
  b4:	00005410 	andeq	r5, r0, r0, lsl r4
  b8:	01000500 	tsteq	r0, r0, lsl #10
  bc:	10020000 	andne	r0, r2, r0
  c0:	000000c4 	andeq	r0, r0, r4, asr #1
  c4:	0054040a 	subseq	r0, r4, sl, lsl #8
  c8:	95020000 	strls	r0, [r2, #-0]
  cc:	24000001 	strcs	r0, [r0], #-1
  d0:	01431202 	cmpeq	r3, r2, lsl #4
  d4:	67030000 	strvs	r0, [r3, -r0]
  d8:	02006f65 	andeq	r6, r0, #404	; 0x194
  dc:	0000b913 	andeq	fp, r0, r3, lsl r9
  e0:	23060000 	movwcs	r0, #24576	; 0x6000
  e4:	02000001 	andeq	r0, r0, #1
  e8:	00009014 	andeq	r9, r0, r4, lsl r0
  ec:	28060400 	stmdacs	r6, {sl}
  f0:	02000001 	andeq	r0, r0, #1
  f4:	00009014 	andeq	r9, r0, r4, lsl r0
  f8:	00060800 	andeq	r0, r6, r0, lsl #16
  fc:	02000000 	andeq	r0, r0, #0
 100:	00009015 	andeq	r9, r0, r5, lsl r0
 104:	10060c00 	andne	r0, r6, r0, lsl #24
 108:	02000001 	andeq	r0, r0, #1
 10c:	00009015 	andeq	r9, r0, r5, lsl r0
 110:	9a061000 	bls	184118 <startup-0x1fe7bee8>
 114:	02000001 	andeq	r0, r0, #1
 118:	00015416 	andeq	r5, r1, r6, lsl r4
 11c:	2a061400 	bcs	185124 <startup-0x1fe7aedc>
 120:	02000003 	andeq	r0, r0, #3
 124:	00015417 	andeq	r5, r1, r7, lsl r4
 128:	c7061800 	strgt	r1, [r6, -r0, lsl #16]
 12c:	02000001 	andeq	r0, r0, #1
 130:	00015418 	andeq	r5, r1, r8, lsl r4
 134:	9f061c00 	svcls	0x00061c00
 138:	02000001 	andeq	r0, r0, #1
 13c:	00016f19 	andeq	r6, r1, r9, lsl pc
 140:	0b002000 	bleq	8148 <startup-0x1fff7eb8>
 144:	0000014e 	andeq	r0, r0, lr, asr #2
 148:	00014e0c 	andeq	r4, r1, ip, lsl #28
 14c:	040a0000 	streq	r0, [sl], #-0
 150:	000000ca 	andeq	r0, r0, sl, asr #1
 154:	0143040a 	cmpeq	r3, sl, lsl #8
 158:	6f0b0000 	svcvs	0x000b0000
 15c:	0c000001 	stceq	0, cr0, [r0], {1}
 160:	0000014e 	andeq	r0, r0, lr, asr #2
 164:	0000900c 	andeq	r9, r0, ip
 168:	00900c00 	addseq	r0, r0, r0, lsl #24
 16c:	0a000000 	beq	174 <startup-0x1ffffe8c>
 170:	00015a04 	andeq	r5, r1, r4, lsl #20
 174:	01c00500 	biceq	r0, r0, r0, lsl #10
 178:	1a020000 	bne	80180 <startup-0x1ff7fe80>
 17c:	000000ca 	andeq	r0, r0, sl, asr #1
 180:	0001bf05 	andeq	fp, r1, r5, lsl #30
 184:	4e1a0200 	cdpmi	2, 1, cr0, cr10, cr0, {0}
 188:	0d000001 	stceq	0, cr0, [r0, #-4]
 18c:	000001a9 	andeq	r0, r0, r9, lsr #3
 190:	00ae1c02 	adceq	r1, lr, r2, lsl #24
 194:	03050000 	movweq	r0, #20480	; 0x5000
 198:	20000f0c 	andcs	r0, r0, ip, lsl #30
 19c:	0000d90d 	andeq	sp, r0, sp, lsl #18
 1a0:	752d0200 	strvc	r0, [sp, #-512]!	; 0xfffffe00
 1a4:	05000001 	streq	r0, [r0, #-1]
 1a8:	000f4003 	andeq	r4, pc, r3
 1ac:	06010420 	streq	r0, [r1], -r0, lsr #8
 1b0:	00000145 	andeq	r0, r0, r5, asr #2
 1b4:	f6050204 			; <UNDEFINED> instruction: 0xf6050204
 1b8:	04000000 	streq	r0, [r0], #-0
 1bc:	01790702 	cmneq	r9, r2, lsl #14
 1c0:	04040000 	streq	r0, [r4], #-0
 1c4:	00011a05 	andeq	r1, r1, r5, lsl #20
 1c8:	07040400 	streq	r0, [r4, -r0, lsl #8]
 1cc:	00000162 	andeq	r0, r0, r2, ror #2
 1d0:	15050804 	strne	r0, [r5, #-2052]	; 0xfffff7fc
 1d4:	04000001 	streq	r0, [r0], #-1
 1d8:	015d0708 	cmpeq	sp, r8, lsl #14
 1dc:	04040000 	streq	r0, [r4], #-0
 1e0:	00016707 	andeq	r6, r1, r7, lsl #14
 1e4:	00f10e00 	rscseq	r0, r1, r0, lsl #28
 1e8:	1a010000 	bne	401f0 <startup-0x1ffbfe10>
 1ec:	00000090 	muleq	r0, r0, r0
 1f0:	2000001e 	andcs	r0, r0, lr, lsl r0
 1f4:	0000003a 	andeq	r0, r0, sl, lsr r0
 1f8:	02279c01 	eoreq	r9, r7, #256	; 0x100
 1fc:	510f0000 	mrspl	r0, CPSR
 200:	01000001 	tsteq	r0, r1
 204:	0000901a 	andeq	r9, r0, sl, lsl r0
 208:	6c910200 	lfmvs	f0, 4, [r1], {0}
 20c:	0001740f 	andeq	r7, r1, pc, lsl #8
 210:	271a0100 	ldrcs	r0, [sl, -r0, lsl #2]
 214:	02000002 	andeq	r0, r0, #2
 218:	70106891 	mulsvc	r0, r1, r8
 21c:	801c0100 	andshi	r0, ip, r0, lsl #2
 220:	02000001 	andeq	r0, r0, #1
 224:	0a007491 	beq	1d470 <startup-0x1ffe2b90>
 228:	00022d04 	andeq	r2, r2, r4, lsl #26
 22c:	33040a00 	movwcc	r0, #18944	; 0x4a00
 230:	04000002 	streq	r0, [r0], #-2
 234:	014c0801 	cmpeq	ip, r1, lsl #16
 238:	8c110000 	ldchi	0, cr0, [r1], {-0}
 23c:	01000001 	tsteq	r0, r1
 240:	00001015 	andeq	r1, r0, r5, lsl r0
 244:	00000e20 	andeq	r0, r0, r0, lsr #28
 248:	129c0100 	addsne	r0, ip, #0, 2
 24c:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
 250:	00000b01 	andeq	r0, r0, r1, lsl #22
 254:	000c2000 	andeq	r2, ip, r0
 258:	9c010000 	stcls	0, cr0, [r1], {-0}
 25c:	0006ee00 	andeq	lr, r6, r0, lsl #28
 260:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
 264:	04000001 	streq	r0, [r0], #-1
 268:	00004101 	andeq	r4, r0, r1, lsl #2
 26c:	04440c00 	strbeq	r0, [r4], #-3072	; 0xfffff400
 270:	00580000 	subseq	r0, r8, r0
 274:	0b342000 	bleq	d0827c <startup-0x1f2f7d84>
 278:	00a00000 	adceq	r0, r0, r0
 27c:	01020000 	mrseq	r0, (UNDEF: 2)
 280:	00014506 	andeq	r4, r1, r6, lsl #10
 284:	02e20300 	rsceq	r0, r2, #0, 6
 288:	2b020000 	blcs	80290 <startup-0x1ff7fd70>
 28c:	00000033 	andeq	r0, r0, r3, lsr r0
 290:	43080102 	movwmi	r0, #33026	; 0x8102
 294:	02000001 	andeq	r0, r0, #1
 298:	00f60502 	rscseq	r0, r6, r2, lsl #10
 29c:	21030000 	mrscs	r0, (UNDEF: 3)
 2a0:	02000002 	andeq	r0, r0, #2
 2a4:	00004c39 	andeq	r4, r0, r9, lsr ip
 2a8:	07020200 	streq	r0, [r2, -r0, lsl #4]
 2ac:	00000179 	andeq	r0, r0, r9, ror r1
 2b0:	1a050402 	bne	1412c0 <startup-0x1febed40>
 2b4:	03000001 	movweq	r0, #1
 2b8:	00000216 	andeq	r0, r0, r6, lsl r2
 2bc:	00654f02 	rsbeq	r4, r5, r2, lsl #30
 2c0:	04020000 	streq	r0, [r2], #-0
 2c4:	00016207 	andeq	r6, r1, r7, lsl #4
 2c8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
 2cc:	00000115 	andeq	r0, r0, r5, lsl r1
 2d0:	5d070802 	stcpl	8, cr0, [r7, #-8]
 2d4:	04000001 	streq	r0, [r0], #-1
 2d8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 2dc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 2e0:	00016707 	andeq	r6, r1, r7, lsl #14
 2e4:	02e40300 	rsceq	r0, r4, #0, 6
 2e8:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
 2ec:	00000028 	andeq	r0, r0, r8, lsr #32
 2f0:	00022303 	andeq	r2, r2, r3, lsl #6
 2f4:	41240300 			; <UNDEFINED> instruction: 0x41240300
 2f8:	03000000 	movweq	r0, #0
 2fc:	00000218 	andeq	r0, r0, r8, lsl r2
 300:	005a3003 	subseq	r3, sl, r3
 304:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
 308:	01361d04 	teqeq	r6, r4, lsl #26
 30c:	b6060000 	strlt	r0, [r6], -r0
 310:	04000004 	streq	r0, [r0], #-4
 314:	00009e1e 	andeq	r9, r0, lr, lsl lr
 318:	57060000 	strpl	r0, [r6, -r0]
 31c:	04000002 	streq	r0, [r0], #-2
 320:	0000931f 	andeq	r9, r0, pc, lsl r3
 324:	90060400 	andls	r0, r6, r0, lsl #8
 328:	04000002 	streq	r0, [r0], #-2
 32c:	00009320 	andeq	r9, r0, r0, lsr #6
 330:	9b060600 	blls	181b38 <startup-0x1fe7e4c8>
 334:	04000002 	streq	r0, [r0], #-2
 338:	00009e21 	andeq	r9, r0, r1, lsr #28
 33c:	3e060800 	cdpcc	8, 0, cr0, cr6, cr0, {0}
 340:	04000004 	streq	r0, [r0], #-4
 344:	00009e22 	andeq	r9, r0, r2, lsr #28
 348:	cc060c00 	stcgt	12, cr0, [r6], {-0}
 34c:	04000001 	streq	r0, [r0], #-1
 350:	00008823 	andeq	r8, r0, r3, lsr #16
 354:	7b061000 	blvc	18435c <startup-0x1fe7bca4>
 358:	04000003 	streq	r0, [r0], #-3
 35c:	00008824 	andeq	r8, r0, r4, lsr #16
 360:	49061100 	stmdbmi	r6, {r8, ip}
 364:	04000003 	streq	r0, [r0], #-3
 368:	00009325 	andeq	r9, r0, r5, lsr #6
 36c:	dc061200 	sfmle	f1, 4, [r6], {-0}
 370:	04000004 	streq	r0, [r0], #-4
 374:	00008826 	andeq	r8, r0, r6, lsr #16
 378:	d4061400 	strle	r1, [r6], #-1024	; 0xfffffc00
 37c:	04000004 	streq	r0, [r0], #-4
 380:	00008827 	andeq	r8, r0, r7, lsr #16
 384:	d9061500 	stmdble	r6, {r8, sl, ip}
 388:	04000001 	streq	r0, [r0], #-1
 38c:	00009328 	andeq	r9, r0, r8, lsr #6
 390:	03001600 	movweq	r1, #1536	; 0x600
 394:	00000344 	andeq	r0, r0, r4, asr #6
 398:	00a92904 	adceq	r2, r9, r4, lsl #18
 39c:	d3070000 	movwle	r0, #28672	; 0x7000
 3a0:	01000001 	tsteq	r0, r1
 3a4:	09fc0191 	ldmibeq	ip!, {r0, r4, r7, r8}^
 3a8:	01902000 	orrseq	r2, r0, r0
 3ac:	9c010000 	stcls	0, cr0, [r1], {-0}
 3b0:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
 3b4:	01007808 	tsteq	r0, r8, lsl #16
 3b8:	00330191 	mlaseq	r3, r1, r1, r0
 3bc:	91020000 	mrsls	r0, (UNDEF: 2)
 3c0:	00790867 	rsbseq	r0, r9, r7, ror #16
 3c4:	33019101 	movwcc	r9, #4353	; 0x1101
 3c8:	02000000 	andeq	r0, r0, #0
 3cc:	73086691 	movwvc	r6, #34449	; 0x8691
 3d0:	01007465 	tsteq	r0, r5, ror #8
 3d4:	00330191 	mlaseq	r3, r1, r1, r0
 3d8:	91020000 	mrsls	r0, (UNDEF: 2)
 3dc:	01e50965 	mvneq	r0, r5, ror #18
 3e0:	96010000 	strls	r0, [r1], -r0
 3e4:	00008801 	andeq	r8, r0, r1, lsl #16
 3e8:	6d910200 	lfmvs	f0, 4, [r1]
 3ec:	00043909 	andeq	r3, r4, r9, lsl #18
 3f0:	01970100 	orrseq	r0, r7, r0, lsl #2
 3f4:	00000088 	andeq	r0, r0, r8, lsl #1
 3f8:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 3fc:	000003a8 	andeq	r0, r0, r8, lsr #7
 400:	88019d01 	stmdahi	r1, {r0, r8, sl, fp, ip, pc}
 404:	02000000 	andeq	r0, r0, #0
 408:	eb096e91 	bl	25be54 <startup-0x1fda41ac>
 40c:	01000001 	tsteq	r0, r1
 410:	008801a9 	addeq	r0, r8, r9, lsr #3
 414:	91020000 	mrsls	r0, (UNDEF: 2)
 418:	830a006c 	movwhi	r0, #41068	; 0xa06c
 41c:	01000003 	tsteq	r0, r3
 420:	09de018c 	ldmibeq	lr, {r2, r3, r7, r8}^
 424:	001e2000 	andseq	r2, lr, r0
 428:	9c010000 	stcls	0, cr0, [r1], {-0}
 42c:	00024207 	andeq	r4, r2, r7, lsl #4
 430:	01810100 	orreq	r0, r1, r0, lsl #2
 434:	20000978 	andcs	r0, r0, r8, ror r9
 438:	00000066 	andeq	r0, r0, r6, rrx
 43c:	02049c01 	andeq	r9, r4, #256	; 0x100
 440:	a3090000 	movwge	r0, #36864	; 0x9000
 444:	01000002 	tsteq	r0, r2
 448:	00880182 	addeq	r0, r8, r2, lsl #3
 44c:	91020000 	mrsls	r0, (UNDEF: 2)
 450:	64610b77 	strbtvs	r0, [r1], #-2935	; 0xfffff489
 454:	82010064 	andhi	r0, r1, #100	; 0x64
 458:	00008801 	andeq	r8, r0, r1, lsl #16
 45c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 460:	02cb0c00 	sbceq	r0, fp, #0, 24
 464:	7c010000 	stcvc	0, cr0, [r1], {-0}
 468:	00008801 	andeq	r8, r0, r1, lsl #16
 46c:	00094e00 	andeq	r4, r9, r0, lsl #28
 470:	00002a20 	andeq	r2, r0, r0, lsr #20
 474:	2e9c0100 	fmlcse	f0, f4, f0
 478:	0d000002 	stceq	0, cr0, [r0, #-8]
 47c:	000003a8 	andeq	r0, r0, r8, lsr #7
 480:	33017c01 	movwcc	r7, #7169	; 0x1c01
 484:	02000000 	andeq	r0, r0, #0
 488:	07007791 			; <UNDEFINED> instruction: 0x07007791
 48c:	000002ec 	andeq	r0, r0, ip, ror #5
 490:	08017401 	stmdaeq	r1, {r0, sl, ip, sp, lr}
 494:	46200009 	strtmi	r0, [r0], -r9
 498:	01000000 	mrseq	r0, (UNDEF: 0)
 49c:	0002639c 	muleq	r2, ip, r3
 4a0:	02d80d00 	sbcseq	r0, r8, #0, 26
 4a4:	74010000 	strvc	r0, [r1], #-0
 4a8:	00008801 	andeq	r8, r0, r1, lsl #16
 4ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4b0:	0003a80d 	andeq	sl, r3, sp, lsl #16
 4b4:	01740100 	cmneq	r4, r0, lsl #2
 4b8:	00000088 	andeq	r0, r0, r8, lsl #1
 4bc:	00769102 	rsbseq	r9, r6, r2, lsl #2
 4c0:	00022c07 	andeq	r2, r2, r7, lsl #24
 4c4:	016d0100 	cmneq	sp, r0, lsl #2
 4c8:	200008c8 	andcs	r0, r0, r8, asr #17
 4cc:	00000040 	andeq	r0, r0, r0, asr #32
 4d0:	02989c01 	addseq	r9, r8, #256	; 0x100
 4d4:	900d0000 	andls	r0, sp, r0
 4d8:	01000004 	tsteq	r0, r4
 4dc:	0088016d 	addeq	r0, r8, sp, ror #2
 4e0:	91020000 	mrsls	r0, (UNDEF: 2)
 4e4:	03a80d77 			; <UNDEFINED> instruction: 0x03a80d77
 4e8:	6d010000 	stcvs	0, cr0, [r1, #-0]
 4ec:	00008801 	andeq	r8, r0, r1, lsl #16
 4f0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 4f4:	03300700 	teqeq	r0, #0, 14
 4f8:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
 4fc:	00084801 	andeq	r4, r8, r1, lsl #16
 500:	00008020 	andeq	r8, r0, r0, lsr #32
 504:	cd9c0100 	ldfgts	f0, [ip]
 508:	0d000002 	stceq	0, cr0, [r0, #-8]
 50c:	00000263 	andeq	r0, r0, r3, ror #4
 510:	88015901 	stmdahi	r1, {r0, r8, fp, ip, lr}
 514:	02000000 	andeq	r0, r0, #0
 518:	a80d7791 	stmdage	sp, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 51c:	01000003 	tsteq	r0, r3
 520:	00880159 	addeq	r0, r8, r9, asr r1
 524:	91020000 	mrsls	r0, (UNDEF: 2)
 528:	830c0076 	movwhi	r0, #49270	; 0xc076
 52c:	01000002 	tsteq	r0, r2
 530:	00880141 	addeq	r0, r8, r1, asr #2
 534:	07b80000 	ldreq	r0, [r8, r0]!
 538:	00902000 	addseq	r2, r0, r0
 53c:	9c010000 	stcls	0, cr0, [r1], {-0}
 540:	00000305 	andeq	r0, r0, r5, lsl #6
 544:	0003a80d 	andeq	sl, r3, sp, lsl #16
 548:	01410100 	mrseq	r0, (UNDEF: 81)
 54c:	00000088 	andeq	r0, r0, r8, lsl #1
 550:	0b6f9102 	bleq	1be4960 <startup-0x1e41b6a0>
 554:	01007672 	tsteq	r0, r2, ror r6
 558:	0088014a 	addeq	r0, r8, sl, asr #2
 55c:	91020000 	mrsls	r0, (UNDEF: 2)
 560:	00070077 	andeq	r0, r7, r7, ror r0
 564:	01000004 	tsteq	r0, r4
 568:	074e012f 	strbeq	r0, [lr, -pc, lsr #2]
 56c:	006a2000 	rsbeq	r2, sl, r0
 570:	9c010000 	stcls	0, cr0, [r1], {-0}
 574:	00000329 	andeq	r0, r0, r9, lsr #6
 578:	0100630b 	tsteq	r0, fp, lsl #6
 57c:	00880130 	addeq	r0, r8, r0, lsr r1
 580:	91020000 	mrsls	r0, (UNDEF: 2)
 584:	7d0e0077 	stcvc	0, cr0, [lr, #-476]	; 0xfffffe24
 588:	01000004 	tsteq	r0, r4
 58c:	06f20120 	ldrbteq	r0, [r2], r0, lsr #2
 590:	005c2000 	subseq	r2, ip, r0
 594:	9c010000 	stcls	0, cr0, [r1], {-0}
 598:	0003c507 	andeq	ip, r3, r7, lsl #10
 59c:	010d0100 	mrseq	r0, (UNDEF: 29)
 5a0:	20000698 	mulcs	r0, r8, r6
 5a4:	0000005a 	andeq	r0, r0, sl, asr r0
 5a8:	03619c01 	cmneq	r1, #256	; 0x100
 5ac:	a80d0000 	stmdage	sp, {}	; <UNPREDICTABLE>
 5b0:	01000003 	tsteq	r0, r3
 5b4:	0088010d 	addeq	r0, r8, sp, lsl #2
 5b8:	91020000 	mrsls	r0, (UNDEF: 2)
 5bc:	190f0077 	stmdbne	pc, {r0, r1, r2, r4, r5, r6}	; <UNPREDICTABLE>
 5c0:	01000003 	tsteq	r0, r3
 5c4:	06400105 	strbeq	r0, [r0], -r5, lsl #2
 5c8:	00582000 	subseq	r2, r8, r0
 5cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 5d0:	00000392 	muleq	r0, r2, r3
 5d4:	01007808 	tsteq	r0, r8, lsl #16
 5d8:	00880105 	addeq	r0, r8, r5, lsl #2
 5dc:	91020000 	mrsls	r0, (UNDEF: 2)
 5e0:	00630b6f 	rsbeq	r0, r3, pc, ror #22
 5e4:	88010601 	stmdahi	r1, {r0, r9, sl}
 5e8:	02000000 	andeq	r0, r0, #0
 5ec:	10007791 	mulne	r0, r1, r7
 5f0:	00000355 	andeq	r0, r0, r5, asr r3
 5f4:	05e4fd01 	strbeq	pc, [r4, #3329]!	; 0xd01	; <UNPREDICTABLE>
 5f8:	005c2000 	subseq	r2, ip, r0
 5fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 600:	000003c0 	andeq	r0, r0, r0, asr #7
 604:	01007811 	tsteq	r0, r1, lsl r8
 608:	000088fd 	strdeq	r8, [r0], -sp
 60c:	6f910200 	svcvs	0x00910200
 610:	01006312 	tsteq	r0, r2, lsl r3
 614:	000088fe 	strdeq	r8, [r0], -lr
 618:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 61c:	036a1300 	cmneq	sl, #0, 6
 620:	f4010000 	vst4.8	{d0-d3}, [r1], r0
 624:	200005a8 	andcs	r0, r0, r8, lsr #11
 628:	0000003c 	andeq	r0, r0, ip, lsr r0
 62c:	03e29c01 	mvneq	r9, #256	; 0x100
 630:	63110000 	tstvs	r1, #0
 634:	33f40100 	mvnscc	r0, #0, 2
 638:	02000000 	andeq	r0, r0, #0
 63c:	13007791 	movwne	r7, #1937	; 0x791
 640:	00000276 	andeq	r0, r0, r6, ror r2
 644:	0554eb01 	ldrbeq	lr, [r4, #-2817]	; 0xfffff4ff
 648:	00542000 	subseq	r2, r4, r0
 64c:	9c010000 	stcls	0, cr0, [r1], {-0}
 650:	0000041e 	andeq	r0, r0, lr, lsl r4
 654:	01007811 	tsteq	r0, r1, lsl r8
 658:	00007aeb 	andeq	r7, r0, fp, ror #21
 65c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 660:	01007911 	tsteq	r0, r1, lsl r9
 664:	00007aeb 	andeq	r7, r0, fp, ror #21
 668:	68910200 	ldmvs	r1, {r9}
 66c:	0002b814 	andeq	fp, r2, r4, lsl r8
 670:	33ed0100 	mvncc	r0, #0, 2
 674:	02000000 	andeq	r0, r0, #0
 678:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 67c:	0000039d 	muleq	r0, sp, r3
 680:	0033e101 	eorseq	lr, r3, r1, lsl #2
 684:	05200000 	streq	r0, [r0, #-0]!
 688:	00342000 	eorseq	r2, r4, r0
 68c:	9c010000 	stcls	0, cr0, [r1], {-0}
 690:	00000446 	andeq	r0, r0, r6, asr #8
 694:	00025e14 	andeq	r5, r2, r4, lsl lr
 698:	33e20100 	mvncc	r0, #0, 2
 69c:	02000000 	andeq	r0, r0, #0
 6a0:	13007791 	movwne	r7, #1937	; 0x791
 6a4:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 6a8:	04f0d801 	ldrbteq	sp, [r0], #2049	; 0x801
 6ac:	00302000 	eorseq	r2, r0, r0
 6b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6b4:	0000046a 	andeq	r0, r0, sl, ror #8
 6b8:	00043416 	andeq	r3, r4, r6, lsl r4
 6bc:	33d80100 	bicscc	r0, r8, #0, 2
 6c0:	02000000 	andeq	r0, r0, #0
 6c4:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 6c8:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
 6cc:	0033c801 	eorseq	ip, r3, r1, lsl #16
 6d0:	04a80000 	strteq	r0, [r8], #0
 6d4:	00482000 	subeq	r2, r8, r0
 6d8:	9c010000 	stcls	0, cr0, [r1], {-0}
 6dc:	00000492 	muleq	r0, r2, r4
 6e0:	00025e14 	andeq	r5, r2, r4, lsl lr
 6e4:	33c90100 	biccc	r0, r9, #0, 2
 6e8:	02000000 	andeq	r0, r0, #0
 6ec:	15006f91 	strne	r6, [r0, #-3985]	; 0xfffff06f
 6f0:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
 6f4:	0033b801 	eorseq	fp, r3, r1, lsl #16
 6f8:	04600000 	strbteq	r0, [r0], #-0
 6fc:	00482000 	subeq	r2, r8, r0
 700:	9c010000 	stcls	0, cr0, [r1], {-0}
 704:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
 708:	00025e14 	andeq	r5, r2, r4, lsl lr
 70c:	33b90100 			; <UNDEFINED> instruction: 0x33b90100
 710:	02000000 	andeq	r0, r0, #0
 714:	13006f91 	movwne	r6, #3985	; 0xf91
 718:	000003e8 	andeq	r0, r0, r8, ror #7
 71c:	0436b201 	ldrteq	fp, [r6], #-513	; 0xfffffdff
 720:	002a2000 	eoreq	r2, sl, r0
 724:	9c010000 	stcls	0, cr0, [r1], {-0}
 728:	000004de 	ldrdeq	r0, [r0], -lr
 72c:	0002d816 	andeq	sp, r2, r6, lsl r8
 730:	33b20100 			; <UNDEFINED> instruction: 0x33b20100
 734:	02000000 	andeq	r0, r0, #0
 738:	13007791 	movwne	r7, #1937	; 0x791
 73c:	000004e3 	andeq	r0, r0, r3, ror #9
 740:	040cab01 	streq	sl, [ip], #-2817	; 0xfffff4ff
 744:	002a2000 	eoreq	r2, sl, r0
 748:	9c010000 	stcls	0, cr0, [r1], {-0}
 74c:	00000502 	andeq	r0, r0, r2, lsl #10
 750:	00023a16 	andeq	r3, r2, r6, lsl sl
 754:	33ab0100 			; <UNDEFINED> instruction: 0x33ab0100
 758:	02000000 	andeq	r0, r0, #0
 75c:	10007791 	mulne	r0, r1, r7
 760:	00000304 	andeq	r0, r0, r4, lsl #6
 764:	03bca201 			; <UNDEFINED> instruction: 0x03bca201
 768:	00502000 	subseq	r2, r0, r0
 76c:	9c010000 	stcls	0, cr0, [r1], {-0}
 770:	00000530 	andeq	r0, r0, r0, lsr r5
 774:	01007811 	tsteq	r0, r1, lsl r8
 778:	000033a2 	andeq	r3, r0, r2, lsr #7
 77c:	6f910200 	svcvs	0x00910200
 780:	01006312 	tsteq	r0, r2, lsl r3
 784:	000033a5 	andeq	r3, r0, r5, lsr #7
 788:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 78c:	02031000 	andeq	r1, r3, #0
 790:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 794:	20000376 	andcs	r0, r0, r6, ror r3
 798:	00000046 	andeq	r0, r0, r6, asr #32
 79c:	055e9c01 	ldrbeq	r9, [lr, #-3073]	; 0xfffff3ff
 7a0:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
 7a4:	33990100 	orrscc	r0, r9, #0, 2
 7a8:	02000000 	andeq	r0, r0, #0
 7ac:	63126f91 	tstvs	r2, #580	; 0x244
 7b0:	339c0100 	orrscc	r0, ip, #0, 2
 7b4:	02000000 	andeq	r0, r0, #0
 7b8:	17007791 			; <UNDEFINED> instruction: 0x17007791
 7bc:	000002c0 	andeq	r0, r0, r0, asr #5
 7c0:	02dc7a01 	sbcseq	r7, ip, #4096	; 0x1000
 7c4:	009a2000 	addseq	r2, sl, r0
 7c8:	9c010000 	stcls	0, cr0, [r1], {-0}
 7cc:	00041c17 	andeq	r1, r4, r7, lsl ip
 7d0:	b8670100 	stmdalt	r7!, {r8}^
 7d4:	24200002 	strtcs	r0, [r0], #-2
 7d8:	01000000 	mrseq	r0, (UNDEF: 0)
 7dc:	0413189c 	ldreq	r1, [r3], #-2204	; 0xfffff764
 7e0:	5f010000 	svcpl	0x00010000
 7e4:	00000033 	andeq	r0, r0, r3, lsr r0
 7e8:	20000266 	andcs	r0, r0, r6, ror #4
 7ec:	00000052 	andeq	r0, r0, r2, asr r0
 7f0:	05a89c01 	streq	r9, [r8, #3073]!	; 0xc01
 7f4:	3e160000 	cdpcc	0, 1, cr0, cr6, cr0, {0}
 7f8:	01000003 	tsteq	r0, r3
 7fc:	0005a85f 	andeq	sl, r5, pc, asr r8
 800:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 804:	36041900 	strcc	r1, [r4], -r0, lsl #18
 808:	10000001 	andne	r0, r0, r1
 80c:	000002a8 	andeq	r0, r0, r8, lsr #5
 810:	02505b01 	subseq	r5, r0, #1024	; 0x400
 814:	00162000 	andseq	r2, r6, r0
 818:	9c010000 	stcls	0, cr0, [r1], {-0}
 81c:	000005d2 	ldrdeq	r0, [r0], -r2
 820:	00033e16 	andeq	r3, r3, r6, lsl lr
 824:	a85b0100 	ldmdage	fp, {r8}^
 828:	02000005 	andeq	r0, r0, #5
 82c:	10007491 	mulne	r0, r1, r4
 830:	00000269 	andeq	r0, r0, r9, ror #4
 834:	02005201 	andeq	r5, r0, #268435456	; 0x10000000
 838:	00502000 	subseq	r2, r0, r0
 83c:	9c010000 	stcls	0, cr0, [r1], {-0}
 840:	00000604 	andeq	r0, r0, r4, lsl #12
 844:	00033e16 	andeq	r3, r3, r6, lsl lr
 848:	a8520100 	ldmdage	r2, {r8}^
 84c:	02000005 	andeq	r0, r0, #5
 850:	72117491 	andsvc	r7, r1, #-1862270976	; 0x91000000
 854:	0100776f 	tsteq	r0, pc, ror #14
 858:	00003352 	andeq	r3, r0, r2, asr r3
 85c:	73910200 	orrsvc	r0, r1, #0, 4
 860:	04cc1000 	strbeq	r1, [ip], #0
 864:	37010000 	strcc	r0, [r1, -r0]
 868:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
 86c:	00000050 	andeq	r0, r0, r0, asr r0
 870:	06429c01 	strbeq	r9, [r2], -r1, lsl #24
 874:	3e160000 	cdpcc	0, 1, cr0, cr6, cr0, {0}
 878:	01000003 	tsteq	r0, r3
 87c:	0005a837 	andeq	sl, r5, r7, lsr r8
 880:	4c910200 	lfmmi	f0, 4, [r1], {0}
 884:	01006311 	tsteq	r0, r1, lsl r3
 888:	00003337 	andeq	r3, r0, r7, lsr r3
 88c:	4b910200 	blmi	fe441094 <ball+0xde4400fc>
 890:	0003f914 	andeq	pc, r3, r4, lsl r9	; <UNPREDICTABLE>
 894:	42380100 	eorsmi	r0, r8, #0, 2
 898:	02000006 	andeq	r0, r0, #6
 89c:	1a005091 	bne	14ae8 <startup-0x1ffeb518>
 8a0:	0000004c 	andeq	r0, r0, ip, asr #32
 8a4:	00000652 	andeq	r0, r0, r2, asr r6
 8a8:	0006521b 	andeq	r5, r6, fp, lsl r2
 8ac:	02000f00 	andeq	r0, r0, #0, 30
 8b0:	00e80704 	rsceq	r0, r8, r4, lsl #14
 8b4:	dd150000 	ldcle	0, cr0, [r5, #-0]
 8b8:	01000002 	tsteq	r0, r2
 8bc:	00003324 	andeq	r3, r0, r4, lsr #6
 8c0:	00012000 	andeq	r2, r1, r0
 8c4:	00009020 	andeq	r9, r0, r0, lsr #32
 8c8:	9d9c0100 	ldflss	f0, [ip]
 8cc:	14000006 	strne	r0, [r0], #-6
 8d0:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 8d4:	069d2501 	ldreq	r2, [sp], r1, lsl #10
 8d8:	91020000 	mrsls	r0, (UNDEF: 2)
 8dc:	6f72125c 	svcvs	0x0072125c
 8e0:	2b010077 	blcs	40ac4 <startup-0x1ffbf53c>
 8e4:	00000033 	andeq	r0, r0, r3, lsr r0
 8e8:	126f9102 	rsbne	r9, pc, #-2147483648	; 0x80000000
 8ec:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 8f0:	00332b01 	eorseq	r2, r3, r1, lsl #22
 8f4:	91020000 	mrsls	r0, (UNDEF: 2)
 8f8:	331a006e 	tstcc	sl, #110	; 0x6e
 8fc:	ad000000 	stcge	0, cr0, [r0, #-0]
 900:	1b000006 	blne	920 <startup-0x1ffff6e0>
 904:	00000652 	andeq	r0, r0, r2, asr r6
 908:	f010000f 			; <UNDEFINED> instruction: 0xf010000f
 90c:	01000001 	tsteq	r0, r1
 910:	0000bc16 	andeq	fp, r0, r6, lsl ip
 914:	00006420 	andeq	r6, r0, r0, lsr #8
 918:	d19c0100 	orrsle	r0, ip, r0, lsl #2
 91c:	16000006 	strne	r0, [r0], -r6
 920:	0000033e 	andeq	r0, r0, lr, lsr r3
 924:	05a81601 	streq	r1, [r8, #1537]!	; 0x601
 928:	91020000 	mrsls	r0, (UNDEF: 2)
 92c:	d71c0074 			; <UNDEFINED> instruction: 0xd71c0074
 930:	01000003 	tsteq	r0, r3
 934:	00005805 	andeq	r5, r0, r5, lsl #16
 938:	00006420 	andeq	r6, r0, r0, lsr #8
 93c:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 940:	0000033e 	andeq	r0, r0, lr, lsr r3
 944:	05a80501 	streq	r0, [r8, #1281]!	; 0x501
 948:	91020000 	mrsls	r0, (UNDEF: 2)
 94c:	c0000074 	andgt	r0, r0, r4, ror r0
 950:	04000002 	streq	r0, [r0], #-2
 954:	00030400 	andeq	r0, r3, r0, lsl #8
 958:	41010400 	tstmi	r1, r0, lsl #8
 95c:	0c000000 	stceq	0, cr0, [r0], {-0}
 960:	00000512 	andeq	r0, r0, r2, lsl r5
 964:	20000b8c 	andcs	r0, r0, ip, lsl #23
 968:	00000188 	andeq	r0, r0, r8, lsl #3
 96c:	00000364 	andeq	r0, r0, r4, ror #6
 970:	00015602 	andeq	r5, r1, r2, lsl #12
 974:	06020200 	streq	r0, [r2], -r0, lsl #4
 978:	00000042 	andeq	r0, r0, r2, asr #32
 97c:	02007803 	andeq	r7, r0, #196608	; 0x30000
 980:	00004207 	andeq	r4, r0, r7, lsl #4
 984:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 988:	42080200 	andmi	r0, r8, #0, 4
 98c:	01000000 	mrseq	r0, (UNDEF: 0)
 990:	08010400 	stmdaeq	r1, {sl}
 994:	00000143 	andeq	r0, r0, r3, asr #2
 998:	00010a05 	andeq	r0, r1, r5, lsl #20
 99c:	21090200 	mrscs	r0, R9_fiq
 9a0:	02000000 	andeq	r0, r0, #0
 9a4:	000000de 	ldrdeq	r0, [r0], -lr
 9a8:	900b0234 	andls	r0, fp, r4, lsr r2
 9ac:	06000000 	streq	r0, [r0], -r0
 9b0:	00000139 	andeq	r0, r0, r9, lsr r1
 9b4:	00900c02 	addseq	r0, r0, r2, lsl #24
 9b8:	06000000 	streq	r0, [r0], -r0
 9bc:	0000012d 	andeq	r0, r0, sp, lsr #2
 9c0:	00900d02 	addseq	r0, r0, r2, lsl #26
 9c4:	06040000 	streq	r0, [r4], -r0
 9c8:	00000133 	andeq	r0, r0, r3, lsr r1
 9cc:	00900e02 	addseq	r0, r0, r2, lsl #28
 9d0:	03080000 	movweq	r0, #32768	; 0x8000
 9d4:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 9d8:	0000970f 	andeq	r9, r0, pc, lsl #14
 9dc:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 9e0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 9e4:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 9e8:	a7000000 	strge	r0, [r0, -r0]
 9ec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 9f0:	000000a7 	andeq	r0, r0, r7, lsr #1
 9f4:	04040013 	streq	r0, [r4], #-19	; 0xffffffed
 9f8:	0000e807 	andeq	lr, r0, r7, lsl #16
 9fc:	01010500 	tsteq	r1, r0, lsl #10
 a00:	10020000 	andne	r0, r2, r0
 a04:	00000054 	andeq	r0, r0, r4, asr r0
 a08:	00010005 	andeq	r0, r1, r5
 a0c:	c4100200 	ldrgt	r0, [r0], #-512	; 0xfffffe00
 a10:	0a000000 	beq	a18 <startup-0x1ffff5e8>
 a14:	00005404 	andeq	r5, r0, r4, lsl #8
 a18:	01950200 	orrseq	r0, r5, r0, lsl #4
 a1c:	02240000 	eoreq	r0, r4, #0
 a20:	00014312 	andeq	r4, r1, r2, lsl r3
 a24:	65670300 	strbvs	r0, [r7, #-768]!	; 0xfffffd00
 a28:	1302006f 	movwne	r0, #8303	; 0x206f
 a2c:	000000b9 	strheq	r0, [r0], -r9
 a30:	01230600 			; <UNDEFINED> instruction: 0x01230600
 a34:	14020000 	strne	r0, [r2], #-0
 a38:	00000090 	muleq	r0, r0, r0
 a3c:	01280604 			; <UNDEFINED> instruction: 0x01280604
 a40:	14020000 	strne	r0, [r2], #-0
 a44:	00000090 	muleq	r0, r0, r0
 a48:	00000608 	andeq	r0, r0, r8, lsl #12
 a4c:	15020000 	strne	r0, [r2, #-0]
 a50:	00000090 	muleq	r0, r0, r0
 a54:	0110060c 	tsteq	r0, ip, lsl #12
 a58:	15020000 	strne	r0, [r2, #-0]
 a5c:	00000090 	muleq	r0, r0, r0
 a60:	019a0610 	orrseq	r0, sl, r0, lsl r6
 a64:	16020000 	strne	r0, [r2], -r0
 a68:	00000154 	andeq	r0, r0, r4, asr r1
 a6c:	032a0614 			; <UNDEFINED> instruction: 0x032a0614
 a70:	17020000 	strne	r0, [r2, -r0]
 a74:	00000154 	andeq	r0, r0, r4, asr r1
 a78:	01c70618 	biceq	r0, r7, r8, lsl r6
 a7c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
 a80:	00000154 	andeq	r0, r0, r4, asr r1
 a84:	019f061c 	orrseq	r0, pc, ip, lsl r6	; <UNPREDICTABLE>
 a88:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
 a8c:	0000016f 	andeq	r0, r0, pc, ror #2
 a90:	4e0b0020 	cdpmi	0, 0, cr0, cr11, cr0, {1}
 a94:	0c000001 	stceq	0, cr0, [r0], {1}
 a98:	0000014e 	andeq	r0, r0, lr, asr #2
 a9c:	ca040a00 	bgt	1032a4 <startup-0x1fefcd5c>
 aa0:	0a000000 	beq	aa8 <startup-0x1ffff558>
 aa4:	00014304 	andeq	r4, r1, r4, lsl #6
 aa8:	016f0b00 	cmneq	pc, r0, lsl #22
 aac:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
 ab0:	0c000001 	stceq	0, cr0, [r0], {1}
 ab4:	00000090 	muleq	r0, r0, r0
 ab8:	0000900c 	andeq	r9, r0, ip
 abc:	040a0000 	streq	r0, [sl], #-0
 ac0:	0000015a 	andeq	r0, r0, sl, asr r1
 ac4:	0001c005 	andeq	ip, r1, r5
 ac8:	ca1a0200 	bgt	6812d0 <startup-0x1f97ed30>
 acc:	05000000 	streq	r0, [r0, #-0]
 ad0:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
 ad4:	014e1a02 	cmpeq	lr, r2, lsl #20
 ad8:	a90d0000 	stmdbge	sp, {}	; <UNPREDICTABLE>
 adc:	02000001 	andeq	r0, r0, #1
 ae0:	0000ae1c 	andeq	sl, r0, ip, lsl lr
 ae4:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
 ae8:	0d20000f 	stceq	0, cr0, [r0, #-60]!	; 0xffffffc4
 aec:	000000d9 	ldrdeq	r0, [r0], -r9
 af0:	01752d02 	cmneq	r5, r2, lsl #26
 af4:	03050000 	movweq	r0, #20480	; 0x5000
 af8:	20000f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
 afc:	0005720e 	andeq	r7, r5, lr, lsl #4
 b00:	641c0100 	ldrvs	r0, [ip], #-256	; 0xffffff00
 b04:	b020000c 	eorlt	r0, r0, ip
 b08:	01000000 	mrseq	r0, (UNDEF: 0)
 b0c:	0001eb9c 	muleq	r1, ip, fp
 b10:	006f0f00 	rsbeq	r0, pc, r0, lsl #30
 b14:	01801c01 	orreq	r1, r0, r1, lsl #24
 b18:	91020000 	mrsls	r0, (UNDEF: 2)
 b1c:	05680d6c 	strbeq	r0, [r8, #-3436]!	; 0xfffff294
 b20:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
 b24:	00000042 	andeq	r0, r0, r2, asr #32
 b28:	0d779102 	ldfeqp	f1, [r7, #-8]!
 b2c:	0000056d 	andeq	r0, r0, sp, ror #10
 b30:	00421e01 	subeq	r1, r2, r1, lsl #28
 b34:	91020000 	mrsls	r0, (UNDEF: 2)
 b38:	5b0e0076 	blpl	380d18 <startup-0x1fc7f2e8>
 b3c:	01000005 	tsteq	r0, r5
 b40:	000c0812 	andeq	r0, ip, r2, lsl r8
 b44:	00005c20 	andeq	r5, r0, r0, lsr #24
 b48:	3a9c0100 	bcc	fe700f50 <ball+0xde6fffb8>
 b4c:	0f000002 	svceq	0x00000002
 b50:	1201006f 	andne	r0, r1, #111	; 0x6f
 b54:	00000180 	andeq	r0, r0, r0, lsl #3
 b58:	106c9102 	rsbne	r9, ip, r2, lsl #2
 b5c:	20000c10 	andcs	r0, r0, r0, lsl ip
 b60:	0000004c 	andeq	r0, r0, ip, asr #32
 b64:	01006911 	tsteq	r0, r1, lsl r9
 b68:	00009013 	andeq	r9, r0, r3, lsl r0
 b6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 b70:	000c1610 	andeq	r1, ip, r0, lsl r6
 b74:	00003420 	andeq	r3, r0, r0, lsr #8
 b78:	01d31200 	bicseq	r1, r3, r0, lsl #4
 b7c:	0a010000 	beq	40b84 <startup-0x1ffbf47c>
 b80:	00000090 	muleq	r0, r0, r0
 b84:	00000013 	andeq	r0, r0, r3, lsl r0
 b88:	054f0e00 	strbeq	r0, [pc, #-3584]	; fffffd90 <ball+0xdfffedf8>
 b8c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
 b90:	20000bac 	andcs	r0, r0, ip, lsr #23
 b94:	0000005c 	andeq	r0, r0, ip, asr r0
 b98:	02899c01 	addeq	r9, r9, #256	; 0x100
 b9c:	6f0f0000 	svcvs	0x000f0000
 ba0:	80080100 	andhi	r0, r8, r0, lsl #2
 ba4:	02000001 	andeq	r0, r0, #1
 ba8:	b4106c91 	ldrlt	r6, [r0], #-3217	; 0xfffff36f
 bac:	4c20000b 	stcmi	0, cr0, [r0], #-44	; 0xffffffd4
 bb0:	11000000 	mrsne	r0, (UNDEF: 0)
 bb4:	09010069 	stmdbeq	r1, {r0, r3, r5, r6}
 bb8:	00000090 	muleq	r0, r0, r0
 bbc:	10749102 	rsbsne	r9, r4, r2, lsl #2
 bc0:	20000bba 			; <UNDEFINED> instruction: 0x20000bba
 bc4:	00000034 	andeq	r0, r0, r4, lsr r0
 bc8:	0001d312 	andeq	sp, r1, r2, lsl r3
 bcc:	900a0100 	andls	r0, sl, r0, lsl #2
 bd0:	13000000 	movwne	r0, #0
 bd4:	00000000 	andeq	r0, r0, r0
 bd8:	00050114 	andeq	r0, r5, r4, lsl r1
 bdc:	8c030100 	stfhis	f0, [r3], {-0}
 be0:	2020000b 	eorcs	r0, r0, fp
 be4:	01000000 	mrseq	r0, (UNDEF: 0)
 be8:	006f0f9c 	mlseq	pc, ip, pc, r0	; <UNPREDICTABLE>
 bec:	01800301 	orreq	r0, r0, r1, lsl #6
 bf0:	91020000 	mrsls	r0, (UNDEF: 2)
 bf4:	04f31574 	ldrbteq	r1, [r3], #1396	; 0x574
 bf8:	03010000 	movweq	r0, #4096	; 0x1000
 bfc:	00000090 	muleq	r0, r0, r0
 c00:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
 c04:	000004fa 	strdeq	r0, [r0], -sl
 c08:	00900301 	addseq	r0, r0, r1, lsl #6
 c0c:	91020000 	mrsls	r0, (UNDEF: 2)
 c10:	5a00006c 	bpl	dc8 <startup-0x1ffff238>
 c14:	04000001 	streq	r0, [r0], #-1
 c18:	00041e00 	andeq	r1, r4, r0, lsl #28
 c1c:	41010400 	tstmi	r1, r0, lsl #8
 c20:	0c000000 	stceq	0, cr0, [r0], {-0}
 c24:	0000057e 	andeq	r0, r0, lr, ror r5
 c28:	20000d14 	andcs	r0, r0, r4, lsl sp
 c2c:	000000de 	ldrdeq	r0, [r0], -lr
 c30:	0000043f 	andeq	r0, r0, pc, lsr r4
 c34:	45060102 	strmi	r0, [r6, #-258]	; 0xfffffefe
 c38:	02000001 	andeq	r0, r0, #1
 c3c:	01430801 	cmpeq	r3, r1, lsl #16
 c40:	02020000 	andeq	r0, r2, #0
 c44:	0000f605 	andeq	pc, r0, r5, lsl #12
 c48:	07020200 	streq	r0, [r2, -r0, lsl #4]
 c4c:	00000179 	andeq	r0, r0, r9, ror r1
 c50:	1a050402 	bne	141c60 <startup-0x1febe3a0>
 c54:	03000001 	movweq	r0, #1
 c58:	00000216 	andeq	r0, r0, r6, lsl r2
 c5c:	004f4f02 	subeq	r4, pc, r2, lsl #30
 c60:	04020000 	streq	r0, [r2], #-0
 c64:	00016207 	andeq	r6, r1, r7, lsl #4
 c68:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
 c6c:	00000115 	andeq	r0, r0, r5, lsl r1
 c70:	5d070802 	stcpl	8, cr0, [r7, #-8]
 c74:	04000001 	streq	r0, [r0], #-1
 c78:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 c7c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 c80:	00016707 	andeq	r6, r1, r7, lsl #14
 c84:	02180300 	andseq	r0, r8, #0, 6
 c88:	30030000 	andcc	r0, r3, r0
 c8c:	00000044 	andeq	r0, r0, r4, asr #32
 c90:	07041005 	streq	r1, [r4, -r5]
 c94:	000000b6 	strheq	r0, [r0], -r6
 c98:	0005d606 	andeq	sp, r5, r6, lsl #12
 c9c:	72080400 	andvc	r0, r8, #0, 8
 ca0:	00000000 	andeq	r0, r0, r0
 ca4:	0005df06 	andeq	sp, r5, r6, lsl #30
 ca8:	72090400 	andvc	r0, r9, #0, 8
 cac:	04000000 	streq	r0, [r0], #-0
 cb0:	0005ce06 	andeq	ip, r5, r6, lsl #28
 cb4:	720a0400 	andvc	r0, sl, #0, 8
 cb8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 cbc:	0005c406 	andeq	ip, r5, r6, lsl #8
 cc0:	720b0400 	andvc	r0, fp, #0, 8
 cc4:	0c000000 	stceq	0, cr0, [r0], {-0}
 cc8:	05bc0300 	ldreq	r0, [ip, #768]!	; 0x300
 ccc:	0c040000 	stceq	0, cr0, [r4], {-0}
 cd0:	0000007d 	andeq	r0, r0, sp, ror r0
 cd4:	00060707 	andeq	r0, r6, r7, lsl #14
 cd8:	aa5e0100 	bge	17810e0 <startup-0x1e87ef20>
 cdc:	4820000d 	stmdami	r0!, {r0, r2, r3}
 ce0:	01000000 	mrseq	r0, (UNDEF: 0)
 ce4:	0000fe9c 	muleq	r0, ip, lr
 ce8:	736d0800 	cmnvc	sp, #0, 16
 cec:	6b5e0100 	blvs	17810f4 <startup-0x1e87ef0c>
 cf0:	02000000 	andeq	r0, r0, #0
 cf4:	00096c91 	muleq	r9, r1, ip
 cf8:	01000006 	tsteq	r0, r6
 cfc:	00006b65 	andeq	r6, r0, r5, ror #22
 d00:	70910200 	addsvc	r0, r1, r0, lsl #4
 d04:	0100690a 	tsteq	r0, sl, lsl #18
 d08:	00006b66 	andeq	r6, r0, r6, ror #22
 d0c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 d10:	05e80700 	strbeq	r0, [r8, #1792]!	; 0x700
 d14:	45010000 	strmi	r0, [r1, #-0]
 d18:	20000d66 	andcs	r0, r0, r6, ror #26
 d1c:	00000044 	andeq	r0, r0, r4, asr #32
 d20:	013b9c01 	teqeq	fp, r1, lsl #24
 d24:	75080000 	strvc	r0, [r8, #-0]
 d28:	45010073 	strmi	r0, [r1, #-115]	; 0xffffff8d
 d2c:	0000006b 	andeq	r0, r0, fp, rrx
 d30:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
 d34:	00000600 	andeq	r0, r0, r0, lsl #12
 d38:	006b4c01 	rsbeq	r4, fp, r1, lsl #24
 d3c:	91020000 	mrsls	r0, (UNDEF: 2)
 d40:	00690a70 	rsbeq	r0, r9, r0, ror sl
 d44:	006b4d01 	rsbeq	r4, fp, r1, lsl #26
 d48:	91020000 	mrsls	r0, (UNDEF: 2)
 d4c:	130b0074 	movwne	r0, #45172	; 0xb074
 d50:	01000006 	tsteq	r0, r6
 d54:	000d5435 	andeq	r5, sp, r5, lsr r4
 d58:	00001220 	andeq	r1, r0, r0, lsr #4
 d5c:	0c9c0100 	ldfeqs	f0, [ip], {0}
 d60:	000005f4 	strdeq	r0, [r0], -r4
 d64:	0d140701 	ldceq	7, cr0, [r4, #-4]
 d68:	00402000 	subeq	r2, r0, r0
 d6c:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b0b0e03 	bleq	2c3828 <startup-0x1fd3c7d8>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001301 	andeq	r1, r0, r1, lsl #6
  20:	03000d03 	movweq	r0, #3331	; 0xd03
  24:	3b0b3a08 	blcc	2ce84c <startup-0x1fd317b4>
  28:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  2c:	0400000b 	streq	r0, [r0], #-11
  30:	0b0b0024 	bleq	2c00c8 <startup-0x1fd3ff38>
  34:	0e030b3e 	vmoveq.16	d3[0], r0
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  98:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  9c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  a0:	0b3a0e03 	bleq	e838b4 <startup-0x1f17c74c>
  a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  a8:	01111349 	tsteq	r1, r9, asr #6
  ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b4:	0f000013 	svceq	0x00000013
  b8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	34100000 	ldrcc	r0, [r0], #-0
  c8:	3a080300 	bcc	200cd0 <startup-0x1fdff330>
  cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d0:	00180213 	andseq	r0, r8, r3, lsl r2
  d4:	002e1100 	eoreq	r1, lr, r0, lsl #2
  d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  dc:	0b3b0b3a 	bleq	ec2dcc <startup-0x1f13d234>
  e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  e4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  e8:	12000019 	andne	r0, r0, #25
  ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  f0:	0b3a0e03 	bleq	e83904 <startup-0x1f17c6fc>
  f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 100:	00000019 	andeq	r0, r0, r9, lsl r0
 104:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 108:	030b130e 	movweq	r1, #45838	; 0xb30e
 10c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 110:	00171006 	andseq	r1, r7, r6
 114:	00240200 	eoreq	r0, r4, r0, lsl #4
 118:	0b3e0b0b 	bleq	f82d4c <startup-0x1f07d2b4>
 11c:	00000e03 	andeq	r0, r0, r3, lsl #28
 120:	03001603 	movweq	r1, #1539	; 0x603
 124:	3b0b3a0e 	blcc	2ce964 <startup-0x1fd3169c>
 128:	0013490b 	andseq	r4, r3, fp, lsl #18
 12c:	00240400 	eoreq	r0, r4, r0, lsl #8
 130:	0b3e0b0b 	bleq	f82d64 <startup-0x1f07d29c>
 134:	00000803 	andeq	r0, r0, r3, lsl #16
 138:	0b011305 	bleq	44d54 <startup-0x1ffbb2ac>
 13c:	3b0b3a0b 	blcc	2ce970 <startup-0x1fd31690>
 140:	0013010b 	andseq	r0, r3, fp, lsl #2
 144:	000d0600 	andeq	r0, sp, r0, lsl #12
 148:	0b3a0e03 	bleq	e8395c <startup-0x1f17c6a4>
 14c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 150:	00000b38 	andeq	r0, r0, r8, lsr fp
 154:	3f012e07 	svccc	0x00012e07
 158:	3a0e0319 	bcc	380dc4 <startup-0x1fc7f23c>
 15c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 160:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 164:	96184006 	ldrls	r4, [r8], -r6
 168:	13011942 	movwne	r1, #6466	; 0x1942
 16c:	05080000 	streq	r0, [r8, #-0]
 170:	3a080300 	bcc	200d78 <startup-0x1fdff288>
 174:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	00180213 	andseq	r0, r8, r3, lsl r2
 17c:	00340900 	eorseq	r0, r4, r0, lsl #18
 180:	0b3a0e03 	bleq	e83994 <startup-0x1f17c66c>
 184:	1349053b 	movtne	r0, #38203	; 0x953b
 188:	00001802 	andeq	r1, r0, r2, lsl #16
 18c:	3f002e0a 	svccc	0x00002e0a
 190:	3a0e0319 	bcc	380dfc <startup-0x1fc7f204>
 194:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 198:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 19c:	97184006 	ldrls	r4, [r8, -r6]
 1a0:	00001942 	andeq	r1, r0, r2, asr #18
 1a4:	0300340b 	movweq	r3, #1035	; 0x40b
 1a8:	3b0b3a08 	blcc	2ce9d0 <startup-0x1fd31630>
 1ac:	02134905 	andseq	r4, r3, #81920	; 0x14000
 1b0:	0c000018 	stceq	0, cr0, [r0], {24}
 1b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1b8:	0b3a0e03 	bleq	e839cc <startup-0x1f17c634>
 1bc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 1c0:	01111349 	tsteq	r1, r9, asr #6
 1c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1cc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 1d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1dc:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 1e0:	03193f00 	tsteq	r9, #0, 30
 1e4:	3b0b3a0e 	blcc	2cea24 <startup-0x1fd315dc>
 1e8:	11192705 	tstne	r9, r5, lsl #14
 1ec:	40061201 	andmi	r1, r6, r1, lsl #4
 1f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1f4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 1f8:	03193f01 	tsteq	r9, #1, 30
 1fc:	3b0b3a0e 	blcc	2cea3c <startup-0x1fd315c4>
 200:	11192705 	tstne	r9, r5, lsl #14
 204:	40061201 	andmi	r1, r6, r1, lsl #4
 208:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 20c:	00001301 	andeq	r1, r0, r1, lsl #6
 210:	3f012e10 	svccc	0x00012e10
 214:	3a0e0319 	bcc	380e80 <startup-0x1fc7f180>
 218:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 21c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 220:	97184006 	ldrls	r4, [r8, -r6]
 224:	13011942 	movwne	r1, #6466	; 0x1942
 228:	05110000 	ldreq	r0, [r1, #-0]
 22c:	3a080300 	bcc	200e34 <startup-0x1fdff1cc>
 230:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 234:	00180213 	andseq	r0, r8, r3, lsl r2
 238:	00341200 	eorseq	r1, r4, r0, lsl #4
 23c:	0b3a0803 	bleq	e82250 <startup-0x1f17ddb0>
 240:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 244:	00001802 	andeq	r1, r0, r2, lsl #16
 248:	3f012e13 	svccc	0x00012e13
 24c:	3a0e0319 	bcc	380eb8 <startup-0x1fc7f148>
 250:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 254:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 258:	96184006 	ldrls	r4, [r8], -r6
 25c:	13011942 	movwne	r1, #6466	; 0x1942
 260:	34140000 	ldrcc	r0, [r4], #-0
 264:	3a0e0300 	bcc	380e6c <startup-0x1fc7f194>
 268:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 26c:	00180213 	andseq	r0, r8, r3, lsl r2
 270:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 274:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	13491927 	movtne	r1, #39207	; 0x9927
 280:	06120111 			; <UNDEFINED> instruction: 0x06120111
 284:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 288:	00130119 	andseq	r0, r3, r9, lsl r1
 28c:	00051600 	andeq	r1, r5, r0, lsl #12
 290:	0b3a0e03 	bleq	e83aa4 <startup-0x1f17c55c>
 294:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 298:	00001802 	andeq	r1, r0, r2, lsl #16
 29c:	3f002e17 	svccc	0x00002e17
 2a0:	3a0e0319 	bcc	380f0c <startup-0x1fc7f0f4>
 2a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2ac:	96184006 	ldrls	r4, [r8], -r6
 2b0:	00001942 	andeq	r1, r0, r2, asr #18
 2b4:	3f012e18 	svccc	0x00012e18
 2b8:	3a0e0319 	bcc	380f24 <startup-0x1fc7f0dc>
 2bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2c0:	11134919 	tstne	r3, r9, lsl r9
 2c4:	40061201 	andmi	r1, r6, r1, lsl #4
 2c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2cc:	00001301 	andeq	r1, r0, r1, lsl #6
 2d0:	0b000f19 	bleq	3f3c <startup-0x1fffc0c4>
 2d4:	0013490b 	andseq	r4, r3, fp, lsl #18
 2d8:	01011a00 	tsteq	r1, r0, lsl #20
 2dc:	13011349 	movwne	r1, #4937	; 0x1349
 2e0:	211b0000 	tstcs	fp, r0
 2e4:	2f134900 	svccs	0x00134900
 2e8:	1c00000b 	stcne	0, cr0, [r0], {11}
 2ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2f0:	0b3a0e03 	bleq	e83b04 <startup-0x1f17c4fc>
 2f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 300:	00000019 	andeq	r0, r0, r9, lsl r0
 304:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 308:	030b130e 	movweq	r1, #45838	; 0xb30e
 30c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 310:	00171006 	andseq	r1, r7, r6
 314:	01130200 	tsteq	r3, r0, lsl #4
 318:	0b0b0e03 	bleq	2c3b2c <startup-0x1fd3c4d4>
 31c:	0b3b0b3a 	bleq	ec300c <startup-0x1f13cff4>
 320:	00001301 	andeq	r1, r0, r1, lsl #6
 324:	03000d03 	movweq	r0, #3331	; 0xd03
 328:	3b0b3a08 	blcc	2ceb50 <startup-0x1fd314b0>
 32c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 330:	0400000b 	streq	r0, [r0], #-11
 334:	0b0b0024 	bleq	2c03cc <startup-0x1fd3fc34>
 338:	0e030b3e 	vmoveq.16	d3[0], r0
 33c:	16050000 	strne	r0, [r5], -r0
 340:	3a0e0300 	bcc	380f48 <startup-0x1fc7f0b8>
 344:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 348:	06000013 			; <UNDEFINED> instruction: 0x06000013
 34c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 350:	0b3b0b3a 	bleq	ec3040 <startup-0x1f13cfc0>
 354:	0b381349 	bleq	e05080 <startup-0x1f1faf80>
 358:	24070000 	strcs	r0, [r7], #-0
 35c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 360:	0008030b 	andeq	r0, r8, fp, lsl #6
 364:	01010800 	tsteq	r1, r0, lsl #16
 368:	13011349 	movwne	r1, #4937	; 0x1349
 36c:	21090000 	mrscs	r0, (UNDEF: 9)
 370:	2f134900 	svccs	0x00134900
 374:	0a00000b 	beq	3a8 <startup-0x1ffffc58>
 378:	0b0b000f 	bleq	2c03bc <startup-0x1fd3fc44>
 37c:	00001349 	andeq	r1, r0, r9, asr #6
 380:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 384:	00130119 	andseq	r0, r3, r9, lsl r1
 388:	00050c00 	andeq	r0, r5, r0, lsl #24
 38c:	00001349 	andeq	r1, r0, r9, asr #6
 390:	0300340d 	movweq	r3, #1037	; 0x40d
 394:	3b0b3a0e 	blcc	2cebd4 <startup-0x1fd3142c>
 398:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 39c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 3a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3a4:	0b3a0e03 	bleq	e83bb8 <startup-0x1f17c448>
 3a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3b4:	00130119 	andseq	r0, r3, r9, lsl r1
 3b8:	00050f00 	andeq	r0, r5, r0, lsl #30
 3bc:	0b3a0803 	bleq	e823d0 <startup-0x1f17dc30>
 3c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3c4:	00001802 	andeq	r1, r0, r2, lsl #16
 3c8:	11010b10 	tstne	r1, r0, lsl fp
 3cc:	00061201 	andeq	r1, r6, r1, lsl #4
 3d0:	00341100 	eorseq	r1, r4, r0, lsl #2
 3d4:	0b3a0803 	bleq	e823e8 <startup-0x1f17dc18>
 3d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3dc:	00001802 	andeq	r1, r0, r2, lsl #16
 3e0:	3f012e12 	svccc	0x00012e12
 3e4:	3a0e0319 	bcc	381050 <startup-0x1fc7efb0>
 3e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3ec:	00193c13 	andseq	r3, r9, r3, lsl ip
 3f0:	00181300 	andseq	r1, r8, r0, lsl #6
 3f4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 3f8:	03193f01 	tsteq	r9, #1, 30
 3fc:	3b0b3a0e 	blcc	2cec3c <startup-0x1fd313c4>
 400:	1119270b 	tstne	r9, fp, lsl #14
 404:	40061201 	andmi	r1, r6, r1, lsl #4
 408:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 40c:	05150000 	ldreq	r0, [r5, #-0]
 410:	3a0e0300 	bcc	381018 <startup-0x1fc7efe8>
 414:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 418:	00180213 	andseq	r0, r8, r3, lsl r2
 41c:	11010000 	mrsne	r0, (UNDEF: 1)
 420:	130e2501 	movwne	r2, #58625	; 0xe501
 424:	110e030b 	tstne	lr, fp, lsl #6
 428:	10061201 	andne	r1, r6, r1, lsl #4
 42c:	02000017 	andeq	r0, r0, #23
 430:	0b0b0024 	bleq	2c04c8 <startup-0x1fd3fb38>
 434:	0e030b3e 	vmoveq.16	d3[0], r0
 438:	16030000 	strne	r0, [r3], -r0
 43c:	3a0e0300 	bcc	381044 <startup-0x1fc7efbc>
 440:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 444:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 448:	0b0b0024 	bleq	2c04e0 <startup-0x1fd3fb20>
 44c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 450:	13050000 	movwne	r0, #20480	; 0x5000
 454:	3a0b0b01 	bcc	2c3060 <startup-0x1fd3cfa0>
 458:	010b3b0b 	tsteq	fp, fp, lsl #22
 45c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 460:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 464:	0b3b0b3a 	bleq	ec3154 <startup-0x1f13ceac>
 468:	0b381349 	bleq	e05194 <startup-0x1f1fae6c>
 46c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 470:	03193f01 	tsteq	r9, #1, 30
 474:	3b0b3a0e 	blcc	2cecb4 <startup-0x1fd3134c>
 478:	1119270b 	tstne	r9, fp, lsl #14
 47c:	40061201 	andmi	r1, r6, r1, lsl #4
 480:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 484:	00001301 	andeq	r1, r0, r1, lsl #6
 488:	03000508 	movweq	r0, #1288	; 0x508
 48c:	3b0b3a08 	blcc	2cecb4 <startup-0x1fd3134c>
 490:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 494:	09000018 	stmdbeq	r0, {r3, r4}
 498:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 49c:	0b3b0b3a 	bleq	ec318c <startup-0x1f13ce74>
 4a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4a4:	340a0000 	strcc	r0, [sl], #-0
 4a8:	3a080300 	bcc	2010b0 <startup-0x1fdfef50>
 4ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4b0:	00180213 	andseq	r0, r8, r3, lsl r2
 4b4:	002e0b00 	eoreq	r0, lr, r0, lsl #22
 4b8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4bc:	0b3b0b3a 	bleq	ec31ac <startup-0x1f13ce54>
 4c0:	01111927 	tsteq	r1, r7, lsr #18
 4c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c8:	00194296 	mulseq	r9, r6, r2
 4cc:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 4d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4d4:	0b3b0b3a 	bleq	ec31c4 <startup-0x1f13ce3c>
 4d8:	01111927 	tsteq	r1, r7, lsr #18
 4dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4e0:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000048 	andeq	r0, r0, r8, asr #32
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	025d0002 	subseq	r0, sp, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000058 	andcs	r0, r0, r8, asr r0
  3c:	00000b34 	andeq	r0, r0, r4, lsr fp
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	094f0002 	stmdbeq	pc, {r1}^	; <UNPREDICTABLE>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000b8c 	andcs	r0, r0, ip, lsl #23
  5c:	00000188 	andeq	r0, r0, r8, lsl #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0c130002 	ldceq	0, cr0, [r3], {2}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000d14 	andcs	r0, r0, r4, lsl sp
  7c:	000000de 	ldrdeq	r0, [r0], -lr
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000058 	andcs	r0, r0, r8, asr r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000009c 	muleq	r0, ip, r0
   4:	00600002 	rsbeq	r0, r0, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	45010000 	strmi	r0, [r1, #-0]
  1c:	41442f3a 	cmpmi	r4, sl, lsr pc
  20:	37313054 			; <UNDEFINED> instruction: 0x37313054
  24:	646f432f 	strbtvs	r4, [pc], #-815	; 2c <startup-0x1fffffd4>
  28:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  2c:	69662065 	stmdbvs	r6!, {r0, r2, r5, r6, sp}^
  30:	2f73656c 	svccs	0x0073656c
  34:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  38:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  3c:	6f697461 	svcvs	0x00697461
  40:	2f72656e 	svccs	0x0072656e
  44:	6f747561 	svcvs	0x00747561
  48:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	67000001 	strvs	r0, [r0, -r1]
  5c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  60:	2e797274 	mrccs	2, 3, r7, cr9, cr4, {3}
  64:	00010068 	andeq	r0, r1, r8, rrx
  68:	05000000 	streq	r0, [r0, #-0]
  6c:	00000002 	andeq	r0, r0, r2
  70:	010b0320 	tsteq	fp, r0, lsr #6
  74:	03025e13 	movweq	r5, #11795	; 0x2e13
  78:	00010100 	andeq	r0, r1, r0, lsl #2
  7c:	00100205 	andseq	r0, r0, r5, lsl #4
  80:	15032000 	strne	r2, [r3, #-0]
  84:	3f2f2f01 	svccc	0x002f2f01
  88:	322f2f59 	eorcc	r2, pc, #356	; 0x164
  8c:	01040200 	mrseq	r0, R12_usr
  90:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
  94:	02005901 	andeq	r5, r0, #16384	; 0x4000
  98:	023b0104 	eorseq	r0, fp, #4, 2
  9c:	01010004 	tsteq	r1, r4
  a0:	000002c0 	andeq	r0, r0, r0, asr #5
  a4:	00f40002 	rscseq	r0, r4, r2
  a8:	01020000 	mrseq	r0, (UNDEF: 2)
  ac:	000d0efb 	strdeq	r0, [sp], -fp
  b0:	01010101 	tsteq	r1, r1, lsl #2
  b4:	01000000 	mrseq	r0, (UNDEF: 0)
  b8:	45010000 	strmi	r0, [r1, #-0]
  bc:	41442f3a 	cmpmi	r4, sl, lsr pc
  c0:	37313054 			; <UNDEFINED> instruction: 0x37313054
  c4:	646f432f 	strbtvs	r4, [pc], #-815	; cc <startup-0x1fffff34>
  c8:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  cc:	69662065 	stmdbvs	r6!, {r0, r2, r5, r6, sp}^
  d0:	2f73656c 	svccs	0x0073656c
  d4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  d8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  dc:	6f697461 	svcvs	0x00697461
  e0:	2f72656e 	svccs	0x0072656e
  e4:	6f747561 	svcvs	0x00747561
  e8:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  ec:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  f0:	61657363 	cmnvs	r5, r3, ror #6
  f4:	635c7070 	cmpvs	ip, #112	; 0x70
  f8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  fc:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 100:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ffffff38 <ball+0xdfffefa0>
 104:	63675c73 	cmnvs	r7, #29440	; 0x7300
 108:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 10c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 110:	6f6e2d6d 	svcvs	0x006e2d6d
 114:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 118:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 11c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 120:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 124:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 128:	00656e69 	rsbeq	r6, r5, r9, ror #28
 12c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 130:	70616573 	rsbvc	r6, r1, r3, ror r5
 134:	6f635c70 	svcvs	0x00635c70
 138:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 13c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 140:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 144:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 148:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 14c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 150:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 154:	61652d65 	cmnvs	r5, r5, ror #26
 158:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 15c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 160:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 164:	00007379 	andeq	r7, r0, r9, ror r3
 168:	6f697067 	svcvs	0x00697067
 16c:	0100632e 	tsteq	r0, lr, lsr #6
 170:	645f0000 	ldrbvs	r0, [pc], #-0	; 178 <startup-0x1ffffe88>
 174:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 178:	745f746c 	ldrbvc	r7, [pc], #-1132	; 180 <startup-0x1ffffe80>
 17c:	73657079 	cmnvc	r5, #121	; 0x79
 180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 184:	735f0000 	cmpvc	pc, #0
 188:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 18c:	00682e74 	rsbeq	r2, r8, r4, ror lr
 190:	67000003 	strvs	r0, [r0, -r3]
 194:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 198:	00010068 	andeq	r0, r1, r8, rrx
 19c:	05000000 	streq	r0, [r0, #-0]
 1a0:	00005802 	andeq	r5, r0, r2, lsl #16
 1a4:	674d1620 	strbvs	r1, [sp, -r0, lsr #12]
 1a8:	6786756a 	strvs	r7, [r6, sl, ror #10]
 1ac:	674c6875 	smlsldxvs	r6, ip, r5, r8
 1b0:	75777569 	ldrbvc	r7, [r7, #-1385]!	; 0xfffffa97
 1b4:	6d3d7667 	ldcvs	6, cr7, [sp, #-412]!	; 0xfffffe64
 1b8:	83834b59 	orrhi	r4, r3, #91136	; 0x16400
 1bc:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 1c0:	0200a702 	andeq	sl, r0, #524288	; 0x80000
 1c4:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 1c8:	02006006 	andeq	r6, r0, #6
 1cc:	92210104 	eorls	r0, r1, #4, 2
 1d0:	90130375 	andsls	r0, r3, r5, ror r3
 1d4:	921e404b 	andsls	r4, lr, #75	; 0x4b
 1d8:	037a7576 	cmneq	sl, #494927872	; 0x1d800000
 1dc:	1b50207a 	blne	14083cc <startup-0x1ebf7c34>
 1e0:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 1e4:	4c3d4b4c 			; <UNDEFINED> instruction: 0x4c3d4b4c
 1e8:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 1ec:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 1f0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 1f4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 1f8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 1fc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 200:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 204:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 208:	304c212f 	subcc	r2, ip, pc, lsr #2
 20c:	842f4442 	strthi	r4, [pc], #-1090	; 214 <startup-0x1ffffdec>
 210:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 214:	06200601 	strteq	r0, [r0], -r1, lsl #12
 218:	3f3d3e84 	svccc	0x003d3e84
 21c:	01040200 	mrseq	r0, R12_usr
 220:	84062006 	strhi	r2, [r6], #-6
 224:	003e3d3e 	eorseq	r3, lr, lr, lsr sp
 228:	06010402 	streq	r0, [r1], -r2, lsl #8
 22c:	3e840620 	cdpcc	6, 8, cr0, cr4, cr0, {1}
 230:	02003e3d 	andeq	r3, r0, #976	; 0x3d0
 234:	20060104 	andcs	r0, r6, r4, lsl #2
 238:	3d3e8406 	cfldrscc	mvf8, [lr, #-24]!	; 0xffffffe8
 23c:	596a3e3d 	stmdbpl	sl!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}^
 240:	6a7659bb 	bvs	1d96934 <startup-0x1e2696cc>
 244:	59130859 	ldmdbpl	r3, {r0, r3, r4, r6, fp}
 248:	3d3d6876 	ldccc	8, cr6, [sp, #-472]!	; 0xfffffe28
 24c:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
 250:	404c593d 	submi	r5, ip, sp, lsr r9
 254:	5b3d3d68 	blpl	f4f7fc <startup-0x1f0b0804>
 258:	40842f68 	addmi	r2, r4, r8, ror #30
 25c:	5b3d3d68 	blpl	f4f804 <startup-0x1f0b07fc>
 260:	68842f68 	stmvs	r4, {r3, r5, r6, r8, r9, sl, fp, sp}
 264:	3e2f4b3d 	vmovcc.16	d15[2], r4
 268:	2f3d3e68 	svccs	0x003d3e68
 26c:	2f3d4b2f 	svccs	0x003d4b2f
 270:	02005976 	andeq	r5, r0, #1933312	; 0x1d8000
 274:	3c060104 	stfccs	f0, [r6], {4}
 278:	3d673d06 	stclcc	13, cr3, [r7, #-24]!	; 0xffffffe8
 27c:	3e26a776 	mcrcc	7, 1, sl, cr6, cr6, {3}
 280:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 284:	06200601 	strteq	r0, [r0], -r1, lsl #12
 288:	3e593d84 	cdpcc	13, 5, cr3, cr9, cr4, {4}
 28c:	8359684c 	cmphi	r9, #76, 16	; 0x4c0000
 290:	687659e5 	ldmdavs	r6!, {r0, r2, r5, r6, r7, r8, fp, ip, lr}^
 294:	59d78359 	ldmibpl	r7, {r0, r3, r4, r6, r8, r9, pc}^
 298:	10036768 	andne	r6, r3, r8, ror #14
 29c:	20700374 	rsbscs	r0, r0, r4, ror r3
 2a0:	034a1003 	movteq	r1, #40963	; 0xa003
 2a4:	223d2072 	eorscs	r2, sp, #114	; 0x72
 2a8:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 2ac:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 2b0:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
 2b4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 2b8:	4b4b4b4b 	blmi	12d2fec <startup-0x1ed2d014>
 2bc:	3e3e3d4b 	cdpcc	13, 3, cr3, cr14, cr11, {2}
 2c0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 2c4:	752f3d30 	strvc	r3, [pc, #-3376]!	; fffff59c <ball+0xdfffe604>
 2c8:	25452f3d 	strbcs	r2, [r5, #-3901]	; 0xfffff0c3
 2cc:	67a03d22 	strvs	r3, [r0, r2, lsr #26]!
 2d0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 2d4:	2f3d2f59 	svccs	0x003d2f59
 2d8:	4b3d3d59 	blmi	f4f844 <startup-0x1f0b07bc>
 2dc:	3d4b303d 	stclcc	0, cr3, [fp, #-244]	; 0xffffff0c
 2e0:	91a03d31 	lsrls	r3, r1, sp
 2e4:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
 2e8:	3d593d2f 	ldclcc	13, cr3, [r9, #-188]	; 0xffffff44
 2ec:	303d5930 	eorscc	r5, sp, r0, lsr r9
 2f0:	763d3d3d 			; <UNDEFINED> instruction: 0x763d3d3d
 2f4:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 2f8:	3d914c83 	ldccc	12, cr4, [r1, #524]	; 0x20c
 2fc:	833d3d59 	teqhi	sp, #5696	; 0x1640
 300:	6759674c 	ldrbvs	r6, [r9, -ip, asr #14]
 304:	9f4b3e4c 	svcls	0x004b3e4c
 308:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 30c:	02004b03 	andeq	r4, r0, #3072	; 0xc00
 310:	00490304 	subeq	r0, r9, r4, lsl #6
 314:	06010402 	streq	r0, [r1], -r2, lsl #8
 318:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 31c:	00470602 	subeq	r0, r7, r2, lsl #12
 320:	06010402 	streq	r0, [r1], -r2, lsl #8
 324:	4c510658 	mrrcmi	6, 5, r0, r1, cr8
 328:	763d3d2f 	ldrtvc	r3, [sp], -pc, lsr #26
 32c:	040200e6 	streq	r0, [r2], #-230	; 0xffffff1a
 330:	00580601 	subseq	r0, r8, r1, lsl #12
 334:	58020402 	stmdapl	r2, {r1, sl}
 338:	03040200 	movweq	r0, #16896	; 0x4200
 33c:	00590658 	subseq	r0, r9, r8, asr r6
 340:	06010402 	streq	r0, [r1], -r2, lsl #8
 344:	ae5a064a 	cdpge	6, 5, cr0, cr10, cr10, {2}
 348:	7a4b2108 	bvc	12c8770 <startup-0x1ed37890>
 34c:	4b684b4b 	blmi	1a13080 <startup-0x1e5ecf80>
 350:	9fd7bb5a 	svcls	0x00d7bb5a
 354:	a0ae4bbc 	strhtge	r4, [lr], ip
 358:	2fac6203 	svccs	0x00ac6203
 35c:	02201e03 	eoreq	r1, r0, #3, 28	; 0x30
 360:	01010006 	tsteq	r1, r6
 364:	000000d7 	ldrdeq	r0, [r0], -r7
 368:	00610002 	rsbeq	r0, r1, r2
 36c:	01020000 	mrseq	r0, (UNDEF: 2)
 370:	000d0efb 	strdeq	r0, [sp], -fp
 374:	01010101 	tsteq	r1, r1, lsl #2
 378:	01000000 	mrseq	r0, (UNDEF: 0)
 37c:	45010000 	strmi	r0, [r1, #-0]
 380:	41442f3a 	cmpmi	r4, sl, lsr pc
 384:	37313054 			; <UNDEFINED> instruction: 0x37313054
 388:	646f432f 	strbtvs	r4, [pc], #-815	; 390 <startup-0x1ffffc70>
 38c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 390:	69662065 	stmdbvs	r6!, {r0, r2, r5, r6, sp}^
 394:	2f73656c 	svccs	0x0073656c
 398:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 39c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 3a0:	6f697461 	svcvs	0x00697461
 3a4:	2f72656e 	svccs	0x0072656e
 3a8:	6f747561 	svcvs	0x00747561
 3ac:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 3b0:	65670000 	strbvs	r0, [r7, #-0]!
 3b4:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 3b8:	632e7972 			; <UNDEFINED> instruction: 0x632e7972
 3bc:	00000100 	andeq	r0, r0, r0, lsl #2
 3c0:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 22c <startup-0x1ffffdd4>
 3c4:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 3c8:	0100682e 	tsteq	r0, lr, lsr #16
 3cc:	00000000 	andeq	r0, r0, r0
 3d0:	0b8c0205 	bleq	fe300bec <ball+0xde2ffc54>
 3d4:	67142000 	ldrvs	r2, [r4, -r0]
 3d8:	4b4c3d3d 	blmi	130f8d4 <startup-0x1ecf072c>
 3dc:	03040200 	movweq	r0, #16896	; 0x4200
 3e0:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 3e4:	02009d03 	andeq	r9, r0, #3, 26	; 0xc0
 3e8:	00220304 	eoreq	r0, r2, r4, lsl #6
 3ec:	9c030402 	cfstrsls	mvf0, [r3], {2}
 3f0:	03040200 	movweq	r0, #16896	; 0x4200
 3f4:	04020057 	streq	r0, [r2], #-87	; 0xffffffa9
 3f8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 3fc:	004b4c6d 	subeq	r4, fp, sp, ror #24
 400:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 404:	03040200 	movweq	r0, #16896	; 0x4200
 408:	0402009d 	streq	r0, [r2], #-157	; 0xffffff63
 40c:	02002203 	andeq	r2, r0, #805306368	; 0x30000000
 410:	009c0304 	addseq	r0, ip, r4, lsl #6
 414:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 418:	01040200 	mrseq	r0, R12_usr
 41c:	6d063c06 	stcvs	12, cr3, [r6, #-24]	; 0xffffffe8
 420:	9f4c4b4c 	svcls	0x004c4b4c
 424:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 428:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 42c:	02005a91 	andeq	r5, r0, #593920	; 0x91000
 430:	58060104 	stmdapl	r6, {r2, r8}
 434:	755a9106 	ldrbvc	r9, [sl, #-262]	; 0xfffffefa
 438:	04024b76 	streq	r4, [r2], #-2934	; 0xfffff48a
 43c:	55010100 	strpl	r0, [r1, #-256]	; 0xffffff00
 440:	02000001 	andeq	r0, r0, #1
 444:	0000fe00 	andeq	pc, r0, r0, lsl #28
 448:	fb010200 	blx	40c52 <startup-0x1ffbf3ae>
 44c:	01000d0e 	tsteq	r0, lr, lsl #26
 450:	00010101 	andeq	r0, r1, r1, lsl #2
 454:	00010000 	andeq	r0, r1, r0
 458:	3a450100 	bcc	1140860 <startup-0x1eebf7a0>
 45c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 460:	2f373130 	svccs	0x00373130
 464:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 468:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 46c:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
 470:	4d2f7365 	stcmi	3, cr7, [pc, #-404]!	; 2e4 <startup-0x1ffffd1c>
 474:	616c706f 	cmnvs	ip, pc, rrx
 478:	61726f62 	cmnvs	r2, r2, ror #30
 47c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 480:	612f7265 			; <UNDEFINED> instruction: 0x612f7265
 484:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
 488:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 48c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 490:	70616573 	rsbvc	r6, r1, r3, ror r5
 494:	6f635c70 	svcvs	0x00635c70
 498:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 49c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 4a0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 4a4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 4a8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 4ac:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 4b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 4b4:	61652d65 	cmnvs	r5, r5, ror #26
 4b8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 4bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 4c0:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 4c4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 4c8:	6300656e 	movwvs	r6, #1390	; 0x56e
 4cc:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 4d0:	70706165 	rsbsvc	r6, r0, r5, ror #2
 4d4:	646f635c 	strbtvs	r6, [pc], #-860	; 4dc <startup-0x1ffffb24>
 4d8:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 4dc:	6f745c65 	svcvs	0x00745c65
 4e0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 4e4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 4e8:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 4ec:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 4f0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 4f4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 4f8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 4fc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 500:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 504:	73000073 	movwvc	r0, #115	; 0x73
 508:	645f7379 	ldrbvs	r7, [pc], #-889	; 510 <startup-0x1ffffaf0>
 50c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 510:	0100632e 	tsteq	r0, lr, lsr #6
 514:	645f0000 	ldrbvs	r0, [pc], #-0	; 51c <startup-0x1ffffae4>
 518:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 51c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 524 <startup-0x1ffffadc>
 520:	73657079 	cmnvc	r5, #121	; 0x79
 524:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 528:	735f0000 	cmpvc	pc, #0
 52c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 530:	00682e74 	rsbeq	r2, r8, r4, ror lr
 534:	73000003 	movwvc	r0, #3
 538:	645f7379 	ldrbvs	r7, [pc], #-889	; 540 <startup-0x1ffffac0>
 53c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 540:	0100682e 	tsteq	r0, lr, lsr #16
 544:	00000000 	andeq	r0, r0, r0
 548:	0d140205 	lfmeq	f0, 4, [r4, #-20]	; 0xffffffec
 54c:	33192000 	tstcc	r9, #0
 550:	42434244 	submi	r4, r3, #68, 4	; 0x40000004
 554:	01040200 	mrseq	r0, R12_usr
 558:	6c062006 	stcvs	0, cr2, [r6], {6}
 55c:	2f2f893d 	svccs	0x002f893d
 560:	3c0d032f 	stccc	3, cr0, [sp], {47}	; 0x2f
 564:	3e3f834c 	cdpcc	3, 3, cr8, cr15, cr12, {2}
 568:	03040200 	movweq	r0, #16896	; 0x4200
 56c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 570:	02002c03 	andeq	r2, r0, #768	; 0x300
 574:	3c060104 	stfccs	f0, [r6], {4}
 578:	0d034e06 	stceq	14, cr4, [r3, #-24]	; 0xffffffe8
 57c:	3f834c4a 	svccc	0x00834c4a
 580:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
 584:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
 588:	002c0304 	eoreq	r0, ip, r4, lsl #6
 58c:	06010402 	streq	r0, [r1], -r2, lsl #8
 590:	024e063c 	subeq	r0, lr, #60, 12	; 0x3c00000
 594:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
   4:	2f3a4500 	svccs	0x003a4500
   8:	30544144 	subscc	r4, r4, r4, asr #2
   c:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
  10:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
  14:	20657469 	rsbcs	r7, r5, r9, ror #8
  18:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
  1c:	6f4d2f73 	svcvs	0x004d2f73
  20:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
  24:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
  28:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
  2c:	75612f72 	strbvc	r2, [r1, #-3954]!	; 0xfffff08e
  30:	6f706f74 	svcvs	0x00706f74
  34:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
  38:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  3c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  40:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  44:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  48:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  4c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  50:	30373130 	eorscc	r3, r7, r0, lsr r1
  54:	20353132 	eorscs	r3, r5, r2, lsr r1
  58:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  5c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  60:	415b2029 	cmpmi	fp, r9, lsr #32
  64:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff31a <ball+0xdfffe382>
  68:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  6c:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  70:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
  74:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  78:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  7c:	6f697369 	svcvs	0x00697369
  80:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
  84:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
  88:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  8c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  90:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  94:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  98:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  9c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  a0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  a8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  ac:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  b0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  b8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  bc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  c0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  c4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  c8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  cc:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  d0:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  d4:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  d8:	6c616200 	sfmvs	f6, 2, [r1], #-0
  dc:	4774006c 	ldrbmi	r0, [r4, -ip, rrx]!
  e0:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  e4:	00797274 	rsbseq	r7, r9, r4, ror r2
  e8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  ec:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
  f0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
  f4:	6873006e 	ldmdavs	r3!, {r1, r2, r3, r5, r6}^
  f8:	2074726f 	rsbscs	r7, r4, pc, ror #4
  fc:	00746e69 	rsbseq	r6, r4, r9, ror #28
 100:	4f454750 	svcmi	0x00454750
 104:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
 108:	4f500059 	svcmi	0x00500059
 10c:	00544e49 	subseq	r4, r4, r9, asr #28
 110:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 114:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 118:	6f6c2067 	svcvs	0x006c2067
 11c:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 120:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 124:	00787269 	rsbseq	r7, r8, r9, ror #4
 128:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 12c:	7a697300 	bvc	1a5cd34 <startup-0x1e5a32cc>
 130:	73007865 	movwvc	r7, #2149	; 0x865
 134:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 138:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 13c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 140:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
 144:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 148:	2064656e 	rsbcs	r6, r4, lr, ror #10
 14c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 150:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 154:	50740063 	rsbspl	r0, r4, r3, rrx
 158:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 15c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 160:	6f6c2067 	svcvs	0x006c2067
 164:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
 168:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 16c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 170:	00746e69 	rsbseq	r6, r4, r9, ror #28
 174:	76677261 	strbtvc	r7, [r7], -r1, ror #4
 178:	6f687300 	svcvs	0x00687300
 17c:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 180:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 184:	2064656e 	rsbcs	r6, r4, lr, ror #10
 188:	00746e69 	rsbseq	r6, r4, r9, ror #28
 18c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 190:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 194:	624f7400 	subvs	r7, pc, #0, 8
 198:	7264006a 	rsbvc	r0, r4, #106	; 0x6a
 19c:	73007761 	movwvc	r7, #1889	; 0x761
 1a0:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 1a4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 1a8:	6c616200 	sfmvs	f6, 2, [r1], #-0
 1ac:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 1b0:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 1b4:	73007972 	movwvc	r7, #2418	; 0x972
 1b8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 1bc:	50007075 	andpl	r7, r0, r5, ror r0
 1c0:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 1c4:	6d005443 	cfstrsvs	mvf5, [r0, #-268]	; 0xfffffef4
 1c8:	0065766f 	rsbeq	r7, r5, pc, ror #12
 1cc:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
 1d0:	7000776f 	andvc	r7, r0, pc, ror #14
 1d4:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 1d8:	72646f00 	rsbvc	r6, r4, #0, 30
 1dc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 1e0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 1e4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 1e8:	74007865 	strvc	r7, [r0], #-2149	; 0xfffff79b
 1ec:	00706d65 	rsbseq	r6, r0, r5, ror #26
 1f0:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
 1f4:	6f665f70 	svcvs	0x00665f70
 1f8:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
 1fc:	69645f67 	stmdbvs	r4!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 200:	61007073 	tstvs	r0, r3, ror r0
 204:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 208:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 20c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 210:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 214:	5f5f0074 	svcpl	0x005f0074
 218:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 21c:	745f3233 	ldrbvc	r3, [pc], #-563	; 224 <startup-0x1ffffddc>
 220:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff328 <ball+0xdfffe390>
 224:	31746e69 	cmncc	r4, r9, ror #28
 228:	00745f36 	rsbseq	r5, r4, r6, lsr pc
 22c:	70617267 	rsbvc	r7, r1, r7, ror #4
 230:	5f636968 	svcpl	0x00636968
 234:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 238:	6f635f65 	svcvs	0x00635f65
 23c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 240:	72670064 	rsbvc	r0, r7, #100	; 0x64
 244:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 248:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 24c:	5f726165 	svcpl	0x00726165
 250:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 254:	6f006e65 	svcvs	0x00006e65
 258:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 25c:	65720072 	ldrbvs	r0, [r2, #-114]!	; 0xffffff8e
 260:	765f6461 	ldrbvc	r6, [pc], -r1, ror #8
 264:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 268:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 26c:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 270:	6f725f65 	svcvs	0x00725f65
 274:	73610077 	cmnvc	r1, #119	; 0x77
 278:	5f696963 	svcpl	0x00696963
 27c:	6f746f67 	svcvs	0x00746f67
 280:	67007978 	smlsdxvs	r0, r8, r9, r7
 284:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 288:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 28c:	00646165 	rsbeq	r6, r4, r5, ror #2
 290:	6552746f 	ldrbvs	r7, [r2, #-1135]	; 0xfffffb91
 294:	76726573 			; <UNDEFINED> instruction: 0x76726573
 298:	6f006465 	svcvs	0x00006465
 29c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2a0:	70007264 	andvc	r7, r0, r4, ror #4
 2a4:	00656761 	rsbeq	r6, r5, r1, ror #14
 2a8:	63616564 	cmnvs	r1, #100, 10	; 0x19000000
 2ac:	61766974 	cmnvs	r6, r4, ror r9
 2b0:	725f6574 	subsvc	r6, pc, #116, 10	; 0x1d000000
 2b4:	0073776f 	rsbseq	r7, r3, pc, ror #14
 2b8:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 2bc:	00737365 	rsbseq	r7, r3, r5, ror #6
 2c0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 2c4:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 2c8:	67007469 	strvs	r7, [r0, -r9, ror #8]
 2cc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2d0:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 2d4:	5f646165 	svcpl	0x00646165
 2d8:	61746164 	cmnvs	r4, r4, ror #2
 2dc:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 2e0:	5f5f0062 	svcpl	0x005f0062
 2e4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 2e8:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 2ec:	70617267 	rsbvc	r7, r1, r7, ror #4
 2f0:	5f636968 	svcpl	0x00636968
 2f4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2f8:	61645f65 	cmnvs	r4, r5, ror #30
 2fc:	6b006174 	blvs	188d4 <startup-0x1ffe772c>
 300:	00737965 	rsbseq	r7, r3, r5, ror #18
 304:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 308:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 30c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 310:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 314:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 318:	61726700 	cmnvs	r2, r0, lsl #14
 31c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 320:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 324:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 328:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 32c:	00726165 	rsbseq	r6, r2, r5, ror #2
 330:	70617267 	rsbvc	r7, r1, r7, ror #4
 334:	5f636968 	svcpl	0x00636968
 338:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 33c:	675f0065 	ldrbvs	r0, [pc, -r5, rrx]
 340:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 344:	4f495047 	svcmi	0x00495047
 348:	72646900 	rsbvc	r6, r4, #0, 18
 34c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 350:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 354:	61726700 	cmnvs	r2, r0, lsl #14
 358:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 35c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 360:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 364:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 368:	73610074 	cmnvc	r1, #116	; 0x74
 36c:	5f696963 	svcpl	0x00696963
 370:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 374:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 378:	69007261 	stmdbvs	r0, {r0, r5, r6, r9, ip, sp, lr}
 37c:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 380:	73006867 	movwvc	r6, #2151	; 0x867
 384:	70757465 	rsbsvc	r7, r5, r5, ror #8
 388:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
 38c:	6172675f 	cmnvs	r2, pc, asr r7
 390:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 394:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 398:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 39c:	63736100 	cmnvs	r3, #0, 2
 3a0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 3a4:	5f646165 	svcpl	0x00646165
 3a8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 3ac:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 3b0:	61007265 	tstvs	r0, r5, ror #4
 3b4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3b8:	6165725f 	cmnvs	r5, pc, asr r2
 3bc:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 3c0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 3c4:	6c657300 	stclvs	3, cr7, [r5], #-0
 3c8:	5f746365 	svcpl	0x00746365
 3cc:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 3d0:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 3d4:	73007265 	movwvc	r7, #613	; 0x265
 3d8:	70757465 	rsbsvc	r7, r5, r5, ror #8
 3dc:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
 3e0:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
 3e4:	00646170 	rsbeq	r6, r4, r0, ror r1
 3e8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 3ec:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 3f0:	5f657469 	svcpl	0x00657469
 3f4:	61746164 	cmnvs	r4, r4, ror #2
 3f8:	73657200 	cmnvc	r5, #0, 4
 3fc:	00746c75 	rsbseq	r6, r4, r5, ror ip
 400:	70617267 	rsbvc	r7, r1, r7, ror #4
 404:	5f636968 	svcpl	0x00636968
 408:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 40c:	6165725f 	cmnvs	r5, pc, asr r2
 410:	72007964 	andvc	r7, r0, #100, 18	; 0x190000
 414:	5f646165 	svcpl	0x00646165
 418:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 41c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
 420:	6f665f70 	svcvs	0x00665f70
 424:	73615f72 	cmnvc	r1, #456	; 0x1c8
 428:	5f696963 	svcpl	0x00696963
 42c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 430:	0079616c 	rsbseq	r6, r9, ip, ror #2
 434:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 438:	73616d00 	cmnvc	r1, #0, 26
 43c:	7570006b 	ldrbvc	r0, [r0, #-107]!	; 0xffffff95
 440:	00726470 	rsbseq	r6, r2, r0, ror r4
 444:	442f3a45 	strtmi	r3, [pc], #-2629	; 44c <startup-0x1ffffbb4>
 448:	31305441 	teqcc	r0, r1, asr #8
 44c:	6f432f37 	svcvs	0x00432f37
 450:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 454:	66206574 			; <UNDEFINED> instruction: 0x66206574
 458:	73656c69 	cmnvc	r5, #26880	; 0x6900
 45c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 460:	6f62616c 	svcvs	0x0062616c
 464:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 468:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 46c:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 470:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 474:	70672f67 	rsbvc	r2, r7, r7, ror #30
 478:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 47c:	61726700 	cmnvs	r2, r0, lsl #14
 480:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 484:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 488:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 48c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 490:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 494:	54646e61 	strbtpl	r6, [r4], #-3681	; 0xfffff19f
 498:	6972576f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}^
 49c:	61006574 	tstvs	r0, r4, ror r5
 4a0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4a4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 4a8:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 4ac:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 4b0:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 4b4:	6f6d0072 	svcvs	0x006d0072
 4b8:	00726564 	rsbseq	r6, r2, r4, ror #10
 4bc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4c0:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 4c4:	645f6461 	ldrbvs	r6, [pc], #-1121	; 4cc <startup-0x1ffffb34>
 4c8:	00617461 	rsbeq	r7, r1, r1, ror #8
 4cc:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
 4d0:	00676573 	rsbeq	r6, r7, r3, ror r5
 4d4:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
 4d8:	00686769 	rsbeq	r6, r8, r9, ror #14
 4dc:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 4e0:	6100776f 	tstvs	r0, pc, ror #14
 4e4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4e8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 4ec:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 4f0:	7300646d 	movwvc	r6, #1133	; 0x46d
 4f4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 4f8:	70730078 	rsbsvc	r0, r3, r8, ror r0
 4fc:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 500:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 504:	6a626f5f 	bvs	189c288 <startup-0x1e763d78>
 508:	5f746365 	svcpl	0x00746365
 50c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 510:	3a450064 	bcc	11406a8 <startup-0x1eebf958>
 514:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 518:	2f373130 	svccs	0x00373130
 51c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 520:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 524:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
 528:	4d2f7365 	stcmi	3, cr7, [pc, #-404]!	; 39c <startup-0x1ffffc64>
 52c:	616c706f 	cmnvs	ip, pc, rrx
 530:	61726f62 	cmnvs	r2, r2, ror #30
 534:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 538:	612f7265 			; <UNDEFINED> instruction: 0x612f7265
 53c:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
 540:	2f676e6f 	svccs	0x00676e6f
 544:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 3b0 <startup-0x1ffffc50>
 548:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 54c:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 550:	5f776172 	svcpl	0x00776172
 554:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 558:	63007463 	movwvs	r7, #1123	; 0x463
 55c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 560:	6a626f5f 	bvs	189c2e4 <startup-0x1e763d1c>
 564:	00746365 	rsbseq	r6, r4, r5, ror #6
 568:	7877656e 	ldmdavc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 56c:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 570:	6f6d0079 	svcvs	0x006d0079
 574:	6f5f6576 	svcvs	0x005f6576
 578:	63656a62 	cmnvs	r5, #401408	; 0x62000
 57c:	3a450074 	bcc	1140754 <startup-0x1eebf8ac>
 580:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 584:	2f373130 	svccs	0x00373130
 588:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 58c:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 590:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
 594:	4d2f7365 	stcmi	3, cr7, [pc, #-404]!	; 408 <startup-0x1ffffbf8>
 598:	616c706f 	cmnvs	ip, pc, rrx
 59c:	61726f62 	cmnvs	r2, r2, ror #30
 5a0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 5a4:	612f7265 			; <UNDEFINED> instruction: 0x612f7265
 5a8:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
 5ac:	2f676e6f 	svccs	0x00676e6f
 5b0:	5f737973 	svcpl	0x00737973
 5b4:	616c6564 	cmnvs	ip, r4, ror #10
 5b8:	00632e79 	rsbeq	r2, r3, r9, ror lr
 5bc:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
 5c0:	006b6369 	rsbeq	r6, fp, r9, ror #6
 5c4:	5f4b5453 	svcpl	0x004b5453
 5c8:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
 5cc:	54530042 	ldrbpl	r0, [r3], #-66	; 0xffffffbe
 5d0:	41565f4b 	cmpmi	r6, fp, asr #30
 5d4:	5453004c 	ldrbpl	r0, [r3], #-76	; 0xffffffb4
 5d8:	54435f4b 	strbpl	r5, [r3], #-3915	; 0xfffff0b5
 5dc:	53004c52 	movwpl	r4, #3154	; 0xc52
 5e0:	4c5f4b54 	mrrcmi	11, 5, r4, pc, cr4	; <UNPREDICTABLE>
 5e4:	0044414f 	subeq	r4, r4, pc, asr #2
 5e8:	616c6564 	cmnvs	ip, r4, ror #10
 5ec:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 5f0:	006f726b 	rsbeq	r7, pc, fp, ror #4
 5f4:	616c6564 	cmnvs	ip, r4, ror #10
 5f8:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 5fc:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 600:	616c6564 	cmnvs	ip, r4, ror #10
 604:	64007379 	strvs	r7, [r0], #-889	; 0xfffffc87
 608:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 60c:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 610:	6400696c 	strvs	r6, [r0], #-2412	; 0xfffff694
 614:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 618:	3030355f 	eorscc	r3, r0, pc, asr r5
 61c:	Address 0x0000061c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000000e 	andeq	r0, r0, lr
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000001e 	andcs	r0, r0, lr, lsl r0
  48:	0000003a 	andeq	r0, r0, sl, lsr r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	180e4101 	stmdane	lr, {r0, r8, lr}
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	20000058 	andcs	r0, r0, r8, asr r0
  78:	00000064 	andeq	r0, r0, r4, rrx
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	0000005c 	andeq	r0, r0, ip, asr r0
  94:	200000bc 	strhcs	r0, [r0], -ip
  98:	00000064 	andeq	r0, r0, r4, rrx
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	100e4101 	andne	r4, lr, r1, lsl #2
  a8:	00070d41 	andeq	r0, r7, r1, asr #26
  ac:	00000020 	andeq	r0, r0, r0, lsr #32
  b0:	0000005c 	andeq	r0, r0, ip, asr r0
  b4:	20000120 	andcs	r0, r0, r0, lsr #2
  b8:	00000090 	muleq	r0, r0, r0
  bc:	400c0e41 	andmi	r0, ip, r1, asr #28
  c0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  c4:	018e4002 	orreq	r4, lr, r2
  c8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  cc:	0000070d 	andeq	r0, r0, sp, lsl #14
  d0:	00000020 	andeq	r0, r0, r0, lsr #32
  d4:	0000005c 	andeq	r0, r0, ip, asr r0
  d8:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
  dc:	00000050 	andeq	r0, r0, r0, asr r0
  e0:	400c0e41 	andmi	r0, ip, r1, asr #28
  e4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  e8:	018e4002 	orreq	r4, lr, r2
  ec:	41380e41 	teqmi	r8, r1, asr #28
  f0:	0000070d 	andeq	r0, r0, sp, lsl #14
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	0000005c 	andeq	r0, r0, ip, asr r0
  fc:	20000200 	andcs	r0, r0, r0, lsl #4
 100:	00000050 	andeq	r0, r0, r0, asr r0
 104:	40080e41 	andmi	r0, r8, r1, asr #28
 108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 10c:	100e4101 	andne	r4, lr, r1, lsl #2
 110:	00070d41 	andeq	r0, r7, r1, asr #26
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	0000005c 	andeq	r0, r0, ip, asr r0
 11c:	20000250 	andcs	r0, r0, r0, asr r2
 120:	00000016 	andeq	r0, r0, r6, lsl r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	100e4101 	andne	r4, lr, r1, lsl #2
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	0000005c 	andeq	r0, r0, ip, asr r0
 13c:	20000266 	andcs	r0, r0, r6, ror #4
 140:	00000052 	andeq	r0, r0, r2, asr r0
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	00000018 	andeq	r0, r0, r8, lsl r0
 158:	0000005c 	andeq	r0, r0, ip, asr r0
 15c:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 160:	00000024 	andeq	r0, r0, r4, lsr #32
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 170:	00000018 	andeq	r0, r0, r8, lsl r0
 174:	0000005c 	andeq	r0, r0, ip, asr r0
 178:	200002dc 	ldrdcs	r0, [r0], -ip
 17c:	0000009a 	muleq	r0, sl, r0
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 18c:	0000001c 	andeq	r0, r0, ip, lsl r0
 190:	0000005c 	andeq	r0, r0, ip, asr r0
 194:	20000376 	andcs	r0, r0, r6, ror r3
 198:	00000046 	andeq	r0, r0, r6, asr #32
 19c:	40080e41 	andmi	r0, r8, r1, asr #28
 1a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1a8:	00070d41 	andeq	r0, r7, r1, asr #26
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	0000005c 	andeq	r0, r0, ip, asr r0
 1b4:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
 1b8:	00000050 	andeq	r0, r0, r0, asr r0
 1bc:	40080e41 	andmi	r0, r8, r1, asr #28
 1c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1c8:	00070d41 	andeq	r0, r7, r1, asr #26
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	0000005c 	andeq	r0, r0, ip, asr r0
 1d4:	2000040c 	andcs	r0, r0, ip, lsl #8
 1d8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1dc:	40080e41 	andmi	r0, r8, r1, asr #28
 1e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e4:	100e4101 	andne	r4, lr, r1, lsl #2
 1e8:	00070d41 	andeq	r0, r7, r1, asr #26
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	0000005c 	andeq	r0, r0, ip, asr r0
 1f4:	20000436 	andcs	r0, r0, r6, lsr r4
 1f8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1fc:	40080e41 	andmi	r0, r8, r1, asr #28
 200:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 204:	100e4101 	andne	r4, lr, r1, lsl #2
 208:	00070d41 	andeq	r0, r7, r1, asr #26
 20c:	00000020 	andeq	r0, r0, r0, lsr #32
 210:	0000005c 	andeq	r0, r0, ip, asr r0
 214:	20000460 	andcs	r0, r0, r0, ror #8
 218:	00000048 	andeq	r0, r0, r8, asr #32
 21c:	400c0e41 	andmi	r0, ip, r1, asr #28
 220:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 224:	018e4002 	orreq	r4, lr, r2
 228:	41180e41 	tstmi	r8, r1, asr #28
 22c:	0000070d 	andeq	r0, r0, sp, lsl #14
 230:	00000020 	andeq	r0, r0, r0, lsr #32
 234:	0000005c 	andeq	r0, r0, ip, asr r0
 238:	200004a8 	andcs	r0, r0, r8, lsr #9
 23c:	00000048 	andeq	r0, r0, r8, asr #32
 240:	400c0e41 	andmi	r0, ip, r1, asr #28
 244:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 248:	018e4002 	orreq	r4, lr, r2
 24c:	41180e41 	tstmi	r8, r1, asr #28
 250:	0000070d 	andeq	r0, r0, sp, lsl #14
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	0000005c 	andeq	r0, r0, ip, asr r0
 25c:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 260:	00000030 	andeq	r0, r0, r0, lsr r0
 264:	40080e41 	andmi	r0, r8, r1, asr #28
 268:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 26c:	100e4101 	andne	r4, lr, r1, lsl #2
 270:	00070d41 	andeq	r0, r7, r1, asr #26
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	0000005c 	andeq	r0, r0, ip, asr r0
 27c:	20000520 	andcs	r0, r0, r0, lsr #10
 280:	00000034 	andeq	r0, r0, r4, lsr r0
 284:	40080e41 	andmi	r0, r8, r1, asr #28
 288:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 28c:	100e4101 	andne	r4, lr, r1, lsl #2
 290:	00070d41 	andeq	r0, r7, r1, asr #26
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	0000005c 	andeq	r0, r0, ip, asr r0
 29c:	20000554 	andcs	r0, r0, r4, asr r5
 2a0:	00000054 	andeq	r0, r0, r4, asr r0
 2a4:	40080e41 	andmi	r0, r8, r1, asr #28
 2a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 2b0:	00070d41 	andeq	r0, r7, r1, asr #26
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	0000005c 	andeq	r0, r0, ip, asr r0
 2bc:	200005a8 	andcs	r0, r0, r8, lsr #11
 2c0:	0000003c 	andeq	r0, r0, ip, lsr r0
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	100e4101 	andne	r4, lr, r1, lsl #2
 2d0:	00070d41 	andeq	r0, r7, r1, asr #26
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	0000005c 	andeq	r0, r0, ip, asr r0
 2dc:	200005e4 	andcs	r0, r0, r4, ror #11
 2e0:	0000005c 	andeq	r0, r0, ip, asr r0
 2e4:	40080e41 	andmi	r0, r8, r1, asr #28
 2e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ec:	180e4101 	stmdane	lr, {r0, r8, lr}
 2f0:	00070d41 	andeq	r0, r7, r1, asr #26
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	0000005c 	andeq	r0, r0, ip, asr r0
 2fc:	20000640 	andcs	r0, r0, r0, asr #12
 300:	00000058 	andeq	r0, r0, r8, asr r0
 304:	40080e41 	andmi	r0, r8, r1, asr #28
 308:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 30c:	180e4101 	stmdane	lr, {r0, r8, lr}
 310:	00070d41 	andeq	r0, r7, r1, asr #26
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	0000005c 	andeq	r0, r0, ip, asr r0
 31c:	20000698 	mulcs	r0, r8, r6
 320:	0000005a 	andeq	r0, r0, sl, asr r0
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	100e4101 	andne	r4, lr, r1, lsl #2
 330:	00070d41 	andeq	r0, r7, r1, asr #26
 334:	00000018 	andeq	r0, r0, r8, lsl r0
 338:	0000005c 	andeq	r0, r0, ip, asr r0
 33c:	200006f2 	strdcs	r0, [r0], -r2
 340:	0000005c 	andeq	r0, r0, ip, asr r0
 344:	40080e41 	andmi	r0, r8, r1, asr #28
 348:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 34c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 350:	0000001c 	andeq	r0, r0, ip, lsl r0
 354:	0000005c 	andeq	r0, r0, ip, asr r0
 358:	2000074e 	andcs	r0, r0, lr, asr #14
 35c:	0000006a 	andeq	r0, r0, sl, rrx
 360:	40080e41 	andmi	r0, r8, r1, asr #28
 364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 368:	100e4101 	andne	r4, lr, r1, lsl #2
 36c:	00070d41 	andeq	r0, r7, r1, asr #26
 370:	0000001c 	andeq	r0, r0, ip, lsl r0
 374:	0000005c 	andeq	r0, r0, ip, asr r0
 378:	200007b8 			; <UNDEFINED> instruction: 0x200007b8
 37c:	00000090 	muleq	r0, r0, r0
 380:	40080e41 	andmi	r0, r8, r1, asr #28
 384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 388:	180e4101 	stmdane	lr, {r0, r8, lr}
 38c:	00070d41 	andeq	r0, r7, r1, asr #26
 390:	0000001c 	andeq	r0, r0, ip, lsl r0
 394:	0000005c 	andeq	r0, r0, ip, asr r0
 398:	20000848 	andcs	r0, r0, r8, asr #16
 39c:	00000080 	andeq	r0, r0, r0, lsl #1
 3a0:	40080e41 	andmi	r0, r8, r1, asr #28
 3a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a8:	100e4101 	andne	r4, lr, r1, lsl #2
 3ac:	00070d41 	andeq	r0, r7, r1, asr #26
 3b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b4:	0000005c 	andeq	r0, r0, ip, asr r0
 3b8:	200008c8 	andcs	r0, r0, r8, asr #17
 3bc:	00000040 	andeq	r0, r0, r0, asr #32
 3c0:	40080e41 	andmi	r0, r8, r1, asr #28
 3c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c8:	100e4101 	andne	r4, lr, r1, lsl #2
 3cc:	00070d41 	andeq	r0, r7, r1, asr #26
 3d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d4:	0000005c 	andeq	r0, r0, ip, asr r0
 3d8:	20000908 	andcs	r0, r0, r8, lsl #18
 3dc:	00000046 	andeq	r0, r0, r6, asr #32
 3e0:	40080e41 	andmi	r0, r8, r1, asr #28
 3e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e8:	100e4101 	andne	r4, lr, r1, lsl #2
 3ec:	00070d41 	andeq	r0, r7, r1, asr #26
 3f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f4:	0000005c 	andeq	r0, r0, ip, asr r0
 3f8:	2000094e 	andcs	r0, r0, lr, asr #18
 3fc:	0000002a 	andeq	r0, r0, sl, lsr #32
 400:	40080e41 	andmi	r0, r8, r1, asr #28
 404:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 408:	100e4101 	andne	r4, lr, r1, lsl #2
 40c:	00070d41 	andeq	r0, r7, r1, asr #26
 410:	0000001c 	andeq	r0, r0, ip, lsl r0
 414:	0000005c 	andeq	r0, r0, ip, asr r0
 418:	20000978 	andcs	r0, r0, r8, ror r9
 41c:	00000066 	andeq	r0, r0, r6, rrx
 420:	40080e41 	andmi	r0, r8, r1, asr #28
 424:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 428:	100e4101 	andne	r4, lr, r1, lsl #2
 42c:	00070d41 	andeq	r0, r7, r1, asr #26
 430:	00000018 	andeq	r0, r0, r8, lsl r0
 434:	0000005c 	andeq	r0, r0, ip, asr r0
 438:	200009de 	ldrdcs	r0, [r0], -lr
 43c:	0000001e 	andeq	r0, r0, lr, lsl r0
 440:	40080e41 	andmi	r0, r8, r1, asr #28
 444:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 448:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 44c:	00000020 	andeq	r0, r0, r0, lsr #32
 450:	0000005c 	andeq	r0, r0, ip, asr r0
 454:	200009fc 	strdcs	r0, [r0], -ip
 458:	00000190 	muleq	r0, r0, r1
 45c:	400c0e41 	andmi	r0, ip, r1, asr #28
 460:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 464:	018e4002 	orreq	r4, lr, r2
 468:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 46c:	0000070d 	andeq	r0, r0, sp, lsl #14
 470:	0000000c 	andeq	r0, r0, ip
 474:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 478:	7c020001 	stcvc	0, cr0, [r2], {1}
 47c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 480:	0000001c 	andeq	r0, r0, ip, lsl r0
 484:	00000470 	andeq	r0, r0, r0, ror r4
 488:	20000b8c 	andcs	r0, r0, ip, lsl #23
 48c:	00000020 	andeq	r0, r0, r0, lsr #32
 490:	40080e41 	andmi	r0, r8, r1, asr #28
 494:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 498:	180e4101 	stmdane	lr, {r0, r8, lr}
 49c:	00070d41 	andeq	r0, r7, r1, asr #26
 4a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a4:	00000470 	andeq	r0, r0, r0, ror r4
 4a8:	20000bac 	andcs	r0, r0, ip, lsr #23
 4ac:	0000005c 	andeq	r0, r0, ip, asr r0
 4b0:	40080e41 	andmi	r0, r8, r1, asr #28
 4b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 4bc:	00070d41 	andeq	r0, r7, r1, asr #26
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	00000470 	andeq	r0, r0, r0, ror r4
 4c8:	20000c08 	andcs	r0, r0, r8, lsl #24
 4cc:	0000005c 	andeq	r0, r0, ip, asr r0
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 4dc:	00070d41 	andeq	r0, r7, r1, asr #26
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	00000470 	andeq	r0, r0, r0, ror r4
 4e8:	20000c64 	andcs	r0, r0, r4, ror #24
 4ec:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 4f0:	40080e41 	andmi	r0, r8, r1, asr #28
 4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 4fc:	00070d41 	andeq	r0, r7, r1, asr #26
 500:	0000000c 	andeq	r0, r0, ip
 504:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 508:	7c020001 	stcvc	0, cr0, [r2], {1}
 50c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 510:	00000018 	andeq	r0, r0, r8, lsl r0
 514:	00000500 	andeq	r0, r0, r0, lsl #10
 518:	20000d14 	andcs	r0, r0, r4, lsl sp
 51c:	00000040 	andeq	r0, r0, r0, asr #32
 520:	40080e41 	andmi	r0, r8, r1, asr #28
 524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 528:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 52c:	00000018 	andeq	r0, r0, r8, lsl r0
 530:	00000500 	andeq	r0, r0, r0, lsl #10
 534:	20000d54 	andcs	r0, r0, r4, asr sp
 538:	00000012 	andeq	r0, r0, r2, lsl r0
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
 54c:	00000500 	andeq	r0, r0, r0, lsl #10
 550:	20000d66 	andcs	r0, r0, r6, ror #26
 554:	00000044 	andeq	r0, r0, r4, asr #32
 558:	40080e41 	andmi	r0, r8, r1, asr #28
 55c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 560:	180e4101 	stmdane	lr, {r0, r8, lr}
 564:	00070d41 	andeq	r0, r7, r1, asr #26
 568:	0000001c 	andeq	r0, r0, ip, lsl r0
 56c:	00000500 	andeq	r0, r0, r0, lsl #10
 570:	20000daa 	andcs	r0, r0, sl, lsr #27
 574:	00000048 	andeq	r0, r0, r8, asr #32
 578:	40080e41 	andmi	r0, r8, r1, asr #28
 57c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 580:	180e4101 	stmdane	lr, {r0, r8, lr}
 584:	00070d41 	andeq	r0, r7, r1, asr #26
 588:	0000000c 	andeq	r0, r0, ip
 58c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 590:	7c010001 	stcvc	0, cr0, [r1], {1}
 594:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 598:	0000000c 	andeq	r0, r0, ip
 59c:	00000588 	andeq	r0, r0, r8, lsl #11
 5a0:	20000df5 	strdcs	r0, [r0], -r5
 5a4:	0000010a 	andeq	r0, r0, sl, lsl #2
