
./Debug/spoopys_bizarre_adventure.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "exti.h"

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void ){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:

void main(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
}
20000014:	46c0      	nop			; (mov r8, r8)
20000016:	46bd      	mov	sp, r7
20000018:	bd80      	pop	{r7, pc}
	...

2000001c <delay_interrupt_init>:

volatile int systick_flag = 1;
static volatile int delay_counter = 0;
static int mikro;

void delay_interrupt_init(void){
2000001c:	b580      	push	{r7, lr}
2000001e:	af00      	add	r7, sp, #0
    init_systick_interrupt_handler();
20000020:	f000 f886 	bl	20000130 <init_systick_interrupt_handler>
}
20000024:	46c0      	nop			; (mov r8, r8)
20000026:	46bd      	mov	sp, r7
20000028:	bd80      	pop	{r7, pc}

2000002a <delay_250ns>:

void delay_250ns(void){
2000002a:	b580      	push	{r7, lr}
2000002c:	af00      	add	r7, sp, #0
    systick_flag = 0;
2000002e:	4b04      	ldr	r3, [pc, #16]	; (20000040 <delay_250ns+0x16>)
20000030:	2200      	movs	r2, #0
20000032:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 4);   
20000034:	202a      	movs	r0, #42	; 0x2a
20000036:	f000 f863 	bl	20000100 <start_delay>
}
2000003a:	46c0      	nop			; (mov r8, r8)
2000003c:	46bd      	mov	sp, r7
2000003e:	bd80      	pop	{r7, pc}
20000040:	20000c00 	andcs	r0, r0, r0, lsl #24

20000044 <delay_500ns>:

void delay_500ns(void){
20000044:	b580      	push	{r7, lr}
20000046:	af00      	add	r7, sp, #0
    systick_flag = 0;
20000048:	4b04      	ldr	r3, [pc, #16]	; (2000005c <delay_500ns+0x18>)
2000004a:	2200      	movs	r2, #0
2000004c:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 2);   
2000004e:	2054      	movs	r0, #84	; 0x54
20000050:	f000 f856 	bl	20000100 <start_delay>
}
20000054:	46c0      	nop			; (mov r8, r8)
20000056:	46bd      	mov	sp, r7
20000058:	bd80      	pop	{r7, pc}
2000005a:	46c0      	nop			; (mov r8, r8)
2000005c:	20000c00 	andcs	r0, r0, r0, lsl #24

20000060 <delay_1mikro>:

void delay_1mikro(void){
20000060:	b580      	push	{r7, lr}
20000062:	af00      	add	r7, sp, #0
    start_delay(MIKRO_SECOND_PULSES);
20000064:	20a8      	movs	r0, #168	; 0xa8
20000066:	f000 f84b 	bl	20000100 <start_delay>
}
2000006a:	46c0      	nop			; (mov r8, r8)
2000006c:	46bd      	mov	sp, r7
2000006e:	bd80      	pop	{r7, pc}

20000070 <delay_1milli>:

void delay_1milli(void){
20000070:	b580      	push	{r7, lr}
20000072:	af00      	add	r7, sp, #0
#ifndef SIMULATOR
    start_delay(MIKRO_SECOND_PULSES * 1000);
20000074:	4b03      	ldr	r3, [pc, #12]	; (20000084 <delay_1milli+0x14>)
20000076:	0018      	movs	r0, r3
20000078:	f000 f842 	bl	20000100 <start_delay>
#else
    start_delay(MIKRO_SECOND_PULSES);
#endif
}
2000007c:	46c0      	nop			; (mov r8, r8)
2000007e:	46bd      	mov	sp, r7
20000080:	bd80      	pop	{r7, pc}
20000082:	46c0      	nop			; (mov r8, r8)
20000084:	00029040 	andeq	r9, r2, r0, asr #32

20000088 <delay_mikro>:

void delay_mikro(unsigned int count){
20000088:	b580      	push	{r7, lr}
2000008a:	b082      	sub	sp, #8
2000008c:	af00      	add	r7, sp, #0
2000008e:	6078      	str	r0, [r7, #4]
    if(count == 0)return;
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	2b00      	cmp	r3, #0
20000094:	d00b      	beq.n	200000ae <delay_mikro+0x26>
    delay_counter = count;
20000096:	687a      	ldr	r2, [r7, #4]
20000098:	4b07      	ldr	r3, [pc, #28]	; (200000b8 <delay_mikro+0x30>)
2000009a:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
2000009c:	4b07      	ldr	r3, [pc, #28]	; (200000bc <delay_mikro+0x34>)
2000009e:	2200      	movs	r2, #0
200000a0:	601a      	str	r2, [r3, #0]
    mikro = 1;
200000a2:	4b07      	ldr	r3, [pc, #28]	; (200000c0 <delay_mikro+0x38>)
200000a4:	2201      	movs	r2, #1
200000a6:	601a      	str	r2, [r3, #0]
    delay_1mikro();
200000a8:	f7ff ffda 	bl	20000060 <delay_1mikro>
200000ac:	e000      	b.n	200000b0 <delay_mikro+0x28>
    if(count == 0)return;
200000ae:	46c0      	nop			; (mov r8, r8)
}
200000b0:	46bd      	mov	sp, r7
200000b2:	b002      	add	sp, #8
200000b4:	bd80      	pop	{r7, pc}
200000b6:	46c0      	nop			; (mov r8, r8)
200000b8:	20000bf8 	strdcs	r0, [r0], -r8
200000bc:	20000c00 	andcs	r0, r0, r0, lsl #24
200000c0:	20000bfc 	strdcs	r0, [r0], -ip

200000c4 <delay_milli>:

void delay_milli(unsigned int count){
200000c4:	b580      	push	{r7, lr}
200000c6:	b082      	sub	sp, #8
200000c8:	af00      	add	r7, sp, #0
200000ca:	6078      	str	r0, [r7, #4]
    if(count == 0) return;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	2b00      	cmp	r3, #0
200000d0:	d00b      	beq.n	200000ea <delay_milli+0x26>
    delay_counter = count;
200000d2:	687a      	ldr	r2, [r7, #4]
200000d4:	4b07      	ldr	r3, [pc, #28]	; (200000f4 <delay_milli+0x30>)
200000d6:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
200000d8:	4b07      	ldr	r3, [pc, #28]	; (200000f8 <delay_milli+0x34>)
200000da:	2200      	movs	r2, #0
200000dc:	601a      	str	r2, [r3, #0]
    mikro = 0;
200000de:	4b07      	ldr	r3, [pc, #28]	; (200000fc <delay_milli+0x38>)
200000e0:	2200      	movs	r2, #0
200000e2:	601a      	str	r2, [r3, #0]
    delay_1milli();
200000e4:	f7ff ffc4 	bl	20000070 <delay_1milli>
200000e8:	e000      	b.n	200000ec <delay_milli+0x28>
    if(count == 0) return;
200000ea:	46c0      	nop			; (mov r8, r8)
}
200000ec:	46bd      	mov	sp, r7
200000ee:	b002      	add	sp, #8
200000f0:	bd80      	pop	{r7, pc}
200000f2:	46c0      	nop			; (mov r8, r8)
200000f4:	20000bf8 	strdcs	r0, [r0], -r8
200000f8:	20000c00 	andcs	r0, r0, r0, lsl #24
200000fc:	20000bfc 	strdcs	r0, [r0], -ip

20000100 <start_delay>:

void start_delay(unsigned int pulses){
20000100:	b580      	push	{r7, lr}
20000102:	b082      	sub	sp, #8
20000104:	af00      	add	r7, sp, #0
20000106:	6078      	str	r0, [r7, #4]
    SYSTICK.ctrl = 0;
20000108:	4b08      	ldr	r3, [pc, #32]	; (2000012c <start_delay+0x2c>)
2000010a:	2200      	movs	r2, #0
2000010c:	601a      	str	r2, [r3, #0]
    SYSTICK.load = pulses-1;
2000010e:	4b07      	ldr	r3, [pc, #28]	; (2000012c <start_delay+0x2c>)
20000110:	687a      	ldr	r2, [r7, #4]
20000112:	3a01      	subs	r2, #1
20000114:	605a      	str	r2, [r3, #4]
    SYSTICK.val = 0;
20000116:	4b05      	ldr	r3, [pc, #20]	; (2000012c <start_delay+0x2c>)
20000118:	2200      	movs	r2, #0
2000011a:	609a      	str	r2, [r3, #8]
    SYSTICK.ctrlFirstByte = 7;
2000011c:	4b03      	ldr	r3, [pc, #12]	; (2000012c <start_delay+0x2c>)
2000011e:	2207      	movs	r2, #7
20000120:	701a      	strb	r2, [r3, #0]
}
20000122:	46c0      	nop			; (mov r8, r8)
20000124:	46bd      	mov	sp, r7
20000126:	b002      	add	sp, #8
20000128:	bd80      	pop	{r7, pc}
2000012a:	46c0      	nop			; (mov r8, r8)
2000012c:	e000e010 	and	lr, r0, r0, lsl r0

20000130 <init_systick_interrupt_handler>:

void init_systick_interrupt_handler(void){
20000130:	b580      	push	{r7, lr}
20000132:	af00      	add	r7, sp, #0
    *((void(**)(void))0x2001C03C) = systick_interrupt_handler;
20000134:	4b02      	ldr	r3, [pc, #8]	; (20000140 <init_systick_interrupt_handler+0x10>)
20000136:	4a03      	ldr	r2, [pc, #12]	; (20000144 <init_systick_interrupt_handler+0x14>)
20000138:	601a      	str	r2, [r3, #0]
}
2000013a:	46c0      	nop			; (mov r8, r8)
2000013c:	46bd      	mov	sp, r7
2000013e:	bd80      	pop	{r7, pc}
20000140:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000144:	20000149 	andcs	r0, r0, r9, asr #2

20000148 <systick_interrupt_handler>:

void systick_interrupt_handler(void){
20000148:	b580      	push	{r7, lr}
2000014a:	af00      	add	r7, sp, #0
    SYSTICK.ctrl = 0;
2000014c:	4b0d      	ldr	r3, [pc, #52]	; (20000184 <systick_interrupt_handler+0x3c>)
2000014e:	2200      	movs	r2, #0
20000150:	601a      	str	r2, [r3, #0]
    delay_counter--;
20000152:	4b0d      	ldr	r3, [pc, #52]	; (20000188 <systick_interrupt_handler+0x40>)
20000154:	681b      	ldr	r3, [r3, #0]
20000156:	1e5a      	subs	r2, r3, #1
20000158:	4b0b      	ldr	r3, [pc, #44]	; (20000188 <systick_interrupt_handler+0x40>)
2000015a:	601a      	str	r2, [r3, #0]
    if(delay_counter > 0){
2000015c:	4b0a      	ldr	r3, [pc, #40]	; (20000188 <systick_interrupt_handler+0x40>)
2000015e:	681b      	ldr	r3, [r3, #0]
20000160:	2b00      	cmp	r3, #0
20000162:	dd09      	ble.n	20000178 <systick_interrupt_handler+0x30>
        if(mikro){
20000164:	4b09      	ldr	r3, [pc, #36]	; (2000018c <systick_interrupt_handler+0x44>)
20000166:	681b      	ldr	r3, [r3, #0]
20000168:	2b00      	cmp	r3, #0
2000016a:	d002      	beq.n	20000172 <systick_interrupt_handler+0x2a>
            delay_1mikro();
2000016c:	f7ff ff78 	bl	20000060 <delay_1mikro>
            delay_1milli();
        }
    } else {
        systick_flag = 1;
    }
20000170:	e005      	b.n	2000017e <systick_interrupt_handler+0x36>
            delay_1milli();
20000172:	f7ff ff7d 	bl	20000070 <delay_1milli>
20000176:	e002      	b.n	2000017e <systick_interrupt_handler+0x36>
        systick_flag = 1;
20000178:	4b05      	ldr	r3, [pc, #20]	; (20000190 <systick_interrupt_handler+0x48>)
2000017a:	2201      	movs	r2, #1
2000017c:	601a      	str	r2, [r3, #0]
2000017e:	46c0      	nop			; (mov r8, r8)
20000180:	46bd      	mov	sp, r7
20000182:	bd80      	pop	{r7, pc}
20000184:	e000e010 	and	lr, r0, r0, lsl r0
20000188:	20000bf8 	strdcs	r0, [r0], -r8
2000018c:	20000bfc 	strdcs	r0, [r0], -ip
20000190:	20000c00 	andcs	r0, r0, r0, lsl #24

20000194 <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"

void graphic_ctrl_bit_set(uint8_t x){
20000194:	b580      	push	{r7, lr}
20000196:	b084      	sub	sp, #16
20000198:	af00      	add	r7, sp, #0
2000019a:	0002      	movs	r2, r0
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
200001a0:	4a0f      	ldr	r2, [pc, #60]	; (200001e0 <graphic_ctrl_bit_set+0x4c>)
200001a2:	230f      	movs	r3, #15
200001a4:	18fb      	adds	r3, r7, r3
200001a6:	7d12      	ldrb	r2, [r2, #20]
200001a8:	701a      	strb	r2, [r3, #0]
    control_register |= x;
200001aa:	230f      	movs	r3, #15
200001ac:	18fb      	adds	r3, r7, r3
200001ae:	220f      	movs	r2, #15
200001b0:	18b9      	adds	r1, r7, r2
200001b2:	1dfa      	adds	r2, r7, #7
200001b4:	7809      	ldrb	r1, [r1, #0]
200001b6:	7812      	ldrb	r2, [r2, #0]
200001b8:	430a      	orrs	r2, r1
200001ba:	701a      	strb	r2, [r3, #0]
	control_register &= ~B_SELECT;
200001bc:	230f      	movs	r3, #15
200001be:	18fb      	adds	r3, r7, r3
200001c0:	220f      	movs	r2, #15
200001c2:	18ba      	adds	r2, r7, r2
200001c4:	7812      	ldrb	r2, [r2, #0]
200001c6:	2104      	movs	r1, #4
200001c8:	438a      	bics	r2, r1
200001ca:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
200001cc:	4a04      	ldr	r2, [pc, #16]	; (200001e0 <graphic_ctrl_bit_set+0x4c>)
200001ce:	230f      	movs	r3, #15
200001d0:	18fb      	adds	r3, r7, r3
200001d2:	781b      	ldrb	r3, [r3, #0]
200001d4:	7513      	strb	r3, [r2, #20]
}
200001d6:	46c0      	nop			; (mov r8, r8)
200001d8:	46bd      	mov	sp, r7
200001da:	b004      	add	sp, #16
200001dc:	bd80      	pop	{r7, pc}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	40021000 	andmi	r1, r2, r0

200001e4 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
200001e4:	b580      	push	{r7, lr}
200001e6:	b084      	sub	sp, #16
200001e8:	af00      	add	r7, sp, #0
200001ea:	0002      	movs	r2, r0
200001ec:	1dfb      	adds	r3, r7, #7
200001ee:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
200001f0:	4a11      	ldr	r2, [pc, #68]	; (20000238 <graphic_ctrl_bit_clear+0x54>)
200001f2:	230f      	movs	r3, #15
200001f4:	18fb      	adds	r3, r7, r3
200001f6:	7d12      	ldrb	r2, [r2, #20]
200001f8:	701a      	strb	r2, [r3, #0]
    control_register &= (~x);
200001fa:	1dfb      	adds	r3, r7, #7
200001fc:	781b      	ldrb	r3, [r3, #0]
200001fe:	b25b      	sxtb	r3, r3
20000200:	43db      	mvns	r3, r3
20000202:	b25b      	sxtb	r3, r3
20000204:	220f      	movs	r2, #15
20000206:	18ba      	adds	r2, r7, r2
20000208:	7812      	ldrb	r2, [r2, #0]
2000020a:	b252      	sxtb	r2, r2
2000020c:	4013      	ands	r3, r2
2000020e:	b25a      	sxtb	r2, r3
20000210:	230f      	movs	r3, #15
20000212:	18fb      	adds	r3, r7, r3
20000214:	701a      	strb	r2, [r3, #0]
    control_register &= ~B_SELECT;
20000216:	230f      	movs	r3, #15
20000218:	18fb      	adds	r3, r7, r3
2000021a:	220f      	movs	r2, #15
2000021c:	18ba      	adds	r2, r7, r2
2000021e:	7812      	ldrb	r2, [r2, #0]
20000220:	2104      	movs	r1, #4
20000222:	438a      	bics	r2, r1
20000224:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
20000226:	4a04      	ldr	r2, [pc, #16]	; (20000238 <graphic_ctrl_bit_clear+0x54>)
20000228:	230f      	movs	r3, #15
2000022a:	18fb      	adds	r3, r7, r3
2000022c:	781b      	ldrb	r3, [r3, #0]
2000022e:	7513      	strb	r3, [r2, #20]
}
20000230:	46c0      	nop			; (mov r8, r8)
20000232:	46bd      	mov	sp, r7
20000234:	b004      	add	sp, #16
20000236:	bd80      	pop	{r7, pc}
20000238:	40021000 	andmi	r1, r2, r0

2000023c <select_controller>:

void select_controller(uint8_t controller){
2000023c:	b580      	push	{r7, lr}
2000023e:	b082      	sub	sp, #8
20000240:	af00      	add	r7, sp, #0
20000242:	0002      	movs	r2, r0
20000244:	1dfb      	adds	r3, r7, #7
20000246:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000248:	1dfb      	adds	r3, r7, #7
2000024a:	781b      	ldrb	r3, [r3, #0]
2000024c:	2b08      	cmp	r3, #8
2000024e:	d00c      	beq.n	2000026a <select_controller+0x2e>
20000250:	dc02      	bgt.n	20000258 <select_controller+0x1c>
20000252:	2b00      	cmp	r3, #0
20000254:	d005      	beq.n	20000262 <select_controller+0x26>
            break;
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
    }
}
20000256:	e01a      	b.n	2000028e <select_controller+0x52>
    switch(controller){
20000258:	2b10      	cmp	r3, #16
2000025a:	d00d      	beq.n	20000278 <select_controller+0x3c>
2000025c:	2b18      	cmp	r3, #24
2000025e:	d012      	beq.n	20000286 <select_controller+0x4a>
}
20000260:	e015      	b.n	2000028e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
20000262:	2018      	movs	r0, #24
20000264:	f7ff ffbe 	bl	200001e4 <graphic_ctrl_bit_clear>
            break;
20000268:	e011      	b.n	2000028e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS2);
2000026a:	2010      	movs	r0, #16
2000026c:	f7ff ffba 	bl	200001e4 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS1);
20000270:	2008      	movs	r0, #8
20000272:	f7ff ff8f 	bl	20000194 <graphic_ctrl_bit_set>
            break;
20000276:	e00a      	b.n	2000028e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000278:	2008      	movs	r0, #8
2000027a:	f7ff ffb3 	bl	200001e4 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
2000027e:	2010      	movs	r0, #16
20000280:	f7ff ff88 	bl	20000194 <graphic_ctrl_bit_set>
            break;
20000284:	e003      	b.n	2000028e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
20000286:	2018      	movs	r0, #24
20000288:	f7ff ff84 	bl	20000194 <graphic_ctrl_bit_set>
            break;
2000028c:	46c0      	nop			; (mov r8, r8)
}
2000028e:	46c0      	nop			; (mov r8, r8)
20000290:	46bd      	mov	sp, r7
20000292:	b002      	add	sp, #8
20000294:	bd80      	pop	{r7, pc}

20000296 <graphic_wait_ready>:

void graphic_wait_ready(void){
20000296:	b580      	push	{r7, lr}
20000298:	b082      	sub	sp, #8
2000029a:	af00      	add	r7, sp, #0
    uint8_t display_busy_status;
    // Enable = 0
    graphic_ctrl_bit_clear(B_E);
2000029c:	2040      	movs	r0, #64	; 0x40
2000029e:	f7ff ffa1 	bl	200001e4 <graphic_ctrl_bit_clear>
    // E: 15-8 = input, 7-0 = output
    GPIO_E.moder = 0x00005555;
200002a2:	4b17      	ldr	r3, [pc, #92]	; (20000300 <graphic_wait_ready+0x6a>)
200002a4:	4a17      	ldr	r2, [pc, #92]	; (20000304 <graphic_wait_ready+0x6e>)
200002a6:	601a      	str	r2, [r3, #0]
    
    // RS = 0, RW = 1
    graphic_ctrl_bit_clear(B_RS);
200002a8:	2001      	movs	r0, #1
200002aa:	f7ff ff9b 	bl	200001e4 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
200002ae:	2002      	movs	r0, #2
200002b0:	f7ff ff70 	bl	20000194 <graphic_ctrl_bit_set>
    delay_500ns();
200002b4:	f7ff fec6 	bl	20000044 <delay_500ns>
    
    while(1){
        // Enable = 1
        graphic_ctrl_bit_set(B_E);
200002b8:	2040      	movs	r0, #64	; 0x40
200002ba:	f7ff ff6b 	bl	20000194 <graphic_ctrl_bit_set>
        delay_500ns();
200002be:	f7ff fec1 	bl	20000044 <delay_500ns>
        // Enable = 0
		display_busy_status = GPIO_E.idrHigh;
200002c2:	4a0f      	ldr	r2, [pc, #60]	; (20000300 <graphic_wait_ready+0x6a>)
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	7c52      	ldrb	r2, [r2, #17]
200002c8:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
200002ca:	2040      	movs	r0, #64	; 0x40
200002cc:	f7ff ff8a 	bl	200001e4 <graphic_ctrl_bit_clear>
        delay_500ns();
200002d0:	f7ff feb8 	bl	20000044 <delay_500ns>
        // Exit loop if not busy
        
		display_busy_status &= LCD_BUSY;
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	1dfa      	adds	r2, r7, #7
200002d8:	7812      	ldrb	r2, [r2, #0]
200002da:	217f      	movs	r1, #127	; 0x7f
200002dc:	438a      	bics	r2, r1
200002de:	701a      	strb	r2, [r3, #0]
        if(display_busy_status == 0){
200002e0:	1dfb      	adds	r3, r7, #7
200002e2:	781b      	ldrb	r3, [r3, #0]
200002e4:	2b00      	cmp	r3, #0
200002e6:	d000      	beq.n	200002ea <graphic_wait_ready+0x54>
        graphic_ctrl_bit_set(B_E);
200002e8:	e7e6      	b.n	200002b8 <graphic_wait_ready+0x22>
            break;
200002ea:	46c0      	nop			; (mov r8, r8)
        } 
    }
    
    // Enable = 1
    graphic_ctrl_bit_set(B_E); // Commented out to check if this works because it works for NaN
200002ec:	2040      	movs	r0, #64	; 0x40
200002ee:	f7ff ff51 	bl	20000194 <graphic_ctrl_bit_set>
    // E: 15-0 = output
    GPIO_E.moder = 0x55555555;
200002f2:	4b03      	ldr	r3, [pc, #12]	; (20000300 <graphic_wait_ready+0x6a>)
200002f4:	4a04      	ldr	r2, [pc, #16]	; (20000308 <graphic_wait_ready+0x72>)
200002f6:	601a      	str	r2, [r3, #0]
}
200002f8:	46c0      	nop			; (mov r8, r8)
200002fa:	46bd      	mov	sp, r7
200002fc:	b002      	add	sp, #8
200002fe:	bd80      	pop	{r7, pc}
20000300:	40021000 	andmi	r1, r2, r0
20000304:	00005555 	andeq	r5, r0, r5, asr r5
20000308:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000030c <graphic_read>:

uint8_t graphic_read(uint8_t controller){
2000030c:	b580      	push	{r7, lr}
2000030e:	b084      	sub	sp, #16
20000310:	af00      	add	r7, sp, #0
20000312:	0002      	movs	r2, r0
20000314:	1dfb      	adds	r3, r7, #7
20000316:	701a      	strb	r2, [r3, #0]
	//Set enable to 0
	graphic_ctrl_bit_clear(B_E);
20000318:	2040      	movs	r0, #64	; 0x40
2000031a:	f7ff ff63 	bl	200001e4 <graphic_ctrl_bit_clear>
	
	//set E to input high byte / output low byte
	GPIO_E.moder = 0x00005555;
2000031e:	4b1c      	ldr	r3, [pc, #112]	; (20000390 <graphic_read+0x84>)
20000320:	4a1c      	ldr	r2, [pc, #112]	; (20000394 <graphic_read+0x88>)
20000322:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_RS | B_RW);
20000324:	2003      	movs	r0, #3
20000326:	f7ff ff35 	bl	20000194 <graphic_ctrl_bit_set>
	
	select_controller(controller);
2000032a:	1dfb      	adds	r3, r7, #7
2000032c:	781b      	ldrb	r3, [r3, #0]
2000032e:	0018      	movs	r0, r3
20000330:	f7ff ff84 	bl	2000023c <select_controller>
	delay_500ns();
20000334:	f7ff fe86 	bl	20000044 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
20000338:	2040      	movs	r0, #64	; 0x40
2000033a:	f7ff ff2b 	bl	20000194 <graphic_ctrl_bit_set>
	delay_500ns();
2000033e:	f7ff fe81 	bl	20000044 <delay_500ns>
	
	// set return value to what is on the data register
	uint8_t RV = GPIO_E.idrHigh;
20000342:	4a13      	ldr	r2, [pc, #76]	; (20000390 <graphic_read+0x84>)
20000344:	230f      	movs	r3, #15
20000346:	18fb      	adds	r3, r7, r3
20000348:	7c52      	ldrb	r2, [r2, #17]
2000034a:	701a      	strb	r2, [r3, #0]
	
	graphic_ctrl_bit_clear(B_E);
2000034c:	2040      	movs	r0, #64	; 0x40
2000034e:	f7ff ff49 	bl	200001e4 <graphic_ctrl_bit_clear>
	
	//set E to output
	GPIO_E.moder = 0x55555555;
20000352:	4b0f      	ldr	r3, [pc, #60]	; (20000390 <graphic_read+0x84>)
20000354:	4a10      	ldr	r2, [pc, #64]	; (20000398 <graphic_read+0x8c>)
20000356:	601a      	str	r2, [r3, #0]
	
	if((controller & B_CS1) != 0) {
20000358:	1dfb      	adds	r3, r7, #7
2000035a:	781b      	ldrb	r3, [r3, #0]
2000035c:	2208      	movs	r2, #8
2000035e:	4013      	ands	r3, r2
20000360:	d004      	beq.n	2000036c <graphic_read+0x60>
		select_controller(B_CS1);
20000362:	2008      	movs	r0, #8
20000364:	f7ff ff6a 	bl	2000023c <select_controller>
		graphic_wait_ready();
20000368:	f7ff ff95 	bl	20000296 <graphic_wait_ready>
	}
	if((controller & B_CS2) != 0){
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	781b      	ldrb	r3, [r3, #0]
20000370:	2210      	movs	r2, #16
20000372:	4013      	ands	r3, r2
20000374:	d004      	beq.n	20000380 <graphic_read+0x74>
		select_controller(B_CS2);
20000376:	2010      	movs	r0, #16
20000378:	f7ff ff60 	bl	2000023c <select_controller>
		graphic_wait_ready();
2000037c:	f7ff ff8b 	bl	20000296 <graphic_wait_ready>
		//case B_CS1 | B_CS2: select_controller(B_CS1 | B_CS2); break;
		//default: select_controller(0);
	}*/
	//graphic_wait_ready();
	
	return RV;
20000380:	230f      	movs	r3, #15
20000382:	18fb      	adds	r3, r7, r3
20000384:	781b      	ldrb	r3, [r3, #0]
}
20000386:	0018      	movs	r0, r3
20000388:	46bd      	mov	sp, r7
2000038a:	b004      	add	sp, #16
2000038c:	bd80      	pop	{r7, pc}
2000038e:	46c0      	nop			; (mov r8, r8)
20000390:	40021000 	andmi	r1, r2, r0
20000394:	00005555 	andeq	r5, r0, r5, asr r5
20000398:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000039c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
2000039c:	b580      	push	{r7, lr}
2000039e:	b082      	sub	sp, #8
200003a0:	af00      	add	r7, sp, #0
200003a2:	0002      	movs	r2, r0
200003a4:	1dfb      	adds	r3, r7, #7
200003a6:	701a      	strb	r2, [r3, #0]
200003a8:	1dbb      	adds	r3, r7, #6
200003aa:	1c0a      	adds	r2, r1, #0
200003ac:	701a      	strb	r2, [r3, #0]
	//datareg to value
	GPIO_E.odrHigh = value;
200003ae:	4a1a      	ldr	r2, [pc, #104]	; (20000418 <graphic_write+0x7c>)
200003b0:	1dfb      	adds	r3, r7, #7
200003b2:	781b      	ldrb	r3, [r3, #0]
200003b4:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
200003b6:	1dbb      	adds	r3, r7, #6
200003b8:	781b      	ldrb	r3, [r3, #0]
200003ba:	0018      	movs	r0, r3
200003bc:	f7ff ff3e 	bl	2000023c <select_controller>
	delay_500ns();
200003c0:	f7ff fe40 	bl	20000044 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
200003c4:	2040      	movs	r0, #64	; 0x40
200003c6:	f7ff fee5 	bl	20000194 <graphic_ctrl_bit_set>
	delay_500ns();
200003ca:	f7ff fe3b 	bl	20000044 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200003ce:	2040      	movs	r0, #64	; 0x40
200003d0:	f7ff ff08 	bl	200001e4 <graphic_ctrl_bit_clear>
	
	//select actual controller, wait while we read
	if (controller & B_CS1){
200003d4:	1dbb      	adds	r3, r7, #6
200003d6:	781b      	ldrb	r3, [r3, #0]
200003d8:	2208      	movs	r2, #8
200003da:	4013      	ands	r3, r2
200003dc:	d004      	beq.n	200003e8 <graphic_write+0x4c>
		select_controller(B_CS1);
200003de:	2008      	movs	r0, #8
200003e0:	f7ff ff2c 	bl	2000023c <select_controller>
		graphic_wait_ready();
200003e4:	f7ff ff57 	bl	20000296 <graphic_wait_ready>
	}
	if (controller & B_CS2){
200003e8:	1dbb      	adds	r3, r7, #6
200003ea:	781b      	ldrb	r3, [r3, #0]
200003ec:	2210      	movs	r2, #16
200003ee:	4013      	ands	r3, r2
200003f0:	d004      	beq.n	200003fc <graphic_write+0x60>
		select_controller(B_CS2);
200003f2:	2010      	movs	r0, #16
200003f4:	f7ff ff22 	bl	2000023c <select_controller>
		graphic_wait_ready();
200003f8:	f7ff ff4d 	bl	20000296 <graphic_wait_ready>
	}
	
	//datareg to 0
	GPIO_E.odrHigh = 0;
200003fc:	4b06      	ldr	r3, [pc, #24]	; (20000418 <graphic_write+0x7c>)
200003fe:	2200      	movs	r2, #0
20000400:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
20000402:	2040      	movs	r0, #64	; 0x40
20000404:	f7ff fec6 	bl	20000194 <graphic_ctrl_bit_set>
	
	//set controller to 0
	select_controller(0);
20000408:	2000      	movs	r0, #0
2000040a:	f7ff ff17 	bl	2000023c <select_controller>
}
2000040e:	46c0      	nop			; (mov r8, r8)
20000410:	46bd      	mov	sp, r7
20000412:	b002      	add	sp, #8
20000414:	bd80      	pop	{r7, pc}
20000416:	46c0      	nop			; (mov r8, r8)
20000418:	40021000 	andmi	r1, r2, r0

2000041c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000041c:	b580      	push	{r7, lr}
2000041e:	b082      	sub	sp, #8
20000420:	af00      	add	r7, sp, #0
20000422:	0002      	movs	r2, r0
20000424:	1dfb      	adds	r3, r7, #7
20000426:	701a      	strb	r2, [r3, #0]
20000428:	1dbb      	adds	r3, r7, #6
2000042a:	1c0a      	adds	r2, r1, #0
2000042c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000042e:	2040      	movs	r0, #64	; 0x40
20000430:	f7ff fed8 	bl	200001e4 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000434:	1dbb      	adds	r3, r7, #6
20000436:	781b      	ldrb	r3, [r3, #0]
20000438:	0018      	movs	r0, r3
2000043a:	f7ff feff 	bl	2000023c <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000043e:	2003      	movs	r0, #3
20000440:	f7ff fed0 	bl	200001e4 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000444:	1dbb      	adds	r3, r7, #6
20000446:	781a      	ldrb	r2, [r3, #0]
20000448:	1dfb      	adds	r3, r7, #7
2000044a:	781b      	ldrb	r3, [r3, #0]
2000044c:	0011      	movs	r1, r2
2000044e:	0018      	movs	r0, r3
20000450:	f7ff ffa4 	bl	2000039c <graphic_write>
}
20000454:	46c0      	nop			; (mov r8, r8)
20000456:	46bd      	mov	sp, r7
20000458:	b002      	add	sp, #8
2000045a:	bd80      	pop	{r7, pc}

2000045c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000045c:	b580      	push	{r7, lr}
2000045e:	b082      	sub	sp, #8
20000460:	af00      	add	r7, sp, #0
20000462:	0002      	movs	r2, r0
20000464:	1dfb      	adds	r3, r7, #7
20000466:	701a      	strb	r2, [r3, #0]
20000468:	1dbb      	adds	r3, r7, #6
2000046a:	1c0a      	adds	r2, r1, #0
2000046c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000046e:	2040      	movs	r0, #64	; 0x40
20000470:	f7ff feb8 	bl	200001e4 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000474:	1dbb      	adds	r3, r7, #6
20000476:	781b      	ldrb	r3, [r3, #0]
20000478:	0018      	movs	r0, r3
2000047a:	f7ff fedf 	bl	2000023c <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000047e:	2001      	movs	r0, #1
20000480:	f7ff fe88 	bl	20000194 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000484:	2002      	movs	r0, #2
20000486:	f7ff fead 	bl	200001e4 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000048a:	1dbb      	adds	r3, r7, #6
2000048c:	781a      	ldrb	r2, [r3, #0]
2000048e:	1dfb      	adds	r3, r7, #7
20000490:	781b      	ldrb	r3, [r3, #0]
20000492:	0011      	movs	r1, r2
20000494:	0018      	movs	r0, r3
20000496:	f7ff ff81 	bl	2000039c <graphic_write>
}
2000049a:	46c0      	nop			; (mov r8, r8)
2000049c:	46bd      	mov	sp, r7
2000049e:	b002      	add	sp, #8
200004a0:	bd80      	pop	{r7, pc}

200004a2 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200004a2:	b580      	push	{r7, lr}
200004a4:	b082      	sub	sp, #8
200004a6:	af00      	add	r7, sp, #0
200004a8:	0002      	movs	r2, r0
200004aa:	1dfb      	adds	r3, r7, #7
200004ac:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781b      	ldrb	r3, [r3, #0]
200004b2:	0018      	movs	r0, r3
200004b4:	f7ff ff2a 	bl	2000030c <graphic_read>
	return graphic_read(controller);
200004b8:	1dfb      	adds	r3, r7, #7
200004ba:	781b      	ldrb	r3, [r3, #0]
200004bc:	0018      	movs	r0, r3
200004be:	f7ff ff25 	bl	2000030c <graphic_read>
200004c2:	0003      	movs	r3, r0
}
200004c4:	0018      	movs	r0, r3
200004c6:	46bd      	mov	sp, r7
200004c8:	b002      	add	sp, #8
200004ca:	bd80      	pop	{r7, pc}

200004cc <graphic_initialize>:

void graphic_initialize(void){
200004cc:	b580      	push	{r7, lr}
200004ce:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200004d0:	2040      	movs	r0, #64	; 0x40
200004d2:	f7ff fe5f 	bl	20000194 <graphic_ctrl_bit_set>
	
	delay_mikro(10);
200004d6:	200a      	movs	r0, #10
200004d8:	f7ff fdd6 	bl	20000088 <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200004dc:	2078      	movs	r0, #120	; 0x78
200004de:	f7ff fe81 	bl	200001e4 <graphic_ctrl_bit_clear>
	
	delay_milli(30);
200004e2:	201e      	movs	r0, #30
200004e4:	f7ff fdee 	bl	200000c4 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200004e8:	2020      	movs	r0, #32
200004ea:	f7ff fe53 	bl	20000194 <graphic_ctrl_bit_set>
	
	delay_milli(100); // Added because NaN has it
200004ee:	2064      	movs	r0, #100	; 0x64
200004f0:	f7ff fde8 	bl	200000c4 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200004f4:	2118      	movs	r1, #24
200004f6:	203e      	movs	r0, #62	; 0x3e
200004f8:	f7ff ff90 	bl	2000041c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200004fc:	2118      	movs	r1, #24
200004fe:	203f      	movs	r0, #63	; 0x3f
20000500:	f7ff ff8c 	bl	2000041c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000504:	2118      	movs	r1, #24
20000506:	20c0      	movs	r0, #192	; 0xc0
20000508:	f7ff ff88 	bl	2000041c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000050c:	2118      	movs	r1, #24
2000050e:	2040      	movs	r0, #64	; 0x40
20000510:	f7ff ff84 	bl	2000041c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000514:	2118      	movs	r1, #24
20000516:	20b8      	movs	r0, #184	; 0xb8
20000518:	f7ff ff80 	bl	2000041c <graphic_write_command>
	
	select_controller(0);
2000051c:	2000      	movs	r0, #0
2000051e:	f7ff fe8d 	bl	2000023c <select_controller>
}
20000522:	46c0      	nop			; (mov r8, r8)
20000524:	46bd      	mov	sp, r7
20000526:	bd80      	pop	{r7, pc}

20000528 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000528:	b580      	push	{r7, lr}
2000052a:	b082      	sub	sp, #8
2000052c:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++){
2000052e:	1dfb      	adds	r3, r7, #7
20000530:	2200      	movs	r2, #0
20000532:	701a      	strb	r2, [r3, #0]
20000534:	e023      	b.n	2000057e <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000536:	1dfb      	adds	r3, r7, #7
20000538:	781b      	ldrb	r3, [r3, #0]
2000053a:	2248      	movs	r2, #72	; 0x48
2000053c:	4252      	negs	r2, r2
2000053e:	4313      	orrs	r3, r2
20000540:	b2db      	uxtb	r3, r3
20000542:	2118      	movs	r1, #24
20000544:	0018      	movs	r0, r3
20000546:	f7ff ff69 	bl	2000041c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000054a:	2118      	movs	r1, #24
2000054c:	2040      	movs	r0, #64	; 0x40
2000054e:	f7ff ff65 	bl	2000041c <graphic_write_command>
		
		for(uint8_t add = 0; add < 64; add++){
20000552:	1dbb      	adds	r3, r7, #6
20000554:	2200      	movs	r2, #0
20000556:	701a      	strb	r2, [r3, #0]
20000558:	e008      	b.n	2000056c <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
2000055a:	2118      	movs	r1, #24
2000055c:	2000      	movs	r0, #0
2000055e:	f7ff ff7d 	bl	2000045c <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
20000562:	1dbb      	adds	r3, r7, #6
20000564:	781a      	ldrb	r2, [r3, #0]
20000566:	1dbb      	adds	r3, r7, #6
20000568:	3201      	adds	r2, #1
2000056a:	701a      	strb	r2, [r3, #0]
2000056c:	1dbb      	adds	r3, r7, #6
2000056e:	781b      	ldrb	r3, [r3, #0]
20000570:	2b3f      	cmp	r3, #63	; 0x3f
20000572:	d9f2      	bls.n	2000055a <graphic_clear_screen+0x32>
	for(uint8_t page = 0; page < 8; page++){
20000574:	1dfb      	adds	r3, r7, #7
20000576:	781a      	ldrb	r2, [r3, #0]
20000578:	1dfb      	adds	r3, r7, #7
2000057a:	3201      	adds	r2, #1
2000057c:	701a      	strb	r2, [r3, #0]
2000057e:	1dfb      	adds	r3, r7, #7
20000580:	781b      	ldrb	r3, [r3, #0]
20000582:	2b07      	cmp	r3, #7
20000584:	d9d7      	bls.n	20000536 <graphic_clear_screen+0xe>
		}
	}
}
20000586:	46c0      	nop			; (mov r8, r8)
20000588:	46bd      	mov	sp, r7
2000058a:	b002      	add	sp, #8
2000058c:	bd80      	pop	{r7, pc}

2000058e <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
2000058e:	b590      	push	{r4, r7, lr}
20000590:	b085      	sub	sp, #20
20000592:	af00      	add	r7, sp, #0
20000594:	0004      	movs	r4, r0
20000596:	0008      	movs	r0, r1
20000598:	0011      	movs	r1, r2
2000059a:	1dfb      	adds	r3, r7, #7
2000059c:	1c22      	adds	r2, r4, #0
2000059e:	701a      	strb	r2, [r3, #0]
200005a0:	1dbb      	adds	r3, r7, #6
200005a2:	1c02      	adds	r2, r0, #0
200005a4:	701a      	strb	r2, [r3, #0]
200005a6:	1d7b      	adds	r3, r7, #5
200005a8:	1c0a      	adds	r2, r1, #0
200005aa:	701a      	strb	r2, [r3, #0]
    // Validate values for input variables
    if(x < 1 || x > 128){
200005ac:	1dfb      	adds	r3, r7, #7
200005ae:	781b      	ldrb	r3, [r3, #0]
200005b0:	2b00      	cmp	r3, #0
200005b2:	d100      	bne.n	200005b6 <pixel+0x28>
200005b4:	e0b4      	b.n	20000720 <pixel+0x192>
200005b6:	1dfb      	adds	r3, r7, #7
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	2b80      	cmp	r3, #128	; 0x80
200005bc:	d900      	bls.n	200005c0 <pixel+0x32>
200005be:	e0af      	b.n	20000720 <pixel+0x192>
        return;
    }
    if(y < 1 || y > 64){
200005c0:	1dbb      	adds	r3, r7, #6
200005c2:	781b      	ldrb	r3, [r3, #0]
200005c4:	2b00      	cmp	r3, #0
200005c6:	d100      	bne.n	200005ca <pixel+0x3c>
200005c8:	e0ac      	b.n	20000724 <pixel+0x196>
200005ca:	1dbb      	adds	r3, r7, #6
200005cc:	781b      	ldrb	r3, [r3, #0]
200005ce:	2b40      	cmp	r3, #64	; 0x40
200005d0:	d900      	bls.n	200005d4 <pixel+0x46>
200005d2:	e0a7      	b.n	20000724 <pixel+0x196>
        return;
    }
    if(set != 1 && set != 0){
200005d4:	1d7b      	adds	r3, r7, #5
200005d6:	781b      	ldrb	r3, [r3, #0]
200005d8:	2b01      	cmp	r3, #1
200005da:	d004      	beq.n	200005e6 <pixel+0x58>
200005dc:	1d7b      	adds	r3, r7, #5
200005de:	781b      	ldrb	r3, [r3, #0]
200005e0:	2b00      	cmp	r3, #0
200005e2:	d000      	beq.n	200005e6 <pixel+0x58>
200005e4:	e0a0      	b.n	20000728 <pixel+0x19a>
        return;
    }
    
    uint8_t index = (y-1)/8;
200005e6:	1dbb      	adds	r3, r7, #6
200005e8:	781b      	ldrb	r3, [r3, #0]
200005ea:	3b01      	subs	r3, #1
200005ec:	2b00      	cmp	r3, #0
200005ee:	da00      	bge.n	200005f2 <pixel+0x64>
200005f0:	3307      	adds	r3, #7
200005f2:	10db      	asrs	r3, r3, #3
200005f4:	001a      	movs	r2, r3
200005f6:	230c      	movs	r3, #12
200005f8:	18fb      	adds	r3, r7, r3
200005fa:	701a      	strb	r2, [r3, #0]
    // Create mask for y, works as well as switch from book, but with less code
    uint8_t mask = 1;
200005fc:	230f      	movs	r3, #15
200005fe:	18fb      	adds	r3, r7, r3
20000600:	2201      	movs	r2, #1
20000602:	701a      	strb	r2, [r3, #0]
    mask = mask << ((y-1)%8);
20000604:	230f      	movs	r3, #15
20000606:	18fb      	adds	r3, r7, r3
20000608:	781a      	ldrb	r2, [r3, #0]
2000060a:	1dbb      	adds	r3, r7, #6
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	3b01      	subs	r3, #1
20000610:	4947      	ldr	r1, [pc, #284]	; (20000730 <pixel+0x1a2>)
20000612:	400b      	ands	r3, r1
20000614:	d504      	bpl.n	20000620 <pixel+0x92>
20000616:	3b01      	subs	r3, #1
20000618:	2108      	movs	r1, #8
2000061a:	4249      	negs	r1, r1
2000061c:	430b      	orrs	r3, r1
2000061e:	3301      	adds	r3, #1
20000620:	409a      	lsls	r2, r3
20000622:	230f      	movs	r3, #15
20000624:	18fb      	adds	r3, r7, r3
20000626:	701a      	strb	r2, [r3, #0]
		case 6: mask = 0x40; break;
		case 7: mask = 0x80; break;
	}*/
    
    // Invert mask if the bit is going to get cleared
    if(set == 0){
20000628:	1d7b      	adds	r3, r7, #5
2000062a:	781b      	ldrb	r3, [r3, #0]
2000062c:	2b00      	cmp	r3, #0
2000062e:	d106      	bne.n	2000063e <pixel+0xb0>
        mask = ~mask;
20000630:	230f      	movs	r3, #15
20000632:	18fb      	adds	r3, r7, r3
20000634:	220f      	movs	r2, #15
20000636:	18ba      	adds	r2, r7, r2
20000638:	7812      	ldrb	r2, [r2, #0]
2000063a:	43d2      	mvns	r2, r2
2000063c:	701a      	strb	r2, [r3, #0]
    }
    
    uint8_t x_actual;
    uint8_t controller;
    // Select applicable chip (screen half), and store the actual value of x
    if(x > 64){
2000063e:	1dfb      	adds	r3, r7, #7
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	2b40      	cmp	r3, #64	; 0x40
20000644:	d90a      	bls.n	2000065c <pixel+0xce>
        controller = B_CS2;
20000646:	230d      	movs	r3, #13
20000648:	18fb      	adds	r3, r7, r3
2000064a:	2210      	movs	r2, #16
2000064c:	701a      	strb	r2, [r3, #0]
        x_actual = x - 65;
2000064e:	230e      	movs	r3, #14
20000650:	18fb      	adds	r3, r7, r3
20000652:	1dfa      	adds	r2, r7, #7
20000654:	7812      	ldrb	r2, [r2, #0]
20000656:	3a41      	subs	r2, #65	; 0x41
20000658:	701a      	strb	r2, [r3, #0]
2000065a:	e009      	b.n	20000670 <pixel+0xe2>
    } else {
        controller = B_CS1;
2000065c:	230d      	movs	r3, #13
2000065e:	18fb      	adds	r3, r7, r3
20000660:	2208      	movs	r2, #8
20000662:	701a      	strb	r2, [r3, #0]
        x_actual = x - 1;
20000664:	230e      	movs	r3, #14
20000666:	18fb      	adds	r3, r7, r3
20000668:	1dfa      	adds	r2, r7, #7
2000066a:	7812      	ldrb	r2, [r2, #0]
2000066c:	3a01      	subs	r2, #1
2000066e:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000670:	230e      	movs	r3, #14
20000672:	18fb      	adds	r3, r7, r3
20000674:	781b      	ldrb	r3, [r3, #0]
20000676:	2240      	movs	r2, #64	; 0x40
20000678:	4313      	orrs	r3, r2
2000067a:	b2da      	uxtb	r2, r3
2000067c:	230d      	movs	r3, #13
2000067e:	18fb      	adds	r3, r7, r3
20000680:	781b      	ldrb	r3, [r3, #0]
20000682:	0019      	movs	r1, r3
20000684:	0010      	movs	r0, r2
20000686:	f7ff fec9 	bl	2000041c <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
2000068a:	230c      	movs	r3, #12
2000068c:	18fb      	adds	r3, r7, r3
2000068e:	781b      	ldrb	r3, [r3, #0]
20000690:	2248      	movs	r2, #72	; 0x48
20000692:	4252      	negs	r2, r2
20000694:	4313      	orrs	r3, r2
20000696:	b2da      	uxtb	r2, r3
20000698:	230d      	movs	r3, #13
2000069a:	18fb      	adds	r3, r7, r3
2000069c:	781b      	ldrb	r3, [r3, #0]
2000069e:	0019      	movs	r1, r3
200006a0:	0010      	movs	r0, r2
200006a2:	f7ff febb 	bl	2000041c <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
200006a6:	230b      	movs	r3, #11
200006a8:	18fc      	adds	r4, r7, r3
200006aa:	230d      	movs	r3, #13
200006ac:	18fb      	adds	r3, r7, r3
200006ae:	781b      	ldrb	r3, [r3, #0]
200006b0:	0018      	movs	r0, r3
200006b2:	f7ff fef6 	bl	200004a2 <graphic_read_data>
200006b6:	0003      	movs	r3, r0
200006b8:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
200006ba:	230e      	movs	r3, #14
200006bc:	18fb      	adds	r3, r7, r3
200006be:	781b      	ldrb	r3, [r3, #0]
200006c0:	2240      	movs	r2, #64	; 0x40
200006c2:	4313      	orrs	r3, r2
200006c4:	b2da      	uxtb	r2, r3
200006c6:	230d      	movs	r3, #13
200006c8:	18fb      	adds	r3, r7, r3
200006ca:	781b      	ldrb	r3, [r3, #0]
200006cc:	0019      	movs	r1, r3
200006ce:	0010      	movs	r0, r2
200006d0:	f7ff fea4 	bl	2000041c <graphic_write_command>
    if(set == 1){
200006d4:	1d7b      	adds	r3, r7, #5
200006d6:	781b      	ldrb	r3, [r3, #0]
200006d8:	2b01      	cmp	r3, #1
200006da:	d10a      	bne.n	200006f2 <pixel+0x164>
        mask |= temp;
200006dc:	230f      	movs	r3, #15
200006de:	18fb      	adds	r3, r7, r3
200006e0:	220f      	movs	r2, #15
200006e2:	18b9      	adds	r1, r7, r2
200006e4:	220b      	movs	r2, #11
200006e6:	18ba      	adds	r2, r7, r2
200006e8:	7809      	ldrb	r1, [r1, #0]
200006ea:	7812      	ldrb	r2, [r2, #0]
200006ec:	430a      	orrs	r2, r1
200006ee:	701a      	strb	r2, [r3, #0]
200006f0:	e009      	b.n	20000706 <pixel+0x178>
    } else {
        mask &= temp;
200006f2:	230f      	movs	r3, #15
200006f4:	18fb      	adds	r3, r7, r3
200006f6:	220f      	movs	r2, #15
200006f8:	18ba      	adds	r2, r7, r2
200006fa:	210b      	movs	r1, #11
200006fc:	1879      	adds	r1, r7, r1
200006fe:	7812      	ldrb	r2, [r2, #0]
20000700:	7809      	ldrb	r1, [r1, #0]
20000702:	400a      	ands	r2, r1
20000704:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
20000706:	230d      	movs	r3, #13
20000708:	18fb      	adds	r3, r7, r3
2000070a:	781a      	ldrb	r2, [r3, #0]
2000070c:	230f      	movs	r3, #15
2000070e:	18fb      	adds	r3, r7, r3
20000710:	781b      	ldrb	r3, [r3, #0]
20000712:	0011      	movs	r1, r2
20000714:	0018      	movs	r0, r3
20000716:	f7ff fea1 	bl	2000045c <graphic_write_data>
	delay_500ns();
2000071a:	f7ff fc93 	bl	20000044 <delay_500ns>
2000071e:	e004      	b.n	2000072a <pixel+0x19c>
        return;
20000720:	46c0      	nop			; (mov r8, r8)
20000722:	e002      	b.n	2000072a <pixel+0x19c>
        return;
20000724:	46c0      	nop			; (mov r8, r8)
20000726:	e000      	b.n	2000072a <pixel+0x19c>
        return;
20000728:	46c0      	nop			; (mov r8, r8)
}
2000072a:	46bd      	mov	sp, r7
2000072c:	b005      	add	sp, #20
2000072e:	bd90      	pop	{r4, r7, pc}
20000730:	80000007 	andhi	r0, r0, r7

20000734 <draw_object>:

void draw_object(POBJECT object){
20000734:	b580      	push	{r7, lr}
20000736:	b084      	sub	sp, #16
20000738:	af00      	add	r7, sp, #0
2000073a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
2000073c:	2300      	movs	r3, #0
2000073e:	60fb      	str	r3, [r7, #12]
20000740:	e020      	b.n	20000784 <draw_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 1);
20000742:	687b      	ldr	r3, [r7, #4]
20000744:	681a      	ldr	r2, [r3, #0]
20000746:	68fb      	ldr	r3, [r7, #12]
20000748:	3304      	adds	r3, #4
2000074a:	005b      	lsls	r3, r3, #1
2000074c:	18d3      	adds	r3, r2, r3
2000074e:	3304      	adds	r3, #4
20000750:	781a      	ldrb	r2, [r3, #0]
20000752:	687b      	ldr	r3, [r7, #4]
20000754:	68db      	ldr	r3, [r3, #12]
20000756:	b2db      	uxtb	r3, r3
20000758:	18d3      	adds	r3, r2, r3
2000075a:	b2d8      	uxtb	r0, r3
2000075c:	687b      	ldr	r3, [r7, #4]
2000075e:	681a      	ldr	r2, [r3, #0]
20000760:	68fb      	ldr	r3, [r7, #12]
20000762:	3304      	adds	r3, #4
20000764:	005b      	lsls	r3, r3, #1
20000766:	18d3      	adds	r3, r2, r3
20000768:	3305      	adds	r3, #5
2000076a:	781a      	ldrb	r2, [r3, #0]
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	691b      	ldr	r3, [r3, #16]
20000770:	b2db      	uxtb	r3, r3
20000772:	18d3      	adds	r3, r2, r3
20000774:	b2db      	uxtb	r3, r3
20000776:	2201      	movs	r2, #1
20000778:	0019      	movs	r1, r3
2000077a:	f7ff ff08 	bl	2000058e <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
2000077e:	68fb      	ldr	r3, [r7, #12]
20000780:	3301      	adds	r3, #1
20000782:	60fb      	str	r3, [r7, #12]
20000784:	687b      	ldr	r3, [r7, #4]
20000786:	681b      	ldr	r3, [r3, #0]
20000788:	681a      	ldr	r2, [r3, #0]
2000078a:	68fb      	ldr	r3, [r7, #12]
2000078c:	429a      	cmp	r2, r3
2000078e:	dcd8      	bgt.n	20000742 <draw_object+0xe>
	}
}
20000790:	46c0      	nop			; (mov r8, r8)
20000792:	46bd      	mov	sp, r7
20000794:	b004      	add	sp, #16
20000796:	bd80      	pop	{r7, pc}

20000798 <clear_object>:

void clear_object(POBJECT object){
20000798:	b580      	push	{r7, lr}
2000079a:	b084      	sub	sp, #16
2000079c:	af00      	add	r7, sp, #0
2000079e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
200007a0:	2300      	movs	r3, #0
200007a2:	60fb      	str	r3, [r7, #12]
200007a4:	e020      	b.n	200007e8 <clear_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 0);
200007a6:	687b      	ldr	r3, [r7, #4]
200007a8:	681a      	ldr	r2, [r3, #0]
200007aa:	68fb      	ldr	r3, [r7, #12]
200007ac:	3304      	adds	r3, #4
200007ae:	005b      	lsls	r3, r3, #1
200007b0:	18d3      	adds	r3, r2, r3
200007b2:	3304      	adds	r3, #4
200007b4:	781a      	ldrb	r2, [r3, #0]
200007b6:	687b      	ldr	r3, [r7, #4]
200007b8:	68db      	ldr	r3, [r3, #12]
200007ba:	b2db      	uxtb	r3, r3
200007bc:	18d3      	adds	r3, r2, r3
200007be:	b2d8      	uxtb	r0, r3
200007c0:	687b      	ldr	r3, [r7, #4]
200007c2:	681a      	ldr	r2, [r3, #0]
200007c4:	68fb      	ldr	r3, [r7, #12]
200007c6:	3304      	adds	r3, #4
200007c8:	005b      	lsls	r3, r3, #1
200007ca:	18d3      	adds	r3, r2, r3
200007cc:	3305      	adds	r3, #5
200007ce:	781a      	ldrb	r2, [r3, #0]
200007d0:	687b      	ldr	r3, [r7, #4]
200007d2:	691b      	ldr	r3, [r3, #16]
200007d4:	b2db      	uxtb	r3, r3
200007d6:	18d3      	adds	r3, r2, r3
200007d8:	b2db      	uxtb	r3, r3
200007da:	2200      	movs	r2, #0
200007dc:	0019      	movs	r1, r3
200007de:	f7ff fed6 	bl	2000058e <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
200007e2:	68fb      	ldr	r3, [r7, #12]
200007e4:	3301      	adds	r3, #1
200007e6:	60fb      	str	r3, [r7, #12]
200007e8:	687b      	ldr	r3, [r7, #4]
200007ea:	681b      	ldr	r3, [r3, #0]
200007ec:	681a      	ldr	r2, [r3, #0]
200007ee:	68fb      	ldr	r3, [r7, #12]
200007f0:	429a      	cmp	r2, r3
200007f2:	dcd8      	bgt.n	200007a6 <clear_object+0xe>
	}
}
200007f4:	46c0      	nop			; (mov r8, r8)
200007f6:	46bd      	mov	sp, r7
200007f8:	b004      	add	sp, #16
200007fa:	bd80      	pop	{r7, pc}

200007fc <move_object>:

void move_object(POBJECT object){
200007fc:	b580      	push	{r7, lr}
200007fe:	b082      	sub	sp, #8
20000800:	af00      	add	r7, sp, #0
20000802:	6078      	str	r0, [r7, #4]
	clear_object(object);
20000804:	687b      	ldr	r3, [r7, #4]
20000806:	0018      	movs	r0, r3
20000808:	f7ff ffc6 	bl	20000798 <clear_object>
	object->pos_x += object->dir_x;
2000080c:	687b      	ldr	r3, [r7, #4]
2000080e:	68da      	ldr	r2, [r3, #12]
20000810:	687b      	ldr	r3, [r7, #4]
20000812:	685b      	ldr	r3, [r3, #4]
20000814:	18d2      	adds	r2, r2, r3
20000816:	687b      	ldr	r3, [r7, #4]
20000818:	60da      	str	r2, [r3, #12]
	object->pos_y += object->dir_y;
2000081a:	687b      	ldr	r3, [r7, #4]
2000081c:	691a      	ldr	r2, [r3, #16]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	689b      	ldr	r3, [r3, #8]
20000822:	18d2      	adds	r2, r2, r3
20000824:	687b      	ldr	r3, [r7, #4]
20000826:	611a      	str	r2, [r3, #16]
	
	//bounce if object reaches edges of screen
	if (object->pos_x < 1 || (object->pos_x + object->geo->size_x) > 128){
20000828:	687b      	ldr	r3, [r7, #4]
2000082a:	68db      	ldr	r3, [r3, #12]
2000082c:	2b00      	cmp	r3, #0
2000082e:	dd07      	ble.n	20000840 <move_object+0x44>
20000830:	687b      	ldr	r3, [r7, #4]
20000832:	68da      	ldr	r2, [r3, #12]
20000834:	687b      	ldr	r3, [r7, #4]
20000836:	681b      	ldr	r3, [r3, #0]
20000838:	685b      	ldr	r3, [r3, #4]
2000083a:	18d3      	adds	r3, r2, r3
2000083c:	2b80      	cmp	r3, #128	; 0x80
2000083e:	dd04      	ble.n	2000084a <move_object+0x4e>
		object->dir_x = -object->dir_x;
20000840:	687b      	ldr	r3, [r7, #4]
20000842:	685b      	ldr	r3, [r3, #4]
20000844:	425a      	negs	r2, r3
20000846:	687b      	ldr	r3, [r7, #4]
20000848:	605a      	str	r2, [r3, #4]
	}
	if (object->pos_y < 1 || (object->pos_y + object->geo->size_y) > 64){
2000084a:	687b      	ldr	r3, [r7, #4]
2000084c:	691b      	ldr	r3, [r3, #16]
2000084e:	2b00      	cmp	r3, #0
20000850:	dd07      	ble.n	20000862 <move_object+0x66>
20000852:	687b      	ldr	r3, [r7, #4]
20000854:	691a      	ldr	r2, [r3, #16]
20000856:	687b      	ldr	r3, [r7, #4]
20000858:	681b      	ldr	r3, [r3, #0]
2000085a:	689b      	ldr	r3, [r3, #8]
2000085c:	18d3      	adds	r3, r2, r3
2000085e:	2b40      	cmp	r3, #64	; 0x40
20000860:	dd04      	ble.n	2000086c <move_object+0x70>
		object->dir_y = -object->dir_y;
20000862:	687b      	ldr	r3, [r7, #4]
20000864:	689b      	ldr	r3, [r3, #8]
20000866:	425a      	negs	r2, r3
20000868:	687b      	ldr	r3, [r7, #4]
2000086a:	609a      	str	r2, [r3, #8]
	}
	
	draw_object(object);
2000086c:	687b      	ldr	r3, [r7, #4]
2000086e:	0018      	movs	r0, r3
20000870:	f7ff ff60 	bl	20000734 <draw_object>
}
20000874:	46c0      	nop			; (mov r8, r8)
20000876:	46bd      	mov	sp, r7
20000878:	b002      	add	sp, #8
2000087a:	bd80      	pop	{r7, pc}

2000087c <set_object_speed>:

void set_object_speed(POBJECT object, int x, int y){
2000087c:	b580      	push	{r7, lr}
2000087e:	b084      	sub	sp, #16
20000880:	af00      	add	r7, sp, #0
20000882:	60f8      	str	r0, [r7, #12]
20000884:	60b9      	str	r1, [r7, #8]
20000886:	607a      	str	r2, [r7, #4]
	object->dir_x = x;
20000888:	68fb      	ldr	r3, [r7, #12]
2000088a:	68ba      	ldr	r2, [r7, #8]
2000088c:	605a      	str	r2, [r3, #4]
	object->dir_y = y;
2000088e:	68fb      	ldr	r3, [r7, #12]
20000890:	687a      	ldr	r2, [r7, #4]
20000892:	609a      	str	r2, [r3, #8]
}
20000894:	46c0      	nop			; (mov r8, r8)
20000896:	46bd      	mov	sp, r7
20000898:	b004      	add	sp, #16
2000089a:	bd80      	pop	{r7, pc}

2000089c <init_app>:

void init_app(void){
2000089c:	b580      	push	{r7, lr}
2000089e:	af00      	add	r7, sp, #0
		" LDR R0, =0x08000209\n"
		" BLX R0\n"
		);
#endif
	//port E is output
	GPIO_E.moder = 0x55555555;
200008a0:	4b04      	ldr	r3, [pc, #16]	; (200008b4 <init_app+0x18>)
200008a2:	4a05      	ldr	r2, [pc, #20]	; (200008b8 <init_app+0x1c>)
200008a4:	601a      	str	r2, [r3, #0]
	GPIO_E.ospeedr = 0x55555555;
200008a6:	4b03      	ldr	r3, [pc, #12]	; (200008b4 <init_app+0x18>)
200008a8:	4a03      	ldr	r2, [pc, #12]	; (200008b8 <init_app+0x1c>)
200008aa:	609a      	str	r2, [r3, #8]
200008ac:	46c0      	nop			; (mov r8, r8)
200008ae:	46bd      	mov	sp, r7
200008b0:	bd80      	pop	{r7, pc}
200008b2:	46c0      	nop			; (mov r8, r8)
200008b4:	40021000 	andmi	r1, r2, r0
200008b8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200008bc <asciidisplay_init>:
#include "asciidisplay.h"

void asciidisplay_init(void){    
200008bc:	b580      	push	{r7, lr}
200008be:	af00      	add	r7, sp, #0
    // Port E -> output
    GPIO_E.moder = 0x55555555;
200008c0:	4b0c      	ldr	r3, [pc, #48]	; (200008f4 <asciidisplay_init+0x38>)
200008c2:	4a0d      	ldr	r2, [pc, #52]	; (200008f8 <asciidisplay_init+0x3c>)
200008c4:	601a      	str	r2, [r3, #0]
    
    // ***DISPLAY INIT***    
    // 2 rows, characters are 5x8 dots
    ascii_command(0x38, 39, 1);
200008c6:	2201      	movs	r2, #1
200008c8:	2127      	movs	r1, #39	; 0x27
200008ca:	2038      	movs	r0, #56	; 0x38
200008cc:	f000 f8fe 	bl	20000acc <ascii_command>
    // Turn on display, turn on cursor, cursor not blinking
    ascii_command(0xE, 39, 1);
200008d0:	2201      	movs	r2, #1
200008d2:	2127      	movs	r1, #39	; 0x27
200008d4:	200e      	movs	r0, #14
200008d6:	f000 f8f9 	bl	20000acc <ascii_command>
    // Clear display
    ascii_command(0x1, 2, 0);
200008da:	2200      	movs	r2, #0
200008dc:	2102      	movs	r1, #2
200008de:	2001      	movs	r0, #1
200008e0:	f000 f8f4 	bl	20000acc <ascii_command>
    // Increment mode, no shift
    ascii_command(0x6, 39, 1);
200008e4:	2201      	movs	r2, #1
200008e6:	2127      	movs	r1, #39	; 0x27
200008e8:	2006      	movs	r0, #6
200008ea:	f000 f8ef 	bl	20000acc <ascii_command>
}
200008ee:	46c0      	nop			; (mov r8, r8)
200008f0:	46bd      	mov	sp, r7
200008f2:	bd80      	pop	{r7, pc}
200008f4:	40021000 	andmi	r1, r2, r0
200008f8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200008fc <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x){
200008fc:	b580      	push	{r7, lr}
200008fe:	b084      	sub	sp, #16
20000900:	af00      	add	r7, sp, #0
20000902:	0002      	movs	r2, r0
20000904:	1dfb      	adds	r3, r7, #7
20000906:	701a      	strb	r2, [r3, #0]
    // Set bits that are 1 in x to 1, leave rest be
    unsigned char port_val = GPIO_E.odrLow;
20000908:	4a0c      	ldr	r2, [pc, #48]	; (2000093c <ascii_ctrl_bit_set+0x40>)
2000090a:	230f      	movs	r3, #15
2000090c:	18fb      	adds	r3, r7, r3
2000090e:	7d12      	ldrb	r2, [r2, #20]
20000910:	701a      	strb	r2, [r3, #0]
    port_val |= x;
20000912:	230f      	movs	r3, #15
20000914:	18fb      	adds	r3, r7, r3
20000916:	220f      	movs	r2, #15
20000918:	18b9      	adds	r1, r7, r2
2000091a:	1dfa      	adds	r2, r7, #7
2000091c:	7809      	ldrb	r1, [r1, #0]
2000091e:	7812      	ldrb	r2, [r2, #0]
20000920:	430a      	orrs	r2, r1
20000922:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = port_val | B_SELECT;
20000924:	4a05      	ldr	r2, [pc, #20]	; (2000093c <ascii_ctrl_bit_set+0x40>)
20000926:	230f      	movs	r3, #15
20000928:	18fb      	adds	r3, r7, r3
2000092a:	781b      	ldrb	r3, [r3, #0]
2000092c:	2104      	movs	r1, #4
2000092e:	430b      	orrs	r3, r1
20000930:	b2db      	uxtb	r3, r3
20000932:	7513      	strb	r3, [r2, #20]
}
20000934:	46c0      	nop			; (mov r8, r8)
20000936:	46bd      	mov	sp, r7
20000938:	b004      	add	sp, #16
2000093a:	bd80      	pop	{r7, pc}
2000093c:	40021000 	andmi	r1, r2, r0

20000940 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000940:	b580      	push	{r7, lr}
20000942:	b084      	sub	sp, #16
20000944:	af00      	add	r7, sp, #0
20000946:	0002      	movs	r2, r0
20000948:	1dfb      	adds	r3, r7, #7
2000094a:	701a      	strb	r2, [r3, #0]
    // Set any bits that are 0 in x to 0, leave rest as they were
    unsigned char port_val = GPIO_E.odrLow;
2000094c:	4a0d      	ldr	r2, [pc, #52]	; (20000984 <ascii_ctrl_bit_clear+0x44>)
2000094e:	230f      	movs	r3, #15
20000950:	18fb      	adds	r3, r7, r3
20000952:	7d12      	ldrb	r2, [r2, #20]
20000954:	701a      	strb	r2, [r3, #0]
    port_val &= x ^ 0xFF;
20000956:	1dfb      	adds	r3, r7, #7
20000958:	781b      	ldrb	r3, [r3, #0]
2000095a:	43db      	mvns	r3, r3
2000095c:	b2da      	uxtb	r2, r3
2000095e:	230f      	movs	r3, #15
20000960:	18fb      	adds	r3, r7, r3
20000962:	210f      	movs	r1, #15
20000964:	1879      	adds	r1, r7, r1
20000966:	7809      	ldrb	r1, [r1, #0]
20000968:	400a      	ands	r2, r1
2000096a:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = port_val | B_SELECT;
2000096c:	4a05      	ldr	r2, [pc, #20]	; (20000984 <ascii_ctrl_bit_clear+0x44>)
2000096e:	230f      	movs	r3, #15
20000970:	18fb      	adds	r3, r7, r3
20000972:	781b      	ldrb	r3, [r3, #0]
20000974:	2104      	movs	r1, #4
20000976:	430b      	orrs	r3, r1
20000978:	b2db      	uxtb	r3, r3
2000097a:	7513      	strb	r3, [r2, #20]
    //delay_250ns();
}
2000097c:	46c0      	nop			; (mov r8, r8)
2000097e:	46bd      	mov	sp, r7
20000980:	b004      	add	sp, #16
20000982:	bd80      	pop	{r7, pc}
20000984:	40021000 	andmi	r1, r2, r0

20000988 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000988:	b580      	push	{r7, lr}
2000098a:	b082      	sub	sp, #8
2000098c:	af00      	add	r7, sp, #0
2000098e:	0002      	movs	r2, r0
20000990:	1dfb      	adds	r3, r7, #7
20000992:	701a      	strb	r2, [r3, #0]
    // Prepare display for sending command
    ascii_ctrl_bit_clear(B_RS);
20000994:	2001      	movs	r0, #1
20000996:	f7ff ffd3 	bl	20000940 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear( B_RW);
2000099a:	2002      	movs	r0, #2
2000099c:	f7ff ffd0 	bl	20000940 <ascii_ctrl_bit_clear>
    
    // Write command
    ascii_write_controller(command);
200009a0:	1dfb      	adds	r3, r7, #7
200009a2:	781b      	ldrb	r3, [r3, #0]
200009a4:	0018      	movs	r0, r3
200009a6:	f000 f861 	bl	20000a6c <ascii_write_controller>
}
200009aa:	46c0      	nop			; (mov r8, r8)
200009ac:	46bd      	mov	sp, r7
200009ae:	b002      	add	sp, #8
200009b0:	bd80      	pop	{r7, pc}

200009b2 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200009b2:	b580      	push	{r7, lr}
200009b4:	b082      	sub	sp, #8
200009b6:	af00      	add	r7, sp, #0
200009b8:	0002      	movs	r2, r0
200009ba:	1dfb      	adds	r3, r7, #7
200009bc:	701a      	strb	r2, [r3, #0]
    // Prepare display for writing data
    ascii_ctrl_bit_set(B_RS);
200009be:	2001      	movs	r0, #1
200009c0:	f7ff ff9c 	bl	200008fc <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200009c4:	2002      	movs	r0, #2
200009c6:	f7ff ffbb 	bl	20000940 <ascii_ctrl_bit_clear>
    
    // Write data
    ascii_write_controller(data);
200009ca:	1dfb      	adds	r3, r7, #7
200009cc:	781b      	ldrb	r3, [r3, #0]
200009ce:	0018      	movs	r0, r3
200009d0:	f000 f84c 	bl	20000a6c <ascii_write_controller>
}
200009d4:	46c0      	nop			; (mov r8, r8)
200009d6:	46bd      	mov	sp, r7
200009d8:	b002      	add	sp, #8
200009da:	bd80      	pop	{r7, pc}

200009dc <ascii_read_data>:

unsigned char ascii_read_data(void){
200009dc:	b590      	push	{r4, r7, lr}
200009de:	b083      	sub	sp, #12
200009e0:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    GPIO_E.moder &= 0x0000FFFF;
200009e2:	4b0e      	ldr	r3, [pc, #56]	; (20000a1c <ascii_read_data+0x40>)
200009e4:	4a0d      	ldr	r2, [pc, #52]	; (20000a1c <ascii_read_data+0x40>)
200009e6:	6812      	ldr	r2, [r2, #0]
200009e8:	0412      	lsls	r2, r2, #16
200009ea:	0c12      	lsrs	r2, r2, #16
200009ec:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading data
    ascii_ctrl_bit_set(B_RW);
200009ee:	2002      	movs	r0, #2
200009f0:	f7ff ff84 	bl	200008fc <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RS);
200009f4:	2001      	movs	r0, #1
200009f6:	f7ff ff81 	bl	200008fc <ascii_ctrl_bit_set>
    
    return_value = ascii_read_controller();
200009fa:	1dfc      	adds	r4, r7, #7
200009fc:	f000 f84e 	bl	20000a9c <ascii_read_controller>
20000a00:	0003      	movs	r3, r0
20000a02:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    GPIO_E.moder |= 0x55550000;
20000a04:	4b05      	ldr	r3, [pc, #20]	; (20000a1c <ascii_read_data+0x40>)
20000a06:	4a05      	ldr	r2, [pc, #20]	; (20000a1c <ascii_read_data+0x40>)
20000a08:	6812      	ldr	r2, [r2, #0]
20000a0a:	4905      	ldr	r1, [pc, #20]	; (20000a20 <ascii_read_data+0x44>)
20000a0c:	430a      	orrs	r2, r1
20000a0e:	601a      	str	r2, [r3, #0]
    
    return return_value;
20000a10:	1dfb      	adds	r3, r7, #7
20000a12:	781b      	ldrb	r3, [r3, #0]
}
20000a14:	0018      	movs	r0, r3
20000a16:	46bd      	mov	sp, r7
20000a18:	b003      	add	sp, #12
20000a1a:	bd90      	pop	{r4, r7, pc}
20000a1c:	40021000 	andmi	r1, r2, r0
20000a20:	55550000 	ldrbpl	r0, [r5, #-0]

20000a24 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000a24:	b590      	push	{r4, r7, lr}
20000a26:	b083      	sub	sp, #12
20000a28:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    GPIO_E.moder &= 0x0000FFFF;
20000a2a:	4b0e      	ldr	r3, [pc, #56]	; (20000a64 <ascii_read_status+0x40>)
20000a2c:	4a0d      	ldr	r2, [pc, #52]	; (20000a64 <ascii_read_status+0x40>)
20000a2e:	6812      	ldr	r2, [r2, #0]
20000a30:	0412      	lsls	r2, r2, #16
20000a32:	0c12      	lsrs	r2, r2, #16
20000a34:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading status and address
    ascii_ctrl_bit_clear(B_RS);
20000a36:	2001      	movs	r0, #1
20000a38:	f7ff ff82 	bl	20000940 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000a3c:	2002      	movs	r0, #2
20000a3e:	f7ff ff5d 	bl	200008fc <ascii_ctrl_bit_set>
    
    // Read values from display
    return_value = ascii_read_controller();
20000a42:	1dfc      	adds	r4, r7, #7
20000a44:	f000 f82a 	bl	20000a9c <ascii_read_controller>
20000a48:	0003      	movs	r3, r0
20000a4a:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    GPIO_E.moder |= 0x55550000;
20000a4c:	4b05      	ldr	r3, [pc, #20]	; (20000a64 <ascii_read_status+0x40>)
20000a4e:	4a05      	ldr	r2, [pc, #20]	; (20000a64 <ascii_read_status+0x40>)
20000a50:	6812      	ldr	r2, [r2, #0]
20000a52:	4905      	ldr	r1, [pc, #20]	; (20000a68 <ascii_read_status+0x44>)
20000a54:	430a      	orrs	r2, r1
20000a56:	601a      	str	r2, [r3, #0]
    
    return return_value;
20000a58:	1dfb      	adds	r3, r7, #7
20000a5a:	781b      	ldrb	r3, [r3, #0]
}
20000a5c:	0018      	movs	r0, r3
20000a5e:	46bd      	mov	sp, r7
20000a60:	b003      	add	sp, #12
20000a62:	bd90      	pop	{r4, r7, pc}
20000a64:	40021000 	andmi	r1, r2, r0
20000a68:	55550000 	ldrbpl	r0, [r5, #-0]

20000a6c <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
20000a6c:	b580      	push	{r7, lr}
20000a6e:	b082      	sub	sp, #8
20000a70:	af00      	add	r7, sp, #0
20000a72:	0002      	movs	r2, r0
20000a74:	1dfb      	adds	r3, r7, #7
20000a76:	701a      	strb	r2, [r3, #0]
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
20000a78:	2040      	movs	r0, #64	; 0x40
20000a7a:	f7ff ff3f 	bl	200008fc <ascii_ctrl_bit_set>
    
    // Set data register values
    GPIO_E.odrHigh = byte;
20000a7e:	4a06      	ldr	r2, [pc, #24]	; (20000a98 <ascii_write_controller+0x2c>)
20000a80:	1dfb      	adds	r3, r7, #7
20000a82:	781b      	ldrb	r3, [r3, #0]
20000a84:	7553      	strb	r3, [r2, #21]
    
    // Wait for 230ns (here at least 250, hope this should still work)
    delay_250ns();
20000a86:	f7ff fad0 	bl	2000002a <delay_250ns>
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
20000a8a:	2040      	movs	r0, #64	; 0x40
20000a8c:	f7ff ff58 	bl	20000940 <ascii_ctrl_bit_clear>
}
20000a90:	46c0      	nop			; (mov r8, r8)
20000a92:	46bd      	mov	sp, r7
20000a94:	b002      	add	sp, #8
20000a96:	bd80      	pop	{r7, pc}
20000a98:	40021000 	andmi	r1, r2, r0

20000a9c <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20000a9c:	b580      	push	{r7, lr}
20000a9e:	b082      	sub	sp, #8
20000aa0:	af00      	add	r7, sp, #0
    unsigned char return_value;
    
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
20000aa2:	2040      	movs	r0, #64	; 0x40
20000aa4:	f7ff ff2a 	bl	200008fc <ascii_ctrl_bit_set>
    
    // Wait for at least 360ns, here at least 500
    delay_500ns();
20000aa8:	f7ff facc 	bl	20000044 <delay_500ns>
    
    // Read data register
    return_value = GPIO_E.idrHigh;
20000aac:	4a06      	ldr	r2, [pc, #24]	; (20000ac8 <ascii_read_controller+0x2c>)
20000aae:	1dfb      	adds	r3, r7, #7
20000ab0:	7c52      	ldrb	r2, [r2, #17]
20000ab2:	701a      	strb	r2, [r3, #0]
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
20000ab4:	2040      	movs	r0, #64	; 0x40
20000ab6:	f7ff ff43 	bl	20000940 <ascii_ctrl_bit_clear>
    
    return return_value;
20000aba:	1dfb      	adds	r3, r7, #7
20000abc:	781b      	ldrb	r3, [r3, #0]
}
20000abe:	0018      	movs	r0, r3
20000ac0:	46bd      	mov	sp, r7
20000ac2:	b002      	add	sp, #8
20000ac4:	bd80      	pop	{r7, pc}
20000ac6:	46c0      	nop			; (mov r8, r8)
20000ac8:	40021000 	andmi	r1, r2, r0

20000acc <ascii_command>:

void ascii_command(unsigned char command, unsigned int post_command_delay, unsigned short us){    
20000acc:	b580      	push	{r7, lr}
20000ace:	b082      	sub	sp, #8
20000ad0:	af00      	add	r7, sp, #0
20000ad2:	6039      	str	r1, [r7, #0]
20000ad4:	0011      	movs	r1, r2
20000ad6:	1dfb      	adds	r3, r7, #7
20000ad8:	1c02      	adds	r2, r0, #0
20000ada:	701a      	strb	r2, [r3, #0]
20000adc:	1d3b      	adds	r3, r7, #4
20000ade:	1c0a      	adds	r2, r1, #0
20000ae0:	801a      	strh	r2, [r3, #0]
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while((ascii_read_status() & 0x80) != 0);
20000ae2:	46c0      	nop			; (mov r8, r8)
20000ae4:	f7ff ff9e 	bl	20000a24 <ascii_read_status>
20000ae8:	0003      	movs	r3, r0
20000aea:	b25b      	sxtb	r3, r3
20000aec:	2b00      	cmp	r3, #0
20000aee:	dbf9      	blt.n	20000ae4 <ascii_command+0x18>
    delay_mikro(8);
20000af0:	2008      	movs	r0, #8
20000af2:	f7ff fac9 	bl	20000088 <delay_mikro>
    
    // Send command
    ascii_write_cmd(command);
20000af6:	1dfb      	adds	r3, r7, #7
20000af8:	781b      	ldrb	r3, [r3, #0]
20000afa:	0018      	movs	r0, r3
20000afc:	f7ff ff44 	bl	20000988 <ascii_write_cmd>
    
    // Wait for the entered amount of time
    if(us == 1){
20000b00:	1d3b      	adds	r3, r7, #4
20000b02:	881b      	ldrh	r3, [r3, #0]
20000b04:	2b01      	cmp	r3, #1
20000b06:	d104      	bne.n	20000b12 <ascii_command+0x46>
        delay_mikro(post_command_delay);
20000b08:	683b      	ldr	r3, [r7, #0]
20000b0a:	0018      	movs	r0, r3
20000b0c:	f7ff fabc 	bl	20000088 <delay_mikro>
    } else {
        delay_milli(post_command_delay);
    }
}
20000b10:	e003      	b.n	20000b1a <ascii_command+0x4e>
        delay_milli(post_command_delay);
20000b12:	683b      	ldr	r3, [r7, #0]
20000b14:	0018      	movs	r0, r3
20000b16:	f7ff fad5 	bl	200000c4 <delay_milli>
}
20000b1a:	46c0      	nop			; (mov r8, r8)
20000b1c:	46bd      	mov	sp, r7
20000b1e:	b002      	add	sp, #8
20000b20:	bd80      	pop	{r7, pc}

20000b22 <ascii_write_char>:

void ascii_write_char(unsigned char character){
20000b22:	b580      	push	{r7, lr}
20000b24:	b082      	sub	sp, #8
20000b26:	af00      	add	r7, sp, #0
20000b28:	0002      	movs	r2, r0
20000b2a:	1dfb      	adds	r3, r7, #7
20000b2c:	701a      	strb	r2, [r3, #0]
    // Prepare to check if display ready
    ascii_ctrl_bit_set(B_RW);
20000b2e:	2002      	movs	r0, #2
20000b30:	f7ff fee4 	bl	200008fc <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RS);
20000b34:	2001      	movs	r0, #1
20000b36:	f7ff ff03 	bl	20000940 <ascii_ctrl_bit_clear>
    
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while((ascii_read_status() & 0x80) != 0);
20000b3a:	46c0      	nop			; (mov r8, r8)
20000b3c:	f7ff ff72 	bl	20000a24 <ascii_read_status>
20000b40:	0003      	movs	r3, r0
20000b42:	b25b      	sxtb	r3, r3
20000b44:	2b00      	cmp	r3, #0
20000b46:	dbf9      	blt.n	20000b3c <ascii_write_char+0x1a>
    delay_mikro(8);
20000b48:	2008      	movs	r0, #8
20000b4a:	f7ff fa9d 	bl	20000088 <delay_mikro>
    
    // Write character do display
    ascii_write_data(character);
20000b4e:	1dfb      	adds	r3, r7, #7
20000b50:	781b      	ldrb	r3, [r3, #0]
20000b52:	0018      	movs	r0, r3
20000b54:	f7ff ff2d 	bl	200009b2 <ascii_write_data>
    
    // Delay for 43us
    delay_mikro(43);
20000b58:	202b      	movs	r0, #43	; 0x2b
20000b5a:	f7ff fa95 	bl	20000088 <delay_mikro>
}
20000b5e:	46c0      	nop			; (mov r8, r8)
20000b60:	46bd      	mov	sp, r7
20000b62:	b002      	add	sp, #8
20000b64:	bd80      	pop	{r7, pc}

20000b66 <gotoxy>:

void gotoxy(unsigned int row, unsigned int column){
20000b66:	b580      	push	{r7, lr}
20000b68:	b084      	sub	sp, #16
20000b6a:	af00      	add	r7, sp, #0
20000b6c:	6078      	str	r0, [r7, #4]
20000b6e:	6039      	str	r1, [r7, #0]
    // Make sure row not out of bounds
    if(row < 1 || row > 20){
20000b70:	687b      	ldr	r3, [r7, #4]
20000b72:	2b00      	cmp	r3, #0
20000b74:	d025      	beq.n	20000bc2 <gotoxy+0x5c>
20000b76:	687b      	ldr	r3, [r7, #4]
20000b78:	2b14      	cmp	r3, #20
20000b7a:	d822      	bhi.n	20000bc2 <gotoxy+0x5c>
        return;
    }
    // Make sure column not out of bounds
    if(column < 1 || column > 2){
20000b7c:	683b      	ldr	r3, [r7, #0]
20000b7e:	2b00      	cmp	r3, #0
20000b80:	d021      	beq.n	20000bc6 <gotoxy+0x60>
20000b82:	683b      	ldr	r3, [r7, #0]
20000b84:	2b02      	cmp	r3, #2
20000b86:	d81e      	bhi.n	20000bc6 <gotoxy+0x60>
        return;
    }
    
    // Set address to the correct location
    unsigned char address = row - 1;
20000b88:	687b      	ldr	r3, [r7, #4]
20000b8a:	b2da      	uxtb	r2, r3
20000b8c:	230f      	movs	r3, #15
20000b8e:	18fb      	adds	r3, r7, r3
20000b90:	3a01      	subs	r2, #1
20000b92:	701a      	strb	r2, [r3, #0]
    if(column == 2){
20000b94:	683b      	ldr	r3, [r7, #0]
20000b96:	2b02      	cmp	r3, #2
20000b98:	d106      	bne.n	20000ba8 <gotoxy+0x42>
        address += 0x40;
20000b9a:	230f      	movs	r3, #15
20000b9c:	18fb      	adds	r3, r7, r3
20000b9e:	220f      	movs	r2, #15
20000ba0:	18ba      	adds	r2, r7, r2
20000ba2:	7812      	ldrb	r2, [r2, #0]
20000ba4:	3240      	adds	r2, #64	; 0x40
20000ba6:	701a      	strb	r2, [r3, #0]
    }
    
    // Send command to mark correct spot
    ascii_command(0x80 | address, 39, 1);
20000ba8:	230f      	movs	r3, #15
20000baa:	18fb      	adds	r3, r7, r3
20000bac:	781b      	ldrb	r3, [r3, #0]
20000bae:	2280      	movs	r2, #128	; 0x80
20000bb0:	4252      	negs	r2, r2
20000bb2:	4313      	orrs	r3, r2
20000bb4:	b2db      	uxtb	r3, r3
20000bb6:	2201      	movs	r2, #1
20000bb8:	2127      	movs	r1, #39	; 0x27
20000bba:	0018      	movs	r0, r3
20000bbc:	f7ff ff86 	bl	20000acc <ascii_command>
20000bc0:	e002      	b.n	20000bc8 <gotoxy+0x62>
        return;
20000bc2:	46c0      	nop			; (mov r8, r8)
20000bc4:	e000      	b.n	20000bc8 <gotoxy+0x62>
        return;
20000bc6:	46c0      	nop			; (mov r8, r8)
}
20000bc8:	46bd      	mov	sp, r7
20000bca:	b004      	add	sp, #16
20000bcc:	bd80      	pop	{r7, pc}

20000bce <ascii_write_string>:

void ascii_write_string(char *s){
20000bce:	b580      	push	{r7, lr}
20000bd0:	b082      	sub	sp, #8
20000bd2:	af00      	add	r7, sp, #0
20000bd4:	6078      	str	r0, [r7, #4]
    // Write each character onto the display until the finishing character is reached
    while(*s != 0){
20000bd6:	e006      	b.n	20000be6 <ascii_write_string+0x18>
        ascii_write_char(*s++);
20000bd8:	687b      	ldr	r3, [r7, #4]
20000bda:	1c5a      	adds	r2, r3, #1
20000bdc:	607a      	str	r2, [r7, #4]
20000bde:	781b      	ldrb	r3, [r3, #0]
20000be0:	0018      	movs	r0, r3
20000be2:	f7ff ff9e 	bl	20000b22 <ascii_write_char>
    while(*s != 0){
20000be6:	687b      	ldr	r3, [r7, #4]
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d1f4      	bne.n	20000bd8 <ascii_write_string+0xa>
    }
}
20000bee:	46c0      	nop			; (mov r8, r8)
20000bf0:	46bd      	mov	sp, r7
20000bf2:	b002      	add	sp, #8
20000bf4:	bd80      	pop	{r7, pc}
20000bf6:	46c0      	nop			; (mov r8, r8)

20000bf8 <delay_counter>:
20000bf8:	00000000 	andeq	r0, r0, r0

20000bfc <mikro>:
20000bfc:	00000000 	andeq	r0, r0, r0

20000c00 <systick_flag>:
20000c00:	00000001 	andeq	r0, r0, r1

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000055 	andeq	r0, r0, r5, asr r0
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000001b 	andeq	r0, r0, fp, lsl r0
  10:	0000c60c 	andeq	ip, r0, ip, lsl #12
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	000000b3 	strheq	r0, [r0], -r3
  28:	06070402 	streq	r0, [r7], -r2, lsl #8
  2c:	02000000 	andeq	r0, r0, #0
  30:	00000702 	andeq	r0, r0, r2, lsl #14
  34:	c1030000 	mrsgt	r0, (UNDEF: 3)
  38:	01000000 	mrseq	r0, (UNDEF: 0)
  3c:	00001014 	andeq	r1, r0, r4, lsl r0
  40:	00000a20 	andeq	r0, r0, r0, lsr #20
  44:	039c0100 	orrseq	r0, ip, #0, 2
  48:	00000013 	andeq	r0, r0, r3, lsl r0
  4c:	00000b01 	andeq	r0, r0, r1, lsl #22
  50:	000c2000 	andeq	r2, ip, r0
  54:	9c010000 	stcls	0, cr0, [r1], {-0}
  58:	0001e200 	andeq	lr, r1, r0, lsl #4
  5c:	35000400 	strcc	r0, [r0, #-1024]	; 0xfffffc00
  60:	04000000 	streq	r0, [r0], #-0
  64:	00001b01 	andeq	r1, r0, r1, lsl #22
  68:	017f0c00 	cmneq	pc, r0, lsl #24
  6c:	001c0000 	andseq	r0, ip, r0
  70:	01782000 	cmneq	r8, r0
  74:	00940000 	addseq	r0, r4, r0
  78:	01020000 	mrseq	r0, (UNDEF: 2)
  7c:	0000b308 	andeq	fp, r0, r8, lsl #6
  80:	07040200 	streq	r0, [r4, -r0, lsl #4]
  84:	00000006 	andeq	r0, r0, r6
  88:	07020403 	streq	r0, [r2, -r3, lsl #8]
  8c:	00000068 	andeq	r0, r0, r8, rrx
  90:	00021304 	andeq	r1, r2, r4, lsl #6
  94:	21080200 	mrscs	r0, R8_fiq
  98:	00000000 	andeq	r0, r0, r0
  9c:	00022104 	andeq	r2, r2, r4, lsl #2
  a0:	21090200 	mrscs	r0, R9_fiq
  a4:	01000000 	mrseq	r0, (UNDEF: 0)
  a8:	0001f704 	andeq	pc, r1, r4, lsl #14
  ac:	210a0200 	mrscs	r0, R10_fiq
  b0:	02000000 	andeq	r0, r0, #0
  b4:	00022b04 	andeq	r2, r2, r4, lsl #22
  b8:	210b0200 	mrscs	r0, R11_fiq
  bc:	03000000 	movweq	r0, #0
  c0:	02040500 	andeq	r0, r4, #0, 10
  c4:	00008105 	andeq	r8, r0, r5, lsl #2
  c8:	016e0600 	cmneq	lr, r0, lsl #12
  cc:	06020000 	streq	r0, [r2], -r0
  d0:	00000028 	andeq	r0, r0, r8, lsr #32
  d4:	00002f07 	andeq	r2, r0, r7, lsl #30
  d8:	35080000 	strcc	r0, [r8, #-0]
  dc:	10000002 	andne	r0, r0, r2
  e0:	00b80402 	adcseq	r0, r8, r2, lsl #8
  e4:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
  e8:	00000000 	andeq	r0, r0, r0
  ec:	0001da04 	andeq	sp, r1, r4, lsl #20
  f0:	280e0200 	stmdacs	lr, {r9}
  f4:	04000000 	streq	r0, [r0], #-0
  f8:	6c61760a 	stclvs	6, cr7, [r1], #-40	; 0xffffffd8
  fc:	280f0200 	stmdacs	pc, {r9}	; <UNPREDICTABLE>
 100:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 104:	00026b04 	andeq	r6, r2, r4, lsl #22
 108:	28100200 	ldmdacs	r0, {r9}
 10c:	0c000000 	stceq	0, cr0, [r0], {-0}
 110:	014a0b00 	cmpeq	sl, r0, lsl #22
 114:	11020000 	mrsne	r0, (UNDEF: 2)
 118:	00000081 	andeq	r0, r0, r1, lsl #1
 11c:	0002710c 	andeq	r7, r2, ip, lsl #2
 120:	db030100 	blle	c0528 <startup-0x1ff3fad8>
 124:	05000000 	streq	r0, [r0, #-0]
 128:	000c0003 	andeq	r0, ip, r3
 12c:	05040d20 	streq	r0, [r4, #-3360]	; 0xfffff2e0
 130:	00746e69 	rsbseq	r6, r4, r9, ror #28
 134:	0000d40e 	andeq	sp, r0, lr, lsl #8
 138:	02050f00 	andeq	r0, r5, #0, 30
 13c:	04010000 	streq	r0, [r1], #-0
 140:	000000db 	ldrdeq	r0, [r0], -fp
 144:	0bf80305 	bleq	ffe00d60 <systick_flag+0xdfe00160>
 148:	590f2000 	stmdbpl	pc, {sp}	; <UNPREDICTABLE>
 14c:	01000002 	tsteq	r0, r2
 150:	0000d405 	andeq	sp, r0, r5, lsl #8
 154:	fc030500 	stc2	5, cr0, [r3], {-0}
 158:	1020000b 	eorne	r0, r0, fp
 15c:	0000012a 	andeq	r0, r0, sl, lsr #2
 160:	01483c01 	cmpeq	r8, r1, lsl #24
 164:	004c2000 	subeq	r2, ip, r0
 168:	9c010000 	stcls	0, cr0, [r1], {-0}
 16c:	00012511 	andeq	r2, r1, r1, lsl r5
 170:	30380100 	eorscc	r0, r8, r0, lsl #2
 174:	18200001 	stmdane	r0!, {r0}
 178:	01000000 	mrseq	r0, (UNDEF: 0)
 17c:	0173129c 			; <UNDEFINED> instruction: 0x0173129c
 180:	31010000 	mrscc	r0, (UNDEF: 1)
 184:	20000100 	andcs	r0, r0, r0, lsl #2
 188:	00000030 	andeq	r0, r0, r0, lsr r0
 18c:	01489c01 	cmpeq	r8, r1, lsl #24
 190:	4b130000 	blmi	4c0198 <startup-0x1fb3fe68>
 194:	01000002 	tsteq	r0, r2
 198:	00002831 	andeq	r2, r0, r1, lsr r8
 19c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1a0:	01191400 	tsteq	r9, r0, lsl #8
 1a4:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 1a8:	200000c4 	andcs	r0, r0, r4, asr #1
 1ac:	0000003c 	andeq	r0, r0, ip, lsr r0
 1b0:	016c9c01 	cmneq	ip, r1, lsl #24
 1b4:	44130000 	ldrmi	r0, [r3], #-0
 1b8:	01000001 	tsteq	r0, r1
 1bc:	00002829 	andeq	r2, r0, r9, lsr #16
 1c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1c4:	025f1400 	subseq	r1, pc, #0, 8
 1c8:	21010000 	mrscs	r0, (UNDEF: 1)
 1cc:	20000088 	andcs	r0, r0, r8, lsl #1
 1d0:	0000003c 	andeq	r0, r0, ip, lsr r0
 1d4:	01909c01 	orrseq	r9, r0, r1, lsl #24
 1d8:	44130000 	ldrmi	r0, [r3], #-0
 1dc:	01000001 	tsteq	r0, r1
 1e0:	00002821 	andeq	r2, r0, r1, lsr #16
 1e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1e8:	023e1000 	eorseq	r1, lr, #0
 1ec:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 1f0:	20000070 	andcs	r0, r0, r0, ror r0
 1f4:	00000018 	andeq	r0, r0, r8, lsl r0
 1f8:	52109c01 	andspl	r9, r0, #256	; 0x100
 1fc:	01000002 	tsteq	r0, r2
 200:	00006015 	andeq	r6, r0, r5, lsl r0
 204:	00001020 	andeq	r1, r0, r0, lsr #32
 208:	109c0100 	addsne	r0, ip, r0, lsl #2
 20c:	000001eb 	andeq	r0, r0, fp, ror #3
 210:	00441001 	subeq	r1, r4, r1
 214:	001c2000 	andseq	r2, ip, r0
 218:	9c010000 	stcls	0, cr0, [r1], {-0}
 21c:	0001df10 	andeq	sp, r1, r0, lsl pc
 220:	2a0b0100 	bcs	2c0628 <startup-0x1fd3f9d8>
 224:	1a200000 	bne	80022c <startup-0x1f7ffdd4>
 228:	01000000 	mrseq	r0, (UNDEF: 0)
 22c:	0159109c 			; <UNDEFINED> instruction: 0x0159109c
 230:	07010000 	streq	r0, [r1, -r0]
 234:	2000001c 	andcs	r0, r0, ip, lsl r0
 238:	0000000e 	andeq	r0, r0, lr
 23c:	a9009c01 	stmdbge	r0, {r0, sl, fp, ip, pc}
 240:	04000005 	streq	r0, [r0], #-5
 244:	00016800 	andeq	r6, r1, r0, lsl #16
 248:	1b010400 	blne	41250 <startup-0x1ffbedb0>
 24c:	0c000000 	stceq	0, cr0, [r0], {-0}
 250:	00000390 	muleq	r0, r0, r3
 254:	20000194 	mulcs	r0, r4, r1
 258:	00000728 	andeq	r0, r0, r8, lsr #14
 25c:	0000015d 	andeq	r0, r0, sp, asr r1
 260:	0c020202 	sfmeq	f0, 4, [r2], {2}
 264:	00000042 	andeq	r0, r0, r2, asr #32
 268:	00044403 	andeq	r4, r4, r3, lsl #8
 26c:	420d0200 	andmi	r0, sp, #0, 4
 270:	00000000 	andeq	r0, r0, r0
 274:	00042003 	andeq	r2, r4, r3
 278:	420e0200 	andmi	r0, lr, #0, 4
 27c:	01000000 	mrseq	r0, (UNDEF: 0)
 280:	08010400 	stmdaeq	r1, {sl}
 284:	000000b3 	strheq	r0, [r0], -r3
 288:	0a020405 	beq	812a4 <startup-0x1ff7ed5c>
 28c:	00000062 	andeq	r0, r0, r2, rrx
 290:	72646906 	rsbvc	r6, r4, #98304	; 0x18000
 294:	620b0200 	andvs	r0, fp, #0, 4
 298:	07000000 	streq	r0, [r0, -r0]
 29c:	00000021 	andeq	r0, r0, r1, lsr #32
 2a0:	07040400 	streq	r0, [r4, -r0, lsl #8]
 2a4:	00000006 	andeq	r0, r0, r6
 2a8:	13020202 	movwne	r0, #8706	; 0x2202
 2ac:	0000008a 	andeq	r0, r0, sl, lsl #1
 2b0:	00040503 	andeq	r0, r4, r3, lsl #10
 2b4:	42140200 	andsmi	r0, r4, #0, 4
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	00030f03 	andeq	r0, r3, r3, lsl #30
 2c0:	42150200 	andsmi	r0, r5, #0, 4
 2c4:	01000000 	mrseq	r0, (UNDEF: 0)
 2c8:	02040500 	andeq	r0, r4, #0, 10
 2cc:	0000a311 	andeq	sl, r0, r1, lsl r3
 2d0:	646f0600 	strbtvs	r0, [pc], #-1536	; 2d8 <startup-0x1ffffd28>
 2d4:	12020072 	andne	r0, r2, #114	; 0x72
 2d8:	00000062 	andeq	r0, r0, r2, rrx
 2dc:	00006907 	andeq	r6, r0, r7, lsl #18
 2e0:	88080000 	stmdahi	r8, {}	; <UNPREDICTABLE>
 2e4:	18000002 	stmdane	r0, {r1}
 2e8:	00ec0402 	rsceq	r0, ip, r2, lsl #8
 2ec:	9a030000 	bls	c02f4 <startup-0x1ff3fd0c>
 2f0:	02000004 	andeq	r0, r0, #4
 2f4:	00006205 	andeq	r6, r0, r5, lsl #4
 2f8:	eb030000 	bl	c0300 <startup-0x1ff3fd00>
 2fc:	02000002 	andeq	r0, r0, #2
 300:	00006206 	andeq	r6, r0, r6, lsl #4
 304:	37030400 	strcc	r0, [r3, -r0, lsl #8]
 308:	02000004 	andeq	r0, r0, #4
 30c:	00006207 	andeq	r6, r0, r7, lsl #4
 310:	8a030800 	bhi	c2318 <startup-0x1ff3dce8>
 314:	02000003 	andeq	r0, r0, #3
 318:	00006208 	andeq	r6, r0, r8, lsl #4
 31c:	49090c00 	stmdbmi	r9, {sl, fp}
 320:	10000000 	andne	r0, r0, r0
 324:	00008a09 	andeq	r8, r0, r9, lsl #20
 328:	0a001400 	beq	5330 <startup-0x1fffacd0>
 32c:	0000034a 	andeq	r0, r0, sl, asr #6
 330:	00a31802 	adceq	r1, r3, r2, lsl #16
 334:	fd0a0000 	stc2	0, cr0, [sl, #-0]
 338:	03000003 	movweq	r0, #3
 33c:	00004218 	andeq	r4, r0, r8, lsl r2
 340:	03170800 	tsteq	r7, #0, 16
 344:	03020000 	movweq	r0, #8192	; 0x2000
 348:	0001231a 	andeq	r2, r1, sl, lsl r3
 34c:	00780b00 	rsbseq	r0, r8, r0, lsl #22
 350:	00f71b03 	rscseq	r1, r7, r3, lsl #22
 354:	0b000000 	bleq	35c <startup-0x1ffffca4>
 358:	1c030079 	stcne	0, cr0, [r3], {121}	; 0x79
 35c:	000000f7 	strdeq	r0, [r0], -r7
 360:	1e0a0001 	cdpne	0, 0, cr0, cr10, cr1, {0}
 364:	03000003 	movweq	r0, #3
 368:	0001021d 	andeq	r0, r1, sp, lsl r2
 36c:	03ea0800 	mvneq	r0, #0, 16
 370:	03340000 	teqeq	r4, #0
 374:	00016a1f 	andeq	r6, r1, pc, lsl sl
 378:	04ad0300 	strteq	r0, [sp], #768	; 0x300
 37c:	20030000 	andcs	r0, r3, r0
 380:	0000016a 	andeq	r0, r0, sl, ror #2
 384:	02a30300 	adceq	r0, r3, #0, 6
 388:	21030000 	mrscs	r0, (UNDEF: 3)
 38c:	0000016a 	andeq	r0, r0, sl, ror #2
 390:	02aa0304 	adceq	r0, sl, #4, 6	; 0x10000000
 394:	22030000 	andcs	r0, r3, #0
 398:	0000016a 	andeq	r0, r0, sl, ror #2
 39c:	78700b08 	ldmdavc	r0!, {r3, r8, r9, fp}^
 3a0:	71230300 			; <UNDEFINED> instruction: 0x71230300
 3a4:	0c000001 	stceq	0, cr0, [r0], {1}
 3a8:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
 3ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
 3b0:	0001230d 	andeq	r2, r1, sp, lsl #6
 3b4:	00018100 	andeq	r8, r1, r0, lsl #2
 3b8:	01810e00 	orreq	r0, r1, r0, lsl #28
 3bc:	00130000 	andseq	r0, r3, r0
 3c0:	28070404 	stmdacs	r7, {r2, sl}
 3c4:	0a000004 	beq	3dc <startup-0x1ffffc24>
 3c8:	0000027e 	andeq	r0, r0, lr, ror r2
 3cc:	01932403 	orrseq	r2, r3, r3, lsl #8
 3d0:	040f0000 	streq	r0, [pc], #-0	; 3d8 <startup-0x1ffffc28>
 3d4:	0000012e 	andeq	r0, r0, lr, lsr #2
 3d8:	00049508 	andeq	r9, r4, r8, lsl #10
 3dc:	26032400 	strcs	r2, [r3], -r0, lsl #8
 3e0:	00000212 	andeq	r0, r0, r2, lsl r2
 3e4:	6f65670b 	svcvs	0x0065670b
 3e8:	88270300 	stmdahi	r7!, {r8, r9}
 3ec:	00000001 	andeq	r0, r0, r1
 3f0:	0002df03 	andeq	sp, r2, r3, lsl #30
 3f4:	6a280300 	bvs	a00ffc <startup-0x1f5ff004>
 3f8:	04000001 	streq	r0, [r0], #-1
 3fc:	0002e503 	andeq	lr, r2, r3, lsl #10
 400:	6a280300 	bvs	a01008 <startup-0x1f5feff8>
 404:	08000001 	stmdaeq	r0, {r0}
 408:	00043103 	andeq	r3, r4, r3, lsl #2
 40c:	6a290300 	bvs	a41014 <startup-0x1f5befec>
 410:	0c000001 	stceq	0, cr0, [r0], {1}
 414:	0002d903 	andeq	sp, r2, r3, lsl #18
 418:	6a290300 	bvs	a41020 <startup-0x1f5befe0>
 41c:	10000001 	andne	r0, r0, r1
 420:	0002bd03 	andeq	fp, r2, r3, lsl #26
 424:	232a0300 			; <UNDEFINED> instruction: 0x232a0300
 428:	14000002 	strne	r0, [r0], #-2
 42c:	00036003 	andeq	r6, r3, r3
 430:	232b0300 			; <UNDEFINED> instruction: 0x232b0300
 434:	18000002 	stmdane	r0, {r1}
 438:	0002c203 	andeq	ip, r2, r3, lsl #4
 43c:	232c0300 			; <UNDEFINED> instruction: 0x232c0300
 440:	1c000002 	stcne	0, cr0, [r0], {2}
 444:	00032d03 	andeq	r2, r3, r3, lsl #26
 448:	3e2d0300 	cdpcc	3, 2, cr0, cr13, cr0, {0}
 44c:	20000002 	andcs	r0, r0, r2
 450:	021d1000 	andseq	r1, sp, #0
 454:	1d110000 	ldcne	0, cr0, [r1, #-0]
 458:	00000002 	andeq	r0, r0, r2
 45c:	0199040f 	orrseq	r0, r9, pc, lsl #8
 460:	040f0000 	streq	r0, [pc], #-0	; 468 <startup-0x1ffffb98>
 464:	00000212 	andeq	r0, r0, r2, lsl r2
 468:	00023e10 	andeq	r3, r2, r0, lsl lr
 46c:	021d1100 	andseq	r1, sp, #0, 2
 470:	6a110000 	bvs	440478 <startup-0x1fbbfb88>
 474:	11000001 	tstne	r0, r1
 478:	0000016a 	andeq	r0, r0, sl, ror #2
 47c:	29040f00 	stmdbcs	r4, {r8, r9, sl, fp}
 480:	0a000002 	beq	490 <startup-0x1ffffb70>
 484:	000004d9 	ldrdeq	r0, [r0], -r9
 488:	021d2e03 	andseq	r2, sp, #3, 28	; 0x30
 48c:	f4120000 			; <UNDEFINED> instruction: 0xf4120000
 490:	01000003 	tsteq	r0, r3
 494:	089c011a 	ldmeq	ip, {r1, r3, r4, r8}
 498:	00202000 	eoreq	r2, r0, r0
 49c:	9c010000 	stcls	0, cr0, [r1], {-0}
 4a0:	00045e13 	andeq	r5, r4, r3, lsl lr
 4a4:	01150100 	tsteq	r5, r0, lsl #2
 4a8:	2000087c 	andcs	r0, r0, ip, ror r8
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	02a19c01 	adceq	r9, r1, #256	; 0x100
 4b4:	bc140000 	ldclt	0, cr0, [r4], {-0}
 4b8:	01000004 	tsteq	r0, r4
 4bc:	02440115 	subeq	r0, r4, #1073741829	; 0x40000005
 4c0:	91020000 	mrsls	r0, (UNDEF: 2)
 4c4:	00781574 	rsbseq	r1, r8, r4, ror r5
 4c8:	6a011501 	bvs	458d4 <startup-0x1ffba72c>
 4cc:	02000001 	andeq	r0, r0, #1
 4d0:	79157091 	ldmdbvc	r5, {r0, r4, r7, ip, sp, lr}
 4d4:	01150100 	tsteq	r5, r0, lsl #2
 4d8:	0000016a 	andeq	r0, r0, sl, ror #2
 4dc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 4e0:	0004b716 	andeq	fp, r4, r6, lsl r7
 4e4:	01050100 	mrseq	r0, (UNDEF: 21)
 4e8:	200007fc 	strdcs	r0, [r0], -ip
 4ec:	00000080 	andeq	r0, r0, r0, lsl #1
 4f0:	02c79c01 	sbceq	r9, r7, #256	; 0x100
 4f4:	bc140000 	ldclt	0, cr0, [r4], {-0}
 4f8:	01000004 	tsteq	r0, r4
 4fc:	02440105 	subeq	r0, r4, #1073741825	; 0x40000001
 500:	91020000 	mrsls	r0, (UNDEF: 2)
 504:	88170074 	ldmdahi	r7, {r2, r4, r5, r6}
 508:	01000004 	tsteq	r0, r4
 50c:	000798ff 	strdeq	r9, [r7], -pc	; <UNPREDICTABLE>
 510:	00006420 	andeq	r6, r0, r0, lsr #8
 514:	029c0100 	addseq	r0, ip, #0, 2
 518:	18000003 	stmdane	r0, {r0, r1}
 51c:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
 520:	0244ff01 	subeq	pc, r4, #1, 30
 524:	91020000 	mrsls	r0, (UNDEF: 2)
 528:	07a0196c 	streq	r1, [r0, ip, ror #18]!
 52c:	00542000 	subseq	r2, r4, r0
 530:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
 534:	01000100 	mrseq	r0, (UNDEF: 16)
 538:	0000016a 	andeq	r0, r0, sl, ror #2
 53c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 540:	02b11700 	adcseq	r1, r1, #0, 14
 544:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
 548:	20000734 	andcs	r0, r0, r4, lsr r7
 54c:	00000064 	andeq	r0, r0, r4, rrx
 550:	033c9c01 	teqeq	ip, #256	; 0x100
 554:	bc180000 	ldclt	0, cr0, [r8], {-0}
 558:	01000004 	tsteq	r0, r4
 55c:	000244f9 	strdeq	r4, [r2], -r9
 560:	6c910200 	lfmvs	f0, 4, [r1], {0}
 564:	00073c19 	andeq	r3, r7, r9, lsl ip
 568:	00005420 	andeq	r5, r0, r0, lsr #8
 56c:	00691b00 	rsbeq	r1, r9, r0, lsl #22
 570:	016afa01 	msreq	(UNDEF: 106), r1
 574:	91020000 	mrsls	r0, (UNDEF: 2)
 578:	17000074 	smlsdxne	r0, r4, r0, r0
 57c:	00000309 	andeq	r0, r0, r9, lsl #6
 580:	058ec101 	streq	ip, [lr, #257]	; 0x101
 584:	01a62000 			; <UNDEFINED> instruction: 0x01a62000
 588:	9c010000 	stcls	0, cr0, [r1], {-0}
 58c:	000003be 			; <UNDEFINED> instruction: 0x000003be
 590:	0100781c 	tsteq	r0, ip, lsl r8
 594:	0000f7c1 	andeq	pc, r0, r1, asr #15
 598:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 59c:	0100791c 	tsteq	r0, ip, lsl r9
 5a0:	0000f7c1 	andeq	pc, r0, r1, asr #15
 5a4:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 5a8:	7465731c 	strbtvc	r7, [r5], #-796	; 0xfffffce4
 5ac:	f7c10100 			; <UNDEFINED> instruction: 0xf7c10100
 5b0:	02000000 	andeq	r0, r0, #0
 5b4:	821d6591 	andshi	r6, sp, #608174080	; 0x24400000
 5b8:	01000004 	tsteq	r0, r4
 5bc:	0000f7cd 	andeq	pc, r0, sp, asr #15
 5c0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 5c4:	00043f1d 	andeq	r3, r4, sp, lsl pc
 5c8:	f7cf0100 			; <UNDEFINED> instruction: 0xf7cf0100
 5cc:	02000000 	andeq	r0, r0, #0
 5d0:	241d6f91 	ldrcs	r6, [sp], #-3985	; 0xfffff06f
 5d4:	01000003 	tsteq	r0, r3
 5d8:	0000f7e1 	andeq	pc, r0, r1, ror #15
 5dc:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 5e0:	0005bb1d 	andeq	fp, r5, sp, lsl fp
 5e4:	f7e20100 			; <UNDEFINED> instruction: 0xf7e20100
 5e8:	02000000 	andeq	r0, r0, #0
 5ec:	451d6d91 	ldrmi	r6, [sp, #-3473]	; 0xfffff26f
 5f0:	01000003 	tsteq	r0, r3
 5f4:	0000f7ee 	andeq	pc, r0, lr, ror #15
 5f8:	6b910200 	blvs	fe440e00 <systick_flag+0xde440200>
 5fc:	04e11700 	strbteq	r1, [r1], #1792	; 0x700
 600:	b6010000 	strlt	r0, [r1], -r0
 604:	20000528 	andcs	r0, r0, r8, lsr #10
 608:	00000066 	andeq	r0, r0, r6, rrx
 60c:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
 610:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 614:	58200005 	stmdapl	r0!, {r0, r2}
 618:	1d000000 	stcne	0, cr0, [r0, #-0]
 61c:	00000304 	andeq	r0, r0, r4, lsl #6
 620:	00f7b701 	rscseq	fp, r7, r1, lsl #14
 624:	91020000 	mrsls	r0, (UNDEF: 2)
 628:	05521977 	ldrbeq	r1, [r2, #-2423]	; 0xfffff689
 62c:	00222000 	eoreq	r2, r2, r0
 630:	611b0000 	tstvs	fp, r0
 634:	01006464 	tsteq	r0, r4, ror #8
 638:	0000f7bb 			; <UNDEFINED> instruction: 0x0000f7bb
 63c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 640:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
 644:	00000377 	andeq	r0, r0, r7, ror r3
 648:	04cca101 	strbeq	sl, [ip], #257	; 0x101
 64c:	005c2000 	subseq	r2, ip, r0
 650:	9c010000 	stcls	0, cr0, [r1], {-0}
 654:	0002f21f 	andeq	pc, r2, pc, lsl r2	; <UNPREDICTABLE>
 658:	f79c0100 			; <UNDEFINED> instruction: 0xf79c0100
 65c:	a2000000 	andge	r0, r0, #0
 660:	2a200004 	bcs	800678 <startup-0x1f7ff988>
 664:	01000000 	mrseq	r0, (UNDEF: 0)
 668:	00043d9c 	muleq	r4, ip, sp
 66c:	05bb1800 	ldreq	r1, [fp, #2048]!	; 0x800
 670:	9c010000 	stcls	0, cr0, [r1], {-0}
 674:	000000f7 	strdeq	r0, [r0], -r7
 678:	00779102 	rsbseq	r9, r7, r2, lsl #2
 67c:	00044b17 	andeq	r4, r4, r7, lsl fp
 680:	5c940100 	ldfpls	f0, [r4], {0}
 684:	46200004 	strtmi	r0, [r0], -r4
 688:	01000000 	mrseq	r0, (UNDEF: 0)
 68c:	00046f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
 690:	02ff1800 	rscseq	r1, pc, #0, 16
 694:	94010000 	strls	r0, [r1], #-0
 698:	000000f7 	strdeq	r0, [r0], -r7
 69c:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
 6a0:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
 6a4:	00f79401 	rscseq	r9, r7, r1, lsl #8
 6a8:	91020000 	mrsls	r0, (UNDEF: 2)
 6ac:	c3170076 	tstgt	r7, #118	; 0x76
 6b0:	01000004 	tsteq	r0, r4
 6b4:	00041c8d 	andeq	r1, r4, sp, lsl #25
 6b8:	00004020 	andeq	r4, r0, r0, lsr #32
 6bc:	a19c0100 	orrsge	r0, ip, r0, lsl #2
 6c0:	18000004 	stmdane	r0, {r2}
 6c4:	000004d1 	ldrdeq	r0, [r0], -r1
 6c8:	00f78d01 	rscseq	r8, r7, r1, lsl #26
 6cc:	91020000 	mrsls	r0, (UNDEF: 2)
 6d0:	05bb1877 	ldreq	r1, [fp, #2167]!	; 0x877
 6d4:	8d010000 	stchi	0, cr0, [r1, #-0]
 6d8:	000000f7 	strdeq	r0, [r0], -r7
 6dc:	00769102 	rsbseq	r9, r6, r2, lsl #2
 6e0:	00033717 	andeq	r3, r3, r7, lsl r7
 6e4:	9c710100 	ldflse	f0, [r1], #-0
 6e8:	80200003 	eorhi	r0, r0, r3
 6ec:	01000000 	mrseq	r0, (UNDEF: 0)
 6f0:	0004d39c 	muleq	r4, ip, r3
 6f4:	05381800 	ldreq	r1, [r8, #-2048]!	; 0xfffff800
 6f8:	71010000 	mrsvc	r0, (UNDEF: 1)
 6fc:	000000f7 	strdeq	r0, [r0], -r7
 700:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
 704:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
 708:	00f77101 	rscseq	r7, r7, r1, lsl #2
 70c:	91020000 	mrsls	r0, (UNDEF: 2)
 710:	a01f0076 	andsge	r0, pc, r6, ror r0	; <UNPREDICTABLE>
 714:	01000004 	tsteq	r0, r4
 718:	0000f746 	andeq	pc, r0, r6, asr #14
 71c:	00030c00 	andeq	r0, r3, r0, lsl #24
 720:	00009020 	andeq	r9, r0, r0, lsr #32
 724:	089c0100 	ldmeq	ip, {r8}
 728:	18000005 	stmdane	r0, {r0, r2}
 72c:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
 730:	00f74601 	rscseq	r4, r7, r1, lsl #12
 734:	91020000 	mrsls	r0, (UNDEF: 2)
 738:	56521b6f 	ldrbpl	r1, [r2], -pc, ror #22
 73c:	f7560100 			; <UNDEFINED> instruction: 0xf7560100
 740:	02000000 	andeq	r0, r0, #0
 744:	17007791 			; <UNDEFINED> instruction: 0x17007791
 748:	0000046f 	andeq	r0, r0, pc, ror #8
 74c:	02962401 	addseq	r2, r6, #16777216	; 0x1000000
 750:	00762000 	rsbseq	r2, r6, r0
 754:	9c010000 	stcls	0, cr0, [r1], {-0}
 758:	0000052c 	andeq	r0, r0, ip, lsr #10
 75c:	00040c1d 	andeq	r0, r4, sp, lsl ip
 760:	f7250100 			; <UNDEFINED> instruction: 0xf7250100
 764:	02000000 	andeq	r0, r0, #0
 768:	17007791 			; <UNDEFINED> instruction: 0x17007791
 76c:	000002c7 	andeq	r0, r0, r7, asr #5
 770:	023c1101 	eorseq	r1, ip, #1073741824	; 0x40000000
 774:	005a2000 	subseq	r2, sl, r0
 778:	9c010000 	stcls	0, cr0, [r1], {-0}
 77c:	00000550 	andeq	r0, r0, r0, asr r5
 780:	0005bb18 	andeq	fp, r5, r8, lsl fp
 784:	f7110100 			; <UNDEFINED> instruction: 0xf7110100
 788:	02000000 	andeq	r0, r0, #0
 78c:	20007791 	mulcs	r0, r1, r7
 790:	0000034f 	andeq	r0, r0, pc, asr #6
 794:	01e40a01 	mvneq	r0, r1, lsl #20
 798:	00582000 	subseq	r2, r8, r0
 79c:	9c010000 	stcls	0, cr0, [r1], {-0}
 7a0:	00000580 	andeq	r0, r0, r0, lsl #11
 7a4:	0100781c 	tsteq	r0, ip, lsl r8
 7a8:	0000f70a 	andeq	pc, r0, sl, lsl #14
 7ac:	6f910200 	svcvs	0x00910200
 7b0:	0003661d 	andeq	r6, r3, sp, lsl r6
 7b4:	f70b0100 			; <UNDEFINED> instruction: 0xf70b0100
 7b8:	02000000 	andeq	r0, r0, #0
 7bc:	21007791 			; <UNDEFINED> instruction: 0x21007791
 7c0:	0000028e 	andeq	r0, r0, lr, lsl #5
 7c4:	01940301 	orrseq	r0, r4, r1, lsl #6
 7c8:	00502000 	subseq	r2, r0, r0
 7cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 7d0:	0100781c 	tsteq	r0, ip, lsl r8
 7d4:	0000f703 	andeq	pc, r0, r3, lsl #14
 7d8:	6f910200 	svcvs	0x00910200
 7dc:	0003661d 	andeq	r6, r3, sp, lsl r6
 7e0:	f7040100 			; <UNDEFINED> instruction: 0xf7040100
 7e4:	02000000 	andeq	r0, r0, #0
 7e8:	00007791 	muleq	r0, r1, r7
 7ec:	00000322 	andeq	r0, r0, r2, lsr #6
 7f0:	036a0004 	cmneq	sl, #4
 7f4:	01040000 	mrseq	r0, (UNDEF: 4)
 7f8:	0000001b 	andeq	r0, r0, fp, lsl r0
 7fc:	00053e0c 	andeq	r3, r5, ip, lsl #28
 800:	0008bc00 	andeq	fp, r8, r0, lsl #24
 804:	00033a20 	andeq	r3, r3, r0, lsr #20
 808:	00032600 	andeq	r2, r3, r0, lsl #12
 80c:	02020200 	andeq	r0, r2, #0, 4
 810:	0000420c 	andeq	r4, r0, ip, lsl #4
 814:	04440300 	strbeq	r0, [r4], #-768	; 0xfffffd00
 818:	0d020000 	stceq	0, cr0, [r2, #-0]
 81c:	00000042 	andeq	r0, r0, r2, asr #32
 820:	04200300 	strteq	r0, [r0], #-768	; 0xfffffd00
 824:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 828:	00000042 	andeq	r0, r0, r2, asr #32
 82c:	01040001 	tsteq	r4, r1
 830:	0000b308 	andeq	fp, r0, r8, lsl #6
 834:	02040500 	andeq	r0, r4, #0, 10
 838:	0000620a 	andeq	r6, r0, sl, lsl #4
 83c:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
 840:	0b020072 	bleq	80a10 <startup-0x1ff7f5f0>
 844:	00000062 	andeq	r0, r0, r2, rrx
 848:	00002107 	andeq	r2, r0, r7, lsl #2
 84c:	04040000 	streq	r0, [r4], #-0
 850:	00000607 	andeq	r0, r0, r7, lsl #12
 854:	02020200 	andeq	r0, r2, #0, 4
 858:	00008a13 	andeq	r8, r0, r3, lsl sl
 85c:	04050300 	streq	r0, [r5], #-768	; 0xfffffd00
 860:	14020000 	strne	r0, [r2], #-0
 864:	00000042 	andeq	r0, r0, r2, asr #32
 868:	030f0300 	movweq	r0, #62208	; 0xf300
 86c:	15020000 	strne	r0, [r2, #-0]
 870:	00000042 	andeq	r0, r0, r2, asr #32
 874:	04050001 	streq	r0, [r5], #-1
 878:	00a31102 	adceq	r1, r3, r2, lsl #2
 87c:	6f060000 	svcvs	0x00060000
 880:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
 884:	00006212 	andeq	r6, r0, r2, lsl r2
 888:	00690700 	rsbeq	r0, r9, r0, lsl #14
 88c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 890:	00000288 	andeq	r0, r0, r8, lsl #5
 894:	ec040218 	sfm	f0, 4, [r4], {24}
 898:	03000000 	movweq	r0, #0
 89c:	0000049a 	muleq	r0, sl, r4
 8a0:	00620502 	rsbeq	r0, r2, r2, lsl #10
 8a4:	03000000 	movweq	r0, #0
 8a8:	000002eb 	andeq	r0, r0, fp, ror #5
 8ac:	00620602 	rsbeq	r0, r2, r2, lsl #12
 8b0:	03040000 	movweq	r0, #16384	; 0x4000
 8b4:	00000437 	andeq	r0, r0, r7, lsr r4
 8b8:	00620702 	rsbeq	r0, r2, r2, lsl #14
 8bc:	03080000 	movweq	r0, #32768	; 0x8000
 8c0:	0000038a 	andeq	r0, r0, sl, lsl #7
 8c4:	00620802 	rsbeq	r0, r2, r2, lsl #16
 8c8:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
 8cc:	00000049 	andeq	r0, r0, r9, asr #32
 8d0:	008a0910 	addeq	r0, sl, r0, lsl r9
 8d4:	00140000 	andseq	r0, r4, r0
 8d8:	00034a0a 	andeq	r4, r3, sl, lsl #20
 8dc:	a3180200 	tstge	r8, #0, 4
 8e0:	0b000000 	bleq	8e8 <startup-0x1ffff718>
 8e4:	0000051e 	andeq	r0, r0, lr, lsl r5
 8e8:	0bceaa01 	bleq	ff3ab0f4 <systick_flag+0xdf3aa4f4>
 8ec:	00282000 	eoreq	r2, r8, r0
 8f0:	9c010000 	stcls	0, cr0, [r1], {-0}
 8f4:	00000119 	andeq	r0, r0, r9, lsl r1
 8f8:	0100730c 	tsteq	r0, ip, lsl #6
 8fc:	000119aa 	andeq	r1, r1, sl, lsr #19
 900:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 904:	1f040d00 	svcne	0x00040d00
 908:	04000001 	streq	r0, [r0], #-1
 90c:	00bc0801 	adcseq	r0, ip, r1, lsl #16
 910:	120b0000 	andne	r0, fp, #0
 914:	01000005 	tsteq	r0, r5
 918:	000b6696 	muleq	fp, r6, r6
 91c:	00006820 	andeq	r6, r0, r0, lsr #16
 920:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
 924:	0c000001 	stceq	0, cr0, [r0], {1}
 928:	00776f72 	rsbseq	r6, r7, r2, ror pc
 92c:	00629601 	rsbeq	r9, r2, r1, lsl #12
 930:	91020000 	mrsls	r0, (UNDEF: 2)
 934:	05a90e6c 	streq	r0, [r9, #3692]!	; 0xe6c
 938:	96010000 	strls	r0, [r1], -r0
 93c:	00000062 	andeq	r0, r0, r2, rrx
 940:	0f689102 	svceq	0x00689102
 944:	000005f2 	strdeq	r0, [r0], -r2
 948:	0042a101 	subeq	sl, r2, r1, lsl #2
 94c:	91020000 	mrsls	r0, (UNDEF: 2)
 950:	550b0077 	strpl	r0, [fp, #-119]	; 0xffffff89
 954:	01000006 	tsteq	r0, r6
 958:	000b2286 	andeq	r2, fp, r6, lsl #5
 95c:	00004420 	andeq	r4, r0, r0, lsr #8
 960:	8a9c0100 	bhi	fe700d68 <systick_flag+0xde700168>
 964:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 968:	00000508 	andeq	r0, r0, r8, lsl #10
 96c:	00428601 	subeq	r8, r2, r1, lsl #12
 970:	91020000 	mrsls	r0, (UNDEF: 2)
 974:	0b0b0077 	bleq	2c0b58 <startup-0x1fd3f4a8>
 978:	01000006 	tsteq	r0, r6
 97c:	000acc76 	andeq	ip, sl, r6, ror ip
 980:	00005620 	andeq	r5, r0, r0, lsr #12
 984:	c99c0100 	ldmibgt	ip, {r8}
 988:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 98c:	000004d1 	ldrdeq	r0, [r0], -r1
 990:	00427601 	subeq	r7, r2, r1, lsl #12
 994:	91020000 	mrsls	r0, (UNDEF: 2)
 998:	05960e77 	ldreq	r0, [r6, #3703]	; 0xe77
 99c:	76010000 	strvc	r0, [r1], -r0
 9a0:	00000062 	andeq	r0, r0, r2, rrx
 9a4:	0c709102 	ldfeqp	f1, [r0], #-8
 9a8:	01007375 	tsteq	r0, r5, ror r3
 9ac:	0001c976 	andeq	ip, r1, r6, ror r9
 9b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 9b4:	07020400 	streq	r0, [r2, -r0, lsl #8]
 9b8:	00000000 	andeq	r0, r0, r0
 9bc:	0005b010 	andeq	fp, r5, r0, lsl r0
 9c0:	42640100 	rsbmi	r0, r4, #0, 2
 9c4:	9c000000 	stcls	0, cr0, [r0], {-0}
 9c8:	3020000a 	eorcc	r0, r0, sl
 9cc:	01000000 	mrseq	r0, (UNDEF: 0)
 9d0:	0001f89c 	muleq	r1, ip, r8
 9d4:	05310f00 	ldreq	r0, [r1, #-3840]!	; 0xfffff100
 9d8:	65010000 	strvs	r0, [r1, #-0]
 9dc:	00000042 	andeq	r0, r0, r2, asr #32
 9e0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 9e4:	00063e0b 	andeq	r3, r6, fp, lsl #28
 9e8:	6c560100 	ldfvse	f0, [r6], {-0}
 9ec:	3020000a 	eorcc	r0, r0, sl
 9f0:	01000000 	mrseq	r0, (UNDEF: 0)
 9f4:	00021c9c 	muleq	r2, ip, ip
 9f8:	05190e00 	ldreq	r0, [r9, #-3584]	; 0xfffff200
 9fc:	56010000 	strpl	r0, [r1], -r0
 a00:	00000042 	andeq	r0, r0, r2, asr #32
 a04:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a08:	0004f610 	andeq	pc, r4, r0, lsl r6	; <UNPREDICTABLE>
 a0c:	42440100 	submi	r0, r4, #0, 2
 a10:	24000000 	strcs	r0, [r0], #-0
 a14:	4820000a 	stmdami	r0!, {r1, r3}
 a18:	01000000 	mrseq	r0, (UNDEF: 0)
 a1c:	0002449c 	muleq	r2, ip, r4
 a20:	05310f00 	ldreq	r0, [r1, #-3840]!	; 0xfffff100
 a24:	45010000 	strmi	r0, [r1, #-0]
 a28:	00000042 	andeq	r0, r0, r2, asr #32
 a2c:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 a30:	00062e10 	andeq	r2, r6, r0, lsl lr
 a34:	42330100 	eorsmi	r0, r3, #0, 2
 a38:	dc000000 	stcle	0, cr0, [r0], {-0}
 a3c:	48200009 	stmdami	r0!, {r0, r3}
 a40:	01000000 	mrseq	r0, (UNDEF: 0)
 a44:	00026c9c 	muleq	r2, ip, ip
 a48:	05310f00 	ldreq	r0, [r1, #-3840]!	; 0xfffff100
 a4c:	34010000 	strcc	r0, [r1], #-0
 a50:	00000042 	andeq	r0, r0, r2, asr #32
 a54:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 a58:	0005fa0b 	andeq	pc, r5, fp, lsl #20
 a5c:	b22a0100 	eorlt	r0, sl, #0, 2
 a60:	2a200009 	bcs	800a8c <startup-0x1f7ff574>
 a64:	01000000 	mrseq	r0, (UNDEF: 0)
 a68:	0002909c 	muleq	r2, ip, r0
 a6c:	02ff0e00 	rscseq	r0, pc, #0, 28
 a70:	2a010000 	bcs	40a78 <startup-0x1ffbf588>
 a74:	00000042 	andeq	r0, r0, r2, asr #32
 a78:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a7c:	0005e20b 	andeq	lr, r5, fp, lsl #4
 a80:	88210100 	stmdahi	r1!, {r8}
 a84:	2a200009 	bcs	800ab0 <startup-0x1f7ff550>
 a88:	01000000 	mrseq	r0, (UNDEF: 0)
 a8c:	0002b49c 	muleq	r2, ip, r4
 a90:	04d10e00 	ldrbeq	r0, [r1], #3584	; 0xe00
 a94:	21010000 	mrscs	r0, (UNDEF: 1)
 a98:	00000042 	andeq	r0, r0, r2, asr #32
 a9c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 aa0:	00061911 	andeq	r1, r6, r1, lsl r9
 aa4:	40190100 	andsmi	r0, r9, r0, lsl #2
 aa8:	48200009 	stmdami	r0!, {r0, r3}
 aac:	01000000 	mrseq	r0, (UNDEF: 0)
 ab0:	0002e49c 	muleq	r2, ip, r4
 ab4:	00780c00 	rsbseq	r0, r8, r0, lsl #24
 ab8:	00421901 	subeq	r1, r2, r1, lsl #18
 abc:	91020000 	mrsls	r0, (UNDEF: 2)
 ac0:	05d90f6f 	ldrbeq	r0, [r9, #3951]	; 0xf6f
 ac4:	1b010000 	blne	40acc <startup-0x1ffbf534>
 ac8:	00000042 	andeq	r0, r0, r2, asr #32
 acc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 ad0:	0005c611 	andeq	ip, r5, r1, lsl r6
 ad4:	fc120100 	ldc2	1, cr0, [r2], {-0}
 ad8:	44200008 	strtmi	r0, [r0], #-8
 adc:	01000000 	mrseq	r0, (UNDEF: 0)
 ae0:	0003149c 	muleq	r3, ip, r4
 ae4:	00780c00 	rsbseq	r0, r8, r0, lsl #24
 ae8:	00421201 	subeq	r1, r2, r1, lsl #4
 aec:	91020000 	mrsls	r0, (UNDEF: 2)
 af0:	05d90f6f 	ldrbeq	r0, [r9, #3951]	; 0xf6f
 af4:	14010000 	strne	r0, [r1], #-0
 af8:	00000042 	andeq	r0, r0, r2, asr #32
 afc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 b00:	00066612 	andeq	r6, r6, r2, lsl r6
 b04:	bc030100 	stflts	f0, [r3], {-0}
 b08:	40200008 	eormi	r0, r0, r8
 b0c:	01000000 	mrseq	r0, (UNDEF: 0)
 b10:	Address 0x00000b10 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	3f002e03 	svccc	0x00002e03
  20:	3a0e0319 	bcc	380c8c <startup-0x1fc7f374>
  24:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  28:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  2c:	97184006 	ldrls	r4, [r8, -r6]
  30:	00001942 	andeq	r1, r0, r2, asr #18
  34:	01110100 	tsteq	r1, r0, lsl #2
  38:	0b130e25 	bleq	4c38d4 <startup-0x1fb3c72c>
  3c:	01110e03 	tsteq	r1, r3, lsl #28
  40:	17100612 			; <UNDEFINED> instruction: 0x17100612
  44:	24020000 	strcs	r0, [r2], #-0
  48:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  4c:	000e030b 	andeq	r0, lr, fp, lsl #6
  50:	01130300 	tsteq	r3, r0, lsl #6
  54:	0b3a0b0b 	bleq	e82c88 <startup-0x1f17d378>
  58:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  5c:	0d040000 	stceq	0, cr0, [r4, #-0]
  60:	3a0e0300 	bcc	380c68 <startup-0x1fc7f398>
  64:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  68:	000b3813 	andeq	r3, fp, r3, lsl r8
  6c:	01170500 	tsteq	r7, r0, lsl #10
  70:	0b3a0b0b 	bleq	e82ca4 <startup-0x1f17d35c>
  74:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  78:	0d060000 	stceq	0, cr0, [r6, #-0]
  7c:	3a0e0300 	bcc	380c84 <startup-0x1fc7f37c>
  80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  84:	07000013 	smladeq	r0, r3, r0, r0
  88:	1349000d 	movtne	r0, #36877	; 0x900d
  8c:	13080000 	movwne	r0, #32768	; 0x8000
  90:	0b0e0301 	bleq	380c9c <startup-0x1fc7f364>
  94:	3b0b3a0b 	blcc	2ce8c8 <startup-0x1fd31738>
  98:	0013010b 	andseq	r0, r3, fp, lsl #2
  9c:	000d0900 	andeq	r0, sp, r0, lsl #18
  a0:	0b381349 	bleq	e04dcc <startup-0x1f1fb234>
  a4:	0d0a0000 	stceq	0, cr0, [sl, #-0]
  a8:	3a080300 	bcc	200cb0 <startup-0x1fdff350>
  ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  b0:	000b3813 	andeq	r3, fp, r3, lsl r8
  b4:	00160b00 	andseq	r0, r6, r0, lsl #22
  b8:	0b3a0e03 	bleq	e838cc <startup-0x1f17c734>
  bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  c0:	340c0000 	strcc	r0, [ip], #-0
  c4:	3a0e0300 	bcc	380ccc <startup-0x1fc7f334>
  c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  cc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  d0:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
  d4:	0b0b0024 	bleq	2c016c <startup-0x1fd3fe94>
  d8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  dc:	350e0000 	strcc	r0, [lr, #-0]
  e0:	00134900 	andseq	r4, r3, r0, lsl #18
  e4:	00340f00 	eorseq	r0, r4, r0, lsl #30
  e8:	0b3a0e03 	bleq	e838fc <startup-0x1f17c704>
  ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  f0:	00001802 	andeq	r1, r0, r2, lsl #16
  f4:	3f002e10 	svccc	0x00002e10
  f8:	3a0e0319 	bcc	380d64 <startup-0x1fc7f29c>
  fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 100:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 104:	96184006 	ldrls	r4, [r8], -r6
 108:	00001942 	andeq	r1, r0, r2, asr #18
 10c:	3f002e11 	svccc	0x00002e11
 110:	3a0e0319 	bcc	380d7c <startup-0x1fc7f284>
 114:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 118:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 11c:	97184006 	ldrls	r4, [r8, -r6]
 120:	00001942 	andeq	r1, r0, r2, asr #18
 124:	3f012e12 	svccc	0x00012e12
 128:	3a0e0319 	bcc	380d94 <startup-0x1fc7f26c>
 12c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 130:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 134:	97184006 	ldrls	r4, [r8, -r6]
 138:	13011942 	movwne	r1, #6466	; 0x1942
 13c:	05130000 	ldreq	r0, [r3, #-0]
 140:	3a0e0300 	bcc	380d48 <startup-0x1fc7f2b8>
 144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	00180213 	andseq	r0, r8, r3, lsl r2
 14c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 150:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 154:	0b3b0b3a 	bleq	ec2e44 <startup-0x1f13d1bc>
 158:	01111927 	tsteq	r1, r7, lsr #18
 15c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 160:	01194296 			; <UNDEFINED> instruction: 0x01194296
 164:	00000013 	andeq	r0, r0, r3, lsl r0
 168:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 16c:	030b130e 	movweq	r1, #45838	; 0xb30e
 170:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 174:	00171006 	andseq	r1, r7, r6
 178:	01130200 	tsteq	r3, r0, lsl #4
 17c:	0b3a0b0b 	bleq	e82db0 <startup-0x1f17d250>
 180:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 184:	0d030000 	stceq	0, cr0, [r3, #-0]
 188:	3a0e0300 	bcc	380d90 <startup-0x1fc7f270>
 18c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 190:	000b3813 	andeq	r3, fp, r3, lsl r8
 194:	00240400 	eoreq	r0, r4, r0, lsl #8
 198:	0b3e0b0b 	bleq	f82dcc <startup-0x1f07d234>
 19c:	00000e03 	andeq	r0, r0, r3, lsl #28
 1a0:	0b011705 	bleq	45dbc <startup-0x1ffba244>
 1a4:	3b0b3a0b 	blcc	2ce9d8 <startup-0x1fd31628>
 1a8:	0013010b 	andseq	r0, r3, fp, lsl #2
 1ac:	000d0600 	andeq	r0, sp, r0, lsl #12
 1b0:	0b3a0803 	bleq	e821c4 <startup-0x1f17de3c>
 1b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1b8:	0d070000 	stceq	0, cr0, [r7, #-0]
 1bc:	00134900 	andseq	r4, r3, r0, lsl #18
 1c0:	01130800 	tsteq	r3, r0, lsl #16
 1c4:	0b0b0e03 	bleq	2c39d8 <startup-0x1fd3c628>
 1c8:	0b3b0b3a 	bleq	ec2eb8 <startup-0x1f13d148>
 1cc:	00001301 	andeq	r1, r0, r1, lsl #6
 1d0:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 1d4:	000b3813 	andeq	r3, fp, r3, lsl r8
 1d8:	00160a00 	andseq	r0, r6, r0, lsl #20
 1dc:	0b3a0e03 	bleq	e839f0 <startup-0x1f17c610>
 1e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e4:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 1e8:	3a080300 	bcc	200df0 <startup-0x1fdff210>
 1ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f0:	000b3813 	andeq	r3, fp, r3, lsl r8
 1f4:	00240c00 	eoreq	r0, r4, r0, lsl #24
 1f8:	0b3e0b0b 	bleq	f82e2c <startup-0x1f07d1d4>
 1fc:	00000803 	andeq	r0, r0, r3, lsl #16
 200:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
 204:	00130113 	andseq	r0, r3, r3, lsl r1
 208:	00210e00 	eoreq	r0, r1, r0, lsl #28
 20c:	0b2f1349 	bleq	bc4f38 <startup-0x1f43b0c8>
 210:	0f0f0000 	svceq	0x000f0000
 214:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 218:	10000013 	andne	r0, r0, r3, lsl r0
 21c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 220:	00001301 	andeq	r1, r0, r1, lsl #6
 224:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
 228:	12000013 	andne	r0, r0, #19
 22c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 230:	0b3a0e03 	bleq	e83a44 <startup-0x1f17c5bc>
 234:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 238:	06120111 			; <UNDEFINED> instruction: 0x06120111
 23c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 240:	13000019 	movwne	r0, #25
 244:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 248:	0b3a0e03 	bleq	e83a5c <startup-0x1f17c5a4>
 24c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 250:	06120111 			; <UNDEFINED> instruction: 0x06120111
 254:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 258:	00130119 	andseq	r0, r3, r9, lsl r1
 25c:	00051400 	andeq	r1, r5, r0, lsl #8
 260:	0b3a0e03 	bleq	e83a74 <startup-0x1f17c58c>
 264:	1349053b 	movtne	r0, #38203	; 0x953b
 268:	00001802 	andeq	r1, r0, r2, lsl #16
 26c:	03000515 	movweq	r0, #1301	; 0x515
 270:	3b0b3a08 	blcc	2cea98 <startup-0x1fd31568>
 274:	02134905 	andseq	r4, r3, #81920	; 0x14000
 278:	16000018 			; <UNDEFINED> instruction: 0x16000018
 27c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 280:	0b3a0e03 	bleq	e83a94 <startup-0x1f17c56c>
 284:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 288:	06120111 			; <UNDEFINED> instruction: 0x06120111
 28c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 290:	00130119 	andseq	r0, r3, r9, lsl r1
 294:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 298:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 29c:	0b3b0b3a 	bleq	ec2f8c <startup-0x1f13d074>
 2a0:	01111927 	tsteq	r1, r7, lsr #18
 2a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2a8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2ac:	18000013 	stmdane	r0, {r0, r1, r4}
 2b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 2b4:	0b3b0b3a 	bleq	ec2fa4 <startup-0x1f13d05c>
 2b8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2bc:	0b190000 	bleq	6402c4 <startup-0x1f9bfd3c>
 2c0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 2c4:	1a000006 	bne	2e4 <startup-0x1ffffd1c>
 2c8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2d0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2d4:	341b0000 	ldrcc	r0, [fp], #-0
 2d8:	3a080300 	bcc	200ee0 <startup-0x1fdff120>
 2dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2e0:	00180213 	andseq	r0, r8, r3, lsl r2
 2e4:	00051c00 	andeq	r1, r5, r0, lsl #24
 2e8:	0b3a0803 	bleq	e822fc <startup-0x1f17dd04>
 2ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2f0:	00001802 	andeq	r1, r0, r2, lsl #16
 2f4:	0300341d 	movweq	r3, #1053	; 0x41d
 2f8:	3b0b3a0e 	blcc	2ceb38 <startup-0x1fd314c8>
 2fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 300:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
 304:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 308:	0b3a0e03 	bleq	e83b1c <startup-0x1f17c4e4>
 30c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 310:	06120111 			; <UNDEFINED> instruction: 0x06120111
 314:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 318:	1f000019 	svcne	0x00000019
 31c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 320:	0b3a0e03 	bleq	e83b34 <startup-0x1f17c4cc>
 324:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 328:	01111349 	tsteq	r1, r9, asr #6
 32c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 330:	01194296 			; <UNDEFINED> instruction: 0x01194296
 334:	20000013 	andcs	r0, r0, r3, lsl r0
 338:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 33c:	0b3a0e03 	bleq	e83b50 <startup-0x1f17c4b0>
 340:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 344:	06120111 			; <UNDEFINED> instruction: 0x06120111
 348:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 34c:	00130119 	andseq	r0, r3, r9, lsl r1
 350:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
 354:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 358:	0b3b0b3a 	bleq	ec3048 <startup-0x1f13cfb8>
 35c:	01111927 	tsteq	r1, r7, lsr #18
 360:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 364:	00194297 	mulseq	r9, r7, r2
 368:	11010000 	mrsne	r0, (UNDEF: 1)
 36c:	130e2501 	movwne	r2, #58625	; 0xe501
 370:	110e030b 	tstne	lr, fp, lsl #6
 374:	10061201 	andne	r1, r6, r1, lsl #4
 378:	02000017 	andeq	r0, r0, #23
 37c:	0b0b0113 	bleq	2c07d0 <startup-0x1fd3f830>
 380:	0b3b0b3a 	bleq	ec3070 <startup-0x1f13cf90>
 384:	00001301 	andeq	r1, r0, r1, lsl #6
 388:	03000d03 	movweq	r0, #3331	; 0xd03
 38c:	3b0b3a0e 	blcc	2cebcc <startup-0x1fd31434>
 390:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 394:	0400000b 	streq	r0, [r0], #-11
 398:	0b0b0024 	bleq	2c0430 <startup-0x1fd3fbd0>
 39c:	0e030b3e 	vmoveq.16	d3[0], r0
 3a0:	17050000 	strne	r0, [r5, -r0]
 3a4:	3a0b0b01 	bcc	2c2fb0 <startup-0x1fd3d050>
 3a8:	010b3b0b 	tsteq	fp, fp, lsl #22
 3ac:	06000013 			; <UNDEFINED> instruction: 0x06000013
 3b0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 3b4:	0b3b0b3a 	bleq	ec30a4 <startup-0x1f13cf5c>
 3b8:	00001349 	andeq	r1, r0, r9, asr #6
 3bc:	49000d07 	stmdbmi	r0, {r0, r1, r2, r8, sl, fp}
 3c0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 3c4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 3c8:	0b3a0b0b 	bleq	e82ffc <startup-0x1f17d004>
 3cc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3d0:	0d090000 	stceq	0, cr0, [r9, #-0]
 3d4:	38134900 	ldmdacc	r3, {r8, fp, lr}
 3d8:	0a00000b 	beq	40c <startup-0x1ffffbf4>
 3dc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3e0:	0b3b0b3a 	bleq	ec30d0 <startup-0x1f13cf30>
 3e4:	00001349 	andeq	r1, r0, r9, asr #6
 3e8:	3f012e0b 	svccc	0x00012e0b
 3ec:	3a0e0319 	bcc	381058 <startup-0x1fc7efa8>
 3f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3f8:	96184006 	ldrls	r4, [r8], -r6
 3fc:	13011942 	movwne	r1, #6466	; 0x1942
 400:	050c0000 	streq	r0, [ip, #-0]
 404:	3a080300 	bcc	20100c <startup-0x1fdfeff4>
 408:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 40c:	00180213 	andseq	r0, r8, r3, lsl r2
 410:	000f0d00 	andeq	r0, pc, r0, lsl #26
 414:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 418:	050e0000 	streq	r0, [lr, #-0]
 41c:	3a0e0300 	bcc	381024 <startup-0x1fc7efdc>
 420:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 424:	00180213 	andseq	r0, r8, r3, lsl r2
 428:	00340f00 	eorseq	r0, r4, r0, lsl #30
 42c:	0b3a0e03 	bleq	e83c40 <startup-0x1f17c3c0>
 430:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 434:	00001802 	andeq	r1, r0, r2, lsl #16
 438:	3f012e10 	svccc	0x00012e10
 43c:	3a0e0319 	bcc	3810a8 <startup-0x1fc7ef58>
 440:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 444:	11134919 	tstne	r3, r9, lsl r9
 448:	40061201 	andmi	r1, r6, r1, lsl #4
 44c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 450:	00001301 	andeq	r1, r0, r1, lsl #6
 454:	3f012e11 	svccc	0x00012e11
 458:	3a0e0319 	bcc	3810c4 <startup-0x1fc7ef3c>
 45c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 460:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 464:	97184006 	ldrls	r4, [r8, -r6]
 468:	13011942 	movwne	r1, #6466	; 0x1942
 46c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 470:	03193f00 	tsteq	r9, #0, 30
 474:	3b0b3a0e 	blcc	2cecb4 <startup-0x1fd3134c>
 478:	1119270b 	tstne	r9, fp, lsl #14
 47c:	40061201 	andmi	r1, r6, r1, lsl #4
 480:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 484:	Address 0x00000484 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000000a 	andeq	r0, r0, sl
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	00590002 	subseq	r0, r9, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000001c 	andcs	r0, r0, ip, lsl r0
  3c:	00000178 	andeq	r0, r0, r8, ror r1
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	023f0002 	eorseq	r0, pc, #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000194 	mulcs	r0, r4, r1
  5c:	00000728 	andeq	r0, r0, r8, lsr #14
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	07ec0002 	strbeq	r0, [ip, r2]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
  7c:	0000033a 	andeq	r0, r0, sl, lsr r3
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000001a 	andcs	r0, r0, sl, lsl r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000090 	muleq	r0, r0, r0
   4:	00690002 	rsbeq	r0, r9, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
  20:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; fffffe88 <systick_flag+0xdffff288>
  24:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  28:	2f373130 	svccs	0x00373130
  2c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
  30:	30544144 	subscc	r4, r4, r4, asr #2
  34:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff78 <systick_flag+0xdffff378>
  38:	20736261 	rsbscs	r6, r3, r1, ror #4
  3c:	20646e61 	rsbcs	r6, r4, r1, ror #28
  40:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
  44:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
  48:	70732f73 	rsbsvc	r2, r3, r3, ror pc
  4c:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  50:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  54:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
  58:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
  5c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
  60:	00657275 	rsbeq	r7, r5, r5, ror r2
  64:	61747300 	cmnvs	r4, r0, lsl #6
  68:	70757472 	rsbsvc	r7, r5, r2, ror r4
  6c:	0100632e 	tsteq	r0, lr, lsr #6
  70:	00000000 	andeq	r0, r0, r0
  74:	00000205 	andeq	r0, r0, r5, lsl #4
  78:	0a032000 	beq	c8080 <startup-0x1ff37f80>
  7c:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  80:	01010003 	tsteq	r1, r3
  84:	10020500 	andne	r0, r2, r0, lsl #10
  88:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  8c:	022f0113 	eoreq	r0, pc, #-1073741820	; 0xc0000004
  90:	01010003 	tsteq	r1, r3
  94:	000000c5 	andeq	r0, r0, r5, asr #1
  98:	007e0002 	rsbseq	r0, lr, r2
  9c:	01020000 	mrseq	r0, (UNDEF: 2)
  a0:	000d0efb 	strdeq	r0, [sp], -fp
  a4:	01010101 	tsteq	r1, r1, lsl #2
  a8:	01000000 	mrseq	r0, (UNDEF: 0)
  ac:	43010000 	movwmi	r0, #4096	; 0x1000
  b0:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
  b4:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; ffffff1c <systick_flag+0xdffff31c>
  b8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  bc:	2f373130 	svccs	0x00373130
  c0:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
  c4:	30544144 	subscc	r4, r4, r4, asr #2
  c8:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; c <startup-0x1ffffff4>
  cc:	20736261 	rsbscs	r6, r3, r1, ror #4
  d0:	20646e61 	rsbcs	r6, r4, r1, ror #28
  d4:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
  d8:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
  dc:	70732f73 	rsbsvc	r2, r3, r3, ror pc
  e0:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  e4:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  e8:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
  ec:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
  f0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
  f4:	00657275 	rsbeq	r7, r5, r5, ror r2
  f8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  fc:	695f7961 	ldmdbvs	pc, {r0, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
 100:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 104:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
 108:	0100632e 	tsteq	r0, lr, lsr #6
 10c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 110:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
 114:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 118:	00000001 	andeq	r0, r0, r1
 11c:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
 120:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
 124:	2f3e2f2f 	svccs	0x003e2f2f
 128:	2f5a3d3d 	svccs	0x005a3d3d
 12c:	2f683d3d 	svccs	0x00683d3d
 130:	4e303e3d 	mrcmi	14, 1, r3, cr0, cr13, {1}
 134:	3d3d4b68 	vldmdbcc	sp!, {d4-<overflow reg d55>}
 138:	25383d3d 	ldrcs	r3, [r8, #-3389]!	; 0xfffff2c3
 13c:	3d3d4ba0 	vldmdbcc	sp!, {d4-d19}
 140:	25383d3d 	ldrcs	r3, [r8, #-3389]!	; 0xfffff2c3
 144:	4b3d4ba0 	blmi	f52fcc <startup-0x1f0ad034>
 148:	2f763d3d 	svccs	0x00763d3d
 14c:	3d2f763d 	stccc	6, cr7, [pc, #-244]!	; 60 <startup-0x1fffffa0>
 150:	354b4b59 	strbcc	r4, [fp, #-2905]	; 0xfffff4a7
 154:	3e1e331b 	mrccc	3, 0, r3, cr14, cr11, {0}
 158:	01000b02 	tsteq	r0, r2, lsl #22
 15c:	0001c501 	andeq	ip, r1, r1, lsl #10
 160:	8e000200 	cdphi	2, 0, cr0, cr0, cr0, {0}
 164:	02000000 	andeq	r0, r0, #0
 168:	0d0efb01 	vstreq	d15, [lr, #-4]
 16c:	01010100 	mrseq	r0, (UNDEF: 17)
 170:	00000001 	andeq	r0, r0, r1
 174:	01000001 	tsteq	r0, r1
 178:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 17c:	6f6f6863 	svcvs	0x006f6863
 180:	41442f6c 	cmpmi	r4, ip, ror #30
 184:	37313054 			; <UNDEFINED> instruction: 0x37313054
 188:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 18c:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 190:	2f373130 	svccs	0x00373130
 194:	7362614c 	cmnvc	r2, #76, 2
 198:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 19c:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 1a0:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 1a4:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 1a8:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 1ac:	625f7379 	subsvs	r7, pc, #-469762047	; 0xe4000001
 1b0:	72617a69 	rsbvc	r7, r1, #430080	; 0x69000
 1b4:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
 1b8:	6e657664 	cdpvs	6, 6, cr7, cr5, cr4, {3}
 1bc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 1c0:	72670000 	rsbvc	r0, r7, #0
 1c4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1c8:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 1cc:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1d0:	0100632e 	tsteq	r0, lr, lsr #6
 1d4:	70670000 	rsbvc	r0, r7, r0
 1d8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 1dc:	00000100 	andeq	r0, r0, r0, lsl #2
 1e0:	70617267 	rsbvc	r7, r1, r7, ror #4
 1e4:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 1e8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 1ec:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 1f0:	00000100 	andeq	r0, r0, r0, lsl #2
 1f4:	02050000 	andeq	r0, r5, #0
 1f8:	20000194 	mulcs	r0, r4, r1
 1fc:	91596714 	cmpls	r9, r4, lsl r7
 200:	67765983 	ldrbvs	r5, [r6, -r3, lsl #19]!
 204:	5983d759 	stmibpl	r3, {r0, r3, r4, r6, r8, r9, sl, ip, lr, pc}
 208:	10036768 	andne	r6, r3, r8, ror #14
 20c:	20700374 	rsbscs	r0, r0, r4, ror r3
 210:	034a1003 	movteq	r1, #40963	; 0xa003
 214:	223d2072 	eorscs	r2, sp, #114	; 0x72
 218:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 21c:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 220:	3f3e3f4c 	svccc	0x003e3f4c
 224:	3d323d3d 	ldccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 228:	313d4b30 	teqcc	sp, r0, lsr fp
 22c:	4a770367 	bmi	1dc0fd0 <startup-0x1e23f030>
 230:	25200a03 	strcs	r0, [r0, #-2563]!	; 0xfffff5fd
 234:	68a03d3e 	stmiavs	r0!, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 238:	593e3e3f 	ldmdbpl	lr!, {r0, r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 23c:	5a313d30 	bpl	c4f704 <startup-0x1f3b08fc>
 240:	3d593e3f 	ldclcc	14, cr3, [r9, #-252]	; 0xffffff04
 244:	033d5930 	teqeq	sp, #48, 18	; 0xc0000
 248:	ae3d2e0b 	cdpge	14, 3, cr2, cr13, cr11, {0}
 24c:	30594b92 			; <UNDEFINED> instruction: 0x30594b92
 250:	593f2f3d 	ldmdbpl	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
 254:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 258:	3d3f3d32 	ldccc	13, cr3, [pc, #-200]!	; 198 <startup-0x1ffffe68>
 25c:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
 260:	914c833d 	cmpls	ip, sp, lsr r3
 264:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 268:	59674c83 	stmdbpl	r7!, {r0, r1, r7, sl, fp, lr}^
 26c:	3e2f4c67 	cdpcc	12, 2, cr4, cr15, cr7, {3}
 270:	3e3d3e3e 	mrccc	14, 1, r3, cr13, cr14, {1}
 274:	4b4b4b3e 	blmi	12d2f74 <startup-0x1ed2d08c>
 278:	3e3d4c4b 	cdpcc	12, 3, cr4, cr13, cr11, {2}
 27c:	4c9f4b3d 	fldmiaxmi	pc, {d4-d33}	;@ Deprecated
 280:	03040200 	movweq	r0, #16896	; 0x4200
 284:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 288:	02004903 	andeq	r4, r0, #49152	; 0xc000
 28c:	58060104 	stmdapl	r6, {r2, r8}
 290:	02040200 	andeq	r0, r4, #0, 4
 294:	02004606 	andeq	r4, r0, #6291456	; 0x600000
 298:	58060104 	stmdapl	r6, {r2, r8}
 29c:	e64c5206 	strb	r5, [ip], -r6, lsl #4
 2a0:	01040200 	mrseq	r0, R12_usr
 2a4:	5b065806 	blpl	1962c4 <startup-0x1fe69d3c>
 2a8:	01040200 	mrseq	r0, R12_usr
 2ac:	5b065806 	blpl	1962cc <startup-0x1fe69d34>
 2b0:	01040200 	mrseq	r0, R12_usr
 2b4:	5c064a06 			; <UNDEFINED> instruction: 0x5c064a06
 2b8:	0d034bae 	vstreq	d4, [r3, #-696]	; 0xfffffd48
 2bc:	7a4b2008 	bvc	12c82e4 <startup-0x1ed37d1c>
 2c0:	4b764b4b 	blmi	1d92ff4 <startup-0x1e26d00c>
 2c4:	9fd7c969 	svcls	0x00d7c969
 2c8:	a0ae4bc9 	adcge	r4, lr, r9, asr #23
 2cc:	3c4e039f 	mcrrcc	3, 9, r0, lr, cr15
 2d0:	2d033131 	stfcss	f3, [r3, #-196]	; 0xffffff3c
 2d4:	004b5a20 	subeq	r5, fp, r0, lsr #20
 2d8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 2dc:	03040200 	movweq	r0, #16896	; 0x4200
 2e0:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 2e4:	3c060104 	stfccs	f0, [r6], {4}
 2e8:	4b4c6906 	blmi	131a708 <startup-0x1ece58f8>
 2ec:	03040200 	movweq	r0, #16896	; 0x4200
 2f0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2f4:	00c70803 	sbceq	r0, r7, r3, lsl #16
 2f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 2fc:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 300:	77754b4b 	ldrbvc	r4, [r5, -fp, asr #22]!
 304:	01040200 	mrseq	r0, R12_usr
 308:	83064a06 	movwhi	r4, #27142	; 0x6a06
 30c:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
 310:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 314:	4c4b5b83 	mcrrmi	11, 8, r5, fp, cr3
 318:	4c3d3d67 	ldcmi	13, cr3, [sp], #-412	; 0xfffffe64
 31c:	3d2e0903 			; <UNDEFINED> instruction: 0x3d2e0903
 320:	0008023d 	andeq	r0, r8, sp, lsr r2
 324:	01020101 	tsteq	r2, r1, lsl #2
 328:	00020000 	andeq	r0, r2, r0
 32c:	00000078 	andeq	r0, r0, r8, ror r0
 330:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 334:	0101000d 	tsteq	r1, sp
 338:	00000101 	andeq	r0, r0, r1, lsl #2
 33c:	00000100 	andeq	r0, r0, r0, lsl #2
 340:	2f3a4301 	svccs	0x003a4301
 344:	6f686353 	svcvs	0x00686353
 348:	442f6c6f 	strtmi	r6, [pc], #-3183	; 350 <startup-0x1ffffcb0>
 34c:	31305441 	teqcc	r0, r1, asr #8
 350:	6f4d2f37 	svcvs	0x004d2f37
 354:	41442d70 	hvcmi	17104	; 0x42d0
 358:	37313054 			; <UNDEFINED> instruction: 0x37313054
 35c:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 360:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 364:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 368:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 36c:	2f736573 	svccs	0x00736573
 370:	6f6f7073 	svcvs	0x006f7073
 374:	5f737970 	svcpl	0x00737970
 378:	617a6962 	cmnvs	sl, r2, ror #18
 37c:	5f657272 	svcpl	0x00657272
 380:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 384:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 388:	61000065 	tstvs	r0, r5, rrx
 38c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 390:	70736964 	rsbsvc	r6, r3, r4, ror #18
 394:	2e79616c 	rpwcsez	f6, f1, #4.0
 398:	00010063 	andeq	r0, r1, r3, rrx
 39c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 3a0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 3a4:	00000001 	andeq	r0, r0, r1
 3a8:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
 3ac:	14200008 	strtne	r0, [r0], #-8
 3b0:	5a5a4030 	bpl	1690478 <startup-0x1e96fb88>
 3b4:	6876595a 	ldmdavs	r6!, {r1, r3, r4, r6, r8, fp, ip, lr}^
 3b8:	68839159 	stmvs	r3, {r0, r3, r4, r6, r8, ip, pc}
 3bc:	84ad5968 	strthi	r5, [sp], #2408	; 0x968
 3c0:	3f3d6868 	svccc	0x003d6868
 3c4:	3d684c59 	stclcc	12, cr4, [r8, #-356]!	; 0xfffffe9c
 3c8:	3f4c593f 	svccc	0x004c593f
 3cc:	5b3e3d69 	blpl	f8f978 <startup-0x1f070688>
 3d0:	3f842f68 	svccc	0x00842f68
 3d4:	5b3f3d69 	blpl	fcf980 <startup-0x1f030680>
 3d8:	68842f68 	stmvs	r4, {r3, r5, r6, r8, r9, sl, fp, sp}
 3dc:	3d314d3f 	ldccc	13, cr4, [r1, #-252]!	; 0xffffff04
 3e0:	313f4068 	teqcc	pc, r8, rrx
 3e4:	762f3e4d 	strtvc	r3, [pc], -sp, asr #28
 3e8:	040200ae 	streq	r0, [r2], #-174	; 0xffffff52
 3ec:	06200601 	strteq	r0, [r0], -r1, lsl #12
 3f0:	4b5b3f67 	blmi	16d0194 <startup-0x1e92fe6c>
 3f4:	4c4c1e4e 	mcrrmi	14, 4, r1, ip, cr14
 3f8:	003f3d68 	eorseq	r3, pc, r8, ror #26
 3fc:	06010402 	streq	r0, [r1], -r2, lsl #8
 400:	3f670620 	svccc	0x00670620
 404:	5a4c3d5b 	bpl	130f978 <startup-0x1ecf0688>
 408:	01040200 	mrseq	r0, R12_usr
 40c:	40063c06 	andmi	r3, r6, r6, lsl #24
 410:	01040200 	mrseq	r0, R12_usr
 414:	41063c06 	tstmi	r6, r6, lsl #24
 418:	03783d67 	cmneq	r8, #6592	; 0x19c0
 41c:	0332c872 	teqeq	r2, #7471104	; 0x720000
 420:	4c3e200b 	ldcmi	0, cr2, [lr], #-44	; 0xffffffd4
 424:	024d7321 	subeq	r7, sp, #-2080374784	; 0x84000000
 428:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
   4:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
   8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
   c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  10:	7300746e 	movwvc	r7, #1134	; 0x46e
  14:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  18:	47007075 	smlsdxmi	r0, r5, r0, r7
  1c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  20:	36203939 			; <UNDEFINED> instruction: 0x36203939
  24:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  28:	31303220 	teqcc	r0, r0, lsr #4
  2c:	31323037 	teqcc	r2, r7, lsr r0
  30:	72282035 	eorvc	r2, r8, #53	; 0x35
  34:	61656c65 	cmnvs	r5, r5, ror #24
  38:	20296573 	eorcs	r6, r9, r3, ror r5
  3c:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  40:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  44:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  48:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  4c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  50:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  54:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  58:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  5c:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  60:	205d3231 	subscs	r3, sp, r1, lsr r2
  64:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  68:	20626d75 	rsbcs	r6, r2, r5, ror sp
  6c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  70:	613d6863 	teqvs	sp, r3, ror #16
  74:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  78:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  7c:	6f6c666d 	svcvs	0x006c666d
  80:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  84:	733d6962 	teqvc	sp, #1605632	; 0x188000
  88:	2074666f 	rsbscs	r6, r4, pc, ror #12
  8c:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  90:	20626d75 	rsbcs	r6, r2, r5, ror sp
  94:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  98:	613d6863 	teqvs	sp, r3, ror #16
  9c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  a0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  a4:	4f2d2067 	svcmi	0x002d2067
  a8:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  ac:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  b0:	75003939 	strvc	r3, [r0, #-2361]	; 0xfffff6c7
  b4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  b8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  bc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  c0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
  c4:	3a43006e 	bcc	10c0284 <startup-0x1ef3fd7c>
  c8:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
  cc:	2f6c6f6f 	svccs	0x006c6f6f
  d0:	30544144 	subscc	r4, r4, r4, asr #2
  d4:	4d2f3731 	stcmi	7, cr3, [pc, #-196]!	; 18 <startup-0x1fffffe8>
  d8:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
  dc:	31305441 	teqcc	r0, r1, asr #8
  e0:	614c2f37 	cmpvs	ip, r7, lsr pc
  e4:	61207362 			; <UNDEFINED> instruction: 0x61207362
  e8:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
  ec:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
  f0:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
  f4:	6f70732f 	svcvs	0x0070732f
  f8:	7379706f 	cmnvc	r9, #111	; 0x6f
  fc:	7a69625f 	bvc	1a58a80 <startup-0x1e5a7580>
 100:	65727261 	ldrbvs	r7, [r2, #-609]!	; 0xfffffd9f
 104:	7664615f 			; <UNDEFINED> instruction: 0x7664615f
 108:	75746e65 	ldrbvc	r6, [r4, #-3685]!	; 0xfffff19b
 10c:	732f6572 			; <UNDEFINED> instruction: 0x732f6572
 110:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 114:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 118:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 11c:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 62 <startup-0x1fffff9e>	; <UNPREDICTABLE>
 120:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 124:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 128:	79735f74 	ldmdbvc	r3!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 12c:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
 130:	6e695f6b 	cdpvs	15, 6, cr5, cr9, cr11, {3}
 134:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 138:	5f747075 	svcpl	0x00747075
 13c:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
 140:	0072656c 	rsbseq	r6, r2, ip, ror #10
 144:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 148:	59530074 	ldmdbpl	r3, {r2, r4, r5, r6}^
 14c:	43495453 	movtmi	r5, #37971	; 0x9453
 150:	54535f4b 	ldrbpl	r5, [r3], #-3915	; 0xfffff0b5
 154:	54435552 	strbpl	r5, [r3], #-1362	; 0xfffffaae
 158:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 15c:	695f7961 	ldmdbvs	pc, {r0, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
 160:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 164:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
 168:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 16c:	74630074 	strbtvc	r0, [r3], #-116	; 0xffffff8c
 170:	73006c72 	movwvc	r6, #3186	; 0xc72
 174:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 178:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 17c:	43007961 	movwmi	r7, #2401	; 0x961
 180:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
 184:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; ffffffec <systick_flag+0xdffff3ec>
 188:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 18c:	2f373130 	svccs	0x00373130
 190:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 194:	30544144 	subscc	r4, r4, r4, asr #2
 198:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; dc <startup-0x1fffff24>
 19c:	20736261 	rsbscs	r6, r3, r1, ror #4
 1a0:	20646e61 	rsbcs	r6, r4, r1, ror #28
 1a4:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 1a8:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 1ac:	70732f73 	rsbsvc	r2, r3, r3, ror pc
 1b0:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 1b4:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b8:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
 1bc:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
 1c0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
 1c4:	2f657275 	svccs	0x00657275
 1c8:	616c6564 	cmnvs	ip, r4, ror #10
 1cc:	6e695f79 	mcrvs	15, 3, r5, cr9, cr9, {3}
 1d0:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 1d4:	2e747075 	mrccs	0, 3, r7, cr4, cr5, {3}
 1d8:	6f6c0063 	svcvs	0x006c0063
 1dc:	64006461 	strvs	r6, [r0], #-1121	; 0xfffffb9f
 1e0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1e4:	3035325f 	eorscc	r3, r5, pc, asr r2
 1e8:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 1ec:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1f0:	3030355f 	eorscc	r3, r0, pc, asr r5
 1f4:	6300736e 	movwvs	r7, #878	; 0x36e
 1f8:	546c7274 	strbtpl	r7, [ip], #-628	; 0xfffffd8c
 1fc:	64726968 	ldrbtvs	r6, [r2], #-2408	; 0xfffff698
 200:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
 204:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 208:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 20c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 210:	63007265 	movwvs	r7, #613	; 0x265
 214:	466c7274 			; <UNDEFINED> instruction: 0x466c7274
 218:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
 21c:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
 220:	73657200 	cmnvc	r5, #0, 4
 224:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 228:	72003164 	andvc	r3, r0, #100, 2
 22c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 230:	32646576 	rsbcc	r6, r4, #494927872	; 0x1d800000
 234:	79735f00 	ldmdbvc	r3!, {r8, r9, sl, fp, ip, lr}^
 238:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
 23c:	6564006b 	strbvs	r0, [r4, #-107]!	; 0xffffff95
 240:	5f79616c 	svcpl	0x0079616c
 244:	6c696d31 	stclvs	13, cr6, [r9], #-196	; 0xffffff3c
 248:	7000696c 	andvc	r6, r0, ip, ror #18
 24c:	65736c75 	ldrbvs	r6, [r3, #-3189]!	; 0xfffff38b
 250:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 254:	5f79616c 	svcpl	0x0079616c
 258:	6b696d31 	blvs	1a5b724 <startup-0x1e5a48dc>
 25c:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
 260:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 264:	6b696d5f 	blvs	1a5b7e8 <startup-0x1e5a4818>
 268:	63006f72 	movwvs	r6, #3954	; 0xf72
 26c:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
 270:	73797300 	cmnvc	r9, #0, 6
 274:	6b636974 	blvs	18da84c <startup-0x1e7257b4>
 278:	616c665f 	cmnvs	ip, pc, asr r6
 27c:	47500067 	ldrbmi	r0, [r0, -r7, rrx]
 280:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 284:	00595254 	subseq	r5, r9, r4, asr r2
 288:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 28c:	7267006f 	rsbvc	r0, r7, #111	; 0x6f
 290:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 294:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 298:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 29c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 2a0:	73007465 	movwvc	r7, #1125	; 0x465
 2a4:	5f657a69 	svcpl	0x00657a69
 2a8:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 2ac:	795f657a 	ldmdbvc	pc, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 2b0:	61726400 	cmnvs	r2, r0, lsl #8
 2b4:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 2b8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2bc:	61726400 	cmnvs	r2, r0, lsl #8
 2c0:	6f6d0077 	svcvs	0x006d0077
 2c4:	73006576 	movwvc	r6, #1398	; 0x576
 2c8:	63656c65 	cmnvs	r5, #25856	; 0x6500
 2cc:	6f635f74 	svcvs	0x00635f74
 2d0:	6f72746e 	svcvs	0x0072746e
 2d4:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 2d8:	736f7000 	cmnvc	pc, #0
 2dc:	6400795f 	strvs	r7, [r0], #-2399	; 0xfffff6a1
 2e0:	785f7269 	ldmdavc	pc, {r0, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 2e4:	72696400 	rsbvc	r6, r9, #0, 8
 2e8:	6f00795f 	svcvs	0x0000795f
 2ec:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 2f0:	72670072 	rsbvc	r0, r7, #114	; 0x72
 2f4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2f8:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2fc:	645f6461 	ldrbvs	r6, [pc], #-1121	; 304 <startup-0x1ffffcfc>
 300:	00617461 	rsbeq	r7, r1, r1, ror #8
 304:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
 308:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 30c:	6f006c65 	svcvs	0x00006c65
 310:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 314:	74006867 	strvc	r6, [r0], #-2151	; 0xfffff799
 318:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 31c:	4f500074 	svcmi	0x00500074
 320:	00544e49 	subseq	r4, r4, r9, asr #28
 324:	63615f78 	cmnvs	r1, #120, 30	; 0x1e0
 328:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
 32c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 330:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 334:	67006465 	strvs	r6, [r0, -r5, ror #8]
 338:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 33c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 340:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 344:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 348:	50470070 	subpl	r0, r7, r0, ror r0
 34c:	67004f49 	strvs	r4, [r0, -r9, asr #30]
 350:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 354:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 358:	5f6c7274 	svcpl	0x006c7274
 35c:	5f746962 	svcpl	0x00746962
 360:	61656c63 	cmnvs	r5, r3, ror #24
 364:	6f630072 	svcvs	0x00630072
 368:	6f72746e 	svcvs	0x0072746e
 36c:	65725f6c 	ldrbvs	r5, [r2, #-3948]!	; 0xfffff094
 370:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
 374:	67007265 	strvs	r7, [r0, -r5, ror #4]
 378:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 37c:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 380:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 384:	7a696c61 	bvc	1a5b510 <startup-0x1e5a4af0>
 388:	75700065 	ldrbvc	r0, [r0, #-101]!	; 0xffffff9b
 38c:	00726470 	rsbseq	r6, r2, r0, ror r4
 390:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 394:	6f6f6863 	svcvs	0x006f6863
 398:	41442f6c 	cmpmi	r4, ip, ror #30
 39c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 3a0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 3a4:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 3a8:	2f373130 	svccs	0x00373130
 3ac:	7362614c 	cmnvc	r2, #76, 2
 3b0:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 3b4:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 3b8:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 3bc:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 3c0:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 3c4:	625f7379 	subsvs	r7, pc, #-469762047	; 0xe4000001
 3c8:	72617a69 	rsbvc	r7, r1, #430080	; 0x69000
 3cc:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
 3d0:	6e657664 	cdpvs	6, 6, cr7, cr5, cr4, {3}
 3d4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 3d8:	6172672f 	cmnvs	r2, pc, lsr #14
 3dc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3e0:	70736964 	rsbsvc	r6, r3, r4, ror #18
 3e4:	2e79616c 	rpwcsez	f6, f1, #4.0
 3e8:	47740063 	ldrbmi	r0, [r4, -r3, rrx]!
 3ec:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 3f0:	00797274 	rsbseq	r7, r9, r4, ror r2
 3f4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 3f8:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 3fc:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 400:	745f3874 	ldrbvc	r3, [pc], #-2164	; 408 <startup-0x1ffffbf8>
 404:	72646f00 	rsbvc	r6, r4, #0, 30
 408:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 40c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 410:	5f79616c 	svcpl	0x0079616c
 414:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
 418:	6174735f 	cmnvs	r4, pc, asr r3
 41c:	00737574 	rsbseq	r7, r3, r4, ror r5
 420:	48726469 	ldmdami	r2!, {r0, r3, r5, r6, sl, sp, lr}^
 424:	00686769 	rsbeq	r6, r8, r9, ror #14
 428:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 42c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 430:	736f7000 	cmnvc	pc, #0
 434:	6f00785f 	svcvs	0x0000785f
 438:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 43c:	6d007264 	sfmvs	f7, 4, [r0, #-400]	; 0xfffffe70
 440:	006b7361 	rsbeq	r7, fp, r1, ror #6
 444:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
 448:	6700776f 	strvs	r7, [r0, -pc, ror #14]
 44c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 450:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 454:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 458:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 45c:	65730061 	ldrbvs	r0, [r3, #-97]!	; 0xffffff9f
 460:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 464:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 468:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 46c:	67006465 	strvs	r6, [r0, -r5, ror #8]
 470:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 474:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 478:	5f746961 	svcpl	0x00746961
 47c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 480:	6e690079 	mcrvs	0, 3, r0, cr9, cr9, {3}
 484:	00786564 	rsbseq	r6, r8, r4, ror #10
 488:	61656c63 	cmnvs	r5, r3, ror #24
 48c:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 490:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 494:	624f7400 	subvs	r7, pc, #0, 8
 498:	6f6d006a 	svcvs	0x006d006a
 49c:	00726564 	rsbseq	r6, r2, r4, ror #10
 4a0:	70617267 	rsbvc	r7, r1, r7, ror #4
 4a4:	5f636968 	svcpl	0x00636968
 4a8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4ac:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 4b0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 4b4:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
 4b8:	5f65766f 	svcpl	0x0065766f
 4bc:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 4c0:	67007463 	strvs	r7, [r0, -r3, ror #8]
 4c4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 4c8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 4cc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4d0:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 35c <startup-0x1ffffca4>
 4d4:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 4d8:	424f5000 	submi	r5, pc, #0
 4dc:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 4e0:	61726700 	cmnvs	r2, r0, lsl #14
 4e4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 4e8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 4ec:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 4f0:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 4f4:	7361006e 	cmnvc	r1, #110	; 0x6e
 4f8:	5f696963 	svcpl	0x00696963
 4fc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 500:	6174735f 	cmnvs	r4, pc, asr r3
 504:	00737574 	rsbseq	r7, r3, r4, ror r5
 508:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 50c:	65746361 	ldrbvs	r6, [r4, #-865]!	; 0xfffffc9f
 510:	6f670072 	svcvs	0x00670072
 514:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 518:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 51c:	73610065 	cmnvc	r1, #101	; 0x65
 520:	5f696963 	svcpl	0x00696963
 524:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 528:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 52c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 530:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 534:	5f6e7275 	svcpl	0x006e7275
 538:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 53c:	3a430065 	bcc	10c06d8 <startup-0x1ef3f928>
 540:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 544:	2f6c6f6f 	svccs	0x006c6f6f
 548:	30544144 	subscc	r4, r4, r4, asr #2
 54c:	4d2f3731 	stcmi	7, cr3, [pc, #-196]!	; 490 <startup-0x1ffffb70>
 550:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 554:	31305441 	teqcc	r0, r1, asr #8
 558:	614c2f37 	cmpvs	ip, r7, lsr pc
 55c:	61207362 			; <UNDEFINED> instruction: 0x61207362
 560:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 564:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 568:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 56c:	6f70732f 	svcvs	0x0070732f
 570:	7379706f 	cmnvc	r9, #111	; 0x6f
 574:	7a69625f 	bvc	1a58ef8 <startup-0x1e5a7108>
 578:	65727261 	ldrbvs	r7, [r2, #-609]!	; 0xfffffd9f
 57c:	7664615f 			; <UNDEFINED> instruction: 0x7664615f
 580:	75746e65 	ldrbvc	r6, [r4, #-3685]!	; 0xfffff19b
 584:	612f6572 			; <UNDEFINED> instruction: 0x612f6572
 588:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 58c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 590:	2e79616c 	rpwcsez	f6, f1, #4.0
 594:	6f700063 	svcvs	0x00700063
 598:	635f7473 	cmpvs	pc, #1929379840	; 0x73000000
 59c:	616d6d6f 	cmnvs	sp, pc, ror #26
 5a0:	645f646e 	ldrbvs	r6, [pc], #-1134	; 5a8 <startup-0x1ffffa58>
 5a4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 5a8:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 5b0 <startup-0x1ffffa50>
 5ac:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 5b0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5b4:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 5b8:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 5bc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 5c0:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 5c4:	73610072 	cmnvc	r1, #114	; 0x72
 5c8:	5f696963 	svcpl	0x00696963
 5cc:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 5d0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 5d4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 5d8:	726f7000 	rsbvc	r7, pc, #0
 5dc:	61765f74 	cmnvs	r6, r4, ror pc
 5e0:	7361006c 	cmnvc	r1, #108	; 0x6c
 5e4:	5f696963 	svcpl	0x00696963
 5e8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 5ec:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 5f0:	64610064 	strbtvs	r0, [r1], #-100	; 0xffffff9c
 5f4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 5f8:	73610073 	cmnvc	r1, #115	; 0x73
 5fc:	5f696963 	svcpl	0x00696963
 600:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 604:	61645f65 	cmnvs	r4, r5, ror #30
 608:	61006174 	tstvs	r0, r4, ror r1
 60c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 610:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 49c <startup-0x1ffffb64>
 614:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 618:	63736100 	cmnvs	r3, #0, 2
 61c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 620:	5f6c7274 	svcpl	0x006c7274
 624:	5f746962 	svcpl	0x00746962
 628:	61656c63 	cmnvs	r5, r3, ror #24
 62c:	73610072 	cmnvc	r1, #114	; 0x72
 630:	5f696963 	svcpl	0x00696963
 634:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 638:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 63c:	73610061 	cmnvc	r1, #97	; 0x61
 640:	5f696963 	svcpl	0x00696963
 644:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 648:	6f635f65 	svcvs	0x00635f65
 64c:	6f72746e 	svcvs	0x0072746e
 650:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 654:	63736100 	cmnvs	r3, #0, 2
 658:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 65c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 660:	6168635f 	cmnvs	r8, pc, asr r3
 664:	73610072 	cmnvc	r1, #114	; 0x72
 668:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 66c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 670:	695f7961 	ldmdbvs	pc, {r0, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
 674:	0074696e 	rsbseq	r6, r4, lr, ror #18

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000000a 	andeq	r0, r0, sl
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000000c 	andeq	r0, r0, ip
  40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  44:	7c020001 	stcvc	0, cr0, [r2], {1}
  48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  4c:	00000018 	andeq	r0, r0, r8, lsl r0
  50:	0000003c 	andeq	r0, r0, ip, lsr r0
  54:	2000001c 	andcs	r0, r0, ip, lsl r0
  58:	0000000e 	andeq	r0, r0, lr
  5c:	40080e41 	andmi	r0, r8, r1, asr #28
  60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  64:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  68:	00000018 	andeq	r0, r0, r8, lsl r0
  6c:	0000003c 	andeq	r0, r0, ip, lsr r0
  70:	2000002a 	andcs	r0, r0, sl, lsr #32
  74:	0000001a 	andeq	r0, r0, sl, lsl r0
  78:	40080e41 	andmi	r0, r8, r1, asr #28
  7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  80:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	0000003c 	andeq	r0, r0, ip, lsr r0
  8c:	20000044 	andcs	r0, r0, r4, asr #32
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	40080e41 	andmi	r0, r8, r1, asr #28
  98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  9c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  a0:	00000018 	andeq	r0, r0, r8, lsl r0
  a4:	0000003c 	andeq	r0, r0, ip, lsr r0
  a8:	20000060 	andcs	r0, r0, r0, rrx
  ac:	00000010 	andeq	r0, r0, r0, lsl r0
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  bc:	00000018 	andeq	r0, r0, r8, lsl r0
  c0:	0000003c 	andeq	r0, r0, ip, lsr r0
  c4:	20000070 	andcs	r0, r0, r0, ror r0
  c8:	00000018 	andeq	r0, r0, r8, lsl r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	0000003c 	andeq	r0, r0, ip, lsr r0
  e0:	20000088 	andcs	r0, r0, r8, lsl #1
  e4:	0000003c 	andeq	r0, r0, ip, lsr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	0000003c 	andeq	r0, r0, ip, lsr r0
 100:	200000c4 	andcs	r0, r0, r4, asr #1
 104:	0000003c 	andeq	r0, r0, ip, lsr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	0000003c 	andeq	r0, r0, ip, lsr r0
 120:	20000100 	andcs	r0, r0, r0, lsl #2
 124:	00000030 	andeq	r0, r0, r0, lsr r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	00000018 	andeq	r0, r0, r8, lsl r0
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	20000130 	andcs	r0, r0, r0, lsr r1
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 154:	00000018 	andeq	r0, r0, r8, lsl r0
 158:	0000003c 	andeq	r0, r0, ip, lsr r0
 15c:	20000148 	andcs	r0, r0, r8, asr #2
 160:	0000004c 	andeq	r0, r0, ip, asr #32
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 170:	0000000c 	andeq	r0, r0, ip
 174:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 178:	7c020001 	stcvc	0, cr0, [r2], {1}
 17c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	00000170 	andeq	r0, r0, r0, ror r1
 188:	20000194 	mulcs	r0, r4, r1
 18c:	00000050 	andeq	r0, r0, r0, asr r0
 190:	40080e41 	andmi	r0, r8, r1, asr #28
 194:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 198:	180e4101 	stmdane	lr, {r0, r8, lr}
 19c:	00070d41 	andeq	r0, r7, r1, asr #26
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000170 	andeq	r0, r0, r0, ror r1
 1a8:	200001e4 	andcs	r0, r0, r4, ror #3
 1ac:	00000058 	andeq	r0, r0, r8, asr r0
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	00000170 	andeq	r0, r0, r0, ror r1
 1c8:	2000023c 	andcs	r0, r0, ip, lsr r2
 1cc:	0000005a 	andeq	r0, r0, sl, asr r0
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	100e4101 	andne	r4, lr, r1, lsl #2
 1dc:	00070d41 	andeq	r0, r7, r1, asr #26
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	00000170 	andeq	r0, r0, r0, ror r1
 1e8:	20000296 	mulcs	r0, r6, r2
 1ec:	00000076 	andeq	r0, r0, r6, ror r0
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	100e4101 	andne	r4, lr, r1, lsl #2
 1fc:	00070d41 	andeq	r0, r7, r1, asr #26
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	00000170 	andeq	r0, r0, r0, ror r1
 208:	2000030c 	andcs	r0, r0, ip, lsl #6
 20c:	00000090 	muleq	r0, r0, r0
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	180e4101 	stmdane	lr, {r0, r8, lr}
 21c:	00070d41 	andeq	r0, r7, r1, asr #26
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	00000170 	andeq	r0, r0, r0, ror r1
 228:	2000039c 	mulcs	r0, ip, r3
 22c:	00000080 	andeq	r0, r0, r0, lsl #1
 230:	40080e41 	andmi	r0, r8, r1, asr #28
 234:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 238:	100e4101 	andne	r4, lr, r1, lsl #2
 23c:	00070d41 	andeq	r0, r7, r1, asr #26
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	00000170 	andeq	r0, r0, r0, ror r1
 248:	2000041c 	andcs	r0, r0, ip, lsl r4
 24c:	00000040 	andeq	r0, r0, r0, asr #32
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	100e4101 	andne	r4, lr, r1, lsl #2
 25c:	00070d41 	andeq	r0, r7, r1, asr #26
 260:	0000001c 	andeq	r0, r0, ip, lsl r0
 264:	00000170 	andeq	r0, r0, r0, ror r1
 268:	2000045c 	andcs	r0, r0, ip, asr r4
 26c:	00000046 	andeq	r0, r0, r6, asr #32
 270:	40080e41 	andmi	r0, r8, r1, asr #28
 274:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 278:	100e4101 	andne	r4, lr, r1, lsl #2
 27c:	00070d41 	andeq	r0, r7, r1, asr #26
 280:	0000001c 	andeq	r0, r0, ip, lsl r0
 284:	00000170 	andeq	r0, r0, r0, ror r1
 288:	200004a2 	andcs	r0, r0, r2, lsr #9
 28c:	0000002a 	andeq	r0, r0, sl, lsr #32
 290:	40080e41 	andmi	r0, r8, r1, asr #28
 294:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 298:	100e4101 	andne	r4, lr, r1, lsl #2
 29c:	00070d41 	andeq	r0, r7, r1, asr #26
 2a0:	00000018 	andeq	r0, r0, r8, lsl r0
 2a4:	00000170 	andeq	r0, r0, r0, ror r1
 2a8:	200004cc 	andcs	r0, r0, ip, asr #9
 2ac:	0000005c 	andeq	r0, r0, ip, asr r0
 2b0:	40080e41 	andmi	r0, r8, r1, asr #28
 2b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	00000170 	andeq	r0, r0, r0, ror r1
 2c4:	20000528 	andcs	r0, r0, r8, lsr #10
 2c8:	00000066 	andeq	r0, r0, r6, rrx
 2cc:	40080e41 	andmi	r0, r8, r1, asr #28
 2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d4:	100e4101 	andne	r4, lr, r1, lsl #2
 2d8:	00070d41 	andeq	r0, r7, r1, asr #26
 2dc:	00000020 	andeq	r0, r0, r0, lsr #32
 2e0:	00000170 	andeq	r0, r0, r0, ror r1
 2e4:	2000058e 	andcs	r0, r0, lr, lsl #11
 2e8:	000001a6 	andeq	r0, r0, r6, lsr #3
 2ec:	400c0e41 	andmi	r0, ip, r1, asr #28
 2f0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2f4:	018e4002 	orreq	r4, lr, r2
 2f8:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 2fc:	0000070d 	andeq	r0, r0, sp, lsl #14
 300:	0000001c 	andeq	r0, r0, ip, lsl r0
 304:	00000170 	andeq	r0, r0, r0, ror r1
 308:	20000734 	andcs	r0, r0, r4, lsr r7
 30c:	00000064 	andeq	r0, r0, r4, rrx
 310:	40080e41 	andmi	r0, r8, r1, asr #28
 314:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 318:	180e4101 	stmdane	lr, {r0, r8, lr}
 31c:	00070d41 	andeq	r0, r7, r1, asr #26
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	00000170 	andeq	r0, r0, r0, ror r1
 328:	20000798 	mulcs	r0, r8, r7
 32c:	00000064 	andeq	r0, r0, r4, rrx
 330:	40080e41 	andmi	r0, r8, r1, asr #28
 334:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 338:	180e4101 	stmdane	lr, {r0, r8, lr}
 33c:	00070d41 	andeq	r0, r7, r1, asr #26
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	00000170 	andeq	r0, r0, r0, ror r1
 348:	200007fc 	strdcs	r0, [r0], -ip
 34c:	00000080 	andeq	r0, r0, r0, lsl #1
 350:	40080e41 	andmi	r0, r8, r1, asr #28
 354:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 358:	100e4101 	andne	r4, lr, r1, lsl #2
 35c:	00070d41 	andeq	r0, r7, r1, asr #26
 360:	0000001c 	andeq	r0, r0, ip, lsl r0
 364:	00000170 	andeq	r0, r0, r0, ror r1
 368:	2000087c 	andcs	r0, r0, ip, ror r8
 36c:	00000020 	andeq	r0, r0, r0, lsr #32
 370:	40080e41 	andmi	r0, r8, r1, asr #28
 374:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 378:	180e4101 	stmdane	lr, {r0, r8, lr}
 37c:	00070d41 	andeq	r0, r7, r1, asr #26
 380:	00000018 	andeq	r0, r0, r8, lsl r0
 384:	00000170 	andeq	r0, r0, r0, ror r1
 388:	2000089c 	mulcs	r0, ip, r8
 38c:	00000020 	andeq	r0, r0, r0, lsr #32
 390:	40080e41 	andmi	r0, r8, r1, asr #28
 394:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 398:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 39c:	0000000c 	andeq	r0, r0, ip
 3a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3ac:	00000018 	andeq	r0, r0, r8, lsl r0
 3b0:	0000039c 	muleq	r0, ip, r3
 3b4:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 3b8:	00000040 	andeq	r0, r0, r0, asr #32
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3cc:	0000039c 	muleq	r0, ip, r3
 3d0:	200008fc 	strdcs	r0, [r0], -ip
 3d4:	00000044 	andeq	r0, r0, r4, asr #32
 3d8:	40080e41 	andmi	r0, r8, r1, asr #28
 3dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e0:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e4:	00070d41 	andeq	r0, r7, r1, asr #26
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	0000039c 	muleq	r0, ip, r3
 3f0:	20000940 	andcs	r0, r0, r0, asr #18
 3f4:	00000048 	andeq	r0, r0, r8, asr #32
 3f8:	40080e41 	andmi	r0, r8, r1, asr #28
 3fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 400:	180e4101 	stmdane	lr, {r0, r8, lr}
 404:	00070d41 	andeq	r0, r7, r1, asr #26
 408:	0000001c 	andeq	r0, r0, ip, lsl r0
 40c:	0000039c 	muleq	r0, ip, r3
 410:	20000988 	andcs	r0, r0, r8, lsl #19
 414:	0000002a 	andeq	r0, r0, sl, lsr #32
 418:	40080e41 	andmi	r0, r8, r1, asr #28
 41c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 420:	100e4101 	andne	r4, lr, r1, lsl #2
 424:	00070d41 	andeq	r0, r7, r1, asr #26
 428:	0000001c 	andeq	r0, r0, ip, lsl r0
 42c:	0000039c 	muleq	r0, ip, r3
 430:	200009b2 			; <UNDEFINED> instruction: 0x200009b2
 434:	0000002a 	andeq	r0, r0, sl, lsr #32
 438:	40080e41 	andmi	r0, r8, r1, asr #28
 43c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 440:	100e4101 	andne	r4, lr, r1, lsl #2
 444:	00070d41 	andeq	r0, r7, r1, asr #26
 448:	00000020 	andeq	r0, r0, r0, lsr #32
 44c:	0000039c 	muleq	r0, ip, r3
 450:	200009dc 	ldrdcs	r0, [r0], -ip
 454:	00000048 	andeq	r0, r0, r8, asr #32
 458:	400c0e41 	andmi	r0, ip, r1, asr #28
 45c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 460:	018e4002 	orreq	r4, lr, r2
 464:	41180e41 	tstmi	r8, r1, asr #28
 468:	0000070d 	andeq	r0, r0, sp, lsl #14
 46c:	00000020 	andeq	r0, r0, r0, lsr #32
 470:	0000039c 	muleq	r0, ip, r3
 474:	20000a24 	andcs	r0, r0, r4, lsr #20
 478:	00000048 	andeq	r0, r0, r8, asr #32
 47c:	400c0e41 	andmi	r0, ip, r1, asr #28
 480:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 484:	018e4002 	orreq	r4, lr, r2
 488:	41180e41 	tstmi	r8, r1, asr #28
 48c:	0000070d 	andeq	r0, r0, sp, lsl #14
 490:	0000001c 	andeq	r0, r0, ip, lsl r0
 494:	0000039c 	muleq	r0, ip, r3
 498:	20000a6c 	andcs	r0, r0, ip, ror #20
 49c:	00000030 	andeq	r0, r0, r0, lsr r0
 4a0:	40080e41 	andmi	r0, r8, r1, asr #28
 4a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a8:	100e4101 	andne	r4, lr, r1, lsl #2
 4ac:	00070d41 	andeq	r0, r7, r1, asr #26
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b4:	0000039c 	muleq	r0, ip, r3
 4b8:	20000a9c 	mulcs	r0, ip, sl
 4bc:	00000030 	andeq	r0, r0, r0, lsr r0
 4c0:	40080e41 	andmi	r0, r8, r1, asr #28
 4c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c8:	100e4101 	andne	r4, lr, r1, lsl #2
 4cc:	00070d41 	andeq	r0, r7, r1, asr #26
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d4:	0000039c 	muleq	r0, ip, r3
 4d8:	20000acc 	andcs	r0, r0, ip, asr #21
 4dc:	00000056 	andeq	r0, r0, r6, asr r0
 4e0:	40080e41 	andmi	r0, r8, r1, asr #28
 4e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e8:	100e4101 	andne	r4, lr, r1, lsl #2
 4ec:	00070d41 	andeq	r0, r7, r1, asr #26
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	0000039c 	muleq	r0, ip, r3
 4f8:	20000b22 	andcs	r0, r0, r2, lsr #22
 4fc:	00000044 	andeq	r0, r0, r4, asr #32
 500:	40080e41 	andmi	r0, r8, r1, asr #28
 504:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 508:	100e4101 	andne	r4, lr, r1, lsl #2
 50c:	00070d41 	andeq	r0, r7, r1, asr #26
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	0000039c 	muleq	r0, ip, r3
 518:	20000b66 	andcs	r0, r0, r6, ror #22
 51c:	00000068 	andeq	r0, r0, r8, rrx
 520:	40080e41 	andmi	r0, r8, r1, asr #28
 524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 528:	180e4101 	stmdane	lr, {r0, r8, lr}
 52c:	00070d41 	andeq	r0, r7, r1, asr #26
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	0000039c 	muleq	r0, ip, r3
 538:	20000bce 	andcs	r0, r0, lr, asr #23
 53c:	00000028 	andeq	r0, r0, r8, lsr #32
 540:	40080e41 	andmi	r0, r8, r1, asr #28
 544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 548:	100e4101 	andne	r4, lr, r1, lsl #2
 54c:	00070d41 	andeq	r0, r7, r1, asr #26
