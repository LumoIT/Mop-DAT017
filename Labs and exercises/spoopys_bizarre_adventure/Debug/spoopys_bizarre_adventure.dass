
./Debug/spoopys_bizarre_adventure.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );
void app_init(void);

void startup ( void ){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:

void main(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
}
20000014:	46c0      	nop			; (mov r8, r8)
20000016:	46bd      	mov	sp, r7
20000018:	bd80      	pop	{r7, pc}

2000001a <app_init>:


void app_init(void){
2000001a:	b580      	push	{r7, lr}
2000001c:	af00      	add	r7, sp, #0
		" LDR R0, =0x08000209\n"
		" BLX R0\n"
		);
#endif

    asciidisplay_init();
2000001e:	f000 fc59 	bl	200008d4 <asciidisplay_init>
    graphicdisplay_init();
20000022:	f000 fc47 	bl	200008b4 <graphicdisplay_init>
    delay_interrupt_init();
20000026:	f000 f805 	bl	20000034 <delay_interrupt_init>
    keyboard_init();
2000002a:	f000 fdf1 	bl	20000c10 <keyboard_init>
    
}
2000002e:	46c0      	nop			; (mov r8, r8)
20000030:	46bd      	mov	sp, r7
20000032:	bd80      	pop	{r7, pc}

20000034 <delay_interrupt_init>:

volatile int systick_flag = 1;
static volatile int delay_counter = 0;
static int mikro;

void delay_interrupt_init(void){
20000034:	b580      	push	{r7, lr}
20000036:	af00      	add	r7, sp, #0
    init_systick_interrupt_handler();
20000038:	f000 f886 	bl	20000148 <init_systick_interrupt_handler>
}
2000003c:	46c0      	nop			; (mov r8, r8)
2000003e:	46bd      	mov	sp, r7
20000040:	bd80      	pop	{r7, pc}

20000042 <delay_250ns>:

void delay_250ns(void){
20000042:	b580      	push	{r7, lr}
20000044:	af00      	add	r7, sp, #0
    systick_flag = 0;
20000046:	4b04      	ldr	r3, [pc, #16]	; (20000058 <delay_250ns+0x16>)
20000048:	2200      	movs	r2, #0
2000004a:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 4);   
2000004c:	202a      	movs	r0, #42	; 0x2a
2000004e:	f000 f863 	bl	20000118 <start_delay>
}
20000052:	46c0      	nop			; (mov r8, r8)
20000054:	46bd      	mov	sp, r7
20000056:	bd80      	pop	{r7, pc}
20000058:	20000d80 	andcs	r0, r0, r0, lsl #27

2000005c <delay_500ns>:

void delay_500ns(void){
2000005c:	b580      	push	{r7, lr}
2000005e:	af00      	add	r7, sp, #0
    systick_flag = 0;
20000060:	4b04      	ldr	r3, [pc, #16]	; (20000074 <delay_500ns+0x18>)
20000062:	2200      	movs	r2, #0
20000064:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 2);   
20000066:	2054      	movs	r0, #84	; 0x54
20000068:	f000 f856 	bl	20000118 <start_delay>
}
2000006c:	46c0      	nop			; (mov r8, r8)
2000006e:	46bd      	mov	sp, r7
20000070:	bd80      	pop	{r7, pc}
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	20000d80 	andcs	r0, r0, r0, lsl #27

20000078 <delay_1mikro>:

void delay_1mikro(void){
20000078:	b580      	push	{r7, lr}
2000007a:	af00      	add	r7, sp, #0
    start_delay(MIKRO_SECOND_PULSES);
2000007c:	20a8      	movs	r0, #168	; 0xa8
2000007e:	f000 f84b 	bl	20000118 <start_delay>
}
20000082:	46c0      	nop			; (mov r8, r8)
20000084:	46bd      	mov	sp, r7
20000086:	bd80      	pop	{r7, pc}

20000088 <delay_1milli>:

void delay_1milli(void){
20000088:	b580      	push	{r7, lr}
2000008a:	af00      	add	r7, sp, #0
#ifndef SIMULATOR
    start_delay(MIKRO_SECOND_PULSES * 1000);
2000008c:	4b03      	ldr	r3, [pc, #12]	; (2000009c <delay_1milli+0x14>)
2000008e:	0018      	movs	r0, r3
20000090:	f000 f842 	bl	20000118 <start_delay>
#else
    start_delay(MIKRO_SECOND_PULSES);
#endif
}
20000094:	46c0      	nop			; (mov r8, r8)
20000096:	46bd      	mov	sp, r7
20000098:	bd80      	pop	{r7, pc}
2000009a:	46c0      	nop			; (mov r8, r8)
2000009c:	00029040 	andeq	r9, r2, r0, asr #32

200000a0 <delay_mikro>:

void delay_mikro(unsigned int count){
200000a0:	b580      	push	{r7, lr}
200000a2:	b082      	sub	sp, #8
200000a4:	af00      	add	r7, sp, #0
200000a6:	6078      	str	r0, [r7, #4]
    if(count == 0)return;
200000a8:	687b      	ldr	r3, [r7, #4]
200000aa:	2b00      	cmp	r3, #0
200000ac:	d00b      	beq.n	200000c6 <delay_mikro+0x26>
    delay_counter = count;
200000ae:	687a      	ldr	r2, [r7, #4]
200000b0:	4b07      	ldr	r3, [pc, #28]	; (200000d0 <delay_mikro+0x30>)
200000b2:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
200000b4:	4b07      	ldr	r3, [pc, #28]	; (200000d4 <delay_mikro+0x34>)
200000b6:	2200      	movs	r2, #0
200000b8:	601a      	str	r2, [r3, #0]
    mikro = 1;
200000ba:	4b07      	ldr	r3, [pc, #28]	; (200000d8 <delay_mikro+0x38>)
200000bc:	2201      	movs	r2, #1
200000be:	601a      	str	r2, [r3, #0]
    delay_1mikro();
200000c0:	f7ff ffda 	bl	20000078 <delay_1mikro>
200000c4:	e000      	b.n	200000c8 <delay_mikro+0x28>
    if(count == 0)return;
200000c6:	46c0      	nop			; (mov r8, r8)
}
200000c8:	46bd      	mov	sp, r7
200000ca:	b002      	add	sp, #8
200000cc:	bd80      	pop	{r7, pc}
200000ce:	46c0      	nop			; (mov r8, r8)
200000d0:	20000d78 	andcs	r0, r0, r8, ror sp
200000d4:	20000d80 	andcs	r0, r0, r0, lsl #27
200000d8:	20000d7c 	andcs	r0, r0, ip, ror sp

200000dc <delay_milli>:

void delay_milli(unsigned int count){
200000dc:	b580      	push	{r7, lr}
200000de:	b082      	sub	sp, #8
200000e0:	af00      	add	r7, sp, #0
200000e2:	6078      	str	r0, [r7, #4]
    if(count == 0) return;
200000e4:	687b      	ldr	r3, [r7, #4]
200000e6:	2b00      	cmp	r3, #0
200000e8:	d00b      	beq.n	20000102 <delay_milli+0x26>
    delay_counter = count;
200000ea:	687a      	ldr	r2, [r7, #4]
200000ec:	4b07      	ldr	r3, [pc, #28]	; (2000010c <delay_milli+0x30>)
200000ee:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
200000f0:	4b07      	ldr	r3, [pc, #28]	; (20000110 <delay_milli+0x34>)
200000f2:	2200      	movs	r2, #0
200000f4:	601a      	str	r2, [r3, #0]
    mikro = 0;
200000f6:	4b07      	ldr	r3, [pc, #28]	; (20000114 <delay_milli+0x38>)
200000f8:	2200      	movs	r2, #0
200000fa:	601a      	str	r2, [r3, #0]
    delay_1milli();
200000fc:	f7ff ffc4 	bl	20000088 <delay_1milli>
20000100:	e000      	b.n	20000104 <delay_milli+0x28>
    if(count == 0) return;
20000102:	46c0      	nop			; (mov r8, r8)
}
20000104:	46bd      	mov	sp, r7
20000106:	b002      	add	sp, #8
20000108:	bd80      	pop	{r7, pc}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	20000d78 	andcs	r0, r0, r8, ror sp
20000110:	20000d80 	andcs	r0, r0, r0, lsl #27
20000114:	20000d7c 	andcs	r0, r0, ip, ror sp

20000118 <start_delay>:

void start_delay(unsigned int pulses){
20000118:	b580      	push	{r7, lr}
2000011a:	b082      	sub	sp, #8
2000011c:	af00      	add	r7, sp, #0
2000011e:	6078      	str	r0, [r7, #4]
    SYSTICK.ctrl = 0;
20000120:	4b08      	ldr	r3, [pc, #32]	; (20000144 <start_delay+0x2c>)
20000122:	2200      	movs	r2, #0
20000124:	601a      	str	r2, [r3, #0]
    SYSTICK.load = pulses-1;
20000126:	4b07      	ldr	r3, [pc, #28]	; (20000144 <start_delay+0x2c>)
20000128:	687a      	ldr	r2, [r7, #4]
2000012a:	3a01      	subs	r2, #1
2000012c:	605a      	str	r2, [r3, #4]
    SYSTICK.val = 0;
2000012e:	4b05      	ldr	r3, [pc, #20]	; (20000144 <start_delay+0x2c>)
20000130:	2200      	movs	r2, #0
20000132:	609a      	str	r2, [r3, #8]
    SYSTICK.ctrlFirstByte = 7;
20000134:	4b03      	ldr	r3, [pc, #12]	; (20000144 <start_delay+0x2c>)
20000136:	2207      	movs	r2, #7
20000138:	701a      	strb	r2, [r3, #0]
}
2000013a:	46c0      	nop			; (mov r8, r8)
2000013c:	46bd      	mov	sp, r7
2000013e:	b002      	add	sp, #8
20000140:	bd80      	pop	{r7, pc}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	e000e010 	and	lr, r0, r0, lsl r0

20000148 <init_systick_interrupt_handler>:

void init_systick_interrupt_handler(void){
20000148:	b580      	push	{r7, lr}
2000014a:	af00      	add	r7, sp, #0
    *((void(**)(void))0x2001C03C) = systick_interrupt_handler;
2000014c:	4b02      	ldr	r3, [pc, #8]	; (20000158 <init_systick_interrupt_handler+0x10>)
2000014e:	4a03      	ldr	r2, [pc, #12]	; (2000015c <init_systick_interrupt_handler+0x14>)
20000150:	601a      	str	r2, [r3, #0]
}
20000152:	46c0      	nop			; (mov r8, r8)
20000154:	46bd      	mov	sp, r7
20000156:	bd80      	pop	{r7, pc}
20000158:	2001c03c 	andcs	ip, r1, ip, lsr r0
2000015c:	20000161 	andcs	r0, r0, r1, ror #2

20000160 <systick_interrupt_handler>:

void systick_interrupt_handler(void){
20000160:	b580      	push	{r7, lr}
20000162:	af00      	add	r7, sp, #0
    SYSTICK.ctrl = 0;
20000164:	4b0d      	ldr	r3, [pc, #52]	; (2000019c <systick_interrupt_handler+0x3c>)
20000166:	2200      	movs	r2, #0
20000168:	601a      	str	r2, [r3, #0]
    delay_counter--;
2000016a:	4b0d      	ldr	r3, [pc, #52]	; (200001a0 <systick_interrupt_handler+0x40>)
2000016c:	681b      	ldr	r3, [r3, #0]
2000016e:	1e5a      	subs	r2, r3, #1
20000170:	4b0b      	ldr	r3, [pc, #44]	; (200001a0 <systick_interrupt_handler+0x40>)
20000172:	601a      	str	r2, [r3, #0]
    if(delay_counter > 0){
20000174:	4b0a      	ldr	r3, [pc, #40]	; (200001a0 <systick_interrupt_handler+0x40>)
20000176:	681b      	ldr	r3, [r3, #0]
20000178:	2b00      	cmp	r3, #0
2000017a:	dd09      	ble.n	20000190 <systick_interrupt_handler+0x30>
        if(mikro){
2000017c:	4b09      	ldr	r3, [pc, #36]	; (200001a4 <systick_interrupt_handler+0x44>)
2000017e:	681b      	ldr	r3, [r3, #0]
20000180:	2b00      	cmp	r3, #0
20000182:	d002      	beq.n	2000018a <systick_interrupt_handler+0x2a>
            delay_1mikro();
20000184:	f7ff ff78 	bl	20000078 <delay_1mikro>
            delay_1milli();
        }
    } else {
        systick_flag = 1;
    }
20000188:	e005      	b.n	20000196 <systick_interrupt_handler+0x36>
            delay_1milli();
2000018a:	f7ff ff7d 	bl	20000088 <delay_1milli>
2000018e:	e002      	b.n	20000196 <systick_interrupt_handler+0x36>
        systick_flag = 1;
20000190:	4b05      	ldr	r3, [pc, #20]	; (200001a8 <systick_interrupt_handler+0x48>)
20000192:	2201      	movs	r2, #1
20000194:	601a      	str	r2, [r3, #0]
20000196:	46c0      	nop			; (mov r8, r8)
20000198:	46bd      	mov	sp, r7
2000019a:	bd80      	pop	{r7, pc}
2000019c:	e000e010 	and	lr, r0, r0, lsl r0
200001a0:	20000d78 	andcs	r0, r0, r8, ror sp
200001a4:	20000d7c 	andcs	r0, r0, ip, ror sp
200001a8:	20000d80 	andcs	r0, r0, r0, lsl #27

200001ac <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"

void graphic_ctrl_bit_set(uint8_t x){
200001ac:	b580      	push	{r7, lr}
200001ae:	b084      	sub	sp, #16
200001b0:	af00      	add	r7, sp, #0
200001b2:	0002      	movs	r2, r0
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
200001b8:	4a0f      	ldr	r2, [pc, #60]	; (200001f8 <graphic_ctrl_bit_set+0x4c>)
200001ba:	230f      	movs	r3, #15
200001bc:	18fb      	adds	r3, r7, r3
200001be:	7d12      	ldrb	r2, [r2, #20]
200001c0:	701a      	strb	r2, [r3, #0]
    control_register |= x;
200001c2:	230f      	movs	r3, #15
200001c4:	18fb      	adds	r3, r7, r3
200001c6:	220f      	movs	r2, #15
200001c8:	18b9      	adds	r1, r7, r2
200001ca:	1dfa      	adds	r2, r7, #7
200001cc:	7809      	ldrb	r1, [r1, #0]
200001ce:	7812      	ldrb	r2, [r2, #0]
200001d0:	430a      	orrs	r2, r1
200001d2:	701a      	strb	r2, [r3, #0]
	control_register &= ~B_SELECT;
200001d4:	230f      	movs	r3, #15
200001d6:	18fb      	adds	r3, r7, r3
200001d8:	220f      	movs	r2, #15
200001da:	18ba      	adds	r2, r7, r2
200001dc:	7812      	ldrb	r2, [r2, #0]
200001de:	2104      	movs	r1, #4
200001e0:	438a      	bics	r2, r1
200001e2:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
200001e4:	4a04      	ldr	r2, [pc, #16]	; (200001f8 <graphic_ctrl_bit_set+0x4c>)
200001e6:	230f      	movs	r3, #15
200001e8:	18fb      	adds	r3, r7, r3
200001ea:	781b      	ldrb	r3, [r3, #0]
200001ec:	7513      	strb	r3, [r2, #20]
}
200001ee:	46c0      	nop			; (mov r8, r8)
200001f0:	46bd      	mov	sp, r7
200001f2:	b004      	add	sp, #16
200001f4:	bd80      	pop	{r7, pc}
200001f6:	46c0      	nop			; (mov r8, r8)
200001f8:	40021000 	andmi	r1, r2, r0

200001fc <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
200001fc:	b580      	push	{r7, lr}
200001fe:	b084      	sub	sp, #16
20000200:	af00      	add	r7, sp, #0
20000202:	0002      	movs	r2, r0
20000204:	1dfb      	adds	r3, r7, #7
20000206:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
20000208:	4a11      	ldr	r2, [pc, #68]	; (20000250 <graphic_ctrl_bit_clear+0x54>)
2000020a:	230f      	movs	r3, #15
2000020c:	18fb      	adds	r3, r7, r3
2000020e:	7d12      	ldrb	r2, [r2, #20]
20000210:	701a      	strb	r2, [r3, #0]
    control_register &= (~x);
20000212:	1dfb      	adds	r3, r7, #7
20000214:	781b      	ldrb	r3, [r3, #0]
20000216:	b25b      	sxtb	r3, r3
20000218:	43db      	mvns	r3, r3
2000021a:	b25b      	sxtb	r3, r3
2000021c:	220f      	movs	r2, #15
2000021e:	18ba      	adds	r2, r7, r2
20000220:	7812      	ldrb	r2, [r2, #0]
20000222:	b252      	sxtb	r2, r2
20000224:	4013      	ands	r3, r2
20000226:	b25a      	sxtb	r2, r3
20000228:	230f      	movs	r3, #15
2000022a:	18fb      	adds	r3, r7, r3
2000022c:	701a      	strb	r2, [r3, #0]
    control_register &= ~B_SELECT;
2000022e:	230f      	movs	r3, #15
20000230:	18fb      	adds	r3, r7, r3
20000232:	220f      	movs	r2, #15
20000234:	18ba      	adds	r2, r7, r2
20000236:	7812      	ldrb	r2, [r2, #0]
20000238:	2104      	movs	r1, #4
2000023a:	438a      	bics	r2, r1
2000023c:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
2000023e:	4a04      	ldr	r2, [pc, #16]	; (20000250 <graphic_ctrl_bit_clear+0x54>)
20000240:	230f      	movs	r3, #15
20000242:	18fb      	adds	r3, r7, r3
20000244:	781b      	ldrb	r3, [r3, #0]
20000246:	7513      	strb	r3, [r2, #20]
}
20000248:	46c0      	nop			; (mov r8, r8)
2000024a:	46bd      	mov	sp, r7
2000024c:	b004      	add	sp, #16
2000024e:	bd80      	pop	{r7, pc}
20000250:	40021000 	andmi	r1, r2, r0

20000254 <select_controller>:

void select_controller(uint8_t controller){
20000254:	b580      	push	{r7, lr}
20000256:	b082      	sub	sp, #8
20000258:	af00      	add	r7, sp, #0
2000025a:	0002      	movs	r2, r0
2000025c:	1dfb      	adds	r3, r7, #7
2000025e:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000260:	1dfb      	adds	r3, r7, #7
20000262:	781b      	ldrb	r3, [r3, #0]
20000264:	2b08      	cmp	r3, #8
20000266:	d00c      	beq.n	20000282 <select_controller+0x2e>
20000268:	dc02      	bgt.n	20000270 <select_controller+0x1c>
2000026a:	2b00      	cmp	r3, #0
2000026c:	d005      	beq.n	2000027a <select_controller+0x26>
            break;
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
    }
}
2000026e:	e01a      	b.n	200002a6 <select_controller+0x52>
    switch(controller){
20000270:	2b10      	cmp	r3, #16
20000272:	d00d      	beq.n	20000290 <select_controller+0x3c>
20000274:	2b18      	cmp	r3, #24
20000276:	d012      	beq.n	2000029e <select_controller+0x4a>
}
20000278:	e015      	b.n	200002a6 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000027a:	2018      	movs	r0, #24
2000027c:	f7ff ffbe 	bl	200001fc <graphic_ctrl_bit_clear>
            break;
20000280:	e011      	b.n	200002a6 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS2);
20000282:	2010      	movs	r0, #16
20000284:	f7ff ffba 	bl	200001fc <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS1);
20000288:	2008      	movs	r0, #8
2000028a:	f7ff ff8f 	bl	200001ac <graphic_ctrl_bit_set>
            break;
2000028e:	e00a      	b.n	200002a6 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000290:	2008      	movs	r0, #8
20000292:	f7ff ffb3 	bl	200001fc <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000296:	2010      	movs	r0, #16
20000298:	f7ff ff88 	bl	200001ac <graphic_ctrl_bit_set>
            break;
2000029c:	e003      	b.n	200002a6 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000029e:	2018      	movs	r0, #24
200002a0:	f7ff ff84 	bl	200001ac <graphic_ctrl_bit_set>
            break;
200002a4:	46c0      	nop			; (mov r8, r8)
}
200002a6:	46c0      	nop			; (mov r8, r8)
200002a8:	46bd      	mov	sp, r7
200002aa:	b002      	add	sp, #8
200002ac:	bd80      	pop	{r7, pc}

200002ae <graphic_wait_ready>:

void graphic_wait_ready(void){
200002ae:	b580      	push	{r7, lr}
200002b0:	b082      	sub	sp, #8
200002b2:	af00      	add	r7, sp, #0
    uint8_t display_busy_status;
    // Enable = 0
    graphic_ctrl_bit_clear(B_E);
200002b4:	2040      	movs	r0, #64	; 0x40
200002b6:	f7ff ffa1 	bl	200001fc <graphic_ctrl_bit_clear>
    // E: 15-8 = input, 7-0 = output
    GPIO_E.moder = 0x00005555;
200002ba:	4b17      	ldr	r3, [pc, #92]	; (20000318 <graphic_wait_ready+0x6a>)
200002bc:	4a17      	ldr	r2, [pc, #92]	; (2000031c <graphic_wait_ready+0x6e>)
200002be:	601a      	str	r2, [r3, #0]
    
    // RS = 0, RW = 1
    graphic_ctrl_bit_clear(B_RS);
200002c0:	2001      	movs	r0, #1
200002c2:	f7ff ff9b 	bl	200001fc <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
200002c6:	2002      	movs	r0, #2
200002c8:	f7ff ff70 	bl	200001ac <graphic_ctrl_bit_set>
    delay_500ns();
200002cc:	f7ff fec6 	bl	2000005c <delay_500ns>
    
    while(1){
        // Enable = 1
        graphic_ctrl_bit_set(B_E);
200002d0:	2040      	movs	r0, #64	; 0x40
200002d2:	f7ff ff6b 	bl	200001ac <graphic_ctrl_bit_set>
        delay_500ns();
200002d6:	f7ff fec1 	bl	2000005c <delay_500ns>
        // Enable = 0
		display_busy_status = GPIO_E.idrHigh;
200002da:	4a0f      	ldr	r2, [pc, #60]	; (20000318 <graphic_wait_ready+0x6a>)
200002dc:	1dfb      	adds	r3, r7, #7
200002de:	7c52      	ldrb	r2, [r2, #17]
200002e0:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
200002e2:	2040      	movs	r0, #64	; 0x40
200002e4:	f7ff ff8a 	bl	200001fc <graphic_ctrl_bit_clear>
        delay_500ns();
200002e8:	f7ff feb8 	bl	2000005c <delay_500ns>
        // Exit loop if not busy
        
		display_busy_status &= LCD_BUSY;
200002ec:	1dfb      	adds	r3, r7, #7
200002ee:	1dfa      	adds	r2, r7, #7
200002f0:	7812      	ldrb	r2, [r2, #0]
200002f2:	217f      	movs	r1, #127	; 0x7f
200002f4:	438a      	bics	r2, r1
200002f6:	701a      	strb	r2, [r3, #0]
        if(display_busy_status == 0){
200002f8:	1dfb      	adds	r3, r7, #7
200002fa:	781b      	ldrb	r3, [r3, #0]
200002fc:	2b00      	cmp	r3, #0
200002fe:	d000      	beq.n	20000302 <graphic_wait_ready+0x54>
        graphic_ctrl_bit_set(B_E);
20000300:	e7e6      	b.n	200002d0 <graphic_wait_ready+0x22>
            break;
20000302:	46c0      	nop			; (mov r8, r8)
        } 
    }
    
    // Enable = 1
    graphic_ctrl_bit_set(B_E); // Commented out to check if this works because it works for NaN
20000304:	2040      	movs	r0, #64	; 0x40
20000306:	f7ff ff51 	bl	200001ac <graphic_ctrl_bit_set>
    // E: 15-0 = output
    GPIO_E.moder = 0x55555555;
2000030a:	4b03      	ldr	r3, [pc, #12]	; (20000318 <graphic_wait_ready+0x6a>)
2000030c:	4a04      	ldr	r2, [pc, #16]	; (20000320 <graphic_wait_ready+0x72>)
2000030e:	601a      	str	r2, [r3, #0]
}
20000310:	46c0      	nop			; (mov r8, r8)
20000312:	46bd      	mov	sp, r7
20000314:	b002      	add	sp, #8
20000316:	bd80      	pop	{r7, pc}
20000318:	40021000 	andmi	r1, r2, r0
2000031c:	00005555 	andeq	r5, r0, r5, asr r5
20000320:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000324 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000324:	b580      	push	{r7, lr}
20000326:	b084      	sub	sp, #16
20000328:	af00      	add	r7, sp, #0
2000032a:	0002      	movs	r2, r0
2000032c:	1dfb      	adds	r3, r7, #7
2000032e:	701a      	strb	r2, [r3, #0]
	//Set enable to 0
	graphic_ctrl_bit_clear(B_E);
20000330:	2040      	movs	r0, #64	; 0x40
20000332:	f7ff ff63 	bl	200001fc <graphic_ctrl_bit_clear>
	
	//set E to input high byte / output low byte
	GPIO_E.moder = 0x00005555;
20000336:	4b1c      	ldr	r3, [pc, #112]	; (200003a8 <graphic_read+0x84>)
20000338:	4a1c      	ldr	r2, [pc, #112]	; (200003ac <graphic_read+0x88>)
2000033a:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_RS | B_RW);
2000033c:	2003      	movs	r0, #3
2000033e:	f7ff ff35 	bl	200001ac <graphic_ctrl_bit_set>
	
	select_controller(controller);
20000342:	1dfb      	adds	r3, r7, #7
20000344:	781b      	ldrb	r3, [r3, #0]
20000346:	0018      	movs	r0, r3
20000348:	f7ff ff84 	bl	20000254 <select_controller>
	delay_500ns();
2000034c:	f7ff fe86 	bl	2000005c <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
20000350:	2040      	movs	r0, #64	; 0x40
20000352:	f7ff ff2b 	bl	200001ac <graphic_ctrl_bit_set>
	delay_500ns();
20000356:	f7ff fe81 	bl	2000005c <delay_500ns>
	
	// set return value to what is on the data register
	uint8_t RV = GPIO_E.idrHigh;
2000035a:	4a13      	ldr	r2, [pc, #76]	; (200003a8 <graphic_read+0x84>)
2000035c:	230f      	movs	r3, #15
2000035e:	18fb      	adds	r3, r7, r3
20000360:	7c52      	ldrb	r2, [r2, #17]
20000362:	701a      	strb	r2, [r3, #0]
	
	graphic_ctrl_bit_clear(B_E);
20000364:	2040      	movs	r0, #64	; 0x40
20000366:	f7ff ff49 	bl	200001fc <graphic_ctrl_bit_clear>
	
	//set E to output
	GPIO_E.moder = 0x55555555;
2000036a:	4b0f      	ldr	r3, [pc, #60]	; (200003a8 <graphic_read+0x84>)
2000036c:	4a10      	ldr	r2, [pc, #64]	; (200003b0 <graphic_read+0x8c>)
2000036e:	601a      	str	r2, [r3, #0]
	
	if((controller & B_CS1) != 0) {
20000370:	1dfb      	adds	r3, r7, #7
20000372:	781b      	ldrb	r3, [r3, #0]
20000374:	2208      	movs	r2, #8
20000376:	4013      	ands	r3, r2
20000378:	d004      	beq.n	20000384 <graphic_read+0x60>
		select_controller(B_CS1);
2000037a:	2008      	movs	r0, #8
2000037c:	f7ff ff6a 	bl	20000254 <select_controller>
		graphic_wait_ready();
20000380:	f7ff ff95 	bl	200002ae <graphic_wait_ready>
	}
	if((controller & B_CS2) != 0){
20000384:	1dfb      	adds	r3, r7, #7
20000386:	781b      	ldrb	r3, [r3, #0]
20000388:	2210      	movs	r2, #16
2000038a:	4013      	ands	r3, r2
2000038c:	d004      	beq.n	20000398 <graphic_read+0x74>
		select_controller(B_CS2);
2000038e:	2010      	movs	r0, #16
20000390:	f7ff ff60 	bl	20000254 <select_controller>
		graphic_wait_ready();
20000394:	f7ff ff8b 	bl	200002ae <graphic_wait_ready>
		//case B_CS1 | B_CS2: select_controller(B_CS1 | B_CS2); break;
		//default: select_controller(0);
	}*/
	//graphic_wait_ready();
	
	return RV;
20000398:	230f      	movs	r3, #15
2000039a:	18fb      	adds	r3, r7, r3
2000039c:	781b      	ldrb	r3, [r3, #0]
}
2000039e:	0018      	movs	r0, r3
200003a0:	46bd      	mov	sp, r7
200003a2:	b004      	add	sp, #16
200003a4:	bd80      	pop	{r7, pc}
200003a6:	46c0      	nop			; (mov r8, r8)
200003a8:	40021000 	andmi	r1, r2, r0
200003ac:	00005555 	andeq	r5, r0, r5, asr r5
200003b0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003b4 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200003b4:	b580      	push	{r7, lr}
200003b6:	b082      	sub	sp, #8
200003b8:	af00      	add	r7, sp, #0
200003ba:	0002      	movs	r2, r0
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	701a      	strb	r2, [r3, #0]
200003c0:	1dbb      	adds	r3, r7, #6
200003c2:	1c0a      	adds	r2, r1, #0
200003c4:	701a      	strb	r2, [r3, #0]
	//datareg to value
	GPIO_E.odrHigh = value;
200003c6:	4a1a      	ldr	r2, [pc, #104]	; (20000430 <graphic_write+0x7c>)
200003c8:	1dfb      	adds	r3, r7, #7
200003ca:	781b      	ldrb	r3, [r3, #0]
200003cc:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
200003ce:	1dbb      	adds	r3, r7, #6
200003d0:	781b      	ldrb	r3, [r3, #0]
200003d2:	0018      	movs	r0, r3
200003d4:	f7ff ff3e 	bl	20000254 <select_controller>
	delay_500ns();
200003d8:	f7ff fe40 	bl	2000005c <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
200003dc:	2040      	movs	r0, #64	; 0x40
200003de:	f7ff fee5 	bl	200001ac <graphic_ctrl_bit_set>
	delay_500ns();
200003e2:	f7ff fe3b 	bl	2000005c <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200003e6:	2040      	movs	r0, #64	; 0x40
200003e8:	f7ff ff08 	bl	200001fc <graphic_ctrl_bit_clear>
	
	//select actual controller, wait while we read
	if (controller & B_CS1){
200003ec:	1dbb      	adds	r3, r7, #6
200003ee:	781b      	ldrb	r3, [r3, #0]
200003f0:	2208      	movs	r2, #8
200003f2:	4013      	ands	r3, r2
200003f4:	d004      	beq.n	20000400 <graphic_write+0x4c>
		select_controller(B_CS1);
200003f6:	2008      	movs	r0, #8
200003f8:	f7ff ff2c 	bl	20000254 <select_controller>
		graphic_wait_ready();
200003fc:	f7ff ff57 	bl	200002ae <graphic_wait_ready>
	}
	if (controller & B_CS2){
20000400:	1dbb      	adds	r3, r7, #6
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	2210      	movs	r2, #16
20000406:	4013      	ands	r3, r2
20000408:	d004      	beq.n	20000414 <graphic_write+0x60>
		select_controller(B_CS2);
2000040a:	2010      	movs	r0, #16
2000040c:	f7ff ff22 	bl	20000254 <select_controller>
		graphic_wait_ready();
20000410:	f7ff ff4d 	bl	200002ae <graphic_wait_ready>
	}
	
	//datareg to 0
	GPIO_E.odrHigh = 0;
20000414:	4b06      	ldr	r3, [pc, #24]	; (20000430 <graphic_write+0x7c>)
20000416:	2200      	movs	r2, #0
20000418:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
2000041a:	2040      	movs	r0, #64	; 0x40
2000041c:	f7ff fec6 	bl	200001ac <graphic_ctrl_bit_set>
	
	//set controller to 0
	select_controller(0);
20000420:	2000      	movs	r0, #0
20000422:	f7ff ff17 	bl	20000254 <select_controller>
}
20000426:	46c0      	nop			; (mov r8, r8)
20000428:	46bd      	mov	sp, r7
2000042a:	b002      	add	sp, #8
2000042c:	bd80      	pop	{r7, pc}
2000042e:	46c0      	nop			; (mov r8, r8)
20000430:	40021000 	andmi	r1, r2, r0

20000434 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000434:	b580      	push	{r7, lr}
20000436:	b082      	sub	sp, #8
20000438:	af00      	add	r7, sp, #0
2000043a:	0002      	movs	r2, r0
2000043c:	1dfb      	adds	r3, r7, #7
2000043e:	701a      	strb	r2, [r3, #0]
20000440:	1dbb      	adds	r3, r7, #6
20000442:	1c0a      	adds	r2, r1, #0
20000444:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000446:	2040      	movs	r0, #64	; 0x40
20000448:	f7ff fed8 	bl	200001fc <graphic_ctrl_bit_clear>
	select_controller(controller);
2000044c:	1dbb      	adds	r3, r7, #6
2000044e:	781b      	ldrb	r3, [r3, #0]
20000450:	0018      	movs	r0, r3
20000452:	f7ff feff 	bl	20000254 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000456:	2003      	movs	r0, #3
20000458:	f7ff fed0 	bl	200001fc <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000045c:	1dbb      	adds	r3, r7, #6
2000045e:	781a      	ldrb	r2, [r3, #0]
20000460:	1dfb      	adds	r3, r7, #7
20000462:	781b      	ldrb	r3, [r3, #0]
20000464:	0011      	movs	r1, r2
20000466:	0018      	movs	r0, r3
20000468:	f7ff ffa4 	bl	200003b4 <graphic_write>
}
2000046c:	46c0      	nop			; (mov r8, r8)
2000046e:	46bd      	mov	sp, r7
20000470:	b002      	add	sp, #8
20000472:	bd80      	pop	{r7, pc}

20000474 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000474:	b580      	push	{r7, lr}
20000476:	b082      	sub	sp, #8
20000478:	af00      	add	r7, sp, #0
2000047a:	0002      	movs	r2, r0
2000047c:	1dfb      	adds	r3, r7, #7
2000047e:	701a      	strb	r2, [r3, #0]
20000480:	1dbb      	adds	r3, r7, #6
20000482:	1c0a      	adds	r2, r1, #0
20000484:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff feb8 	bl	200001fc <graphic_ctrl_bit_clear>
	select_controller(controller);
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	781b      	ldrb	r3, [r3, #0]
20000490:	0018      	movs	r0, r3
20000492:	f7ff fedf 	bl	20000254 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000496:	2001      	movs	r0, #1
20000498:	f7ff fe88 	bl	200001ac <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
2000049c:	2002      	movs	r0, #2
2000049e:	f7ff fead 	bl	200001fc <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200004a2:	1dbb      	adds	r3, r7, #6
200004a4:	781a      	ldrb	r2, [r3, #0]
200004a6:	1dfb      	adds	r3, r7, #7
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	0011      	movs	r1, r2
200004ac:	0018      	movs	r0, r3
200004ae:	f7ff ff81 	bl	200003b4 <graphic_write>
}
200004b2:	46c0      	nop			; (mov r8, r8)
200004b4:	46bd      	mov	sp, r7
200004b6:	b002      	add	sp, #8
200004b8:	bd80      	pop	{r7, pc}

200004ba <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200004ba:	b580      	push	{r7, lr}
200004bc:	b082      	sub	sp, #8
200004be:	af00      	add	r7, sp, #0
200004c0:	0002      	movs	r2, r0
200004c2:	1dfb      	adds	r3, r7, #7
200004c4:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
200004c6:	1dfb      	adds	r3, r7, #7
200004c8:	781b      	ldrb	r3, [r3, #0]
200004ca:	0018      	movs	r0, r3
200004cc:	f7ff ff2a 	bl	20000324 <graphic_read>
	return graphic_read(controller);
200004d0:	1dfb      	adds	r3, r7, #7
200004d2:	781b      	ldrb	r3, [r3, #0]
200004d4:	0018      	movs	r0, r3
200004d6:	f7ff ff25 	bl	20000324 <graphic_read>
200004da:	0003      	movs	r3, r0
}
200004dc:	0018      	movs	r0, r3
200004de:	46bd      	mov	sp, r7
200004e0:	b002      	add	sp, #8
200004e2:	bd80      	pop	{r7, pc}

200004e4 <graphic_initialize>:

void graphic_initialize(void){
200004e4:	b580      	push	{r7, lr}
200004e6:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200004e8:	2040      	movs	r0, #64	; 0x40
200004ea:	f7ff fe5f 	bl	200001ac <graphic_ctrl_bit_set>
	
	delay_mikro(10);
200004ee:	200a      	movs	r0, #10
200004f0:	f7ff fdd6 	bl	200000a0 <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200004f4:	2078      	movs	r0, #120	; 0x78
200004f6:	f7ff fe81 	bl	200001fc <graphic_ctrl_bit_clear>
	
	delay_milli(30);
200004fa:	201e      	movs	r0, #30
200004fc:	f7ff fdee 	bl	200000dc <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000500:	2020      	movs	r0, #32
20000502:	f7ff fe53 	bl	200001ac <graphic_ctrl_bit_set>
	
	delay_milli(100); // Added because NaN has it
20000506:	2064      	movs	r0, #100	; 0x64
20000508:	f7ff fde8 	bl	200000dc <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000050c:	2118      	movs	r1, #24
2000050e:	203e      	movs	r0, #62	; 0x3e
20000510:	f7ff ff90 	bl	20000434 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000514:	2118      	movs	r1, #24
20000516:	203f      	movs	r0, #63	; 0x3f
20000518:	f7ff ff8c 	bl	20000434 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000051c:	2118      	movs	r1, #24
2000051e:	20c0      	movs	r0, #192	; 0xc0
20000520:	f7ff ff88 	bl	20000434 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000524:	2118      	movs	r1, #24
20000526:	2040      	movs	r0, #64	; 0x40
20000528:	f7ff ff84 	bl	20000434 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000052c:	2118      	movs	r1, #24
2000052e:	20b8      	movs	r0, #184	; 0xb8
20000530:	f7ff ff80 	bl	20000434 <graphic_write_command>
	
	select_controller(0);
20000534:	2000      	movs	r0, #0
20000536:	f7ff fe8d 	bl	20000254 <select_controller>
}
2000053a:	46c0      	nop			; (mov r8, r8)
2000053c:	46bd      	mov	sp, r7
2000053e:	bd80      	pop	{r7, pc}

20000540 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000540:	b580      	push	{r7, lr}
20000542:	b082      	sub	sp, #8
20000544:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++){
20000546:	1dfb      	adds	r3, r7, #7
20000548:	2200      	movs	r2, #0
2000054a:	701a      	strb	r2, [r3, #0]
2000054c:	e023      	b.n	20000596 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
2000054e:	1dfb      	adds	r3, r7, #7
20000550:	781b      	ldrb	r3, [r3, #0]
20000552:	2248      	movs	r2, #72	; 0x48
20000554:	4252      	negs	r2, r2
20000556:	4313      	orrs	r3, r2
20000558:	b2db      	uxtb	r3, r3
2000055a:	2118      	movs	r1, #24
2000055c:	0018      	movs	r0, r3
2000055e:	f7ff ff69 	bl	20000434 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000562:	2118      	movs	r1, #24
20000564:	2040      	movs	r0, #64	; 0x40
20000566:	f7ff ff65 	bl	20000434 <graphic_write_command>
		
		for(uint8_t add = 0; add < 64; add++){
2000056a:	1dbb      	adds	r3, r7, #6
2000056c:	2200      	movs	r2, #0
2000056e:	701a      	strb	r2, [r3, #0]
20000570:	e008      	b.n	20000584 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000572:	2118      	movs	r1, #24
20000574:	2000      	movs	r0, #0
20000576:	f7ff ff7d 	bl	20000474 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
2000057a:	1dbb      	adds	r3, r7, #6
2000057c:	781a      	ldrb	r2, [r3, #0]
2000057e:	1dbb      	adds	r3, r7, #6
20000580:	3201      	adds	r2, #1
20000582:	701a      	strb	r2, [r3, #0]
20000584:	1dbb      	adds	r3, r7, #6
20000586:	781b      	ldrb	r3, [r3, #0]
20000588:	2b3f      	cmp	r3, #63	; 0x3f
2000058a:	d9f2      	bls.n	20000572 <graphic_clear_screen+0x32>
	for(uint8_t page = 0; page < 8; page++){
2000058c:	1dfb      	adds	r3, r7, #7
2000058e:	781a      	ldrb	r2, [r3, #0]
20000590:	1dfb      	adds	r3, r7, #7
20000592:	3201      	adds	r2, #1
20000594:	701a      	strb	r2, [r3, #0]
20000596:	1dfb      	adds	r3, r7, #7
20000598:	781b      	ldrb	r3, [r3, #0]
2000059a:	2b07      	cmp	r3, #7
2000059c:	d9d7      	bls.n	2000054e <graphic_clear_screen+0xe>
		}
	}
}
2000059e:	46c0      	nop			; (mov r8, r8)
200005a0:	46bd      	mov	sp, r7
200005a2:	b002      	add	sp, #8
200005a4:	bd80      	pop	{r7, pc}

200005a6 <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
200005a6:	b590      	push	{r4, r7, lr}
200005a8:	b085      	sub	sp, #20
200005aa:	af00      	add	r7, sp, #0
200005ac:	0004      	movs	r4, r0
200005ae:	0008      	movs	r0, r1
200005b0:	0011      	movs	r1, r2
200005b2:	1dfb      	adds	r3, r7, #7
200005b4:	1c22      	adds	r2, r4, #0
200005b6:	701a      	strb	r2, [r3, #0]
200005b8:	1dbb      	adds	r3, r7, #6
200005ba:	1c02      	adds	r2, r0, #0
200005bc:	701a      	strb	r2, [r3, #0]
200005be:	1d7b      	adds	r3, r7, #5
200005c0:	1c0a      	adds	r2, r1, #0
200005c2:	701a      	strb	r2, [r3, #0]
    // Validate values for input variables
    if(x < 1 || x > 128){
200005c4:	1dfb      	adds	r3, r7, #7
200005c6:	781b      	ldrb	r3, [r3, #0]
200005c8:	2b00      	cmp	r3, #0
200005ca:	d100      	bne.n	200005ce <pixel+0x28>
200005cc:	e0b4      	b.n	20000738 <pixel+0x192>
200005ce:	1dfb      	adds	r3, r7, #7
200005d0:	781b      	ldrb	r3, [r3, #0]
200005d2:	2b80      	cmp	r3, #128	; 0x80
200005d4:	d900      	bls.n	200005d8 <pixel+0x32>
200005d6:	e0af      	b.n	20000738 <pixel+0x192>
        return;
    }
    if(y < 1 || y > 64){
200005d8:	1dbb      	adds	r3, r7, #6
200005da:	781b      	ldrb	r3, [r3, #0]
200005dc:	2b00      	cmp	r3, #0
200005de:	d100      	bne.n	200005e2 <pixel+0x3c>
200005e0:	e0ac      	b.n	2000073c <pixel+0x196>
200005e2:	1dbb      	adds	r3, r7, #6
200005e4:	781b      	ldrb	r3, [r3, #0]
200005e6:	2b40      	cmp	r3, #64	; 0x40
200005e8:	d900      	bls.n	200005ec <pixel+0x46>
200005ea:	e0a7      	b.n	2000073c <pixel+0x196>
        return;
    }
    if(set != 1 && set != 0){
200005ec:	1d7b      	adds	r3, r7, #5
200005ee:	781b      	ldrb	r3, [r3, #0]
200005f0:	2b01      	cmp	r3, #1
200005f2:	d004      	beq.n	200005fe <pixel+0x58>
200005f4:	1d7b      	adds	r3, r7, #5
200005f6:	781b      	ldrb	r3, [r3, #0]
200005f8:	2b00      	cmp	r3, #0
200005fa:	d000      	beq.n	200005fe <pixel+0x58>
200005fc:	e0a0      	b.n	20000740 <pixel+0x19a>
        return;
    }
    
    uint8_t index = (y-1)/8;
200005fe:	1dbb      	adds	r3, r7, #6
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	3b01      	subs	r3, #1
20000604:	2b00      	cmp	r3, #0
20000606:	da00      	bge.n	2000060a <pixel+0x64>
20000608:	3307      	adds	r3, #7
2000060a:	10db      	asrs	r3, r3, #3
2000060c:	001a      	movs	r2, r3
2000060e:	230c      	movs	r3, #12
20000610:	18fb      	adds	r3, r7, r3
20000612:	701a      	strb	r2, [r3, #0]
    // Create mask for y, works as well as switch from book, but with less code
    uint8_t mask = 1;
20000614:	230f      	movs	r3, #15
20000616:	18fb      	adds	r3, r7, r3
20000618:	2201      	movs	r2, #1
2000061a:	701a      	strb	r2, [r3, #0]
    mask = mask << ((y-1)%8);
2000061c:	230f      	movs	r3, #15
2000061e:	18fb      	adds	r3, r7, r3
20000620:	781a      	ldrb	r2, [r3, #0]
20000622:	1dbb      	adds	r3, r7, #6
20000624:	781b      	ldrb	r3, [r3, #0]
20000626:	3b01      	subs	r3, #1
20000628:	4947      	ldr	r1, [pc, #284]	; (20000748 <pixel+0x1a2>)
2000062a:	400b      	ands	r3, r1
2000062c:	d504      	bpl.n	20000638 <pixel+0x92>
2000062e:	3b01      	subs	r3, #1
20000630:	2108      	movs	r1, #8
20000632:	4249      	negs	r1, r1
20000634:	430b      	orrs	r3, r1
20000636:	3301      	adds	r3, #1
20000638:	409a      	lsls	r2, r3
2000063a:	230f      	movs	r3, #15
2000063c:	18fb      	adds	r3, r7, r3
2000063e:	701a      	strb	r2, [r3, #0]
		case 6: mask = 0x40; break;
		case 7: mask = 0x80; break;
	}*/
    
    // Invert mask if the bit is going to get cleared
    if(set == 0){
20000640:	1d7b      	adds	r3, r7, #5
20000642:	781b      	ldrb	r3, [r3, #0]
20000644:	2b00      	cmp	r3, #0
20000646:	d106      	bne.n	20000656 <pixel+0xb0>
        mask = ~mask;
20000648:	230f      	movs	r3, #15
2000064a:	18fb      	adds	r3, r7, r3
2000064c:	220f      	movs	r2, #15
2000064e:	18ba      	adds	r2, r7, r2
20000650:	7812      	ldrb	r2, [r2, #0]
20000652:	43d2      	mvns	r2, r2
20000654:	701a      	strb	r2, [r3, #0]
    }
    
    uint8_t x_actual;
    uint8_t controller;
    // Select applicable chip (screen half), and store the actual value of x
    if(x > 64){
20000656:	1dfb      	adds	r3, r7, #7
20000658:	781b      	ldrb	r3, [r3, #0]
2000065a:	2b40      	cmp	r3, #64	; 0x40
2000065c:	d90a      	bls.n	20000674 <pixel+0xce>
        controller = B_CS2;
2000065e:	230d      	movs	r3, #13
20000660:	18fb      	adds	r3, r7, r3
20000662:	2210      	movs	r2, #16
20000664:	701a      	strb	r2, [r3, #0]
        x_actual = x - 65;
20000666:	230e      	movs	r3, #14
20000668:	18fb      	adds	r3, r7, r3
2000066a:	1dfa      	adds	r2, r7, #7
2000066c:	7812      	ldrb	r2, [r2, #0]
2000066e:	3a41      	subs	r2, #65	; 0x41
20000670:	701a      	strb	r2, [r3, #0]
20000672:	e009      	b.n	20000688 <pixel+0xe2>
    } else {
        controller = B_CS1;
20000674:	230d      	movs	r3, #13
20000676:	18fb      	adds	r3, r7, r3
20000678:	2208      	movs	r2, #8
2000067a:	701a      	strb	r2, [r3, #0]
        x_actual = x - 1;
2000067c:	230e      	movs	r3, #14
2000067e:	18fb      	adds	r3, r7, r3
20000680:	1dfa      	adds	r2, r7, #7
20000682:	7812      	ldrb	r2, [r2, #0]
20000684:	3a01      	subs	r2, #1
20000686:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000688:	230e      	movs	r3, #14
2000068a:	18fb      	adds	r3, r7, r3
2000068c:	781b      	ldrb	r3, [r3, #0]
2000068e:	2240      	movs	r2, #64	; 0x40
20000690:	4313      	orrs	r3, r2
20000692:	b2da      	uxtb	r2, r3
20000694:	230d      	movs	r3, #13
20000696:	18fb      	adds	r3, r7, r3
20000698:	781b      	ldrb	r3, [r3, #0]
2000069a:	0019      	movs	r1, r3
2000069c:	0010      	movs	r0, r2
2000069e:	f7ff fec9 	bl	20000434 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
200006a2:	230c      	movs	r3, #12
200006a4:	18fb      	adds	r3, r7, r3
200006a6:	781b      	ldrb	r3, [r3, #0]
200006a8:	2248      	movs	r2, #72	; 0x48
200006aa:	4252      	negs	r2, r2
200006ac:	4313      	orrs	r3, r2
200006ae:	b2da      	uxtb	r2, r3
200006b0:	230d      	movs	r3, #13
200006b2:	18fb      	adds	r3, r7, r3
200006b4:	781b      	ldrb	r3, [r3, #0]
200006b6:	0019      	movs	r1, r3
200006b8:	0010      	movs	r0, r2
200006ba:	f7ff febb 	bl	20000434 <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
200006be:	230b      	movs	r3, #11
200006c0:	18fc      	adds	r4, r7, r3
200006c2:	230d      	movs	r3, #13
200006c4:	18fb      	adds	r3, r7, r3
200006c6:	781b      	ldrb	r3, [r3, #0]
200006c8:	0018      	movs	r0, r3
200006ca:	f7ff fef6 	bl	200004ba <graphic_read_data>
200006ce:	0003      	movs	r3, r0
200006d0:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
200006d2:	230e      	movs	r3, #14
200006d4:	18fb      	adds	r3, r7, r3
200006d6:	781b      	ldrb	r3, [r3, #0]
200006d8:	2240      	movs	r2, #64	; 0x40
200006da:	4313      	orrs	r3, r2
200006dc:	b2da      	uxtb	r2, r3
200006de:	230d      	movs	r3, #13
200006e0:	18fb      	adds	r3, r7, r3
200006e2:	781b      	ldrb	r3, [r3, #0]
200006e4:	0019      	movs	r1, r3
200006e6:	0010      	movs	r0, r2
200006e8:	f7ff fea4 	bl	20000434 <graphic_write_command>
    if(set == 1){
200006ec:	1d7b      	adds	r3, r7, #5
200006ee:	781b      	ldrb	r3, [r3, #0]
200006f0:	2b01      	cmp	r3, #1
200006f2:	d10a      	bne.n	2000070a <pixel+0x164>
        mask |= temp;
200006f4:	230f      	movs	r3, #15
200006f6:	18fb      	adds	r3, r7, r3
200006f8:	220f      	movs	r2, #15
200006fa:	18b9      	adds	r1, r7, r2
200006fc:	220b      	movs	r2, #11
200006fe:	18ba      	adds	r2, r7, r2
20000700:	7809      	ldrb	r1, [r1, #0]
20000702:	7812      	ldrb	r2, [r2, #0]
20000704:	430a      	orrs	r2, r1
20000706:	701a      	strb	r2, [r3, #0]
20000708:	e009      	b.n	2000071e <pixel+0x178>
    } else {
        mask &= temp;
2000070a:	230f      	movs	r3, #15
2000070c:	18fb      	adds	r3, r7, r3
2000070e:	220f      	movs	r2, #15
20000710:	18ba      	adds	r2, r7, r2
20000712:	210b      	movs	r1, #11
20000714:	1879      	adds	r1, r7, r1
20000716:	7812      	ldrb	r2, [r2, #0]
20000718:	7809      	ldrb	r1, [r1, #0]
2000071a:	400a      	ands	r2, r1
2000071c:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
2000071e:	230d      	movs	r3, #13
20000720:	18fb      	adds	r3, r7, r3
20000722:	781a      	ldrb	r2, [r3, #0]
20000724:	230f      	movs	r3, #15
20000726:	18fb      	adds	r3, r7, r3
20000728:	781b      	ldrb	r3, [r3, #0]
2000072a:	0011      	movs	r1, r2
2000072c:	0018      	movs	r0, r3
2000072e:	f7ff fea1 	bl	20000474 <graphic_write_data>
	delay_500ns();
20000732:	f7ff fc93 	bl	2000005c <delay_500ns>
20000736:	e004      	b.n	20000742 <pixel+0x19c>
        return;
20000738:	46c0      	nop			; (mov r8, r8)
2000073a:	e002      	b.n	20000742 <pixel+0x19c>
        return;
2000073c:	46c0      	nop			; (mov r8, r8)
2000073e:	e000      	b.n	20000742 <pixel+0x19c>
        return;
20000740:	46c0      	nop			; (mov r8, r8)
}
20000742:	46bd      	mov	sp, r7
20000744:	b005      	add	sp, #20
20000746:	bd90      	pop	{r4, r7, pc}
20000748:	80000007 	andhi	r0, r0, r7

2000074c <draw_object>:

void draw_object(POBJECT object){
2000074c:	b580      	push	{r7, lr}
2000074e:	b084      	sub	sp, #16
20000750:	af00      	add	r7, sp, #0
20000752:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
20000754:	2300      	movs	r3, #0
20000756:	60fb      	str	r3, [r7, #12]
20000758:	e020      	b.n	2000079c <draw_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 1);
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	681a      	ldr	r2, [r3, #0]
2000075e:	68fb      	ldr	r3, [r7, #12]
20000760:	3304      	adds	r3, #4
20000762:	005b      	lsls	r3, r3, #1
20000764:	18d3      	adds	r3, r2, r3
20000766:	3304      	adds	r3, #4
20000768:	781a      	ldrb	r2, [r3, #0]
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	68db      	ldr	r3, [r3, #12]
2000076e:	b2db      	uxtb	r3, r3
20000770:	18d3      	adds	r3, r2, r3
20000772:	b2d8      	uxtb	r0, r3
20000774:	687b      	ldr	r3, [r7, #4]
20000776:	681a      	ldr	r2, [r3, #0]
20000778:	68fb      	ldr	r3, [r7, #12]
2000077a:	3304      	adds	r3, #4
2000077c:	005b      	lsls	r3, r3, #1
2000077e:	18d3      	adds	r3, r2, r3
20000780:	3305      	adds	r3, #5
20000782:	781a      	ldrb	r2, [r3, #0]
20000784:	687b      	ldr	r3, [r7, #4]
20000786:	691b      	ldr	r3, [r3, #16]
20000788:	b2db      	uxtb	r3, r3
2000078a:	18d3      	adds	r3, r2, r3
2000078c:	b2db      	uxtb	r3, r3
2000078e:	2201      	movs	r2, #1
20000790:	0019      	movs	r1, r3
20000792:	f7ff ff08 	bl	200005a6 <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
20000796:	68fb      	ldr	r3, [r7, #12]
20000798:	3301      	adds	r3, #1
2000079a:	60fb      	str	r3, [r7, #12]
2000079c:	687b      	ldr	r3, [r7, #4]
2000079e:	681b      	ldr	r3, [r3, #0]
200007a0:	681a      	ldr	r2, [r3, #0]
200007a2:	68fb      	ldr	r3, [r7, #12]
200007a4:	429a      	cmp	r2, r3
200007a6:	dcd8      	bgt.n	2000075a <draw_object+0xe>
	}
}
200007a8:	46c0      	nop			; (mov r8, r8)
200007aa:	46bd      	mov	sp, r7
200007ac:	b004      	add	sp, #16
200007ae:	bd80      	pop	{r7, pc}

200007b0 <clear_object>:

void clear_object(POBJECT object){
200007b0:	b580      	push	{r7, lr}
200007b2:	b084      	sub	sp, #16
200007b4:	af00      	add	r7, sp, #0
200007b6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
200007b8:	2300      	movs	r3, #0
200007ba:	60fb      	str	r3, [r7, #12]
200007bc:	e020      	b.n	20000800 <clear_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 0);
200007be:	687b      	ldr	r3, [r7, #4]
200007c0:	681a      	ldr	r2, [r3, #0]
200007c2:	68fb      	ldr	r3, [r7, #12]
200007c4:	3304      	adds	r3, #4
200007c6:	005b      	lsls	r3, r3, #1
200007c8:	18d3      	adds	r3, r2, r3
200007ca:	3304      	adds	r3, #4
200007cc:	781a      	ldrb	r2, [r3, #0]
200007ce:	687b      	ldr	r3, [r7, #4]
200007d0:	68db      	ldr	r3, [r3, #12]
200007d2:	b2db      	uxtb	r3, r3
200007d4:	18d3      	adds	r3, r2, r3
200007d6:	b2d8      	uxtb	r0, r3
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	681a      	ldr	r2, [r3, #0]
200007dc:	68fb      	ldr	r3, [r7, #12]
200007de:	3304      	adds	r3, #4
200007e0:	005b      	lsls	r3, r3, #1
200007e2:	18d3      	adds	r3, r2, r3
200007e4:	3305      	adds	r3, #5
200007e6:	781a      	ldrb	r2, [r3, #0]
200007e8:	687b      	ldr	r3, [r7, #4]
200007ea:	691b      	ldr	r3, [r3, #16]
200007ec:	b2db      	uxtb	r3, r3
200007ee:	18d3      	adds	r3, r2, r3
200007f0:	b2db      	uxtb	r3, r3
200007f2:	2200      	movs	r2, #0
200007f4:	0019      	movs	r1, r3
200007f6:	f7ff fed6 	bl	200005a6 <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
200007fa:	68fb      	ldr	r3, [r7, #12]
200007fc:	3301      	adds	r3, #1
200007fe:	60fb      	str	r3, [r7, #12]
20000800:	687b      	ldr	r3, [r7, #4]
20000802:	681b      	ldr	r3, [r3, #0]
20000804:	681a      	ldr	r2, [r3, #0]
20000806:	68fb      	ldr	r3, [r7, #12]
20000808:	429a      	cmp	r2, r3
2000080a:	dcd8      	bgt.n	200007be <clear_object+0xe>
	}
}
2000080c:	46c0      	nop			; (mov r8, r8)
2000080e:	46bd      	mov	sp, r7
20000810:	b004      	add	sp, #16
20000812:	bd80      	pop	{r7, pc}

20000814 <move_object>:

void move_object(POBJECT object){
20000814:	b580      	push	{r7, lr}
20000816:	b082      	sub	sp, #8
20000818:	af00      	add	r7, sp, #0
2000081a:	6078      	str	r0, [r7, #4]
	clear_object(object);
2000081c:	687b      	ldr	r3, [r7, #4]
2000081e:	0018      	movs	r0, r3
20000820:	f7ff ffc6 	bl	200007b0 <clear_object>
	object->pos_x += object->dir_x;
20000824:	687b      	ldr	r3, [r7, #4]
20000826:	68da      	ldr	r2, [r3, #12]
20000828:	687b      	ldr	r3, [r7, #4]
2000082a:	685b      	ldr	r3, [r3, #4]
2000082c:	18d2      	adds	r2, r2, r3
2000082e:	687b      	ldr	r3, [r7, #4]
20000830:	60da      	str	r2, [r3, #12]
	object->pos_y += object->dir_y;
20000832:	687b      	ldr	r3, [r7, #4]
20000834:	691a      	ldr	r2, [r3, #16]
20000836:	687b      	ldr	r3, [r7, #4]
20000838:	689b      	ldr	r3, [r3, #8]
2000083a:	18d2      	adds	r2, r2, r3
2000083c:	687b      	ldr	r3, [r7, #4]
2000083e:	611a      	str	r2, [r3, #16]
	
	//bounce if object reaches edges of screen
	if (object->pos_x < 1 || (object->pos_x + object->geo->size_x) > 128){
20000840:	687b      	ldr	r3, [r7, #4]
20000842:	68db      	ldr	r3, [r3, #12]
20000844:	2b00      	cmp	r3, #0
20000846:	dd07      	ble.n	20000858 <move_object+0x44>
20000848:	687b      	ldr	r3, [r7, #4]
2000084a:	68da      	ldr	r2, [r3, #12]
2000084c:	687b      	ldr	r3, [r7, #4]
2000084e:	681b      	ldr	r3, [r3, #0]
20000850:	685b      	ldr	r3, [r3, #4]
20000852:	18d3      	adds	r3, r2, r3
20000854:	2b80      	cmp	r3, #128	; 0x80
20000856:	dd04      	ble.n	20000862 <move_object+0x4e>
		object->dir_x = -object->dir_x;
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	685b      	ldr	r3, [r3, #4]
2000085c:	425a      	negs	r2, r3
2000085e:	687b      	ldr	r3, [r7, #4]
20000860:	605a      	str	r2, [r3, #4]
	}
	if (object->pos_y < 1 || (object->pos_y + object->geo->size_y) > 64){
20000862:	687b      	ldr	r3, [r7, #4]
20000864:	691b      	ldr	r3, [r3, #16]
20000866:	2b00      	cmp	r3, #0
20000868:	dd07      	ble.n	2000087a <move_object+0x66>
2000086a:	687b      	ldr	r3, [r7, #4]
2000086c:	691a      	ldr	r2, [r3, #16]
2000086e:	687b      	ldr	r3, [r7, #4]
20000870:	681b      	ldr	r3, [r3, #0]
20000872:	689b      	ldr	r3, [r3, #8]
20000874:	18d3      	adds	r3, r2, r3
20000876:	2b40      	cmp	r3, #64	; 0x40
20000878:	dd04      	ble.n	20000884 <move_object+0x70>
		object->dir_y = -object->dir_y;
2000087a:	687b      	ldr	r3, [r7, #4]
2000087c:	689b      	ldr	r3, [r3, #8]
2000087e:	425a      	negs	r2, r3
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	609a      	str	r2, [r3, #8]
	}
	
	draw_object(object);
20000884:	687b      	ldr	r3, [r7, #4]
20000886:	0018      	movs	r0, r3
20000888:	f7ff ff60 	bl	2000074c <draw_object>
}
2000088c:	46c0      	nop			; (mov r8, r8)
2000088e:	46bd      	mov	sp, r7
20000890:	b002      	add	sp, #8
20000892:	bd80      	pop	{r7, pc}

20000894 <set_object_speed>:

void set_object_speed(POBJECT object, int x, int y){
20000894:	b580      	push	{r7, lr}
20000896:	b084      	sub	sp, #16
20000898:	af00      	add	r7, sp, #0
2000089a:	60f8      	str	r0, [r7, #12]
2000089c:	60b9      	str	r1, [r7, #8]
2000089e:	607a      	str	r2, [r7, #4]
	object->dir_x = x;
200008a0:	68fb      	ldr	r3, [r7, #12]
200008a2:	68ba      	ldr	r2, [r7, #8]
200008a4:	605a      	str	r2, [r3, #4]
	object->dir_y = y;
200008a6:	68fb      	ldr	r3, [r7, #12]
200008a8:	687a      	ldr	r2, [r7, #4]
200008aa:	609a      	str	r2, [r3, #8]
}
200008ac:	46c0      	nop			; (mov r8, r8)
200008ae:	46bd      	mov	sp, r7
200008b0:	b004      	add	sp, #16
200008b2:	bd80      	pop	{r7, pc}

200008b4 <graphicdisplay_init>:

void graphicdisplay_init(void){
200008b4:	b580      	push	{r7, lr}
200008b6:	af00      	add	r7, sp, #0
	//port E is output
	GPIO_E.moder = 0x55555555;
200008b8:	4b04      	ldr	r3, [pc, #16]	; (200008cc <graphicdisplay_init+0x18>)
200008ba:	4a05      	ldr	r2, [pc, #20]	; (200008d0 <graphicdisplay_init+0x1c>)
200008bc:	601a      	str	r2, [r3, #0]
	GPIO_E.ospeedr = 0x55555555;
200008be:	4b03      	ldr	r3, [pc, #12]	; (200008cc <graphicdisplay_init+0x18>)
200008c0:	4a03      	ldr	r2, [pc, #12]	; (200008d0 <graphicdisplay_init+0x1c>)
200008c2:	609a      	str	r2, [r3, #8]
200008c4:	46c0      	nop			; (mov r8, r8)
200008c6:	46bd      	mov	sp, r7
200008c8:	bd80      	pop	{r7, pc}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	40021000 	andmi	r1, r2, r0
200008d0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200008d4 <asciidisplay_init>:
#include "asciidisplay.h"

void asciidisplay_init(void){    
200008d4:	b580      	push	{r7, lr}
200008d6:	af00      	add	r7, sp, #0
    // Port E -> output
    GPIO_E.moder = 0x55555555;
200008d8:	4b0c      	ldr	r3, [pc, #48]	; (2000090c <asciidisplay_init+0x38>)
200008da:	4a0d      	ldr	r2, [pc, #52]	; (20000910 <asciidisplay_init+0x3c>)
200008dc:	601a      	str	r2, [r3, #0]
    
    // ***DISPLAY INIT***    
    // 2 rows, characters are 5x8 dots
    ascii_command(0x38, 39, 1);
200008de:	2201      	movs	r2, #1
200008e0:	2127      	movs	r1, #39	; 0x27
200008e2:	2038      	movs	r0, #56	; 0x38
200008e4:	f000 f8fe 	bl	20000ae4 <ascii_command>
    // Turn on display, turn on cursor, cursor not blinking
    ascii_command(0xE, 39, 1);
200008e8:	2201      	movs	r2, #1
200008ea:	2127      	movs	r1, #39	; 0x27
200008ec:	200e      	movs	r0, #14
200008ee:	f000 f8f9 	bl	20000ae4 <ascii_command>
    // Clear display
    ascii_command(0x1, 2, 0);
200008f2:	2200      	movs	r2, #0
200008f4:	2102      	movs	r1, #2
200008f6:	2001      	movs	r0, #1
200008f8:	f000 f8f4 	bl	20000ae4 <ascii_command>
    // Increment mode, no shift
    ascii_command(0x6, 39, 1);
200008fc:	2201      	movs	r2, #1
200008fe:	2127      	movs	r1, #39	; 0x27
20000900:	2006      	movs	r0, #6
20000902:	f000 f8ef 	bl	20000ae4 <ascii_command>
}
20000906:	46c0      	nop			; (mov r8, r8)
20000908:	46bd      	mov	sp, r7
2000090a:	bd80      	pop	{r7, pc}
2000090c:	40021000 	andmi	r1, r2, r0
20000910:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000914 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x){
20000914:	b580      	push	{r7, lr}
20000916:	b084      	sub	sp, #16
20000918:	af00      	add	r7, sp, #0
2000091a:	0002      	movs	r2, r0
2000091c:	1dfb      	adds	r3, r7, #7
2000091e:	701a      	strb	r2, [r3, #0]
    // Set bits that are 1 in x to 1, leave rest be
    unsigned char port_val = GPIO_E.odrLow;
20000920:	4a0c      	ldr	r2, [pc, #48]	; (20000954 <ascii_ctrl_bit_set+0x40>)
20000922:	230f      	movs	r3, #15
20000924:	18fb      	adds	r3, r7, r3
20000926:	7d12      	ldrb	r2, [r2, #20]
20000928:	701a      	strb	r2, [r3, #0]
    port_val |= x;
2000092a:	230f      	movs	r3, #15
2000092c:	18fb      	adds	r3, r7, r3
2000092e:	220f      	movs	r2, #15
20000930:	18b9      	adds	r1, r7, r2
20000932:	1dfa      	adds	r2, r7, #7
20000934:	7809      	ldrb	r1, [r1, #0]
20000936:	7812      	ldrb	r2, [r2, #0]
20000938:	430a      	orrs	r2, r1
2000093a:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = port_val | B_SELECT;
2000093c:	4a05      	ldr	r2, [pc, #20]	; (20000954 <ascii_ctrl_bit_set+0x40>)
2000093e:	230f      	movs	r3, #15
20000940:	18fb      	adds	r3, r7, r3
20000942:	781b      	ldrb	r3, [r3, #0]
20000944:	2104      	movs	r1, #4
20000946:	430b      	orrs	r3, r1
20000948:	b2db      	uxtb	r3, r3
2000094a:	7513      	strb	r3, [r2, #20]
}
2000094c:	46c0      	nop			; (mov r8, r8)
2000094e:	46bd      	mov	sp, r7
20000950:	b004      	add	sp, #16
20000952:	bd80      	pop	{r7, pc}
20000954:	40021000 	andmi	r1, r2, r0

20000958 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000958:	b580      	push	{r7, lr}
2000095a:	b084      	sub	sp, #16
2000095c:	af00      	add	r7, sp, #0
2000095e:	0002      	movs	r2, r0
20000960:	1dfb      	adds	r3, r7, #7
20000962:	701a      	strb	r2, [r3, #0]
    // Set any bits that are 0 in x to 0, leave rest as they were
    unsigned char port_val = GPIO_E.odrLow;
20000964:	4a0d      	ldr	r2, [pc, #52]	; (2000099c <ascii_ctrl_bit_clear+0x44>)
20000966:	230f      	movs	r3, #15
20000968:	18fb      	adds	r3, r7, r3
2000096a:	7d12      	ldrb	r2, [r2, #20]
2000096c:	701a      	strb	r2, [r3, #0]
    port_val &= x ^ 0xFF;
2000096e:	1dfb      	adds	r3, r7, #7
20000970:	781b      	ldrb	r3, [r3, #0]
20000972:	43db      	mvns	r3, r3
20000974:	b2da      	uxtb	r2, r3
20000976:	230f      	movs	r3, #15
20000978:	18fb      	adds	r3, r7, r3
2000097a:	210f      	movs	r1, #15
2000097c:	1879      	adds	r1, r7, r1
2000097e:	7809      	ldrb	r1, [r1, #0]
20000980:	400a      	ands	r2, r1
20000982:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = port_val | B_SELECT;
20000984:	4a05      	ldr	r2, [pc, #20]	; (2000099c <ascii_ctrl_bit_clear+0x44>)
20000986:	230f      	movs	r3, #15
20000988:	18fb      	adds	r3, r7, r3
2000098a:	781b      	ldrb	r3, [r3, #0]
2000098c:	2104      	movs	r1, #4
2000098e:	430b      	orrs	r3, r1
20000990:	b2db      	uxtb	r3, r3
20000992:	7513      	strb	r3, [r2, #20]
    //delay_250ns();
}
20000994:	46c0      	nop			; (mov r8, r8)
20000996:	46bd      	mov	sp, r7
20000998:	b004      	add	sp, #16
2000099a:	bd80      	pop	{r7, pc}
2000099c:	40021000 	andmi	r1, r2, r0

200009a0 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
200009a0:	b580      	push	{r7, lr}
200009a2:	b082      	sub	sp, #8
200009a4:	af00      	add	r7, sp, #0
200009a6:	0002      	movs	r2, r0
200009a8:	1dfb      	adds	r3, r7, #7
200009aa:	701a      	strb	r2, [r3, #0]
    // Prepare display for sending command
    ascii_ctrl_bit_clear(B_RS);
200009ac:	2001      	movs	r0, #1
200009ae:	f7ff ffd3 	bl	20000958 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear( B_RW);
200009b2:	2002      	movs	r0, #2
200009b4:	f7ff ffd0 	bl	20000958 <ascii_ctrl_bit_clear>
    
    // Write command
    ascii_write_controller(command);
200009b8:	1dfb      	adds	r3, r7, #7
200009ba:	781b      	ldrb	r3, [r3, #0]
200009bc:	0018      	movs	r0, r3
200009be:	f000 f861 	bl	20000a84 <ascii_write_controller>
}
200009c2:	46c0      	nop			; (mov r8, r8)
200009c4:	46bd      	mov	sp, r7
200009c6:	b002      	add	sp, #8
200009c8:	bd80      	pop	{r7, pc}

200009ca <ascii_write_data>:

void ascii_write_data(unsigned char data){
200009ca:	b580      	push	{r7, lr}
200009cc:	b082      	sub	sp, #8
200009ce:	af00      	add	r7, sp, #0
200009d0:	0002      	movs	r2, r0
200009d2:	1dfb      	adds	r3, r7, #7
200009d4:	701a      	strb	r2, [r3, #0]
    // Prepare display for writing data
    ascii_ctrl_bit_set(B_RS);
200009d6:	2001      	movs	r0, #1
200009d8:	f7ff ff9c 	bl	20000914 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200009dc:	2002      	movs	r0, #2
200009de:	f7ff ffbb 	bl	20000958 <ascii_ctrl_bit_clear>
    
    // Write data
    ascii_write_controller(data);
200009e2:	1dfb      	adds	r3, r7, #7
200009e4:	781b      	ldrb	r3, [r3, #0]
200009e6:	0018      	movs	r0, r3
200009e8:	f000 f84c 	bl	20000a84 <ascii_write_controller>
}
200009ec:	46c0      	nop			; (mov r8, r8)
200009ee:	46bd      	mov	sp, r7
200009f0:	b002      	add	sp, #8
200009f2:	bd80      	pop	{r7, pc}

200009f4 <ascii_read_data>:

unsigned char ascii_read_data(void){
200009f4:	b590      	push	{r4, r7, lr}
200009f6:	b083      	sub	sp, #12
200009f8:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    GPIO_E.moder &= 0x0000FFFF;
200009fa:	4b0e      	ldr	r3, [pc, #56]	; (20000a34 <ascii_read_data+0x40>)
200009fc:	4a0d      	ldr	r2, [pc, #52]	; (20000a34 <ascii_read_data+0x40>)
200009fe:	6812      	ldr	r2, [r2, #0]
20000a00:	0412      	lsls	r2, r2, #16
20000a02:	0c12      	lsrs	r2, r2, #16
20000a04:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading data
    ascii_ctrl_bit_set(B_RW);
20000a06:	2002      	movs	r0, #2
20000a08:	f7ff ff84 	bl	20000914 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RS);
20000a0c:	2001      	movs	r0, #1
20000a0e:	f7ff ff81 	bl	20000914 <ascii_ctrl_bit_set>
    
    return_value = ascii_read_controller();
20000a12:	1dfc      	adds	r4, r7, #7
20000a14:	f000 f84e 	bl	20000ab4 <ascii_read_controller>
20000a18:	0003      	movs	r3, r0
20000a1a:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    GPIO_E.moder |= 0x55550000;
20000a1c:	4b05      	ldr	r3, [pc, #20]	; (20000a34 <ascii_read_data+0x40>)
20000a1e:	4a05      	ldr	r2, [pc, #20]	; (20000a34 <ascii_read_data+0x40>)
20000a20:	6812      	ldr	r2, [r2, #0]
20000a22:	4905      	ldr	r1, [pc, #20]	; (20000a38 <ascii_read_data+0x44>)
20000a24:	430a      	orrs	r2, r1
20000a26:	601a      	str	r2, [r3, #0]
    
    return return_value;
20000a28:	1dfb      	adds	r3, r7, #7
20000a2a:	781b      	ldrb	r3, [r3, #0]
}
20000a2c:	0018      	movs	r0, r3
20000a2e:	46bd      	mov	sp, r7
20000a30:	b003      	add	sp, #12
20000a32:	bd90      	pop	{r4, r7, pc}
20000a34:	40021000 	andmi	r1, r2, r0
20000a38:	55550000 	ldrbpl	r0, [r5, #-0]

20000a3c <ascii_read_status>:

unsigned char ascii_read_status(void){
20000a3c:	b590      	push	{r4, r7, lr}
20000a3e:	b083      	sub	sp, #12
20000a40:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    GPIO_E.moder &= 0x0000FFFF;
20000a42:	4b0e      	ldr	r3, [pc, #56]	; (20000a7c <ascii_read_status+0x40>)
20000a44:	4a0d      	ldr	r2, [pc, #52]	; (20000a7c <ascii_read_status+0x40>)
20000a46:	6812      	ldr	r2, [r2, #0]
20000a48:	0412      	lsls	r2, r2, #16
20000a4a:	0c12      	lsrs	r2, r2, #16
20000a4c:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading status and address
    ascii_ctrl_bit_clear(B_RS);
20000a4e:	2001      	movs	r0, #1
20000a50:	f7ff ff82 	bl	20000958 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000a54:	2002      	movs	r0, #2
20000a56:	f7ff ff5d 	bl	20000914 <ascii_ctrl_bit_set>
    
    // Read values from display
    return_value = ascii_read_controller();
20000a5a:	1dfc      	adds	r4, r7, #7
20000a5c:	f000 f82a 	bl	20000ab4 <ascii_read_controller>
20000a60:	0003      	movs	r3, r0
20000a62:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    GPIO_E.moder |= 0x55550000;
20000a64:	4b05      	ldr	r3, [pc, #20]	; (20000a7c <ascii_read_status+0x40>)
20000a66:	4a05      	ldr	r2, [pc, #20]	; (20000a7c <ascii_read_status+0x40>)
20000a68:	6812      	ldr	r2, [r2, #0]
20000a6a:	4905      	ldr	r1, [pc, #20]	; (20000a80 <ascii_read_status+0x44>)
20000a6c:	430a      	orrs	r2, r1
20000a6e:	601a      	str	r2, [r3, #0]
    
    return return_value;
20000a70:	1dfb      	adds	r3, r7, #7
20000a72:	781b      	ldrb	r3, [r3, #0]
}
20000a74:	0018      	movs	r0, r3
20000a76:	46bd      	mov	sp, r7
20000a78:	b003      	add	sp, #12
20000a7a:	bd90      	pop	{r4, r7, pc}
20000a7c:	40021000 	andmi	r1, r2, r0
20000a80:	55550000 	ldrbpl	r0, [r5, #-0]

20000a84 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
20000a84:	b580      	push	{r7, lr}
20000a86:	b082      	sub	sp, #8
20000a88:	af00      	add	r7, sp, #0
20000a8a:	0002      	movs	r2, r0
20000a8c:	1dfb      	adds	r3, r7, #7
20000a8e:	701a      	strb	r2, [r3, #0]
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
20000a90:	2040      	movs	r0, #64	; 0x40
20000a92:	f7ff ff3f 	bl	20000914 <ascii_ctrl_bit_set>
    
    // Set data register values
    GPIO_E.odrHigh = byte;
20000a96:	4a06      	ldr	r2, [pc, #24]	; (20000ab0 <ascii_write_controller+0x2c>)
20000a98:	1dfb      	adds	r3, r7, #7
20000a9a:	781b      	ldrb	r3, [r3, #0]
20000a9c:	7553      	strb	r3, [r2, #21]
    
    // Wait for 230ns (here at least 250, hope this should still work)
    delay_250ns();
20000a9e:	f7ff fad0 	bl	20000042 <delay_250ns>
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
20000aa2:	2040      	movs	r0, #64	; 0x40
20000aa4:	f7ff ff58 	bl	20000958 <ascii_ctrl_bit_clear>
}
20000aa8:	46c0      	nop			; (mov r8, r8)
20000aaa:	46bd      	mov	sp, r7
20000aac:	b002      	add	sp, #8
20000aae:	bd80      	pop	{r7, pc}
20000ab0:	40021000 	andmi	r1, r2, r0

20000ab4 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20000ab4:	b580      	push	{r7, lr}
20000ab6:	b082      	sub	sp, #8
20000ab8:	af00      	add	r7, sp, #0
    unsigned char return_value;
    
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
20000aba:	2040      	movs	r0, #64	; 0x40
20000abc:	f7ff ff2a 	bl	20000914 <ascii_ctrl_bit_set>
    
    // Wait for at least 360ns, here at least 500
    delay_500ns();
20000ac0:	f7ff facc 	bl	2000005c <delay_500ns>
    
    // Read data register
    return_value = GPIO_E.idrHigh;
20000ac4:	4a06      	ldr	r2, [pc, #24]	; (20000ae0 <ascii_read_controller+0x2c>)
20000ac6:	1dfb      	adds	r3, r7, #7
20000ac8:	7c52      	ldrb	r2, [r2, #17]
20000aca:	701a      	strb	r2, [r3, #0]
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
20000acc:	2040      	movs	r0, #64	; 0x40
20000ace:	f7ff ff43 	bl	20000958 <ascii_ctrl_bit_clear>
    
    return return_value;
20000ad2:	1dfb      	adds	r3, r7, #7
20000ad4:	781b      	ldrb	r3, [r3, #0]
}
20000ad6:	0018      	movs	r0, r3
20000ad8:	46bd      	mov	sp, r7
20000ada:	b002      	add	sp, #8
20000adc:	bd80      	pop	{r7, pc}
20000ade:	46c0      	nop			; (mov r8, r8)
20000ae0:	40021000 	andmi	r1, r2, r0

20000ae4 <ascii_command>:

void ascii_command(unsigned char command, unsigned int post_command_delay, unsigned short us){    
20000ae4:	b580      	push	{r7, lr}
20000ae6:	b082      	sub	sp, #8
20000ae8:	af00      	add	r7, sp, #0
20000aea:	6039      	str	r1, [r7, #0]
20000aec:	0011      	movs	r1, r2
20000aee:	1dfb      	adds	r3, r7, #7
20000af0:	1c02      	adds	r2, r0, #0
20000af2:	701a      	strb	r2, [r3, #0]
20000af4:	1d3b      	adds	r3, r7, #4
20000af6:	1c0a      	adds	r2, r1, #0
20000af8:	801a      	strh	r2, [r3, #0]
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while((ascii_read_status() & 0x80) != 0);
20000afa:	46c0      	nop			; (mov r8, r8)
20000afc:	f7ff ff9e 	bl	20000a3c <ascii_read_status>
20000b00:	0003      	movs	r3, r0
20000b02:	b25b      	sxtb	r3, r3
20000b04:	2b00      	cmp	r3, #0
20000b06:	dbf9      	blt.n	20000afc <ascii_command+0x18>
    delay_mikro(8);
20000b08:	2008      	movs	r0, #8
20000b0a:	f7ff fac9 	bl	200000a0 <delay_mikro>
    
    // Send command
    ascii_write_cmd(command);
20000b0e:	1dfb      	adds	r3, r7, #7
20000b10:	781b      	ldrb	r3, [r3, #0]
20000b12:	0018      	movs	r0, r3
20000b14:	f7ff ff44 	bl	200009a0 <ascii_write_cmd>
    
    // Wait for the entered amount of time
    if(us == 1){
20000b18:	1d3b      	adds	r3, r7, #4
20000b1a:	881b      	ldrh	r3, [r3, #0]
20000b1c:	2b01      	cmp	r3, #1
20000b1e:	d104      	bne.n	20000b2a <ascii_command+0x46>
        delay_mikro(post_command_delay);
20000b20:	683b      	ldr	r3, [r7, #0]
20000b22:	0018      	movs	r0, r3
20000b24:	f7ff fabc 	bl	200000a0 <delay_mikro>
    } else {
        delay_milli(post_command_delay);
    }
}
20000b28:	e003      	b.n	20000b32 <ascii_command+0x4e>
        delay_milli(post_command_delay);
20000b2a:	683b      	ldr	r3, [r7, #0]
20000b2c:	0018      	movs	r0, r3
20000b2e:	f7ff fad5 	bl	200000dc <delay_milli>
}
20000b32:	46c0      	nop			; (mov r8, r8)
20000b34:	46bd      	mov	sp, r7
20000b36:	b002      	add	sp, #8
20000b38:	bd80      	pop	{r7, pc}

20000b3a <ascii_write_char>:

void ascii_write_char(unsigned char character){
20000b3a:	b580      	push	{r7, lr}
20000b3c:	b082      	sub	sp, #8
20000b3e:	af00      	add	r7, sp, #0
20000b40:	0002      	movs	r2, r0
20000b42:	1dfb      	adds	r3, r7, #7
20000b44:	701a      	strb	r2, [r3, #0]
    // Prepare to check if display ready
    ascii_ctrl_bit_set(B_RW);
20000b46:	2002      	movs	r0, #2
20000b48:	f7ff fee4 	bl	20000914 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RS);
20000b4c:	2001      	movs	r0, #1
20000b4e:	f7ff ff03 	bl	20000958 <ascii_ctrl_bit_clear>
    
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while((ascii_read_status() & 0x80) != 0);
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	f7ff ff72 	bl	20000a3c <ascii_read_status>
20000b58:	0003      	movs	r3, r0
20000b5a:	b25b      	sxtb	r3, r3
20000b5c:	2b00      	cmp	r3, #0
20000b5e:	dbf9      	blt.n	20000b54 <ascii_write_char+0x1a>
    delay_mikro(8);
20000b60:	2008      	movs	r0, #8
20000b62:	f7ff fa9d 	bl	200000a0 <delay_mikro>
    
    // Write character do display
    ascii_write_data(character);
20000b66:	1dfb      	adds	r3, r7, #7
20000b68:	781b      	ldrb	r3, [r3, #0]
20000b6a:	0018      	movs	r0, r3
20000b6c:	f7ff ff2d 	bl	200009ca <ascii_write_data>
    
    // Delay for 43us
    delay_mikro(43);
20000b70:	202b      	movs	r0, #43	; 0x2b
20000b72:	f7ff fa95 	bl	200000a0 <delay_mikro>
}
20000b76:	46c0      	nop			; (mov r8, r8)
20000b78:	46bd      	mov	sp, r7
20000b7a:	b002      	add	sp, #8
20000b7c:	bd80      	pop	{r7, pc}

20000b7e <gotoxy>:

void gotoxy(unsigned int row, unsigned int column){
20000b7e:	b580      	push	{r7, lr}
20000b80:	b084      	sub	sp, #16
20000b82:	af00      	add	r7, sp, #0
20000b84:	6078      	str	r0, [r7, #4]
20000b86:	6039      	str	r1, [r7, #0]
    // Make sure row not out of bounds
    if(row < 1 || row > 20){
20000b88:	687b      	ldr	r3, [r7, #4]
20000b8a:	2b00      	cmp	r3, #0
20000b8c:	d025      	beq.n	20000bda <gotoxy+0x5c>
20000b8e:	687b      	ldr	r3, [r7, #4]
20000b90:	2b14      	cmp	r3, #20
20000b92:	d822      	bhi.n	20000bda <gotoxy+0x5c>
        return;
    }
    // Make sure column not out of bounds
    if(column < 1 || column > 2){
20000b94:	683b      	ldr	r3, [r7, #0]
20000b96:	2b00      	cmp	r3, #0
20000b98:	d021      	beq.n	20000bde <gotoxy+0x60>
20000b9a:	683b      	ldr	r3, [r7, #0]
20000b9c:	2b02      	cmp	r3, #2
20000b9e:	d81e      	bhi.n	20000bde <gotoxy+0x60>
        return;
    }
    
    // Set address to the correct location
    unsigned char address = row - 1;
20000ba0:	687b      	ldr	r3, [r7, #4]
20000ba2:	b2da      	uxtb	r2, r3
20000ba4:	230f      	movs	r3, #15
20000ba6:	18fb      	adds	r3, r7, r3
20000ba8:	3a01      	subs	r2, #1
20000baa:	701a      	strb	r2, [r3, #0]
    if(column == 2){
20000bac:	683b      	ldr	r3, [r7, #0]
20000bae:	2b02      	cmp	r3, #2
20000bb0:	d106      	bne.n	20000bc0 <gotoxy+0x42>
        address += 0x40;
20000bb2:	230f      	movs	r3, #15
20000bb4:	18fb      	adds	r3, r7, r3
20000bb6:	220f      	movs	r2, #15
20000bb8:	18ba      	adds	r2, r7, r2
20000bba:	7812      	ldrb	r2, [r2, #0]
20000bbc:	3240      	adds	r2, #64	; 0x40
20000bbe:	701a      	strb	r2, [r3, #0]
    }
    
    // Send command to mark correct spot
    ascii_command(0x80 | address, 39, 1);
20000bc0:	230f      	movs	r3, #15
20000bc2:	18fb      	adds	r3, r7, r3
20000bc4:	781b      	ldrb	r3, [r3, #0]
20000bc6:	2280      	movs	r2, #128	; 0x80
20000bc8:	4252      	negs	r2, r2
20000bca:	4313      	orrs	r3, r2
20000bcc:	b2db      	uxtb	r3, r3
20000bce:	2201      	movs	r2, #1
20000bd0:	2127      	movs	r1, #39	; 0x27
20000bd2:	0018      	movs	r0, r3
20000bd4:	f7ff ff86 	bl	20000ae4 <ascii_command>
20000bd8:	e002      	b.n	20000be0 <gotoxy+0x62>
        return;
20000bda:	46c0      	nop			; (mov r8, r8)
20000bdc:	e000      	b.n	20000be0 <gotoxy+0x62>
        return;
20000bde:	46c0      	nop			; (mov r8, r8)
}
20000be0:	46bd      	mov	sp, r7
20000be2:	b004      	add	sp, #16
20000be4:	bd80      	pop	{r7, pc}

20000be6 <ascii_write_string>:

void ascii_write_string(char *s){
20000be6:	b580      	push	{r7, lr}
20000be8:	b082      	sub	sp, #8
20000bea:	af00      	add	r7, sp, #0
20000bec:	6078      	str	r0, [r7, #4]
    // Write each character onto the display until the finishing character is reached
    while(*s != 0){
20000bee:	e006      	b.n	20000bfe <ascii_write_string+0x18>
        ascii_write_char(*s++);
20000bf0:	687b      	ldr	r3, [r7, #4]
20000bf2:	1c5a      	adds	r2, r3, #1
20000bf4:	607a      	str	r2, [r7, #4]
20000bf6:	781b      	ldrb	r3, [r3, #0]
20000bf8:	0018      	movs	r0, r3
20000bfa:	f7ff ff9e 	bl	20000b3a <ascii_write_char>
    while(*s != 0){
20000bfe:	687b      	ldr	r3, [r7, #4]
20000c00:	781b      	ldrb	r3, [r3, #0]
20000c02:	2b00      	cmp	r3, #0
20000c04:	d1f4      	bne.n	20000bf0 <ascii_write_string+0xa>
    }
}
20000c06:	46c0      	nop			; (mov r8, r8)
20000c08:	46bd      	mov	sp, r7
20000c0a:	b002      	add	sp, #8
20000c0c:	bd80      	pop	{r7, pc}
20000c0e:	46c0      	nop			; (mov r8, r8)

20000c10 <keyboard_init>:
#include "keypad.h"

void keyboard_init (void) {
20000c10:	b580      	push	{r7, lr}
20000c12:	af00      	add	r7, sp, #0
	GPIO_D.moder = 0x55005555;
20000c14:	4b10      	ldr	r3, [pc, #64]	; (20000c58 <keyboard_init+0x48>)
20000c16:	4a11      	ldr	r2, [pc, #68]	; (20000c5c <keyboard_init+0x4c>)
20000c18:	601a      	str	r2, [r3, #0]
	GPIO_D.otyper &= 0x00FF;
20000c1a:	4b0f      	ldr	r3, [pc, #60]	; (20000c58 <keyboard_init+0x48>)
20000c1c:	4a0e      	ldr	r2, [pc, #56]	; (20000c58 <keyboard_init+0x48>)
20000c1e:	6852      	ldr	r2, [r2, #4]
20000c20:	21ff      	movs	r1, #255	; 0xff
20000c22:	400a      	ands	r2, r1
20000c24:	605a      	str	r2, [r3, #4]
	GPIO_D.otyper |= 0x0000;
20000c26:	4b0c      	ldr	r3, [pc, #48]	; (20000c58 <keyboard_init+0x48>)
20000c28:	4a0b      	ldr	r2, [pc, #44]	; (20000c58 <keyboard_init+0x48>)
20000c2a:	6852      	ldr	r2, [r2, #4]
20000c2c:	605a      	str	r2, [r3, #4]
	GPIO_D.pupdr &= 0x0000FFFF;
20000c2e:	4b0a      	ldr	r3, [pc, #40]	; (20000c58 <keyboard_init+0x48>)
20000c30:	4a09      	ldr	r2, [pc, #36]	; (20000c58 <keyboard_init+0x48>)
20000c32:	68d2      	ldr	r2, [r2, #12]
20000c34:	0412      	lsls	r2, r2, #16
20000c36:	0c12      	lsrs	r2, r2, #16
20000c38:	60da      	str	r2, [r3, #12]
	GPIO_D.pupdr |= 0x00AA0000;
20000c3a:	4b07      	ldr	r3, [pc, #28]	; (20000c58 <keyboard_init+0x48>)
20000c3c:	4a06      	ldr	r2, [pc, #24]	; (20000c58 <keyboard_init+0x48>)
20000c3e:	68d2      	ldr	r2, [r2, #12]
20000c40:	21aa      	movs	r1, #170	; 0xaa
20000c42:	0409      	lsls	r1, r1, #16
20000c44:	430a      	orrs	r2, r1
20000c46:	60da      	str	r2, [r3, #12]
	GPIO_D.odrHigh &= 0x00FF;
20000c48:	4b03      	ldr	r3, [pc, #12]	; (20000c58 <keyboard_init+0x48>)
20000c4a:	4a03      	ldr	r2, [pc, #12]	; (20000c58 <keyboard_init+0x48>)
20000c4c:	7d52      	ldrb	r2, [r2, #21]
20000c4e:	b2d2      	uxtb	r2, r2
20000c50:	755a      	strb	r2, [r3, #21]
}
20000c52:	46c0      	nop			; (mov r8, r8)
20000c54:	46bd      	mov	sp, r7
20000c56:	bd80      	pop	{r7, pc}
20000c58:	40020c00 	andmi	r0, r2, r0, lsl #24
20000c5c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab

20000c60 <keyb>:

unsigned char keyb(void){
20000c60:	b580      	push	{r7, lr}
20000c62:	b082      	sub	sp, #8
20000c64:	af00      	add	r7, sp, #0
	unsigned char row, column;
	
	for (unsigned char row = 1; row <= 4; row++) {
20000c66:	1dfb      	adds	r3, r7, #7
20000c68:	2201      	movs	r2, #1
20000c6a:	701a      	strb	r2, [r3, #0]
20000c6c:	e020      	b.n	20000cb0 <keyb+0x50>
		// mind the one indexing of rows and columns, to simplify resetting of values
		ActivateRow(row);
20000c6e:	1dfb      	adds	r3, r7, #7
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	0018      	movs	r0, r3
20000c74:	f000 f82a 	bl	20000ccc <ActivateRow>
		column = ReadColumn();
20000c78:	f000 f854 	bl	20000d24 <ReadColumn>
20000c7c:	0002      	movs	r2, r0
20000c7e:	1dbb      	adds	r3, r7, #6
20000c80:	701a      	strb	r2, [r3, #0]
		if (column > 0){
20000c82:	1dbb      	adds	r3, r7, #6
20000c84:	781b      	ldrb	r3, [r3, #0]
20000c86:	2b00      	cmp	r3, #0
20000c88:	d00d      	beq.n	20000ca6 <keyb+0x46>
			ActivateRow(0);
20000c8a:	2000      	movs	r0, #0
20000c8c:	f000 f81e 	bl	20000ccc <ActivateRow>
			return key[row - 1][column - 1];
20000c90:	1dfb      	adds	r3, r7, #7
20000c92:	781b      	ldrb	r3, [r3, #0]
20000c94:	1e5a      	subs	r2, r3, #1
20000c96:	1dbb      	adds	r3, r7, #6
20000c98:	781b      	ldrb	r3, [r3, #0]
20000c9a:	3b01      	subs	r3, #1
20000c9c:	490a      	ldr	r1, [pc, #40]	; (20000cc8 <keyb+0x68>)
20000c9e:	0092      	lsls	r2, r2, #2
20000ca0:	188a      	adds	r2, r1, r2
20000ca2:	5cd3      	ldrb	r3, [r2, r3]
20000ca4:	e00c      	b.n	20000cc0 <keyb+0x60>
	for (unsigned char row = 1; row <= 4; row++) {
20000ca6:	1dfb      	adds	r3, r7, #7
20000ca8:	781a      	ldrb	r2, [r3, #0]
20000caa:	1dfb      	adds	r3, r7, #7
20000cac:	3201      	adds	r2, #1
20000cae:	701a      	strb	r2, [r3, #0]
20000cb0:	1dfb      	adds	r3, r7, #7
20000cb2:	781b      	ldrb	r3, [r3, #0]
20000cb4:	2b04      	cmp	r3, #4
20000cb6:	d9da      	bls.n	20000c6e <keyb+0xe>
			//return decode7segMatrix[row - 1][column - 1];
		}
	}
	ActivateRow(0);
20000cb8:	2000      	movs	r0, #0
20000cba:	f000 f807 	bl	20000ccc <ActivateRow>
	return 0xFF;
20000cbe:	23ff      	movs	r3, #255	; 0xff
}
20000cc0:	0018      	movs	r0, r3
20000cc2:	46bd      	mov	sp, r7
20000cc4:	b002      	add	sp, #8
20000cc6:	bd80      	pop	{r7, pc}
20000cc8:	20000d84 	andcs	r0, r0, r4, lsl #27

20000ccc <ActivateRow>:

void ActivateRow(unsigned char row) {
20000ccc:	b580      	push	{r7, lr}
20000cce:	b082      	sub	sp, #8
20000cd0:	af00      	add	r7, sp, #0
20000cd2:	0002      	movs	r2, r0
20000cd4:	1dfb      	adds	r3, r7, #7
20000cd6:	701a      	strb	r2, [r3, #0]
	switch(row){
20000cd8:	1dfb      	adds	r3, r7, #7
20000cda:	781b      	ldrb	r3, [r3, #0]
20000cdc:	2b04      	cmp	r3, #4
20000cde:	d818      	bhi.n	20000d12 <ActivateRow+0x46>
20000ce0:	009a      	lsls	r2, r3, #2
20000ce2:	4b0e      	ldr	r3, [pc, #56]	; (20000d1c <ActivateRow+0x50>)
20000ce4:	18d3      	adds	r3, r2, r3
20000ce6:	681b      	ldr	r3, [r3, #0]
20000ce8:	469f      	mov	pc, r3
		case 0: GPIO_D.odrHigh = 0x0; break; //0 to reset
20000cea:	4b0d      	ldr	r3, [pc, #52]	; (20000d20 <ActivateRow+0x54>)
20000cec:	2200      	movs	r2, #0
20000cee:	755a      	strb	r2, [r3, #21]
20000cf0:	e00f      	b.n	20000d12 <ActivateRow+0x46>
		case 1: GPIO_D.odrHigh = 0x10; break;
20000cf2:	4b0b      	ldr	r3, [pc, #44]	; (20000d20 <ActivateRow+0x54>)
20000cf4:	2210      	movs	r2, #16
20000cf6:	755a      	strb	r2, [r3, #21]
20000cf8:	e00b      	b.n	20000d12 <ActivateRow+0x46>
		case 2: GPIO_D.odrHigh = 0x20; break;
20000cfa:	4b09      	ldr	r3, [pc, #36]	; (20000d20 <ActivateRow+0x54>)
20000cfc:	2220      	movs	r2, #32
20000cfe:	755a      	strb	r2, [r3, #21]
20000d00:	e007      	b.n	20000d12 <ActivateRow+0x46>
		case 3: GPIO_D.odrHigh = 0x40; break;
20000d02:	4b07      	ldr	r3, [pc, #28]	; (20000d20 <ActivateRow+0x54>)
20000d04:	2240      	movs	r2, #64	; 0x40
20000d06:	755a      	strb	r2, [r3, #21]
20000d08:	e003      	b.n	20000d12 <ActivateRow+0x46>
		case 4: GPIO_D.odrHigh = 0x80; break;
20000d0a:	4b05      	ldr	r3, [pc, #20]	; (20000d20 <ActivateRow+0x54>)
20000d0c:	2280      	movs	r2, #128	; 0x80
20000d0e:	755a      	strb	r2, [r3, #21]
20000d10:	46c0      	nop			; (mov r8, r8)
	}
}
20000d12:	46c0      	nop			; (mov r8, r8)
20000d14:	46bd      	mov	sp, r7
20000d16:	b002      	add	sp, #8
20000d18:	bd80      	pop	{r7, pc}
20000d1a:	46c0      	nop			; (mov r8, r8)
20000d1c:	20000d94 	mulcs	r0, r4, sp
20000d20:	40020c00 	andmi	r0, r2, r0, lsl #24

20000d24 <ReadColumn>:

int ReadColumn(void) {
20000d24:	b580      	push	{r7, lr}
20000d26:	b082      	sub	sp, #8
20000d28:	af00      	add	r7, sp, #0
	// Returns column number of pressed key, observe that the columns of the keyboard are read from right to left!
	unsigned char c;
	c = GPIO_D.idrHigh;
20000d2a:	4a12      	ldr	r2, [pc, #72]	; (20000d74 <ReadColumn+0x50>)
20000d2c:	1dfb      	adds	r3, r7, #7
20000d2e:	7c52      	ldrb	r2, [r2, #17]
20000d30:	701a      	strb	r2, [r3, #0]
	if (c & 0x8){return 4;}
20000d32:	1dfb      	adds	r3, r7, #7
20000d34:	781b      	ldrb	r3, [r3, #0]
20000d36:	2208      	movs	r2, #8
20000d38:	4013      	ands	r3, r2
20000d3a:	d001      	beq.n	20000d40 <ReadColumn+0x1c>
20000d3c:	2304      	movs	r3, #4
20000d3e:	e015      	b.n	20000d6c <ReadColumn+0x48>
	if (c & 0x4){return 3;}
20000d40:	1dfb      	adds	r3, r7, #7
20000d42:	781b      	ldrb	r3, [r3, #0]
20000d44:	2204      	movs	r2, #4
20000d46:	4013      	ands	r3, r2
20000d48:	d001      	beq.n	20000d4e <ReadColumn+0x2a>
20000d4a:	2303      	movs	r3, #3
20000d4c:	e00e      	b.n	20000d6c <ReadColumn+0x48>
	if (c & 0x2){return 2;}
20000d4e:	1dfb      	adds	r3, r7, #7
20000d50:	781b      	ldrb	r3, [r3, #0]
20000d52:	2202      	movs	r2, #2
20000d54:	4013      	ands	r3, r2
20000d56:	d001      	beq.n	20000d5c <ReadColumn+0x38>
20000d58:	2302      	movs	r3, #2
20000d5a:	e007      	b.n	20000d6c <ReadColumn+0x48>
	if (c & 0x1){return 1;}
20000d5c:	1dfb      	adds	r3, r7, #7
20000d5e:	781b      	ldrb	r3, [r3, #0]
20000d60:	2201      	movs	r2, #1
20000d62:	4013      	ands	r3, r2
20000d64:	d001      	beq.n	20000d6a <ReadColumn+0x46>
20000d66:	2301      	movs	r3, #1
20000d68:	e000      	b.n	20000d6c <ReadColumn+0x48>
	return 0;
20000d6a:	2300      	movs	r3, #0
20000d6c:	0018      	movs	r0, r3
20000d6e:	46bd      	mov	sp, r7
20000d70:	b002      	add	sp, #8
20000d72:	bd80      	pop	{r7, pc}
20000d74:	40020c00 	andmi	r0, r2, r0, lsl #24

20000d78 <delay_counter>:
20000d78:	00000000 	andeq	r0, r0, r0

20000d7c <mikro>:
20000d7c:	00000000 	andeq	r0, r0, r0

20000d80 <systick_flag>:
20000d80:	00000001 	andeq	r0, r0, r1

20000d84 <key>:
20000d84:	0a030201 	beq	200c1590 <key+0xc080c>
20000d88:	0b060504 	bleq	201821a0 <key+0x18141c>
20000d8c:	0c090807 	stceq	8, cr0, [r9], {7}
20000d90:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000d60 <ReadColumn+0x3c>
20000d94:	20000cea 	andcs	r0, r0, sl, ror #25
20000d98:	20000cf2 	strdcs	r0, [r0], -r2
20000d9c:	20000cfa 	strdcs	r0, [r0], -sl
20000da0:	20000d02 	andcs	r0, r0, r2, lsl #26
20000da4:	20000d0a 	andcs	r0, r0, sl, lsl #26

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000000b2 	strheq	r0, [r0], -r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000005f 	andeq	r0, r0, pc, asr r0
  10:	00010a0c 	andeq	r0, r1, ip, lsl #20
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	000000f7 	strdeq	r0, [r0], -r7
  28:	2c070402 	cfstrscs	mvf0, [r7], {2}
  2c:	02000000 	andeq	r0, r0, #0
  30:	00260702 	eoreq	r0, r6, r2, lsl #14
  34:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
  38:	01000000 	mrseq	r0, (UNDEF: 0)
  3c:	00001a19 	andeq	r1, r0, r9, lsl sl
  40:	00001a20 	andeq	r1, r0, r0, lsr #20
  44:	8c9c0100 	ldfhis	f0, [ip], {0}
  48:	04000000 	streq	r0, [r0], #-0
  4c:	00000000 	andeq	r0, r0, r0
  50:	008c2201 	addeq	r2, ip, r1, lsl #4
  54:	005c0000 	subseq	r0, ip, r0
  58:	00050000 	andeq	r0, r5, r0
  5c:	00001204 	andeq	r1, r0, r4, lsl #4
  60:	8c230100 	stfhis	f0, [r3], #-0
  64:	6d000000 	stcvs	0, cr0, [r0, #-0]
  68:	05000000 	streq	r0, [r0, #-0]
  6c:	00390400 	eorseq	r0, r9, r0, lsl #8
  70:	24010000 	strcs	r0, [r1], #-0
  74:	0000008c 	andeq	r0, r0, ip, lsl #1
  78:	0000007e 	andeq	r0, r0, lr, ror r0
  7c:	5d060005 	stcpl	0, cr0, [r6, #-20]	; 0xffffffec
  80:	01000001 	tsteq	r0, r1
  84:	00008c25 	andeq	r8, r0, r5, lsr #24
  88:	00000500 	andeq	r0, r0, r0, lsl #10
  8c:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  90:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  94:	00000105 	andeq	r0, r0, r5, lsl #2
  98:	00101501 	andseq	r1, r0, r1, lsl #10
  9c:	000a2000 	andeq	r2, sl, r0
  a0:	9c010000 	stcls	0, cr0, [r1], {-0}
  a4:	00005708 	andeq	r5, r0, r8, lsl #14
  a8:	000c0100 	andeq	r0, ip, r0, lsl #2
  ac:	0c200000 	stceq	0, cr0, [r0], #-0
  b0:	01000000 	mrseq	r0, (UNDEF: 0)
  b4:	01e2009c 			; <UNDEFINED> instruction: 0x01e2009c
  b8:	00040000 	andeq	r0, r4, r0
  bc:	00000083 	andeq	r0, r0, r3, lsl #1
  c0:	005f0104 	subseq	r0, pc, r4, lsl #2
  c4:	bc0c0000 	stclt	0, cr0, [ip], {-0}
  c8:	34000001 	strcc	r0, [r0], #-1
  cc:	78200000 	stmdavc	r0!, {}	; <UNPREDICTABLE>
  d0:	9c000001 	stcls	0, cr0, [r0], {1}
  d4:	02000000 	andeq	r0, r0, #0
  d8:	00f70801 	rscseq	r0, r7, r1, lsl #16
  dc:	04020000 	streq	r0, [r2], #-0
  e0:	00002c07 	andeq	r2, r0, r7, lsl #24
  e4:	02040300 	andeq	r0, r4, #0, 6
  e8:	00006807 	andeq	r6, r0, r7, lsl #16
  ec:	02500400 	subseq	r0, r0, #0, 8
  f0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  f4:	00000021 	andeq	r0, r0, r1, lsr #32
  f8:	025e0400 	subseq	r0, lr, #0, 8
  fc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
 100:	00000021 	andeq	r0, r0, r1, lsr #32
 104:	02340401 	eorseq	r0, r4, #16777216	; 0x1000000
 108:	0a020000 	beq	80110 <startup-0x1ff7fef0>
 10c:	00000021 	andeq	r0, r0, r1, lsr #32
 110:	02680402 	rsbeq	r0, r8, #33554432	; 0x2000000
 114:	0b020000 	bleq	8011c <startup-0x1ff7fee4>
 118:	00000021 	andeq	r0, r0, r1, lsr #32
 11c:	04050003 	streq	r0, [r5], #-3
 120:	00810502 	addeq	r0, r1, r2, lsl #10
 124:	ab060000 	blge	18012c <startup-0x1fe7fed4>
 128:	02000001 	andeq	r0, r0, #1
 12c:	00002806 	andeq	r2, r0, r6, lsl #16
 130:	002f0700 	eoreq	r0, pc, r0, lsl #14
 134:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 138:	00000272 	andeq	r0, r0, r2, ror r2
 13c:	b8040210 	stmdalt	r4, {r4, r9}
 140:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 144:	00000068 	andeq	r0, r0, r8, rrx
 148:	02170400 	andseq	r0, r7, #0, 8
 14c:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 150:	00000028 	andeq	r0, r0, r8, lsr #32
 154:	61760a04 	cmnvs	r6, r4, lsl #20
 158:	0f02006c 	svceq	0x0002006c
 15c:	00000028 	andeq	r0, r0, r8, lsr #32
 160:	02a80408 	adceq	r0, r8, #8, 8	; 0x8000000
 164:	10020000 	andne	r0, r2, r0
 168:	00000028 	andeq	r0, r0, r8, lsr #32
 16c:	9c0b000c 	stcls	0, cr0, [fp], {12}
 170:	02000001 	andeq	r0, r0, #1
 174:	00008111 	andeq	r8, r0, r1, lsl r1
 178:	02ae0c00 	adceq	r0, lr, #0, 24
 17c:	03010000 	movweq	r0, #4096	; 0x1000
 180:	000000db 	ldrdeq	r0, [r0], -fp
 184:	0d800305 	stceq	3, cr0, [r0, #20]
 188:	040d2000 	streq	r2, [sp], #-0
 18c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 190:	00d40e00 	sbcseq	r0, r4, r0, lsl #28
 194:	420f0000 	andmi	r0, pc, #0
 198:	01000002 	tsteq	r0, r2
 19c:	0000db04 	andeq	sp, r0, r4, lsl #22
 1a0:	78030500 	stmdavc	r3, {r8, sl}
 1a4:	0f20000d 	svceq	0x0020000d
 1a8:	00000296 	muleq	r0, r6, r2
 1ac:	00d40501 	sbcseq	r0, r4, r1, lsl #10
 1b0:	03050000 	movweq	r0, #20480	; 0x5000
 1b4:	20000d7c 	andcs	r0, r0, ip, ror sp
 1b8:	00017c10 	andeq	r7, r1, r0, lsl ip
 1bc:	603c0100 	eorsvs	r0, ip, r0, lsl #2
 1c0:	4c200001 	stcmi	0, cr0, [r0], #-4
 1c4:	01000000 	mrseq	r0, (UNDEF: 0)
 1c8:	0177119c 			; <UNDEFINED> instruction: 0x0177119c
 1cc:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
 1d0:	20000148 	andcs	r0, r0, r8, asr #2
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	b0129c01 	andslt	r9, r2, r1, lsl #24
 1dc:	01000001 	tsteq	r0, r1
 1e0:	00011831 	andeq	r1, r1, r1, lsr r8
 1e4:	00003020 	andeq	r3, r0, r0, lsr #32
 1e8:	489c0100 	ldmmi	ip, {r8}
 1ec:	13000001 	movwne	r0, #1
 1f0:	00000288 	andeq	r0, r0, r8, lsl #5
 1f4:	00283101 	eoreq	r3, r8, r1, lsl #2
 1f8:	91020000 	mrsls	r0, (UNDEF: 2)
 1fc:	6b140074 	blvs	5003d4 <startup-0x1faffc2c>
 200:	01000001 	tsteq	r0, r1
 204:	0000dc29 	andeq	sp, r0, r9, lsr #24
 208:	00003c20 	andeq	r3, r0, r0, lsr #24
 20c:	6c9c0100 	ldfvss	f0, [ip], {0}
 210:	13000001 	movwne	r0, #1
 214:	00000196 	muleq	r0, r6, r1
 218:	00282901 	eoreq	r2, r8, r1, lsl #18
 21c:	91020000 	mrsls	r0, (UNDEF: 2)
 220:	9c140074 	ldcls	0, cr0, [r4], {116}	; 0x74
 224:	01000002 	tsteq	r0, r2
 228:	0000a021 	andeq	sl, r0, r1, lsr #32
 22c:	00003c20 	andeq	r3, r0, r0, lsr #24
 230:	909c0100 	addsls	r0, ip, r0, lsl #2
 234:	13000001 	movwne	r0, #1
 238:	00000196 	muleq	r0, r6, r1
 23c:	00282101 	eoreq	r2, r8, r1, lsl #2
 240:	91020000 	mrsls	r0, (UNDEF: 2)
 244:	7b100074 	blvc	40041c <startup-0x1fbffbe4>
 248:	01000002 	tsteq	r0, r2
 24c:	00008819 	andeq	r8, r0, r9, lsl r8
 250:	00001820 	andeq	r1, r0, r0, lsr #16
 254:	109c0100 	addsne	r0, ip, r0, lsl #2
 258:	0000028f 	andeq	r0, r0, pc, lsl #5
 25c:	00781501 	rsbseq	r1, r8, r1, lsl #10
 260:	00102000 	andseq	r2, r0, r0
 264:	9c010000 	stcls	0, cr0, [r1], {-0}
 268:	00022810 	andeq	r2, r2, r0, lsl r8
 26c:	5c100100 	ldfpls	f0, [r0], {-0}
 270:	1c200000 	stcne	0, cr0, [r0], #-0
 274:	01000000 	mrseq	r0, (UNDEF: 0)
 278:	021c109c 	andseq	r1, ip, #156	; 0x9c
 27c:	0b010000 	bleq	40284 <startup-0x1ffbfd7c>
 280:	20000042 	andcs	r0, r0, r2, asr #32
 284:	0000001a 	andeq	r0, r0, sl, lsl r0
 288:	39109c01 	ldmdbcc	r0, {r0, sl, fp, ip, pc}
 28c:	01000000 	mrseq	r0, (UNDEF: 0)
 290:	00003407 	andeq	r3, r0, r7, lsl #8
 294:	00000e20 	andeq	r0, r0, r0, lsr #28
 298:	009c0100 	addseq	r0, ip, r0, lsl #2
 29c:	000005a9 	andeq	r0, r0, r9, lsr #11
 2a0:	01b60004 			; <UNDEFINED> instruction: 0x01b60004
 2a4:	01040000 	mrseq	r0, (UNDEF: 4)
 2a8:	0000005f 	andeq	r0, r0, pc, asr r0
 2ac:	0003cd0c 	andeq	ip, r3, ip, lsl #26
 2b0:	0001ac00 	andeq	sl, r1, r0, lsl #24
 2b4:	00072820 	andeq	r2, r7, r0, lsr #16
 2b8:	00016500 	andeq	r6, r1, r0, lsl #10
 2bc:	02020200 	andeq	r0, r2, #0, 4
 2c0:	0000420c 	andeq	r4, r0, ip, lsl #4
 2c4:	04780300 	ldrbteq	r0, [r8], #-768	; 0xfffffd00
 2c8:	0d020000 	stceq	0, cr0, [r2, #-0]
 2cc:	00000042 	andeq	r0, r0, r2, asr #32
 2d0:	04540300 	ldrbeq	r0, [r4], #-768	; 0xfffffd00
 2d4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 2d8:	00000042 	andeq	r0, r0, r2, asr #32
 2dc:	01040001 	tsteq	r4, r1
 2e0:	0000f708 	andeq	pc, r0, r8, lsl #14
 2e4:	02040500 	andeq	r0, r4, #0, 10
 2e8:	0000620a 	andeq	r6, r0, sl, lsl #4
 2ec:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
 2f0:	0b020072 	bleq	804c0 <startup-0x1ff7fb40>
 2f4:	00000062 	andeq	r0, r0, r2, rrx
 2f8:	00002107 	andeq	r2, r0, r7, lsl #2
 2fc:	04040000 	streq	r0, [r4], #-0
 300:	00002c07 	andeq	r2, r0, r7, lsl #24
 304:	02020200 	andeq	r0, r2, #0, 4
 308:	00008a13 	andeq	r8, r0, r3, lsl sl
 30c:	04390300 	ldrteq	r0, [r9], #-768	; 0xfffffd00
 310:	14020000 	strne	r0, [r2], #-0
 314:	00000042 	andeq	r0, r0, r2, asr #32
 318:	034c0300 	movteq	r0, #49920	; 0xc300
 31c:	15020000 	strne	r0, [r2, #-0]
 320:	00000042 	andeq	r0, r0, r2, asr #32
 324:	04050001 	streq	r0, [r5], #-1
 328:	00a31102 	adceq	r1, r3, r2, lsl #2
 32c:	6f060000 	svcvs	0x00060000
 330:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
 334:	00006212 	andeq	r6, r0, r2, lsl r2
 338:	00690700 	rsbeq	r0, r9, r0, lsl #14
 33c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 340:	000002c5 	andeq	r0, r0, r5, asr #5
 344:	ec040218 	sfm	f0, 4, [r4], {24}
 348:	03000000 	movweq	r0, #0
 34c:	000004ce 	andeq	r0, r0, lr, asr #9
 350:	00620502 	rsbeq	r0, r2, r2, lsl #10
 354:	03000000 	movweq	r0, #0
 358:	00000328 	andeq	r0, r0, r8, lsr #6
 35c:	00620602 	rsbeq	r0, r2, r2, lsl #12
 360:	03040000 	movweq	r0, #16384	; 0x4000
 364:	0000046b 	andeq	r0, r0, fp, ror #8
 368:	00620702 	rsbeq	r0, r2, r2, lsl #14
 36c:	03080000 	movweq	r0, #32768	; 0x8000
 370:	000003c7 	andeq	r0, r0, r7, asr #7
 374:	00620802 	rsbeq	r0, r2, r2, lsl #16
 378:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
 37c:	00000049 	andeq	r0, r0, r9, asr #32
 380:	008a0910 	addeq	r0, sl, r0, lsl r9
 384:	00140000 	andseq	r0, r4, r0
 388:	0003870a 	andeq	r8, r3, sl, lsl #14
 38c:	a3180200 	tstge	r8, #0, 4
 390:	0a000000 	beq	398 <startup-0x1ffffc68>
 394:	00000431 	andeq	r0, r0, r1, lsr r4
 398:	00421803 	subeq	r1, r2, r3, lsl #16
 39c:	54080000 	strpl	r0, [r8], #-0
 3a0:	02000003 	andeq	r0, r0, #3
 3a4:	01231a03 			; <UNDEFINED> instruction: 0x01231a03
 3a8:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
 3ac:	f71b0300 			; <UNDEFINED> instruction: 0xf71b0300
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	0300790b 	movweq	r7, #2315	; 0x90b
 3b8:	0000f71c 	andeq	pc, r0, ip, lsl r7	; <UNPREDICTABLE>
 3bc:	0a000100 	beq	7c4 <startup-0x1ffff83c>
 3c0:	0000035b 	andeq	r0, r0, fp, asr r3
 3c4:	01021d03 	tsteq	r2, r3, lsl #26
 3c8:	27080000 	strcs	r0, [r8, -r0]
 3cc:	34000004 	strcc	r0, [r0], #-4
 3d0:	016a1f03 	cmneq	sl, r3, lsl #30
 3d4:	e1030000 	mrs	r0, (UNDEF: 3)
 3d8:	03000004 	movweq	r0, #4
 3dc:	00016a20 	andeq	r6, r1, r0, lsr #20
 3e0:	e0030000 	and	r0, r3, r0
 3e4:	03000002 	movweq	r0, #2
 3e8:	00016a21 	andeq	r6, r1, r1, lsr #20
 3ec:	e7030400 	str	r0, [r3, -r0, lsl #8]
 3f0:	03000002 	movweq	r0, #2
 3f4:	00016a22 	andeq	r6, r1, r2, lsr #20
 3f8:	700b0800 	andvc	r0, fp, r0, lsl #16
 3fc:	23030078 	movwcs	r0, #12408	; 0x3078
 400:	00000171 	andeq	r0, r0, r1, ror r1
 404:	040c000c 	streq	r0, [ip], #-12
 408:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 40c:	01230d00 			; <UNDEFINED> instruction: 0x01230d00
 410:	01810000 	orreq	r0, r1, r0
 414:	810e0000 	mrshi	r0, (UNDEF: 14)
 418:	13000001 	movwne	r0, #1
 41c:	07040400 	streq	r0, [r4, -r0, lsl #8]
 420:	0000045c 	andeq	r0, r0, ip, asr r4
 424:	0002bb0a 	andeq	fp, r2, sl, lsl #22
 428:	93240300 			; <UNDEFINED> instruction: 0x93240300
 42c:	0f000001 	svceq	0x00000001
 430:	00012e04 	andeq	r2, r1, r4, lsl #28
 434:	04c90800 	strbeq	r0, [r9], #2048	; 0x800
 438:	03240000 			; <UNDEFINED> instruction: 0x03240000
 43c:	00021226 	andeq	r1, r2, r6, lsr #4
 440:	65670b00 	strbvs	r0, [r7, #-2816]!	; 0xfffff500
 444:	2703006f 	strcs	r0, [r3, -pc, rrx]
 448:	00000188 	andeq	r0, r0, r8, lsl #3
 44c:	031c0300 	tsteq	ip, #0, 6
 450:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
 454:	0000016a 	andeq	r0, r0, sl, ror #2
 458:	03220304 			; <UNDEFINED> instruction: 0x03220304
 45c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
 460:	0000016a 	andeq	r0, r0, sl, ror #2
 464:	04650308 	strbteq	r0, [r5], #-776	; 0xfffffcf8
 468:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
 46c:	0000016a 	andeq	r0, r0, sl, ror #2
 470:	0316030c 	tsteq	r6, #12, 6	; 0x30000000
 474:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
 478:	0000016a 	andeq	r0, r0, sl, ror #2
 47c:	02fa0310 	rscseq	r0, sl, #16, 6	; 0x40000000
 480:	2a030000 	bcs	c0488 <startup-0x1ff3fb78>
 484:	00000223 	andeq	r0, r0, r3, lsr #4
 488:	039d0314 	orrseq	r0, sp, #20, 6	; 0x50000000
 48c:	2b030000 	blcs	c0494 <startup-0x1ff3fb6c>
 490:	00000223 	andeq	r0, r0, r3, lsr #4
 494:	02ff0318 	rscseq	r0, pc, #24, 6	; 0x60000000
 498:	2c030000 	stccs	0, cr0, [r3], {-0}
 49c:	00000223 	andeq	r0, r0, r3, lsr #4
 4a0:	036a031c 	cmneq	sl, #28, 6	; 0x70000000
 4a4:	2d030000 	stccs	0, cr0, [r3, #-0]
 4a8:	0000023e 	andeq	r0, r0, lr, lsr r2
 4ac:	1d100020 	ldcne	0, cr0, [r0, #-128]	; 0xffffff80
 4b0:	11000002 	tstne	r0, r2
 4b4:	0000021d 	andeq	r0, r0, sp, lsl r2
 4b8:	99040f00 	stmdbls	r4, {r8, r9, sl, fp}
 4bc:	0f000001 	svceq	0x00000001
 4c0:	00021204 	andeq	r1, r2, r4, lsl #4
 4c4:	023e1000 	eorseq	r1, lr, #0
 4c8:	1d110000 	ldcne	0, cr0, [r1, #-0]
 4cc:	11000002 	tstne	r0, r2
 4d0:	0000016a 	andeq	r0, r0, sl, ror #2
 4d4:	00016a11 	andeq	r6, r1, r1, lsl sl
 4d8:	040f0000 	streq	r0, [pc], #-0	; 4e0 <startup-0x1ffffb20>
 4dc:	00000229 	andeq	r0, r0, r9, lsr #4
 4e0:	00050d0a 	andeq	r0, r5, sl, lsl #26
 4e4:	1d2e0300 	stcne	3, cr0, [lr, #-0]
 4e8:	12000002 	andne	r0, r0, #2
 4ec:	00000012 	andeq	r0, r0, r2, lsl r0
 4f0:	b4011a01 	strlt	r1, [r1], #-2561	; 0xfffff5ff
 4f4:	20200008 	eorcs	r0, r0, r8
 4f8:	01000000 	mrseq	r0, (UNDEF: 0)
 4fc:	0492139c 	ldreq	r1, [r2], #924	; 0x39c
 500:	15010000 	strne	r0, [r1, #-0]
 504:	00089401 	andeq	r9, r8, r1, lsl #8
 508:	00002020 	andeq	r2, r0, r0, lsr #32
 50c:	a19c0100 	orrsge	r0, ip, r0, lsl #2
 510:	14000002 	strne	r0, [r0], #-2
 514:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 518:	44011501 	strmi	r1, [r1], #-1281	; 0xfffffaff
 51c:	02000002 	andeq	r0, r0, #2
 520:	78157491 	ldmdavc	r5, {r0, r4, r7, sl, ip, sp, lr}
 524:	01150100 	tsteq	r5, r0, lsl #2
 528:	0000016a 	andeq	r0, r0, sl, ror #2
 52c:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
 530:	15010079 	strne	r0, [r1, #-121]	; 0xffffff87
 534:	00016a01 	andeq	r6, r1, r1, lsl #20
 538:	6c910200 	lfmvs	f0, 4, [r1], {0}
 53c:	04eb1600 	strbteq	r1, [fp], #1536	; 0x600
 540:	05010000 	streq	r0, [r1, #-0]
 544:	00081401 	andeq	r1, r8, r1, lsl #8
 548:	00008020 	andeq	r8, r0, r0, lsr #32
 54c:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
 550:	14000002 	strne	r0, [r0], #-2
 554:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 558:	44010501 	strmi	r0, [r1], #-1281	; 0xfffffaff
 55c:	02000002 	andeq	r0, r0, #2
 560:	17007491 			; <UNDEFINED> instruction: 0x17007491
 564:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
 568:	07b0ff01 	ldreq	pc, [r0, r1, lsl #30]!
 56c:	00642000 	rsbeq	r2, r4, r0
 570:	9c010000 	stcls	0, cr0, [r1], {-0}
 574:	00000302 	andeq	r0, r0, r2, lsl #6
 578:	0004f018 	andeq	pc, r4, r8, lsl r0	; <UNPREDICTABLE>
 57c:	44ff0100 	ldrbtmi	r0, [pc], #256	; 584 <startup-0x1ffffa7c>
 580:	02000002 	andeq	r0, r0, #2
 584:	b8196c91 	ldmdalt	r9, {r0, r4, r7, sl, fp, sp, lr}
 588:	54200007 	strtpl	r0, [r0], #-7
 58c:	1a000000 	bne	594 <startup-0x1ffffa6c>
 590:	00010069 	andeq	r0, r1, r9, rrx
 594:	00016a01 	andeq	r6, r1, r1, lsl #20
 598:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 59c:	ee170000 	cdp	0, 1, cr0, cr7, cr0, {0}
 5a0:	01000002 	tsteq	r0, r2
 5a4:	00074cf9 	strdeq	r4, [r7], -r9
 5a8:	00006420 	andeq	r6, r0, r0, lsr #8
 5ac:	3c9c0100 	ldfccs	f0, [ip], {0}
 5b0:	18000003 	stmdane	r0, {r0, r1}
 5b4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5b8:	0244f901 	subeq	pc, r4, #16384	; 0x4000
 5bc:	91020000 	mrsls	r0, (UNDEF: 2)
 5c0:	0754196c 	ldrbeq	r1, [r4, -ip, ror #18]
 5c4:	00542000 	subseq	r2, r4, r0
 5c8:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 5cc:	6afa0100 	bvs	ffe809d4 <key+0xdfe7fc50>
 5d0:	02000001 	andeq	r0, r0, #1
 5d4:	00007491 	muleq	r0, r1, r4
 5d8:	00034617 	andeq	r4, r3, r7, lsl r6
 5dc:	a6c10100 	strbge	r0, [r1], r0, lsl #2
 5e0:	a6200005 	strtge	r0, [r0], -r5
 5e4:	01000001 	tsteq	r0, r1
 5e8:	0003be9c 	muleq	r3, ip, lr
 5ec:	00781c00 	rsbseq	r1, r8, r0, lsl #24
 5f0:	00f7c101 	rscseq	ip, r7, r1, lsl #2
 5f4:	91020000 	mrsls	r0, (UNDEF: 2)
 5f8:	00791c67 	rsbseq	r1, r9, r7, ror #24
 5fc:	00f7c101 	rscseq	ip, r7, r1, lsl #2
 600:	91020000 	mrsls	r0, (UNDEF: 2)
 604:	65731c66 	ldrbvs	r1, [r3, #-3174]!	; 0xfffff39a
 608:	c1010074 	tstgt	r1, r4, ror r0
 60c:	000000f7 	strdeq	r0, [r0], -r7
 610:	1d659102 	stfnep	f1, [r5, #-8]!
 614:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
 618:	00f7cd01 	rscseq	ip, r7, r1, lsl #26
 61c:	91020000 	mrsls	r0, (UNDEF: 2)
 620:	04731d6c 	ldrbteq	r1, [r3], #-3436	; 0xfffff294
 624:	cf010000 	svcgt	0x00010000
 628:	000000f7 	strdeq	r0, [r0], -r7
 62c:	1d6f9102 	stfnep	f1, [pc, #-8]!	; 62c <startup-0x1ffff9d4>
 630:	00000361 	andeq	r0, r0, r1, ror #6
 634:	00f7e101 	rscseq	lr, r7, r1, lsl #2
 638:	91020000 	mrsls	r0, (UNDEF: 2)
 63c:	05ef1d6e 	strbeq	r1, [pc, #3438]!	; 13b2 <startup-0x1fffec4e>
 640:	e2010000 	and	r0, r1, #0
 644:	000000f7 	strdeq	r0, [r0], -r7
 648:	1d6d9102 	stfnep	f1, [sp, #-8]!
 64c:	00000382 	andeq	r0, r0, r2, lsl #7
 650:	00f7ee01 	rscseq	lr, r7, r1, lsl #28
 654:	91020000 	mrsls	r0, (UNDEF: 2)
 658:	1517006b 	ldrne	r0, [r7, #-107]	; 0xffffff95
 65c:	01000005 	tsteq	r0, r5
 660:	000540b6 	strheq	r4, [r5], -r6
 664:	00006620 	andeq	r6, r0, r0, lsr #12
 668:	049c0100 	ldreq	r0, [ip], #256	; 0x100
 66c:	19000004 	stmdbne	r0, {r2}
 670:	20000546 	andcs	r0, r0, r6, asr #10
 674:	00000058 	andeq	r0, r0, r8, asr r0
 678:	0003411d 	andeq	r4, r3, sp, lsl r1
 67c:	f7b70100 			; <UNDEFINED> instruction: 0xf7b70100
 680:	02000000 	andeq	r0, r0, #0
 684:	6a197791 	bvs	65e4d0 <startup-0x1f9a1b30>
 688:	22200005 	eorcs	r0, r0, #5
 68c:	1b000000 	blne	694 <startup-0x1ffff96c>
 690:	00646461 	rsbeq	r6, r4, r1, ror #8
 694:	00f7bb01 	rscseq	fp, r7, r1, lsl #22
 698:	91020000 	mrsls	r0, (UNDEF: 2)
 69c:	00000076 	andeq	r0, r0, r6, ror r0
 6a0:	0003b41e 	andeq	fp, r3, lr, lsl r4
 6a4:	e4a10100 	strt	r0, [r1], #256	; 0x100
 6a8:	5c200004 	stcpl	0, cr0, [r0], #-16
 6ac:	01000000 	mrseq	r0, (UNDEF: 0)
 6b0:	032f1f9c 			; <UNDEFINED> instruction: 0x032f1f9c
 6b4:	9c010000 	stcls	0, cr0, [r1], {-0}
 6b8:	000000f7 	strdeq	r0, [r0], -r7
 6bc:	200004ba 			; <UNDEFINED> instruction: 0x200004ba
 6c0:	0000002a 	andeq	r0, r0, sl, lsr #32
 6c4:	043d9c01 	ldrteq	r9, [sp], #-3073	; 0xfffff3ff
 6c8:	ef180000 	svc	0x00180000
 6cc:	01000005 	tsteq	r0, r5
 6d0:	0000f79c 	muleq	r0, ip, r7
 6d4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6d8:	047f1700 	ldrbteq	r1, [pc], #-1792	; 6e0 <startup-0x1ffff920>
 6dc:	94010000 	strls	r0, [r1], #-0
 6e0:	20000474 	andcs	r0, r0, r4, ror r4
 6e4:	00000046 	andeq	r0, r0, r6, asr #32
 6e8:	046f9c01 	strbteq	r9, [pc], #-3073	; 6f0 <startup-0x1ffff910>
 6ec:	3c180000 	ldccc	0, cr0, [r8], {-0}
 6f0:	01000003 	tsteq	r0, r3
 6f4:	0000f794 	muleq	r0, r4, r7
 6f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6fc:	0005ef18 	andeq	lr, r5, r8, lsl pc
 700:	f7940100 			; <UNDEFINED> instruction: 0xf7940100
 704:	02000000 	andeq	r0, r0, #0
 708:	17007691 			; <UNDEFINED> instruction: 0x17007691
 70c:	000004f7 	strdeq	r0, [r0], -r7
 710:	04348d01 	ldrteq	r8, [r4], #-3329	; 0xfffff2ff
 714:	00402000 	subeq	r2, r0, r0
 718:	9c010000 	stcls	0, cr0, [r1], {-0}
 71c:	000004a1 	andeq	r0, r0, r1, lsr #9
 720:	00050518 	andeq	r0, r5, r8, lsl r5
 724:	f78d0100 			; <UNDEFINED> instruction: 0xf78d0100
 728:	02000000 	andeq	r0, r0, #0
 72c:	ef187791 	svc	0x00187791
 730:	01000005 	tsteq	r0, r5
 734:	0000f78d 	andeq	pc, r0, sp, lsl #15
 738:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 73c:	03741700 	cmneq	r4, #0, 14
 740:	71010000 	mrsvc	r0, (UNDEF: 1)
 744:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
 748:	00000080 	andeq	r0, r0, r0, lsl #1
 74c:	04d39c01 	ldrbeq	r9, [r3], #3073	; 0xc01
 750:	6c180000 	ldcvs	0, cr0, [r8], {-0}
 754:	01000005 	tsteq	r0, r5
 758:	0000f771 	andeq	pc, r0, r1, ror r7	; <UNPREDICTABLE>
 75c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 760:	0005ef18 	andeq	lr, r5, r8, lsl pc
 764:	f7710100 			; <UNDEFINED> instruction: 0xf7710100
 768:	02000000 	andeq	r0, r0, #0
 76c:	1f007691 	svcne	0x00007691
 770:	000004d4 	ldrdeq	r0, [r0], -r4
 774:	00f74601 	rscseq	r4, r7, r1, lsl #12
 778:	03240000 			; <UNDEFINED> instruction: 0x03240000
 77c:	00902000 	addseq	r2, r0, r0
 780:	9c010000 	stcls	0, cr0, [r1], {-0}
 784:	00000508 	andeq	r0, r0, r8, lsl #10
 788:	0005ef18 	andeq	lr, r5, r8, lsl pc
 78c:	f7460100 			; <UNDEFINED> instruction: 0xf7460100
 790:	02000000 	andeq	r0, r0, #0
 794:	521b6f91 	andspl	r6, fp, #580	; 0x244
 798:	56010056 			; <UNDEFINED> instruction: 0x56010056
 79c:	000000f7 	strdeq	r0, [r0], -r7
 7a0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 7a4:	0004a317 	andeq	sl, r4, r7, lsl r3
 7a8:	ae240100 	sufges	f0, f4, f0
 7ac:	76200002 	strtvc	r0, [r0], -r2
 7b0:	01000000 	mrseq	r0, (UNDEF: 0)
 7b4:	00052c9c 	muleq	r5, ip, ip
 7b8:	04401d00 	strbeq	r1, [r0], #-3328	; 0xfffff300
 7bc:	25010000 	strcs	r0, [r1, #-0]
 7c0:	000000f7 	strdeq	r0, [r0], -r7
 7c4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 7c8:	00030417 	andeq	r0, r3, r7, lsl r4
 7cc:	54110100 	ldrpl	r0, [r1], #-256	; 0xffffff00
 7d0:	5a200002 	bpl	8007e0 <startup-0x1f7ff820>
 7d4:	01000000 	mrseq	r0, (UNDEF: 0)
 7d8:	0005509c 	muleq	r5, ip, r0
 7dc:	05ef1800 	strbeq	r1, [pc, #2048]!	; fe4 <startup-0x1ffff01c>
 7e0:	11010000 	mrsne	r0, (UNDEF: 1)
 7e4:	000000f7 	strdeq	r0, [r0], -r7
 7e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 7ec:	00038c20 	andeq	r8, r3, r0, lsr #24
 7f0:	fc0a0100 	stc2	1, cr0, [sl], {-0}
 7f4:	58200001 	stmdapl	r0!, {r0}
 7f8:	01000000 	mrseq	r0, (UNDEF: 0)
 7fc:	0005809c 	muleq	r5, ip, r0
 800:	00781c00 	rsbseq	r1, r8, r0, lsl #24
 804:	00f70a01 	rscseq	r0, r7, r1, lsl #20
 808:	91020000 	mrsls	r0, (UNDEF: 2)
 80c:	03a31d6f 			; <UNDEFINED> instruction: 0x03a31d6f
 810:	0b010000 	bleq	40818 <startup-0x1ffbf7e8>
 814:	000000f7 	strdeq	r0, [r0], -r7
 818:	00779102 	rsbseq	r9, r7, r2, lsl #2
 81c:	0002cb21 	andeq	ip, r2, r1, lsr #22
 820:	ac030100 	stfges	f0, [r3], {-0}
 824:	50200001 	eorpl	r0, r0, r1
 828:	01000000 	mrseq	r0, (UNDEF: 0)
 82c:	00781c9c 			; <UNDEFINED> instruction: 0x00781c9c
 830:	00f70301 	rscseq	r0, r7, r1, lsl #6
 834:	91020000 	mrsls	r0, (UNDEF: 2)
 838:	03a31d6f 			; <UNDEFINED> instruction: 0x03a31d6f
 83c:	04010000 	streq	r0, [r1], #-0
 840:	000000f7 	strdeq	r0, [r0], -r7
 844:	00779102 	rsbseq	r9, r7, r2, lsl #2
 848:	00032200 	andeq	r2, r3, r0, lsl #4
 84c:	b8000400 	stmdalt	r0, {sl}
 850:	04000003 	streq	r0, [r0], #-3
 854:	00005f01 	andeq	r5, r0, r1, lsl #30
 858:	05720c00 	ldrbeq	r0, [r2, #-3072]!	; 0xfffff400
 85c:	08d40000 	ldmeq	r4, {}^	; <UNPREDICTABLE>
 860:	033a2000 	teqeq	sl, #0
 864:	032c0000 			; <UNDEFINED> instruction: 0x032c0000
 868:	02020000 	andeq	r0, r2, #0
 86c:	00420c02 	subeq	r0, r2, r2, lsl #24
 870:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
 874:	02000004 	andeq	r0, r0, #4
 878:	0000420d 	andeq	r4, r0, sp, lsl #4
 87c:	54030000 	strpl	r0, [r3], #-0
 880:	02000004 	andeq	r0, r0, #4
 884:	0000420e 	andeq	r4, r0, lr, lsl #4
 888:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
 88c:	00f70801 	rscseq	r0, r7, r1, lsl #16
 890:	04050000 	streq	r0, [r5], #-0
 894:	00620a02 	rsbeq	r0, r2, r2, lsl #20
 898:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
 89c:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
 8a0:	0000620b 	andeq	r6, r0, fp, lsl #4
 8a4:	00210700 	eoreq	r0, r1, r0, lsl #14
 8a8:	04000000 	streq	r0, [r0], #-0
 8ac:	002c0704 	eoreq	r0, ip, r4, lsl #14
 8b0:	02020000 	andeq	r0, r2, #0
 8b4:	008a1302 	addeq	r1, sl, r2, lsl #6
 8b8:	39030000 	stmdbcc	r3, {}	; <UNPREDICTABLE>
 8bc:	02000004 	andeq	r0, r0, #4
 8c0:	00004214 	andeq	r4, r0, r4, lsl r2
 8c4:	4c030000 	stcmi	0, cr0, [r3], {-0}
 8c8:	02000003 	andeq	r0, r0, #3
 8cc:	00004215 	andeq	r4, r0, r5, lsl r2
 8d0:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
 8d4:	a3110204 	tstge	r1, #4, 4	; 0x40000000
 8d8:	06000000 	streq	r0, [r0], -r0
 8dc:	0072646f 	rsbseq	r6, r2, pc, ror #8
 8e0:	00621202 	rsbeq	r1, r2, r2, lsl #4
 8e4:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
 8e8:	00000000 	andeq	r0, r0, r0
 8ec:	0002c508 	andeq	ip, r2, r8, lsl #10
 8f0:	04021800 	streq	r1, [r2], #-2048	; 0xfffff800
 8f4:	000000ec 	andeq	r0, r0, ip, ror #1
 8f8:	0004ce03 	andeq	ip, r4, r3, lsl #28
 8fc:	62050200 	andvs	r0, r5, #0, 4
 900:	00000000 	andeq	r0, r0, r0
 904:	00032803 	andeq	r2, r3, r3, lsl #16
 908:	62060200 	andvs	r0, r6, #0, 4
 90c:	04000000 	streq	r0, [r0], #-0
 910:	00046b03 	andeq	r6, r4, r3, lsl #22
 914:	62070200 	andvs	r0, r7, #0, 4
 918:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 91c:	0003c703 	andeq	ip, r3, r3, lsl #14
 920:	62080200 	andvs	r0, r8, #0, 4
 924:	0c000000 	stceq	0, cr0, [r0], {-0}
 928:	00004909 	andeq	r4, r0, r9, lsl #18
 92c:	8a091000 	bhi	244934 <startup-0x1fdbb6cc>
 930:	14000000 	strne	r0, [r0], #-0
 934:	03870a00 	orreq	r0, r7, #0, 20
 938:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
 93c:	000000a3 	andeq	r0, r0, r3, lsr #1
 940:	0005520b 	andeq	r5, r5, fp, lsl #4
 944:	e6aa0100 	strt	r0, [sl], r0, lsl #2
 948:	2820000b 	stmdacs	r0!, {r0, r1, r3}
 94c:	01000000 	mrseq	r0, (UNDEF: 0)
 950:	0001199c 	muleq	r1, ip, r9
 954:	00730c00 	rsbseq	r0, r3, r0, lsl #24
 958:	0119aa01 	tsteq	r9, r1, lsl #20
 95c:	91020000 	mrsls	r0, (UNDEF: 2)
 960:	040d0074 	streq	r0, [sp], #-116	; 0xffffff8c
 964:	0000011f 	andeq	r0, r0, pc, lsl r1
 968:	00080104 	andeq	r0, r8, r4, lsl #2
 96c:	0b000001 	bleq	978 <startup-0x1ffff688>
 970:	00000546 	andeq	r0, r0, r6, asr #10
 974:	0b7e9601 	bleq	1fa6180 <startup-0x1e059e80>
 978:	00682000 	rsbeq	r2, r8, r0
 97c:	9c010000 	stcls	0, cr0, [r1], {-0}
 980:	00000166 	andeq	r0, r0, r6, ror #2
 984:	776f720c 	strbvc	r7, [pc, -ip, lsl #4]!
 988:	62960100 	addsvs	r0, r6, #0, 2
 98c:	02000000 	andeq	r0, r0, #0
 990:	dd0e6c91 	stcle	12, cr6, [lr, #-580]	; 0xfffffdbc
 994:	01000005 	tsteq	r0, r5
 998:	00006296 	muleq	r0, r6, r2
 99c:	68910200 	ldmvs	r1, {r9}
 9a0:	0006260f 	andeq	r2, r6, pc, lsl #12
 9a4:	42a10100 	adcmi	r0, r1, #0, 2
 9a8:	02000000 	andeq	r0, r0, #0
 9ac:	0b007791 	bleq	1e7f8 <startup-0x1ffe1808>
 9b0:	00000689 	andeq	r0, r0, r9, lsl #13
 9b4:	0b3a8601 	bleq	ea21c0 <startup-0x1f15de40>
 9b8:	00442000 	subeq	r2, r4, r0
 9bc:	9c010000 	stcls	0, cr0, [r1], {-0}
 9c0:	0000018a 	andeq	r0, r0, sl, lsl #3
 9c4:	00053c0e 	andeq	r3, r5, lr, lsl #24
 9c8:	42860100 	addmi	r0, r6, #0, 2
 9cc:	02000000 	andeq	r0, r0, #0
 9d0:	0b007791 	bleq	1e81c <startup-0x1ffe17e4>
 9d4:	0000063f 	andeq	r0, r0, pc, lsr r6
 9d8:	0ae47601 	beq	ff91e1e4 <key+0xdf91d460>
 9dc:	00562000 	subseq	r2, r6, r0
 9e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 9e4:	000001c9 	andeq	r0, r0, r9, asr #3
 9e8:	0005050e 	andeq	r0, r5, lr, lsl #10
 9ec:	42760100 	rsbsmi	r0, r6, #0, 2
 9f0:	02000000 	andeq	r0, r0, #0
 9f4:	ca0e7791 	bgt	39e840 <startup-0x1fc617c0>
 9f8:	01000005 	tsteq	r0, r5
 9fc:	00006276 	andeq	r6, r0, r6, ror r2
 a00:	70910200 	addsvc	r0, r1, r0, lsl #4
 a04:	0073750c 	rsbseq	r7, r3, ip, lsl #10
 a08:	01c97601 	biceq	r7, r9, r1, lsl #12
 a0c:	91020000 	mrsls	r0, (UNDEF: 2)
 a10:	02040074 	andeq	r0, r4, #116	; 0x74
 a14:	00002607 	andeq	r2, r0, r7, lsl #12
 a18:	05e41000 	strbeq	r1, [r4, #0]!
 a1c:	64010000 	strvs	r0, [r1], #-0
 a20:	00000042 	andeq	r0, r0, r2, asr #32
 a24:	20000ab4 			; <UNDEFINED> instruction: 0x20000ab4
 a28:	00000030 	andeq	r0, r0, r0, lsr r0
 a2c:	01f89c01 	mvnseq	r9, r1, lsl #24
 a30:	650f0000 	strvs	r0, [pc, #-0]	; a38 <startup-0x1ffff5c8>
 a34:	01000005 	tsteq	r0, r5
 a38:	00004265 	andeq	r4, r0, r5, ror #4
 a3c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 a40:	06720b00 	ldrbteq	r0, [r2], -r0, lsl #22
 a44:	56010000 	strpl	r0, [r1], -r0
 a48:	20000a84 	andcs	r0, r0, r4, lsl #21
 a4c:	00000030 	andeq	r0, r0, r0, lsr r0
 a50:	021c9c01 	andseq	r9, ip, #256	; 0x100
 a54:	4d0e0000 	stcmi	0, cr0, [lr, #-0]
 a58:	01000005 	tsteq	r0, r5
 a5c:	00004256 	andeq	r4, r0, r6, asr r2
 a60:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 a64:	052a1000 	streq	r1, [sl, #-0]!
 a68:	44010000 	strmi	r0, [r1], #-0
 a6c:	00000042 	andeq	r0, r0, r2, asr #32
 a70:	20000a3c 	andcs	r0, r0, ip, lsr sl
 a74:	00000048 	andeq	r0, r0, r8, asr #32
 a78:	02449c01 	subeq	r9, r4, #256	; 0x100
 a7c:	650f0000 	strvs	r0, [pc, #-0]	; a84 <startup-0x1ffff57c>
 a80:	01000005 	tsteq	r0, r5
 a84:	00004245 	andeq	r4, r0, r5, asr #4
 a88:	6f910200 	svcvs	0x00910200
 a8c:	06621000 	strbteq	r1, [r2], -r0
 a90:	33010000 	movwcc	r0, #4096	; 0x1000
 a94:	00000042 	andeq	r0, r0, r2, asr #32
 a98:	200009f4 	strdcs	r0, [r0], -r4
 a9c:	00000048 	andeq	r0, r0, r8, asr #32
 aa0:	026c9c01 	rsbeq	r9, ip, #256	; 0x100
 aa4:	650f0000 	strvs	r0, [pc, #-0]	; aac <startup-0x1ffff554>
 aa8:	01000005 	tsteq	r0, r5
 aac:	00004234 	andeq	r4, r0, r4, lsr r2
 ab0:	6f910200 	svcvs	0x00910200
 ab4:	062e0b00 	strteq	r0, [lr], -r0, lsl #22
 ab8:	2a010000 	bcs	40ac0 <startup-0x1ffbf540>
 abc:	200009ca 	andcs	r0, r0, sl, asr #19
 ac0:	0000002a 	andeq	r0, r0, sl, lsr #32
 ac4:	02909c01 	addseq	r9, r0, #256	; 0x100
 ac8:	3c0e0000 	stccc	0, cr0, [lr], {-0}
 acc:	01000003 	tsteq	r0, r3
 ad0:	0000422a 	andeq	r4, r0, sl, lsr #4
 ad4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 ad8:	06160b00 	ldreq	r0, [r6], -r0, lsl #22
 adc:	21010000 	mrscs	r0, (UNDEF: 1)
 ae0:	200009a0 	andcs	r0, r0, r0, lsr #19
 ae4:	0000002a 	andeq	r0, r0, sl, lsr #32
 ae8:	02b49c01 	adcseq	r9, r4, #256	; 0x100
 aec:	050e0000 	streq	r0, [lr, #-0]
 af0:	01000005 	tsteq	r0, r5
 af4:	00004221 	andeq	r4, r0, r1, lsr #4
 af8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 afc:	064d1100 	strbeq	r1, [sp], -r0, lsl #2
 b00:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 b04:	20000958 	andcs	r0, r0, r8, asr r9
 b08:	00000048 	andeq	r0, r0, r8, asr #32
 b0c:	02e49c01 	rsceq	r9, r4, #256	; 0x100
 b10:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
 b14:	42190100 	andsmi	r0, r9, #0, 2
 b18:	02000000 	andeq	r0, r0, #0
 b1c:	0d0f6f91 	stceq	15, cr6, [pc, #-580]	; 8e0 <startup-0x1ffff720>
 b20:	01000006 	tsteq	r0, r6
 b24:	0000421b 	andeq	r4, r0, fp, lsl r2
 b28:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 b2c:	05fa1100 	ldrbeq	r1, [sl, #256]!	; 0x100
 b30:	12010000 	andne	r0, r1, #0
 b34:	20000914 	andcs	r0, r0, r4, lsl r9
 b38:	00000044 	andeq	r0, r0, r4, asr #32
 b3c:	03149c01 	tsteq	r4, #256	; 0x100
 b40:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
 b44:	42120100 	andsmi	r0, r2, #0, 2
 b48:	02000000 	andeq	r0, r0, #0
 b4c:	0d0f6f91 	stceq	15, cr6, [pc, #-580]	; 910 <startup-0x1ffff6f0>
 b50:	01000006 	tsteq	r0, r6
 b54:	00004214 	andeq	r4, r0, r4, lsl r2
 b58:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 b5c:	00001200 	andeq	r1, r0, r0, lsl #4
 b60:	03010000 	movweq	r0, #4096	; 0x1000
 b64:	200008d4 	ldrdcs	r0, [r0], -r4
 b68:	00000040 	andeq	r0, r0, r0, asr #32
 b6c:	cf009c01 	svcgt	0x00009c01
 b70:	04000001 	streq	r0, [r0], #-1
 b74:	0004d500 	andeq	sp, r4, r0, lsl #10
 b78:	5f010400 	svcpl	0x00010400
 b7c:	0c000000 	stceq	0, cr0, [r0], {-0}
 b80:	000006ab 	andeq	r0, r0, fp, lsr #13
 b84:	20000c10 	andcs	r0, r0, r0, lsl ip
 b88:	00000168 	andeq	r0, r0, r8, ror #2
 b8c:	00000432 	andeq	r0, r0, r2, lsr r4
 b90:	0c020202 	sfmeq	f0, 4, [r2], {2}
 b94:	00000042 	andeq	r0, r0, r2, asr #32
 b98:	00047803 	andeq	r7, r4, r3, lsl #16
 b9c:	420d0200 	andmi	r0, sp, #0, 4
 ba0:	00000000 	andeq	r0, r0, r0
 ba4:	00045403 	andeq	r5, r4, r3, lsl #8
 ba8:	420e0200 	andmi	r0, lr, #0, 4
 bac:	01000000 	mrseq	r0, (UNDEF: 0)
 bb0:	08010400 	stmdaeq	r1, {sl}
 bb4:	000000f7 	strdeq	r0, [r0], -r7
 bb8:	0a020405 	beq	81bd4 <startup-0x1ff7e42c>
 bbc:	00000062 	andeq	r0, r0, r2, rrx
 bc0:	72646906 	rsbvc	r6, r4, #98304	; 0x18000
 bc4:	620b0200 	andvs	r0, fp, #0, 4
 bc8:	07000000 	streq	r0, [r0, -r0]
 bcc:	00000021 	andeq	r0, r0, r1, lsr #32
 bd0:	07040400 	streq	r0, [r4, -r0, lsl #8]
 bd4:	0000002c 	andeq	r0, r0, ip, lsr #32
 bd8:	13020202 	movwne	r0, #8706	; 0x2202
 bdc:	0000008a 	andeq	r0, r0, sl, lsl #1
 be0:	00043903 	andeq	r3, r4, r3, lsl #18
 be4:	42140200 	andsmi	r0, r4, #0, 4
 be8:	00000000 	andeq	r0, r0, r0
 bec:	00034c03 	andeq	r4, r3, r3, lsl #24
 bf0:	42150200 	andsmi	r0, r5, #0, 4
 bf4:	01000000 	mrseq	r0, (UNDEF: 0)
 bf8:	02040500 	andeq	r0, r4, #0, 10
 bfc:	0000a311 	andeq	sl, r0, r1, lsl r3
 c00:	646f0600 	strbtvs	r0, [pc], #-1536	; c08 <startup-0x1ffff3f8>
 c04:	12020072 	andne	r0, r2, #114	; 0x72
 c08:	00000062 	andeq	r0, r0, r2, rrx
 c0c:	00006907 	andeq	r6, r0, r7, lsl #18
 c10:	c5080000 	strgt	r0, [r8, #-0]
 c14:	18000002 	stmdane	r0, {r1}
 c18:	00ec0402 	rsceq	r0, ip, r2, lsl #8
 c1c:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
 c20:	02000004 	andeq	r0, r0, #4
 c24:	00006205 	andeq	r6, r0, r5, lsl #4
 c28:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
 c2c:	02000003 	andeq	r0, r0, #3
 c30:	00006206 	andeq	r6, r0, r6, lsl #4
 c34:	6b030400 	blvs	c1c3c <startup-0x1ff3e3c4>
 c38:	02000004 	andeq	r0, r0, #4
 c3c:	00006207 	andeq	r6, r0, r7, lsl #4
 c40:	c7030800 	strgt	r0, [r3, -r0, lsl #16]
 c44:	02000003 	andeq	r0, r0, #3
 c48:	00006208 	andeq	r6, r0, r8, lsl #4
 c4c:	49090c00 	stmdbmi	r9, {sl, fp}
 c50:	10000000 	andne	r0, r0, r0
 c54:	00008a09 	andeq	r8, r0, r9, lsl #20
 c58:	0a001400 	beq	5c60 <startup-0x1fffa3a0>
 c5c:	00000387 	andeq	r0, r0, r7, lsl #7
 c60:	00a31802 	adceq	r1, r3, r2, lsl #16
 c64:	420b0000 	andmi	r0, fp, #0
 c68:	0d000000 	stceq	0, cr0, [r0, #-0]
 c6c:	0c000001 	stceq	0, cr0, [r0], {1}
 c70:	0000010d 	andeq	r0, r0, sp, lsl #2
 c74:	010d0c03 	tsteq	sp, r3, lsl #24
 c78:	00030000 	andeq	r0, r3, r0
 c7c:	5c070404 	cfstrspl	mvf0, [r7], {4}
 c80:	0d000004 	stceq	0, cr0, [r0, #-16]
 c84:	0079656b 	rsbseq	r6, r9, fp, ror #10
 c88:	00f70603 	rscseq	r0, r7, r3, lsl #12
 c8c:	03050000 	movweq	r0, #20480	; 0x5000
 c90:	20000d84 	andcs	r0, r0, r4, lsl #27
 c94:	0006fd0e 	andeq	pc, r6, lr, lsl #26
 c98:	4b270100 	blmi	9c10a0 <startup-0x1f63ef60>
 c9c:	24000001 	strcs	r0, [r0], #-1
 ca0:	5420000d 	strtpl	r0, [r0], #-13
 ca4:	01000000 	mrseq	r0, (UNDEF: 0)
 ca8:	00014b9c 	muleq	r1, ip, fp
 cac:	00630d00 	rsbeq	r0, r3, r0, lsl #26
 cb0:	00422901 	subeq	r2, r2, r1, lsl #18
 cb4:	91020000 	mrsls	r0, (UNDEF: 2)
 cb8:	040f0077 	streq	r0, [pc], #-119	; cc0 <startup-0x1ffff340>
 cbc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 cc0:	069f1000 	ldreq	r1, [pc], r0
 cc4:	1d010000 	stcne	0, cr0, [r1, #-0]
 cc8:	20000ccc 	andcs	r0, r0, ip, asr #25
 ccc:	00000058 	andeq	r0, r0, r8, asr r0
 cd0:	01769c01 	cmneq	r6, r1, lsl #24
 cd4:	72110000 	andsvc	r0, r1, #0
 cd8:	0100776f 	tsteq	r0, pc, ror #14
 cdc:	0000421d 	andeq	r4, r0, sp, lsl r2
 ce0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 ce4:	069a1200 	ldreq	r1, [sl], r0, lsl #4
 ce8:	0c010000 	stceq	0, cr0, [r1], {-0}
 cec:	00000042 	andeq	r0, r0, r2, asr #32
 cf0:	20000c60 	andcs	r0, r0, r0, ror #24
 cf4:	0000006c 	andeq	r0, r0, ip, rrx
 cf8:	01c19c01 	biceq	r9, r1, r1, lsl #24
 cfc:	72130000 	andsvc	r0, r3, #0
 d00:	0100776f 	tsteq	r0, pc, ror #14
 d04:	0000420d 	andeq	r4, r0, sp, lsl #4
 d08:	05dd1400 	ldrbeq	r1, [sp, #1024]	; 0x400
 d0c:	0d010000 	stceq	0, cr0, [r1, #-0]
 d10:	00000042 	andeq	r0, r0, r2, asr #32
 d14:	15769102 	ldrbne	r9, [r6, #-258]!	; 0xfffffefe
 d18:	20000c66 	andcs	r0, r0, r6, ror #24
 d1c:	00000052 	andeq	r0, r0, r2, asr r0
 d20:	776f720d 	strbvc	r7, [pc, -sp, lsl #4]!
 d24:	420f0100 	andmi	r0, pc, #0, 2
 d28:	02000000 	andeq	r0, r0, #0
 d2c:	00007791 	muleq	r0, r1, r7
 d30:	00015d16 	andeq	r5, r1, r6, lsl sp
 d34:	10030100 	andne	r0, r3, r0, lsl #2
 d38:	5020000c 	eorpl	r0, r0, ip
 d3c:	01000000 	mrseq	r0, (UNDEF: 0)
 d40:	Address 0x00000d40 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	3f012e03 	svccc	0x00012e03
  20:	3a0e0319 	bcc	380c8c <startup-0x1fc7f374>
  24:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  28:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  2c:	96184006 	ldrls	r4, [r8], -r6
  30:	13011942 	movwne	r1, #6466	; 0x1942
  34:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
  38:	03193f01 	tsteq	r9, #1, 30
  3c:	3b0b3a0e 	blcc	2ce87c <startup-0x1fd31784>
  40:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  44:	00130119 	andseq	r0, r3, r9, lsl r1
  48:	00180500 	andseq	r0, r8, r0, lsl #10
  4c:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
  50:	03193f01 	tsteq	r9, #1, 30
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  5c:	07000019 	smladeq	r0, r9, r0, r0
  60:	0b0b0024 	bleq	2c00f8 <startup-0x1fd3ff08>
  64:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  68:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
  6c:	03193f00 	tsteq	r9, #0, 30
  70:	3b0b3a0e 	blcc	2ce8b0 <startup-0x1fd31750>
  74:	1119270b 	tstne	r9, fp, lsl #14
  78:	40061201 	andmi	r1, r6, r1, lsl #4
  7c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  80:	01000000 	mrseq	r0, (UNDEF: 0)
  84:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  88:	0e030b13 	vmoveq.32	d3[0], r0
  8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  90:	00001710 	andeq	r1, r0, r0, lsl r7
  94:	0b002402 	bleq	90a4 <startup-0x1fff6f5c>
  98:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  9c:	0300000e 	movweq	r0, #14
  a0:	0b0b0113 	bleq	2c04f4 <startup-0x1fd3fb0c>
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	00001301 	andeq	r1, r0, r1, lsl #6
  ac:	03000d04 	movweq	r0, #3332	; 0xd04
  b0:	3b0b3a0e 	blcc	2ce8f0 <startup-0x1fd31710>
  b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  b8:	0500000b 	streq	r0, [r0, #-11]
  bc:	0b0b0117 	bleq	2c0520 <startup-0x1fd3fae0>
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03000d06 	movweq	r0, #3334	; 0xd06
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	0013490b 	andseq	r4, r3, fp, lsl #18
  d4:	000d0700 	andeq	r0, sp, r0, lsl #14
  d8:	00001349 	andeq	r1, r0, r9, asr #6
  dc:	03011308 	movweq	r1, #4872	; 0x1308
  e0:	3a0b0b0e 	bcc	2c2d20 <startup-0x1fd3d2e0>
  e4:	010b3b0b 	tsteq	fp, fp, lsl #22
  e8:	09000013 	stmdbeq	r0, {r0, r1, r4}
  ec:	1349000d 	movtne	r0, #36877	; 0x900d
  f0:	00000b38 	andeq	r0, r0, r8, lsr fp
  f4:	03000d0a 	movweq	r0, #3338	; 0xd0a
  f8:	3b0b3a08 	blcc	2ce920 <startup-0x1fd316e0>
  fc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 100:	0b00000b 	bleq	134 <startup-0x1ffffecc>
 104:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 108:	0b3b0b3a 	bleq	ec2df8 <startup-0x1f13d208>
 10c:	00001349 	andeq	r1, r0, r9, asr #6
 110:	0300340c 	movweq	r3, #1036	; 0x40c
 114:	3b0b3a0e 	blcc	2ce954 <startup-0x1fd316ac>
 118:	3f13490b 	svccc	0x0013490b
 11c:	00180219 	andseq	r0, r8, r9, lsl r2
 120:	00240d00 	eoreq	r0, r4, r0, lsl #26
 124:	0b3e0b0b 	bleq	f82d58 <startup-0x1f07d2a8>
 128:	00000803 	andeq	r0, r0, r3, lsl #16
 12c:	4900350e 	stmdbmi	r0, {r1, r2, r3, r8, sl, ip, sp}
 130:	0f000013 	svceq	0x00000013
 134:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 138:	0b3b0b3a 	bleq	ec2e28 <startup-0x1f13d1d8>
 13c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 140:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 144:	03193f00 	tsteq	r9, #0, 30
 148:	3b0b3a0e 	blcc	2ce988 <startup-0x1fd31678>
 14c:	1119270b 	tstne	r9, fp, lsl #14
 150:	40061201 	andmi	r1, r6, r1, lsl #4
 154:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 158:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 15c:	03193f00 	tsteq	r9, #0, 30
 160:	3b0b3a0e 	blcc	2ce9a0 <startup-0x1fd31660>
 164:	1119270b 	tstne	r9, fp, lsl #14
 168:	40061201 	andmi	r1, r6, r1, lsl #4
 16c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 170:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 174:	03193f01 	tsteq	r9, #1, 30
 178:	3b0b3a0e 	blcc	2ce9b8 <startup-0x1fd31648>
 17c:	1119270b 	tstne	r9, fp, lsl #14
 180:	40061201 	andmi	r1, r6, r1, lsl #4
 184:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 188:	00001301 	andeq	r1, r0, r1, lsl #6
 18c:	03000513 	movweq	r0, #1299	; 0x513
 190:	3b0b3a0e 	blcc	2ce9d0 <startup-0x1fd31630>
 194:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 198:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 19c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1a0:	0b3a0e03 	bleq	e839b4 <startup-0x1f17c64c>
 1a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1b0:	00130119 	andseq	r0, r3, r9, lsl r1
 1b4:	11010000 	mrsne	r0, (UNDEF: 1)
 1b8:	130e2501 	movwne	r2, #58625	; 0xe501
 1bc:	110e030b 	tstne	lr, fp, lsl #6
 1c0:	10061201 	andne	r1, r6, r1, lsl #4
 1c4:	02000017 	andeq	r0, r0, #23
 1c8:	0b0b0113 	bleq	2c061c <startup-0x1fd3f9e4>
 1cc:	0b3b0b3a 	bleq	ec2ebc <startup-0x1f13d144>
 1d0:	00001301 	andeq	r1, r0, r1, lsl #6
 1d4:	03000d03 	movweq	r0, #3331	; 0xd03
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1e0:	0400000b 	streq	r0, [r0], #-11
 1e4:	0b0b0024 	bleq	2c027c <startup-0x1fd3fd84>
 1e8:	0e030b3e 	vmoveq.16	d3[0], r0
 1ec:	17050000 	strne	r0, [r5, -r0]
 1f0:	3a0b0b01 	bcc	2c2dfc <startup-0x1fd3d204>
 1f4:	010b3b0b 	tsteq	fp, fp, lsl #22
 1f8:	06000013 			; <UNDEFINED> instruction: 0x06000013
 1fc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
 204:	00001349 	andeq	r1, r0, r9, asr #6
 208:	49000d07 	stmdbmi	r0, {r0, r1, r2, r8, sl, fp}
 20c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 210:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 214:	0b3a0b0b 	bleq	e82e48 <startup-0x1f17d1b8>
 218:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 21c:	0d090000 	stceq	0, cr0, [r9, #-0]
 220:	38134900 	ldmdacc	r3, {r8, fp, lr}
 224:	0a00000b 	beq	258 <startup-0x1ffffda8>
 228:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 22c:	0b3b0b3a 	bleq	ec2f1c <startup-0x1f13d0e4>
 230:	00001349 	andeq	r1, r0, r9, asr #6
 234:	03000d0b 	movweq	r0, #3339	; 0xd0b
 238:	3b0b3a08 	blcc	2cea60 <startup-0x1fd315a0>
 23c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 240:	0c00000b 	stceq	0, cr0, [r0], {11}
 244:	0b0b0024 	bleq	2c02dc <startup-0x1fd3fd24>
 248:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 24c:	010d0000 	mrseq	r0, (UNDEF: 13)
 250:	01134901 	tsteq	r3, r1, lsl #18
 254:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 258:	13490021 	movtne	r0, #36897	; 0x9021
 25c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 260:	0b000f0f 	bleq	3ea4 <startup-0x1fffc15c>
 264:	0013490b 	andseq	r4, r3, fp, lsl #18
 268:	01151000 	tsteq	r5, r0
 26c:	13011927 	movwne	r1, #6439	; 0x1927
 270:	05110000 	ldreq	r0, [r1, #-0]
 274:	00134900 	andseq	r4, r3, r0, lsl #18
 278:	002e1200 	eoreq	r1, lr, r0, lsl #4
 27c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 280:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 284:	01111927 	tsteq	r1, r7, lsr #18
 288:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 28c:	00194297 	mulseq	r9, r7, r2
 290:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 294:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 298:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 29c:	01111927 	tsteq	r1, r7, lsr #18
 2a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2a8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 2ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 2b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2b8:	05150000 	ldreq	r0, [r5, #-0]
 2bc:	3a080300 	bcc	200ec4 <startup-0x1fdff13c>
 2c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c4:	00180213 	andseq	r0, r8, r3, lsl r2
 2c8:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 2cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2d4:	01111927 	tsteq	r1, r7, lsr #18
 2d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2dc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2e0:	17000013 	smladne	r0, r3, r0, r0
 2e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2e8:	0b3a0e03 	bleq	e83afc <startup-0x1f17c504>
 2ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2f8:	00130119 	andseq	r0, r3, r9, lsl r1
 2fc:	00051800 	andeq	r1, r5, r0, lsl #16
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 308:	00001802 	andeq	r1, r0, r2, lsl #16
 30c:	11010b19 	tstne	r1, r9, lsl fp
 310:	00061201 	andeq	r1, r6, r1, lsl #4
 314:	00341a00 	eorseq	r1, r4, r0, lsl #20
 318:	0b3a0803 	bleq	e8232c <startup-0x1f17dcd4>
 31c:	1349053b 	movtne	r0, #38203	; 0x953b
 320:	00001802 	andeq	r1, r0, r2, lsl #16
 324:	0300341b 	movweq	r3, #1051	; 0x41b
 328:	3b0b3a08 	blcc	2ceb50 <startup-0x1fd314b0>
 32c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 330:	1c000018 	stcne	0, cr0, [r0], {24}
 334:	08030005 	stmdaeq	r3, {r0, r2}
 338:	0b3b0b3a 	bleq	ec3028 <startup-0x1f13cfd8>
 33c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 340:	341d0000 	ldrcc	r0, [sp], #-0
 344:	3a0e0300 	bcc	380f4c <startup-0x1fc7f0b4>
 348:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 34c:	00180213 	andseq	r0, r8, r3, lsl r2
 350:	002e1e00 	eoreq	r1, lr, r0, lsl #28
 354:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 358:	0b3b0b3a 	bleq	ec3048 <startup-0x1f13cfb8>
 35c:	01111927 	tsteq	r1, r7, lsr #18
 360:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 364:	00194296 	mulseq	r9, r6, r2
 368:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
 36c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 370:	0b3b0b3a 	bleq	ec3060 <startup-0x1f13cfa0>
 374:	13491927 	movtne	r1, #39207	; 0x9927
 378:	06120111 			; <UNDEFINED> instruction: 0x06120111
 37c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 380:	00130119 	andseq	r0, r3, r9, lsl r1
 384:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 388:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 38c:	0b3b0b3a 	bleq	ec307c <startup-0x1f13cf84>
 390:	01111927 	tsteq	r1, r7, lsr #18
 394:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 398:	01194297 			; <UNDEFINED> instruction: 0x01194297
 39c:	21000013 	tstcs	r0, r3, lsl r0
 3a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3a4:	0b3a0e03 	bleq	e83bb8 <startup-0x1f17c448>
 3a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3b4:	00000019 	andeq	r0, r0, r9, lsl r0
 3b8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 3bc:	030b130e 	movweq	r1, #45838	; 0xb30e
 3c0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3c4:	00171006 	andseq	r1, r7, r6
 3c8:	01130200 	tsteq	r3, r0, lsl #4
 3cc:	0b3a0b0b 	bleq	e83000 <startup-0x1f17d000>
 3d0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3d4:	0d030000 	stceq	0, cr0, [r3, #-0]
 3d8:	3a0e0300 	bcc	380fe0 <startup-0x1fc7f020>
 3dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3e0:	000b3813 	andeq	r3, fp, r3, lsl r8
 3e4:	00240400 	eoreq	r0, r4, r0, lsl #8
 3e8:	0b3e0b0b 	bleq	f8301c <startup-0x1f07cfe4>
 3ec:	00000e03 	andeq	r0, r0, r3, lsl #28
 3f0:	0b011705 	bleq	4600c <startup-0x1ffb9ff4>
 3f4:	3b0b3a0b 	blcc	2cec28 <startup-0x1fd313d8>
 3f8:	0013010b 	andseq	r0, r3, fp, lsl #2
 3fc:	000d0600 	andeq	r0, sp, r0, lsl #12
 400:	0b3a0803 	bleq	e82414 <startup-0x1f17dbec>
 404:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 408:	0d070000 	stceq	0, cr0, [r7, #-0]
 40c:	00134900 	andseq	r4, r3, r0, lsl #18
 410:	01130800 	tsteq	r3, r0, lsl #16
 414:	0b0b0e03 	bleq	2c3c28 <startup-0x1fd3c3d8>
 418:	0b3b0b3a 	bleq	ec3108 <startup-0x1f13cef8>
 41c:	00001301 	andeq	r1, r0, r1, lsl #6
 420:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 424:	000b3813 	andeq	r3, fp, r3, lsl r8
 428:	00160a00 	andseq	r0, r6, r0, lsl #20
 42c:	0b3a0e03 	bleq	e83c40 <startup-0x1f17c3c0>
 430:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 434:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 438:	03193f01 	tsteq	r9, #1, 30
 43c:	3b0b3a0e 	blcc	2cec7c <startup-0x1fd31384>
 440:	1119270b 	tstne	r9, fp, lsl #14
 444:	40061201 	andmi	r1, r6, r1, lsl #4
 448:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 44c:	00001301 	andeq	r1, r0, r1, lsl #6
 450:	0300050c 	movweq	r0, #1292	; 0x50c
 454:	3b0b3a08 	blcc	2cec7c <startup-0x1fd31384>
 458:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 45c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 460:	0b0b000f 	bleq	2c04a4 <startup-0x1fd3fb5c>
 464:	00001349 	andeq	r1, r0, r9, asr #6
 468:	0300050e 	movweq	r0, #1294	; 0x50e
 46c:	3b0b3a0e 	blcc	2cecac <startup-0x1fd31354>
 470:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 474:	0f000018 	svceq	0x00000018
 478:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 47c:	0b3b0b3a 	bleq	ec316c <startup-0x1f13ce94>
 480:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 484:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 488:	03193f01 	tsteq	r9, #1, 30
 48c:	3b0b3a0e 	blcc	2ceccc <startup-0x1fd31334>
 490:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 494:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 498:	96184006 	ldrls	r4, [r8], -r6
 49c:	13011942 	movwne	r1, #6466	; 0x1942
 4a0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 4a4:	03193f01 	tsteq	r9, #1, 30
 4a8:	3b0b3a0e 	blcc	2cece8 <startup-0x1fd31318>
 4ac:	1119270b 	tstne	r9, fp, lsl #14
 4b0:	40061201 	andmi	r1, r6, r1, lsl #4
 4b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4b8:	00001301 	andeq	r1, r0, r1, lsl #6
 4bc:	3f002e12 	svccc	0x00002e12
 4c0:	3a0e0319 	bcc	38112c <startup-0x1fc7eed4>
 4c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4cc:	96184006 	ldrls	r4, [r8], -r6
 4d0:	00001942 	andeq	r1, r0, r2, asr #18
 4d4:	01110100 	tsteq	r1, r0, lsl #2
 4d8:	0b130e25 	bleq	4c3d74 <startup-0x1fb3c28c>
 4dc:	01110e03 	tsteq	r1, r3, lsl #28
 4e0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 4e4:	13020000 	movwne	r0, #8192	; 0x2000
 4e8:	3a0b0b01 	bcc	2c30f4 <startup-0x1fd3cf0c>
 4ec:	010b3b0b 	tsteq	fp, fp, lsl #22
 4f0:	03000013 	movweq	r0, #19
 4f4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4f8:	0b3b0b3a 	bleq	ec31e8 <startup-0x1f13ce18>
 4fc:	0b381349 	bleq	e05228 <startup-0x1f1fadd8>
 500:	24040000 	strcs	r0, [r4], #-0
 504:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 508:	000e030b 	andeq	r0, lr, fp, lsl #6
 50c:	01170500 	tsteq	r7, r0, lsl #10
 510:	0b3a0b0b 	bleq	e83144 <startup-0x1f17cebc>
 514:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 518:	0d060000 	stceq	0, cr0, [r6, #-0]
 51c:	3a080300 	bcc	201124 <startup-0x1fdfeedc>
 520:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 524:	07000013 	smladeq	r0, r3, r0, r0
 528:	1349000d 	movtne	r0, #36877	; 0x900d
 52c:	13080000 	movwne	r0, #32768	; 0x8000
 530:	0b0e0301 	bleq	38113c <startup-0x1fc7eec4>
 534:	3b0b3a0b 	blcc	2ced68 <startup-0x1fd31298>
 538:	0013010b 	andseq	r0, r3, fp, lsl #2
 53c:	000d0900 	andeq	r0, sp, r0, lsl #18
 540:	0b381349 	bleq	e0526c <startup-0x1f1fad94>
 544:	160a0000 	strne	r0, [sl], -r0
 548:	3a0e0300 	bcc	381150 <startup-0x1fc7eeb0>
 54c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 550:	0b000013 	bleq	5a4 <startup-0x1ffffa5c>
 554:	13490101 	movtne	r0, #37121	; 0x9101
 558:	00001301 	andeq	r1, r0, r1, lsl #6
 55c:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 560:	000b2f13 	andeq	r2, fp, r3, lsl pc
 564:	00340d00 	eorseq	r0, r4, r0, lsl #26
 568:	0b3a0803 	bleq	e8257c <startup-0x1f17da84>
 56c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 570:	00001802 	andeq	r1, r0, r2, lsl #16
 574:	3f012e0e 	svccc	0x00012e0e
 578:	3a0e0319 	bcc	3811e4 <startup-0x1fc7ee1c>
 57c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 580:	11134919 	tstne	r3, r9, lsl r9
 584:	40061201 	andmi	r1, r6, r1, lsl #4
 588:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 58c:	00001301 	andeq	r1, r0, r1, lsl #6
 590:	0b00240f 	bleq	95d4 <startup-0x1fff6a2c>
 594:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 598:	10000008 	andne	r0, r0, r8
 59c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5a0:	0b3a0e03 	bleq	e83db4 <startup-0x1f17c24c>
 5a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5b0:	00130119 	andseq	r0, r3, r9, lsl r1
 5b4:	00051100 	andeq	r1, r5, r0, lsl #2
 5b8:	0b3a0803 	bleq	e825cc <startup-0x1f17da34>
 5bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5c0:	00001802 	andeq	r1, r0, r2, lsl #16
 5c4:	3f012e12 	svccc	0x00012e12
 5c8:	3a0e0319 	bcc	381234 <startup-0x1fc7edcc>
 5cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5d0:	11134919 	tstne	r3, r9, lsl r9
 5d4:	40061201 	andmi	r1, r6, r1, lsl #4
 5d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5dc:	00001301 	andeq	r1, r0, r1, lsl #6
 5e0:	03003413 	movweq	r3, #1043	; 0x413
 5e4:	3b0b3a08 	blcc	2cee0c <startup-0x1fd311f4>
 5e8:	0013490b 	andseq	r4, r3, fp, lsl #18
 5ec:	00341400 	eorseq	r1, r4, r0, lsl #8
 5f0:	0b3a0e03 	bleq	e83e04 <startup-0x1f17c1fc>
 5f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5f8:	00001802 	andeq	r1, r0, r2, lsl #16
 5fc:	11010b15 	tstne	r1, r5, lsl fp
 600:	00061201 	andeq	r1, r6, r1, lsl #4
 604:	002e1600 	eoreq	r1, lr, r0, lsl #12
 608:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 60c:	0b3b0b3a 	bleq	ec32fc <startup-0x1f13cd04>
 610:	01111927 	tsteq	r1, r7, lsr #18
 614:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 618:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000024 	andeq	r0, r0, r4, lsr #32
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	00b60002 	adcseq	r0, r6, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000034 	andcs	r0, r0, r4, lsr r0
  3c:	00000178 	andeq	r0, r0, r8, ror r1
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	029c0002 	addseq	r0, ip, #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200001ac 	andcs	r0, r0, ip, lsr #3
  5c:	00000728 	andeq	r0, r0, r8, lsr #14
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	08490002 	stmdaeq	r9, {r1}^
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200008d4 	ldrdcs	r0, [r0], -r4
  7c:	0000033a 	andeq	r0, r0, sl, lsr r3
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0b6f0002 	bleq	1bc009c <startup-0x1e43ff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000c10 	andcs	r0, r0, r0, lsl ip
  9c:	00000168 	andeq	r0, r0, r8, ror #2
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000034 	andcs	r0, r0, r4, lsr r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000098 	muleq	r0, r8, r0
   4:	00690002 	rsbeq	r0, r9, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
  20:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; fffffe88 <key+0xdffff104>
  24:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  28:	2f373130 	svccs	0x00373130
  2c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
  30:	30544144 	subscc	r4, r4, r4, asr #2
  34:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff78 <key+0xdffff1f4>
  38:	20736261 	rsbscs	r6, r3, r1, ror #4
  3c:	20646e61 	rsbcs	r6, r4, r1, ror #28
  40:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
  44:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
  48:	70732f73 	rsbsvc	r2, r3, r3, ror pc
  4c:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  50:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  54:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
  58:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
  5c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
  60:	00657275 	rsbeq	r7, r5, r5, ror r2
  64:	61747300 	cmnvs	r4, r0, lsl #6
  68:	70757472 	rsbsvc	r7, r5, r2, ror r4
  6c:	0100632e 	tsteq	r0, lr, lsr #6
  70:	00000000 	andeq	r0, r0, r0
  74:	00000205 	andeq	r0, r0, r5, lsl #4
  78:	0b032000 	bleq	c8080 <startup-0x1ff37f80>
  7c:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  80:	01010003 	tsteq	r1, r3
  84:	10020500 	andne	r0, r2, r0, lsl #10
  88:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  8c:	3f2f0114 	svccc	0x002f0114
  90:	2f2e0903 	svccs	0x002e0903
  94:	02302f2f 	eorseq	r2, r0, #47, 30	; 0xbc
  98:	01010003 	tsteq	r1, r3
  9c:	000000c5 	andeq	r0, r0, r5, asr #1
  a0:	007e0002 	rsbseq	r0, lr, r2
  a4:	01020000 	mrseq	r0, (UNDEF: 2)
  a8:	000d0efb 	strdeq	r0, [sp], -fp
  ac:	01010101 	tsteq	r1, r1, lsl #2
  b0:	01000000 	mrseq	r0, (UNDEF: 0)
  b4:	43010000 	movwmi	r0, #4096	; 0x1000
  b8:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
  bc:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; ffffff24 <key+0xdffff1a0>
  c0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  c4:	2f373130 	svccs	0x00373130
  c8:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
  cc:	30544144 	subscc	r4, r4, r4, asr #2
  d0:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; 14 <startup-0x1fffffec>
  d4:	20736261 	rsbscs	r6, r3, r1, ror #4
  d8:	20646e61 	rsbcs	r6, r4, r1, ror #28
  dc:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
  e0:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
  e4:	70732f73 	rsbsvc	r2, r3, r3, ror pc
  e8:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  ec:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  f0:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
  f4:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
  f8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
  fc:	00657275 	rsbeq	r7, r5, r5, ror r2
 100:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 104:	695f7961 	ldmdbvs	pc, {r0, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
 108:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 10c:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
 110:	0100632e 	tsteq	r0, lr, lsr #6
 114:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
 118:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
 11c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 120:	00000001 	andeq	r0, r0, r1
 124:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
 128:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
 12c:	2f3e2f2f 	svccs	0x003e2f2f
 130:	2f5a3d3d 	svccs	0x005a3d3d
 134:	2f683d3d 	svccs	0x00683d3d
 138:	4e303e3d 	mrcmi	14, 1, r3, cr0, cr13, {1}
 13c:	3d3d4b68 	vldmdbcc	sp!, {d4-<overflow reg d55>}
 140:	25383d3d 	ldrcs	r3, [r8, #-3389]!	; 0xfffff2c3
 144:	3d3d4ba0 	vldmdbcc	sp!, {d4-d19}
 148:	25383d3d 	ldrcs	r3, [r8, #-3389]!	; 0xfffff2c3
 14c:	4b3d4ba0 	blmi	f52fd4 <startup-0x1f0ad02c>
 150:	2f763d3d 	svccs	0x00763d3d
 154:	3d2f763d 	stccc	6, cr7, [pc, #-244]!	; 68 <startup-0x1fffff98>
 158:	354b4b59 	strbcc	r4, [fp, #-2905]	; 0xfffff4a7
 15c:	3e1e331b 	mrccc	3, 0, r3, cr14, cr11, {0}
 160:	01000b02 	tsteq	r0, r2, lsl #22
 164:	0001c301 	andeq	ip, r1, r1, lsl #6
 168:	8e000200 	cdphi	2, 0, cr0, cr0, cr0, {0}
 16c:	02000000 	andeq	r0, r0, #0
 170:	0d0efb01 	vstreq	d15, [lr, #-4]
 174:	01010100 	mrseq	r0, (UNDEF: 17)
 178:	00000001 	andeq	r0, r0, r1
 17c:	01000001 	tsteq	r0, r1
 180:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 184:	6f6f6863 	svcvs	0x006f6863
 188:	41442f6c 	cmpmi	r4, ip, ror #30
 18c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 190:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 194:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 198:	2f373130 	svccs	0x00373130
 19c:	7362614c 	cmnvc	r2, #76, 2
 1a0:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 1a4:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 1a8:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 1ac:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 1b0:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 1b4:	625f7379 	subsvs	r7, pc, #-469762047	; 0xe4000001
 1b8:	72617a69 	rsbvc	r7, r1, #430080	; 0x69000
 1bc:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
 1c0:	6e657664 	cdpvs	6, 6, cr7, cr5, cr4, {3}
 1c4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 1c8:	72670000 	rsbvc	r0, r7, #0
 1cc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1d0:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 1d4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1d8:	0100632e 	tsteq	r0, lr, lsr #6
 1dc:	70670000 	rsbvc	r0, r7, r0
 1e0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 1e4:	00000100 	andeq	r0, r0, r0, lsl #2
 1e8:	70617267 	rsbvc	r7, r1, r7, ror #4
 1ec:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 1f0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 1f4:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 1f8:	00000100 	andeq	r0, r0, r0, lsl #2
 1fc:	02050000 	andeq	r0, r5, #0
 200:	200001ac 	andcs	r0, r0, ip, lsr #3
 204:	91596714 	cmpls	r9, r4, lsl r7
 208:	67765983 	ldrbvs	r5, [r6, -r3, lsl #19]!
 20c:	5983d759 	stmibpl	r3, {r0, r3, r4, r6, r8, r9, sl, ip, lr, pc}
 210:	10036768 	andne	r6, r3, r8, ror #14
 214:	20700374 	rsbscs	r0, r0, r4, ror r3
 218:	034a1003 	movteq	r1, #40963	; 0xa003
 21c:	223d2072 	eorscs	r2, sp, #114	; 0x72
 220:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 224:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 228:	3f3e3f4c 	svccc	0x003e3f4c
 22c:	3d323d3d 	ldccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 230:	313d4b30 	teqcc	sp, r0, lsr fp
 234:	4a770367 	bmi	1dc0fd8 <startup-0x1e23f028>
 238:	25200a03 	strcs	r0, [r0, #-2563]!	; 0xfffff5fd
 23c:	68a03d3e 	stmiavs	r0!, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 240:	593e3e3f 	ldmdbpl	lr!, {r0, r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 244:	5a313d30 	bpl	c4f70c <startup-0x1f3b08f4>
 248:	3d593e3f 	ldclcc	14, cr3, [r9, #-252]	; 0xffffff04
 24c:	033d5930 	teqeq	sp, #48, 18	; 0xc0000
 250:	ae3d2e0b 	cdpge	14, 3, cr2, cr13, cr11, {0}
 254:	30594b92 			; <UNDEFINED> instruction: 0x30594b92
 258:	593f2f3d 	ldmdbpl	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
 25c:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 260:	3d3f3d32 	ldccc	13, cr3, [pc, #-200]!	; 1a0 <startup-0x1ffffe60>
 264:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
 268:	914c833d 	cmpls	ip, sp, lsr r3
 26c:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 270:	59674c83 	stmdbpl	r7!, {r0, r1, r7, sl, fp, lr}^
 274:	3e2f4c67 	cdpcc	12, 2, cr4, cr15, cr7, {3}
 278:	3e3d3e3e 	mrccc	14, 1, r3, cr13, cr14, {1}
 27c:	4b4b4b3e 	blmi	12d2f7c <startup-0x1ed2d084>
 280:	3e3d4c4b 	cdpcc	12, 3, cr4, cr13, cr11, {2}
 284:	4c9f4b3d 	fldmiaxmi	pc, {d4-d33}	;@ Deprecated
 288:	03040200 	movweq	r0, #16896	; 0x4200
 28c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 290:	02004903 	andeq	r4, r0, #49152	; 0xc000
 294:	58060104 	stmdapl	r6, {r2, r8}
 298:	02040200 	andeq	r0, r4, #0, 4
 29c:	02004606 	andeq	r4, r0, #6291456	; 0x600000
 2a0:	58060104 	stmdapl	r6, {r2, r8}
 2a4:	e64c5206 	strb	r5, [ip], -r6, lsl #4
 2a8:	01040200 	mrseq	r0, R12_usr
 2ac:	5b065806 	blpl	1962cc <startup-0x1fe69d34>
 2b0:	01040200 	mrseq	r0, R12_usr
 2b4:	5b065806 	blpl	1962d4 <startup-0x1fe69d2c>
 2b8:	01040200 	mrseq	r0, R12_usr
 2bc:	5c064a06 			; <UNDEFINED> instruction: 0x5c064a06
 2c0:	0d034bae 	vstreq	d4, [r3, #-696]	; 0xfffffd48
 2c4:	7a4b2008 	bvc	12c82ec <startup-0x1ed37d14>
 2c8:	4b764b4b 	blmi	1d92ffc <startup-0x1e26d004>
 2cc:	9fd7c969 	svcls	0x00d7c969
 2d0:	a0ae4bc9 	adcge	r4, lr, r9, asr #23
 2d4:	3c4e039f 	mcrrcc	3, 9, r0, lr, cr15
 2d8:	2d033131 	stfcss	f3, [r3, #-196]	; 0xffffff3c
 2dc:	004b5a20 	subeq	r5, fp, r0, lsr #20
 2e0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 2e4:	03040200 	movweq	r0, #16896	; 0x4200
 2e8:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 2ec:	3c060104 	stfccs	f0, [r6], {4}
 2f0:	4b4c6906 	blmi	131a710 <startup-0x1ece58f0>
 2f4:	03040200 	movweq	r0, #16896	; 0x4200
 2f8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2fc:	00c70803 	sbceq	r0, r7, r3, lsl #16
 300:	06010402 	streq	r0, [r1], -r2, lsl #8
 304:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 308:	77754b4b 	ldrbvc	r4, [r5, -fp, asr #22]!
 30c:	01040200 	mrseq	r0, R12_usr
 310:	83064a06 	movwhi	r4, #27142	; 0x6a06
 314:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
 318:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 31c:	4c4b5b83 	mcrrmi	11, 8, r5, fp, cr3
 320:	4c3d3d67 	ldcmi	13, cr3, [sp], #-412	; 0xfffffe64
 324:	023d3d30 	eorseq	r3, sp, #48, 26	; 0xc00
 328:	01010008 	tsteq	r1, r8
 32c:	00000102 	andeq	r0, r0, r2, lsl #2
 330:	00780002 	rsbseq	r0, r8, r2
 334:	01020000 	mrseq	r0, (UNDEF: 2)
 338:	000d0efb 	strdeq	r0, [sp], -fp
 33c:	01010101 	tsteq	r1, r1, lsl #2
 340:	01000000 	mrseq	r0, (UNDEF: 0)
 344:	43010000 	movwmi	r0, #4096	; 0x1000
 348:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
 34c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 1b4 <startup-0x1ffffe4c>
 350:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 354:	2f373130 	svccs	0x00373130
 358:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 35c:	30544144 	subscc	r4, r4, r4, asr #2
 360:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; 2a4 <startup-0x1ffffd5c>
 364:	20736261 	rsbscs	r6, r3, r1, ror #4
 368:	20646e61 	rsbcs	r6, r4, r1, ror #28
 36c:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 370:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 374:	70732f73 	rsbsvc	r2, r3, r3, ror pc
 378:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 37c:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 380:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
 384:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
 388:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
 38c:	00657275 	rsbeq	r7, r5, r5, ror r2
 390:	63736100 	cmnvs	r3, #0, 2
 394:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
 398:	616c7073 	smcvs	50947	; 0xc703
 39c:	00632e79 	rsbeq	r2, r3, r9, ror lr
 3a0:	67000001 	strvs	r0, [r0, -r1]
 3a4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 3a8:	00010068 	andeq	r0, r1, r8, rrx
 3ac:	05000000 	streq	r0, [r0, #-0]
 3b0:	0008d402 	andeq	sp, r8, r2, lsl #8
 3b4:	40301420 	eorsmi	r1, r0, r0, lsr #8
 3b8:	595a5a5a 	ldmdbpl	sl, {r1, r3, r4, r6, r9, fp, ip, lr}^
 3bc:	91596876 	cmpls	r9, r6, ror r8
 3c0:	59686883 	stmdbpl	r8!, {r0, r1, r7, fp, sp, lr}^
 3c4:	686884ad 	stmdavs	r8!, {r0, r2, r3, r5, r7, sl, pc}^
 3c8:	4c593f3d 	mrrcmi	15, 3, r3, r9, cr13
 3cc:	593f3d68 	ldmdbpl	pc!, {r3, r5, r6, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
 3d0:	3d693f4c 	stclcc	15, cr3, [r9, #-304]!	; 0xfffffed0
 3d4:	2f685b3e 	svccs	0x00685b3e
 3d8:	3d693f84 	stclcc	15, cr3, [r9, #-528]!	; 0xfffffdf0
 3dc:	2f685b3f 	svccs	0x00685b3f
 3e0:	4d3f6884 	ldcmi	8, cr6, [pc, #-528]!	; 1d8 <startup-0x1ffffe28>
 3e4:	40683d31 	rsbmi	r3, r8, r1, lsr sp
 3e8:	3e4d313f 	mcrcc	1, 2, r3, cr13, cr15, {1}
 3ec:	00ae762f 	adceq	r7, lr, pc, lsr #12
 3f0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3f4:	3f670620 	svccc	0x00670620
 3f8:	1e4e4b5b 	vmovne.8	d14[2], r4
 3fc:	3d684c4c 	stclcc	12, cr4, [r8, #-304]!	; 0xfffffed0
 400:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
 404:	06200601 	strteq	r0, [r0], -r1, lsl #12
 408:	3d5b3f67 	ldclcc	15, cr3, [fp, #-412]	; 0xfffffe64
 40c:	02005a4c 	andeq	r5, r0, #76, 20	; 0x4c000
 410:	3c060104 	stfccs	f0, [r6], {4}
 414:	02004006 	andeq	r4, r0, #6
 418:	3c060104 	stfccs	f0, [r6], {4}
 41c:	3d674106 	stfcce	f4, [r7, #-24]!	; 0xffffffe8
 420:	c8720378 	ldmdagt	r2!, {r3, r4, r5, r6, r8, r9}^
 424:	200b0332 	andcs	r0, fp, r2, lsr r3
 428:	73214c3e 			; <UNDEFINED> instruction: 0x73214c3e
 42c:	0004024d 	andeq	r0, r4, sp, asr #4
 430:	00de0101 	sbcseq	r0, lr, r1, lsl #2
 434:	00020000 	andeq	r0, r2, r0
 438:	0000007e 	andeq	r0, r0, lr, ror r0
 43c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 440:	0101000d 	tsteq	r1, sp
 444:	00000101 	andeq	r0, r0, r1, lsl #2
 448:	00000100 	andeq	r0, r0, r0, lsl #2
 44c:	2f3a4301 	svccs	0x003a4301
 450:	6f686353 	svcvs	0x00686353
 454:	442f6c6f 	strtmi	r6, [pc], #-3183	; 45c <startup-0x1ffffba4>
 458:	31305441 	teqcc	r0, r1, asr #8
 45c:	6f4d2f37 	svcvs	0x004d2f37
 460:	41442d70 	hvcmi	17104	; 0x42d0
 464:	37313054 			; <UNDEFINED> instruction: 0x37313054
 468:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 46c:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 470:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 474:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 478:	2f736573 	svccs	0x00736573
 47c:	6f6f7073 	svcvs	0x006f7073
 480:	5f737970 	svcpl	0x00737970
 484:	617a6962 	cmnvs	sl, r2, ror #18
 488:	5f657272 	svcpl	0x00657272
 48c:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 490:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 494:	6b000065 	blvs	630 <startup-0x1ffff9d0>
 498:	61707965 	cmnvs	r0, r5, ror #18
 49c:	00632e64 	rsbeq	r2, r3, r4, ror #28
 4a0:	67000001 	strvs	r0, [r0, -r1]
 4a4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 4a8:	00010068 	andeq	r0, r1, r8, rrx
 4ac:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 4b0:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 4b4:	00010068 	andeq	r0, r1, r8, rrx
 4b8:	05000000 	streq	r0, [r0, #-0]
 4bc:	000c1002 	andeq	r1, ip, r2
 4c0:	3d2f1420 	cfstrscc	mvf1, [pc, #-128]!	; 448 <startup-0x1ffffbb8>
 4c4:	75674b67 	strbvc	r4, [r7, #-2919]!	; 0xfffff499
 4c8:	4c3f7659 	ldcmi	6, cr7, [pc], #-356	; 36c <startup-0x1ffffc94>
 4cc:	3d4b5959 	vstrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
 4d0:	02040200 	andeq	r0, r4, #0, 4
 4d4:	00ac7a03 	adceq	r7, ip, r3, lsl #20
 4d8:	06010402 	streq	r0, [r1], -r2, lsl #8
 4dc:	0a030658 	beq	c1e44 <startup-0x1ff3e1bc>
 4e0:	68213d4a 	stmdavs	r1!, {r1, r3, r6, r8, sl, fp, ip, sp}
 4e4:	4b4b9167 	blmi	12e4a88 <startup-0x1ed1b578>
 4e8:	924c4b4b 	subls	r4, ip, #76800	; 0x12c00
 4ec:	02004b3f 	andeq	r4, r0, #64512	; 0xfc00
 4f0:	58060104 	stmdapl	r6, {r2, r8}
 4f4:	02002f06 	andeq	r2, r0, #6, 30
 4f8:	58060104 	stmdapl	r6, {r2, r8}
 4fc:	02002f06 	andeq	r2, r0, #6, 30
 500:	58060104 	stmdapl	r6, {r2, r8}
 504:	02002f06 	andeq	r2, r0, #6, 30
 508:	58060104 	stmdapl	r6, {r2, r8}
 50c:	02212f06 	eoreq	r2, r1, #6, 30
 510:	01010006 	tsteq	r1, r6

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
   4:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
   8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
   c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  10:	72670074 	rsbvc	r0, r7, #116	; 0x74
  14:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  18:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  1c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  20:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  24:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
  28:	2074726f 	rsbscs	r7, r4, pc, ror #4
  2c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  30:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  34:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  38:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  3c:	695f7961 	ldmdbvs	pc, {r0, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
  40:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  44:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
  48:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  4c:	70610074 	rsbvc	r0, r1, r4, ror r0
  50:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
  54:	73007469 	movwvc	r7, #1129	; 0x469
  58:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  5c:	47007075 	smlsdxmi	r0, r5, r0, r7
  60:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  64:	36203939 			; <UNDEFINED> instruction: 0x36203939
  68:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  6c:	31303220 	teqcc	r0, r0, lsr #4
  70:	31323037 	teqcc	r2, r7, lsr r0
  74:	72282035 	eorvc	r2, r8, #53	; 0x35
  78:	61656c65 	cmnvs	r5, r5, ror #24
  7c:	20296573 	eorcs	r6, r9, r3, ror r5
  80:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  84:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  88:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  8c:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  90:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  94:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  98:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  9c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  a0:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  a4:	205d3231 	subscs	r3, sp, r1, lsr r2
  a8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  ac:	20626d75 	rsbcs	r6, r2, r5, ror sp
  b0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  b4:	613d6863 	teqvs	sp, r3, ror #16
  b8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  bc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  c0:	6f6c666d 	svcvs	0x006c666d
  c4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  c8:	733d6962 	teqvc	sp, #1605632	; 0x188000
  cc:	2074666f 	rsbscs	r6, r4, pc, ror #12
  d0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d4:	20626d75 	rsbcs	r6, r2, r5, ror sp
  d8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  dc:	613d6863 	teqvs	sp, r3, ror #16
  e0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e8:	4f2d2067 	svcmi	0x002d2067
  ec:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  f0:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  f4:	75003939 	strvc	r3, [r0, #-2361]	; 0xfffff6c7
  f8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  fc:	2064656e 	rsbcs	r6, r4, lr, ror #10
 100:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 104:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 108:	3a43006e 	bcc	10c02c8 <startup-0x1ef3fd38>
 10c:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 110:	2f6c6f6f 	svccs	0x006c6f6f
 114:	30544144 	subscc	r4, r4, r4, asr #2
 118:	4d2f3731 	stcmi	7, cr3, [pc, #-196]!	; 5c <startup-0x1fffffa4>
 11c:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 120:	31305441 	teqcc	r0, r1, asr #8
 124:	614c2f37 	cmpvs	ip, r7, lsr pc
 128:	61207362 			; <UNDEFINED> instruction: 0x61207362
 12c:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 130:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 134:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 138:	6f70732f 	svcvs	0x0070732f
 13c:	7379706f 	cmnvc	r9, #111	; 0x6f
 140:	7a69625f 	bvc	1a58ac4 <startup-0x1e5a753c>
 144:	65727261 	ldrbvs	r7, [r2, #-609]!	; 0xfffffd9f
 148:	7664615f 			; <UNDEFINED> instruction: 0x7664615f
 14c:	75746e65 	ldrbvc	r6, [r4, #-3685]!	; 0xfffff19b
 150:	732f6572 			; <UNDEFINED> instruction: 0x732f6572
 154:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 158:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 15c:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 160:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 164:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
 168:	64007469 	strvs	r7, [r0], #-1129	; 0xfffffb97
 16c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 170:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 174:	6900696c 	stmdbvs	r0, {r2, r3, r5, r6, r8, fp, sp, lr}
 178:	5f74696e 	svcpl	0x0074696e
 17c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 180:	5f6b6369 	svcpl	0x006b6369
 184:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 188:	70757272 	rsbsvc	r7, r5, r2, ror r2
 18c:	61685f74 	smcvs	34292	; 0x85f4
 190:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 194:	6f630072 	svcvs	0x00630072
 198:	00746e75 	rsbseq	r6, r4, r5, ror lr
 19c:	54535953 	ldrbpl	r5, [r3], #-2387	; 0xfffff6ad
 1a0:	5f4b4349 	svcpl	0x004b4349
 1a4:	55525453 	ldrbpl	r5, [r2, #-1107]	; 0xfffffbad
 1a8:	63005443 	movwvs	r5, #1091	; 0x443
 1ac:	006c7274 	rsbeq	r7, ip, r4, ror r2
 1b0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 1b4:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xfffff08c
 1b8:	0079616c 	rsbseq	r6, r9, ip, ror #2
 1bc:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 1c0:	6f6f6863 	svcvs	0x006f6863
 1c4:	41442f6c 	cmpmi	r4, ip, ror #30
 1c8:	37313054 			; <UNDEFINED> instruction: 0x37313054
 1cc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 1d0:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 1d4:	2f373130 	svccs	0x00373130
 1d8:	7362614c 	cmnvc	r2, #76, 2
 1dc:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 1e0:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 1e4:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 1e8:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 1ec:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 1f0:	625f7379 	subsvs	r7, pc, #-469762047	; 0xe4000001
 1f4:	72617a69 	rsbvc	r7, r1, #430080	; 0x69000
 1f8:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
 1fc:	6e657664 	cdpvs	6, 6, cr7, cr5, cr4, {3}
 200:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 204:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 208:	695f7961 	ldmdbvs	pc, {r0, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
 20c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 210:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
 214:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
 218:	0064616f 	rsbeq	r6, r4, pc, ror #2
 21c:	616c6564 	cmnvs	ip, r4, ror #10
 220:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 224:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 228:	616c6564 	cmnvs	ip, r4, ror #10
 22c:	30355f79 	eorscc	r5, r5, r9, ror pc
 230:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 234:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 238:	72696854 	rsbvc	r6, r9, #84, 16	; 0x540000
 23c:	74794264 	ldrbtvc	r4, [r9], #-612	; 0xfffffd9c
 240:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 244:	5f79616c 	svcpl	0x0079616c
 248:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 24c:	00726574 	rsbseq	r6, r2, r4, ror r5
 250:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 254:	73726946 	cmnvc	r2, #1146880	; 0x118000
 258:	74794274 	ldrbtvc	r4, [r9], #-628	; 0xfffffd8c
 25c:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
 260:	76726573 			; <UNDEFINED> instruction: 0x76726573
 264:	00316465 	eorseq	r6, r1, r5, ror #8
 268:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
 26c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 270:	735f0032 	cmpvc	pc, #50	; 0x32
 274:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 278:	64006b63 	strvs	r6, [r0], #-2915	; 0xfffff49d
 27c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 280:	696d315f 	stmdbvs	sp!, {r0, r1, r2, r3, r4, r6, r8, ip, sp}^
 284:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 288:	736c7570 	cmnvc	ip, #112, 10	; 0x1c000000
 28c:	64007365 	strvs	r7, [r0], #-869	; 0xfffffc9b
 290:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 294:	696d315f 	stmdbvs	sp!, {r0, r1, r2, r3, r4, r6, r8, ip, sp}^
 298:	006f726b 	rsbeq	r7, pc, fp, ror #4
 29c:	616c6564 	cmnvs	ip, r4, ror #10
 2a0:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2a4:	006f726b 	rsbeq	r7, pc, fp, ror #4
 2a8:	696c6163 	stmdbvs	ip!, {r0, r1, r5, r6, r8, sp, lr}^
 2ac:	79730062 	ldmdbvc	r3!, {r1, r5, r6}^
 2b0:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
 2b4:	6c665f6b 	stclvs	15, cr5, [r6], #-428	; 0xfffffe54
 2b8:	50006761 	andpl	r6, r0, r1, ror #14
 2bc:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 1a8 <startup-0x1ffffe58>
 2c0:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 2c4:	70675f00 	rsbvc	r5, r7, r0, lsl #30
 2c8:	67006f69 	strvs	r6, [r0, -r9, ror #30]
 2cc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2d0:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2d4:	5f6c7274 	svcpl	0x006c7274
 2d8:	5f746962 	svcpl	0x00746962
 2dc:	00746573 	rsbseq	r6, r4, r3, ror r5
 2e0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 2e4:	7300785f 	movwvc	r7, #2143	; 0x85f
 2e8:	5f657a69 	svcpl	0x00657a69
 2ec:	72640079 	rsbvc	r0, r4, #121	; 0x79
 2f0:	6f5f7761 	svcvs	0x005f7761
 2f4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2f8:	72640074 	rsbvc	r0, r4, #116	; 0x74
 2fc:	6d007761 	stcvs	7, cr7, [r0, #-388]	; 0xfffffe7c
 300:	0065766f 	rsbeq	r7, r5, pc, ror #12
 304:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 308:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 30c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 310:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 314:	6f700072 	svcvs	0x00700072
 318:	00795f73 	rsbseq	r5, r9, r3, ror pc
 31c:	5f726964 	svcpl	0x00726964
 320:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
 324:	00795f72 	rsbseq	r5, r9, r2, ror pc
 328:	7079746f 	rsbsvc	r7, r9, pc, ror #8
 32c:	67007265 	strvs	r7, [r0, -r5, ror #4]
 330:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 334:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 338:	5f646165 	svcpl	0x00646165
 33c:	61746164 	cmnvs	r4, r4, ror #2
 340:	67617000 	strbvs	r7, [r1, -r0]!
 344:	69700065 	ldmdbvs	r0!, {r0, r2, r5, r6}^
 348:	006c6578 	rsbeq	r6, ip, r8, ror r5
 34c:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
 350:	00686769 	rsbeq	r6, r8, r9, ror #14
 354:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 358:	5000746e 	andpl	r7, r0, lr, ror #8
 35c:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 360:	615f7800 	cmpvs	pc, r0, lsl #16
 364:	61757463 	cmnvs	r5, r3, ror #8
 368:	6573006c 	ldrbvs	r0, [r3, #-108]!	; 0xffffff94
 36c:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 370:	00646565 	rsbeq	r6, r4, r5, ror #10
 374:	70617267 	rsbvc	r7, r1, r7, ror #4
 378:	5f636968 	svcpl	0x00636968
 37c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 380:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
 384:	4700706d 	strmi	r7, [r0, -sp, rrx]
 388:	004f4950 	subeq	r4, pc, r0, asr r9	; <UNPREDICTABLE>
 38c:	70617267 	rsbvc	r7, r1, r7, ror #4
 390:	5f636968 	svcpl	0x00636968
 394:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 398:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 39c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 3a0:	63007261 	movwvs	r7, #609	; 0x261
 3a4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 3a8:	725f6c6f 	subsvc	r6, pc, #28416	; 0x6f00
 3ac:	73696765 	cmnvc	r9, #26476544	; 0x1940000
 3b0:	00726574 	rsbseq	r6, r2, r4, ror r5
 3b4:	70617267 	rsbvc	r7, r1, r7, ror #4
 3b8:	5f636968 	svcpl	0x00636968
 3bc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 3c0:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 3c4:	7000657a 	andvc	r6, r0, sl, ror r5
 3c8:	72647075 	rsbvc	r7, r4, #117	; 0x75
 3cc:	2f3a4300 	svccs	0x003a4300
 3d0:	6f686353 	svcvs	0x00686353
 3d4:	442f6c6f 	strtmi	r6, [pc], #-3183	; 3dc <startup-0x1ffffc24>
 3d8:	31305441 	teqcc	r0, r1, asr #8
 3dc:	6f4d2f37 	svcvs	0x004d2f37
 3e0:	41442d70 	hvcmi	17104	; 0x42d0
 3e4:	37313054 			; <UNDEFINED> instruction: 0x37313054
 3e8:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 3ec:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 3f0:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 3f4:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 3f8:	2f736573 	svccs	0x00736573
 3fc:	6f6f7073 	svcvs	0x006f7073
 400:	5f737970 	svcpl	0x00737970
 404:	617a6962 	cmnvs	sl, r2, ror #18
 408:	5f657272 	svcpl	0x00657272
 40c:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 410:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 414:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 418:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 41c:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 420:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 424:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
 428:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 314 <startup-0x1ffffcec>
 42c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 430:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 434:	745f3874 	ldrbvc	r3, [pc], #-2164	; 43c <startup-0x1ffffbc4>
 438:	72646f00 	rsbvc	r6, r4, #0, 30
 43c:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 440:	70736964 	rsbsvc	r6, r3, r4, ror #18
 444:	5f79616c 	svcpl	0x0079616c
 448:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
 44c:	6174735f 	cmnvs	r4, pc, asr r3
 450:	00737574 	rsbseq	r7, r3, r4, ror r5
 454:	48726469 	ldmdami	r2!, {r0, r3, r5, r6, sl, sp, lr}^
 458:	00686769 	rsbeq	r6, r8, r9, ror #14
 45c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 460:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 464:	736f7000 	cmnvc	pc, #0
 468:	6f00785f 	svcvs	0x0000785f
 46c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 470:	6d007264 	sfmvs	f7, 4, [r0, #-400]	; 0xfffffe70
 474:	006b7361 	rsbeq	r7, fp, r1, ror #6
 478:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
 47c:	6700776f 	strvs	r7, [r0, -pc, ror #14]
 480:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 484:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 488:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 48c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 490:	65730061 	ldrbvs	r0, [r3, #-97]!	; 0xffffff9f
 494:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 498:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 49c:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 4a0:	67006465 	strvs	r6, [r0, -r5, ror #8]
 4a4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 4a8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 4ac:	5f746961 	svcpl	0x00746961
 4b0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4b4:	6e690079 	mcrvs	0, 3, r0, cr9, cr9, {3}
 4b8:	00786564 	rsbseq	r6, r8, r4, ror #10
 4bc:	61656c63 	cmnvs	r5, r3, ror #24
 4c0:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 4c4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 4c8:	624f7400 	subvs	r7, pc, #0, 8
 4cc:	6f6d006a 	svcvs	0x006d006a
 4d0:	00726564 	rsbseq	r6, r2, r4, ror #10
 4d4:	70617267 	rsbvc	r7, r1, r7, ror #4
 4d8:	5f636968 	svcpl	0x00636968
 4dc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4e0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 4e4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 4e8:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
 4ec:	5f65766f 	svcpl	0x0065766f
 4f0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 4f4:	67007463 	strvs	r7, [r0, -r3, ror #8]
 4f8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 4fc:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 500:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 504:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 390 <startup-0x1ffffc70>
 508:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 50c:	424f5000 	submi	r5, pc, #0
 510:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 514:	61726700 	cmnvs	r2, r0, lsl #14
 518:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 51c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 520:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 524:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 528:	7361006e 	cmnvc	r1, #110	; 0x6e
 52c:	5f696963 	svcpl	0x00696963
 530:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 534:	6174735f 	cmnvs	r4, pc, asr r3
 538:	00737574 	rsbseq	r7, r3, r4, ror r5
 53c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 540:	65746361 	ldrbvs	r6, [r4, #-865]!	; 0xfffffc9f
 544:	6f670072 	svcvs	0x00670072
 548:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 54c:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 550:	73610065 	cmnvc	r1, #101	; 0x65
 554:	5f696963 	svcpl	0x00696963
 558:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 55c:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 560:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 564:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 568:	5f6e7275 	svcpl	0x006e7275
 56c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 570:	3a430065 	bcc	10c070c <startup-0x1ef3f8f4>
 574:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 578:	2f6c6f6f 	svccs	0x006c6f6f
 57c:	30544144 	subscc	r4, r4, r4, asr #2
 580:	4d2f3731 	stcmi	7, cr3, [pc, #-196]!	; 4c4 <startup-0x1ffffb3c>
 584:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 588:	31305441 	teqcc	r0, r1, asr #8
 58c:	614c2f37 	cmpvs	ip, r7, lsr pc
 590:	61207362 			; <UNDEFINED> instruction: 0x61207362
 594:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 598:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 59c:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 5a0:	6f70732f 	svcvs	0x0070732f
 5a4:	7379706f 	cmnvc	r9, #111	; 0x6f
 5a8:	7a69625f 	bvc	1a58f2c <startup-0x1e5a70d4>
 5ac:	65727261 	ldrbvs	r7, [r2, #-609]!	; 0xfffffd9f
 5b0:	7664615f 			; <UNDEFINED> instruction: 0x7664615f
 5b4:	75746e65 	ldrbvc	r6, [r4, #-3685]!	; 0xfffff19b
 5b8:	612f6572 			; <UNDEFINED> instruction: 0x612f6572
 5bc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 5c0:	70736964 	rsbsvc	r6, r3, r4, ror #18
 5c4:	2e79616c 	rpwcsez	f6, f1, #4.0
 5c8:	6f700063 	svcvs	0x00700063
 5cc:	635f7473 	cmpvs	pc, #1929379840	; 0x73000000
 5d0:	616d6d6f 	cmnvs	sp, pc, ror #26
 5d4:	645f646e 	ldrbvs	r6, [pc], #-1134	; 5dc <startup-0x1ffffa24>
 5d8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 5dc:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 5e4 <startup-0x1ffffa1c>
 5e0:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 5e4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5e8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 5ec:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 5f0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 5f4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 5f8:	73610072 	cmnvc	r1, #114	; 0x72
 5fc:	5f696963 	svcpl	0x00696963
 600:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 604:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 608:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 60c:	726f7000 	rsbvc	r7, pc, #0
 610:	61765f74 	cmnvs	r6, r4, ror pc
 614:	7361006c 	cmnvc	r1, #108	; 0x6c
 618:	5f696963 	svcpl	0x00696963
 61c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 620:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 624:	64610064 	strbtvs	r0, [r1], #-100	; 0xffffff9c
 628:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 62c:	73610073 	cmnvc	r1, #115	; 0x73
 630:	5f696963 	svcpl	0x00696963
 634:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 638:	61645f65 	cmnvs	r4, r5, ror #30
 63c:	61006174 	tstvs	r0, r4, ror r1
 640:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 644:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 4d0 <startup-0x1ffffb30>
 648:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 64c:	63736100 	cmnvs	r3, #0, 2
 650:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 654:	5f6c7274 	svcpl	0x006c7274
 658:	5f746962 	svcpl	0x00746962
 65c:	61656c63 	cmnvs	r5, r3, ror #24
 660:	73610072 	cmnvc	r1, #114	; 0x72
 664:	5f696963 	svcpl	0x00696963
 668:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 66c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 670:	73610061 	cmnvc	r1, #97	; 0x61
 674:	5f696963 	svcpl	0x00696963
 678:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 67c:	6f635f65 	svcvs	0x00635f65
 680:	6f72746e 	svcvs	0x0072746e
 684:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 688:	63736100 	cmnvs	r3, #0, 2
 68c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 690:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 694:	6168635f 	cmnvs	r8, pc, asr r3
 698:	656b0072 	strbvs	r0, [fp, #-114]!	; 0xffffff8e
 69c:	41006279 	tstmi	r0, r9, ror r2
 6a0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 6a4:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
 6a8:	4300776f 	movwmi	r7, #1903	; 0x76f
 6ac:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
 6b0:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 518 <startup-0x1ffffae8>
 6b4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 6b8:	2f373130 	svccs	0x00373130
 6bc:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 6c0:	30544144 	subscc	r4, r4, r4, asr #2
 6c4:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; 608 <startup-0x1ffff9f8>
 6c8:	20736261 	rsbscs	r6, r3, r1, ror #4
 6cc:	20646e61 	rsbcs	r6, r4, r1, ror #28
 6d0:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 6d4:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 6d8:	70732f73 	rsbsvc	r2, r3, r3, ror pc
 6dc:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 6e0:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 6e4:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
 6e8:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
 6ec:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
 6f0:	2f657275 	svccs	0x00657275
 6f4:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 6f8:	632e6461 			; <UNDEFINED> instruction: 0x632e6461
 6fc:	61655200 	cmnvs	r5, r0, lsl #4
 700:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; 578 <startup-0x1ffffa88>
 704:	006e6d75 	rsbeq	r6, lr, r5, ror sp

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000000a 	andeq	r0, r0, sl
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000001a 	andcs	r0, r0, sl, lsl r0
  48:	0000001a 	andeq	r0, r0, sl, lsl r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000000c 	andeq	r0, r0, ip
  5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  60:	7c020001 	stcvc	0, cr0, [r2], {1}
  64:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  68:	00000018 	andeq	r0, r0, r8, lsl r0
  6c:	00000058 	andeq	r0, r0, r8, asr r0
  70:	20000034 	andcs	r0, r0, r4, lsr r0
  74:	0000000e 	andeq	r0, r0, lr
  78:	40080e41 	andmi	r0, r8, r1, asr #28
  7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  80:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	00000058 	andeq	r0, r0, r8, asr r0
  8c:	20000042 	andcs	r0, r0, r2, asr #32
  90:	0000001a 	andeq	r0, r0, sl, lsl r0
  94:	40080e41 	andmi	r0, r8, r1, asr #28
  98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  9c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  a0:	00000018 	andeq	r0, r0, r8, lsl r0
  a4:	00000058 	andeq	r0, r0, r8, asr r0
  a8:	2000005c 	andcs	r0, r0, ip, asr r0
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  bc:	00000018 	andeq	r0, r0, r8, lsl r0
  c0:	00000058 	andeq	r0, r0, r8, asr r0
  c4:	20000078 	andcs	r0, r0, r8, ror r0
  c8:	00000010 	andeq	r0, r0, r0, lsl r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  d8:	00000018 	andeq	r0, r0, r8, lsl r0
  dc:	00000058 	andeq	r0, r0, r8, asr r0
  e0:	20000088 	andcs	r0, r0, r8, lsl #1
  e4:	00000018 	andeq	r0, r0, r8, lsl r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000058 	andeq	r0, r0, r8, asr r0
  fc:	200000a0 	andcs	r0, r0, r0, lsr #1
 100:	0000003c 	andeq	r0, r0, ip, lsr r0
 104:	40080e41 	andmi	r0, r8, r1, asr #28
 108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 10c:	100e4101 	andne	r4, lr, r1, lsl #2
 110:	00070d41 	andeq	r0, r7, r1, asr #26
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000058 	andeq	r0, r0, r8, asr r0
 11c:	200000dc 	ldrdcs	r0, [r0], -ip
 120:	0000003c 	andeq	r0, r0, ip, lsr r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	100e4101 	andne	r4, lr, r1, lsl #2
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000058 	andeq	r0, r0, r8, asr r0
 13c:	20000118 	andcs	r0, r0, r8, lsl r1
 140:	00000030 	andeq	r0, r0, r0, lsr r0
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	00000018 	andeq	r0, r0, r8, lsl r0
 158:	00000058 	andeq	r0, r0, r8, asr r0
 15c:	20000148 	andcs	r0, r0, r8, asr #2
 160:	00000018 	andeq	r0, r0, r8, lsl r0
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 170:	00000018 	andeq	r0, r0, r8, lsl r0
 174:	00000058 	andeq	r0, r0, r8, asr r0
 178:	20000160 	andcs	r0, r0, r0, ror #2
 17c:	0000004c 	andeq	r0, r0, ip, asr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 18c:	0000000c 	andeq	r0, r0, ip
 190:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 194:	7c020001 	stcvc	0, cr0, [r2], {1}
 198:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	0000018c 	andeq	r0, r0, ip, lsl #3
 1a4:	200001ac 	andcs	r0, r0, ip, lsr #3
 1a8:	00000050 	andeq	r0, r0, r0, asr r0
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	0000018c 	andeq	r0, r0, ip, lsl #3
 1c4:	200001fc 	strdcs	r0, [r0], -ip
 1c8:	00000058 	andeq	r0, r0, r8, asr r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d8:	00070d41 	andeq	r0, r7, r1, asr #26
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	0000018c 	andeq	r0, r0, ip, lsl #3
 1e4:	20000254 	andcs	r0, r0, r4, asr r2
 1e8:	0000005a 	andeq	r0, r0, sl, asr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	100e4101 	andne	r4, lr, r1, lsl #2
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	0000018c 	andeq	r0, r0, ip, lsl #3
 204:	200002ae 	andcs	r0, r0, lr, lsr #5
 208:	00000076 	andeq	r0, r0, r6, ror r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	100e4101 	andne	r4, lr, r1, lsl #2
 218:	00070d41 	andeq	r0, r7, r1, asr #26
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	0000018c 	andeq	r0, r0, ip, lsl #3
 224:	20000324 	andcs	r0, r0, r4, lsr #6
 228:	00000090 	muleq	r0, r0, r0
 22c:	40080e41 	andmi	r0, r8, r1, asr #28
 230:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 234:	180e4101 	stmdane	lr, {r0, r8, lr}
 238:	00070d41 	andeq	r0, r7, r1, asr #26
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	0000018c 	andeq	r0, r0, ip, lsl #3
 244:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
 248:	00000080 	andeq	r0, r0, r0, lsl #1
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 254:	100e4101 	andne	r4, lr, r1, lsl #2
 258:	00070d41 	andeq	r0, r7, r1, asr #26
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	0000018c 	andeq	r0, r0, ip, lsl #3
 264:	20000434 	andcs	r0, r0, r4, lsr r4
 268:	00000040 	andeq	r0, r0, r0, asr #32
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	100e4101 	andne	r4, lr, r1, lsl #2
 278:	00070d41 	andeq	r0, r7, r1, asr #26
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000018c 	andeq	r0, r0, ip, lsl #3
 284:	20000474 	andcs	r0, r0, r4, ror r4
 288:	00000046 	andeq	r0, r0, r6, asr #32
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	100e4101 	andne	r4, lr, r1, lsl #2
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000018c 	andeq	r0, r0, ip, lsl #3
 2a4:	200004ba 			; <UNDEFINED> instruction: 0x200004ba
 2a8:	0000002a 	andeq	r0, r0, sl, lsr #32
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	100e4101 	andne	r4, lr, r1, lsl #2
 2b8:	00070d41 	andeq	r0, r7, r1, asr #26
 2bc:	00000018 	andeq	r0, r0, r8, lsl r0
 2c0:	0000018c 	andeq	r0, r0, ip, lsl #3
 2c4:	200004e4 	andcs	r0, r0, r4, ror #9
 2c8:	0000005c 	andeq	r0, r0, ip, asr r0
 2cc:	40080e41 	andmi	r0, r8, r1, asr #28
 2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	0000018c 	andeq	r0, r0, ip, lsl #3
 2e0:	20000540 	andcs	r0, r0, r0, asr #10
 2e4:	00000066 	andeq	r0, r0, r6, rrx
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	100e4101 	andne	r4, lr, r1, lsl #2
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	00000020 	andeq	r0, r0, r0, lsr #32
 2fc:	0000018c 	andeq	r0, r0, ip, lsl #3
 300:	200005a6 	andcs	r0, r0, r6, lsr #11
 304:	000001a6 	andeq	r0, r0, r6, lsr #3
 308:	400c0e41 	andmi	r0, ip, r1, asr #28
 30c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 310:	018e4002 	orreq	r4, lr, r2
 314:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 318:	0000070d 	andeq	r0, r0, sp, lsl #14
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	0000018c 	andeq	r0, r0, ip, lsl #3
 324:	2000074c 	andcs	r0, r0, ip, asr #14
 328:	00000064 	andeq	r0, r0, r4, rrx
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	180e4101 	stmdane	lr, {r0, r8, lr}
 338:	00070d41 	andeq	r0, r7, r1, asr #26
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	0000018c 	andeq	r0, r0, ip, lsl #3
 344:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
 348:	00000064 	andeq	r0, r0, r4, rrx
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	180e4101 	stmdane	lr, {r0, r8, lr}
 358:	00070d41 	andeq	r0, r7, r1, asr #26
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	0000018c 	andeq	r0, r0, ip, lsl #3
 364:	20000814 	andcs	r0, r0, r4, lsl r8
 368:	00000080 	andeq	r0, r0, r0, lsl #1
 36c:	40080e41 	andmi	r0, r8, r1, asr #28
 370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 374:	100e4101 	andne	r4, lr, r1, lsl #2
 378:	00070d41 	andeq	r0, r7, r1, asr #26
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	0000018c 	andeq	r0, r0, ip, lsl #3
 384:	20000894 	mulcs	r0, r4, r8
 388:	00000020 	andeq	r0, r0, r0, lsr #32
 38c:	40080e41 	andmi	r0, r8, r1, asr #28
 390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 394:	180e4101 	stmdane	lr, {r0, r8, lr}
 398:	00070d41 	andeq	r0, r7, r1, asr #26
 39c:	00000018 	andeq	r0, r0, r8, lsl r0
 3a0:	0000018c 	andeq	r0, r0, ip, lsl #3
 3a4:	200008b4 			; <UNDEFINED> instruction: 0x200008b4
 3a8:	00000020 	andeq	r0, r0, r0, lsr #32
 3ac:	40080e41 	andmi	r0, r8, r1, asr #28
 3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3b8:	0000000c 	andeq	r0, r0, ip
 3bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 3c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3c8:	00000018 	andeq	r0, r0, r8, lsl r0
 3cc:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 3d0:	200008d4 	ldrdcs	r0, [r0], -r4
 3d4:	00000040 	andeq	r0, r0, r0, asr #32
 3d8:	40080e41 	andmi	r0, r8, r1, asr #28
 3dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 3ec:	20000914 	andcs	r0, r0, r4, lsl r9
 3f0:	00000044 	andeq	r0, r0, r4, asr #32
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 400:	00070d41 	andeq	r0, r7, r1, asr #26
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 40c:	20000958 	andcs	r0, r0, r8, asr r9
 410:	00000048 	andeq	r0, r0, r8, asr #32
 414:	40080e41 	andmi	r0, r8, r1, asr #28
 418:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 41c:	180e4101 	stmdane	lr, {r0, r8, lr}
 420:	00070d41 	andeq	r0, r7, r1, asr #26
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 42c:	200009a0 	andcs	r0, r0, r0, lsr #19
 430:	0000002a 	andeq	r0, r0, sl, lsr #32
 434:	40080e41 	andmi	r0, r8, r1, asr #28
 438:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 43c:	100e4101 	andne	r4, lr, r1, lsl #2
 440:	00070d41 	andeq	r0, r7, r1, asr #26
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 44c:	200009ca 	andcs	r0, r0, sl, asr #19
 450:	0000002a 	andeq	r0, r0, sl, lsr #32
 454:	40080e41 	andmi	r0, r8, r1, asr #28
 458:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 45c:	100e4101 	andne	r4, lr, r1, lsl #2
 460:	00070d41 	andeq	r0, r7, r1, asr #26
 464:	00000020 	andeq	r0, r0, r0, lsr #32
 468:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 46c:	200009f4 	strdcs	r0, [r0], -r4
 470:	00000048 	andeq	r0, r0, r8, asr #32
 474:	400c0e41 	andmi	r0, ip, r1, asr #28
 478:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 47c:	018e4002 	orreq	r4, lr, r2
 480:	41180e41 	tstmi	r8, r1, asr #28
 484:	0000070d 	andeq	r0, r0, sp, lsl #14
 488:	00000020 	andeq	r0, r0, r0, lsr #32
 48c:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 490:	20000a3c 	andcs	r0, r0, ip, lsr sl
 494:	00000048 	andeq	r0, r0, r8, asr #32
 498:	400c0e41 	andmi	r0, ip, r1, asr #28
 49c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4a0:	018e4002 	orreq	r4, lr, r2
 4a4:	41180e41 	tstmi	r8, r1, asr #28
 4a8:	0000070d 	andeq	r0, r0, sp, lsl #14
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 4b4:	20000a84 	andcs	r0, r0, r4, lsl #21
 4b8:	00000030 	andeq	r0, r0, r0, lsr r0
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 4d4:	20000ab4 			; <UNDEFINED> instruction: 0x20000ab4
 4d8:	00000030 	andeq	r0, r0, r0, lsr r0
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 4f4:	20000ae4 	andcs	r0, r0, r4, ror #21
 4f8:	00000056 	andeq	r0, r0, r6, asr r0
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 514:	20000b3a 	andcs	r0, r0, sl, lsr fp
 518:	00000044 	andeq	r0, r0, r4, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 534:	20000b7e 	andcs	r0, r0, lr, ror fp
 538:	00000068 	andeq	r0, r0, r8, rrx
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	180e4101 	stmdane	lr, {r0, r8, lr}
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 554:	20000be6 	andcs	r0, r0, r6, ror #23
 558:	00000028 	andeq	r0, r0, r8, lsr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000000c 	andeq	r0, r0, ip
 570:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 574:	7c020001 	stcvc	0, cr0, [r2], {1}
 578:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 57c:	00000018 	andeq	r0, r0, r8, lsl r0
 580:	0000056c 	andeq	r0, r0, ip, ror #10
 584:	20000c10 	andcs	r0, r0, r0, lsl ip
 588:	00000050 	andeq	r0, r0, r0, asr r0
 58c:	40080e41 	andmi	r0, r8, r1, asr #28
 590:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 594:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 598:	0000001c 	andeq	r0, r0, ip, lsl r0
 59c:	0000056c 	andeq	r0, r0, ip, ror #10
 5a0:	20000c60 	andcs	r0, r0, r0, ror #24
 5a4:	0000006c 	andeq	r0, r0, ip, rrx
 5a8:	40080e41 	andmi	r0, r8, r1, asr #28
 5ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b0:	100e4101 	andne	r4, lr, r1, lsl #2
 5b4:	00070d41 	andeq	r0, r7, r1, asr #26
 5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5bc:	0000056c 	andeq	r0, r0, ip, ror #10
 5c0:	20000ccc 	andcs	r0, r0, ip, asr #25
 5c4:	00000058 	andeq	r0, r0, r8, asr r0
 5c8:	40080e41 	andmi	r0, r8, r1, asr #28
 5cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5d0:	100e4101 	andne	r4, lr, r1, lsl #2
 5d4:	00070d41 	andeq	r0, r7, r1, asr #26
 5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5dc:	0000056c 	andeq	r0, r0, ip, ror #10
 5e0:	20000d24 	andcs	r0, r0, r4, lsr #26
 5e4:	00000054 	andeq	r0, r0, r4, asr r0
 5e8:	40080e41 	andmi	r0, r8, r1, asr #28
 5ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5f0:	100e4101 	andne	r4, lr, r1, lsl #2
 5f4:	00070d41 	andeq	r0, r7, r1, asr #26
