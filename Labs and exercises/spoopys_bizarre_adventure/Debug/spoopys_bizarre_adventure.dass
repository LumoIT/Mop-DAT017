
./Debug/spoopys_bizarre_adventure.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );
void app_init(void);

void startup ( void ){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:

void main(void){
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
    keyboard_init();
20000016:	f000 fe43 	bl	20000ca0 <keyboard_init>
    sprites_init();
2000001a:	f000 fef5 	bl	20000e08 <sprites_init>
	
    extern OBJECT spoopy;
    extern OBJECT portal;
	POBJECT p = &spoopy;
2000001e:	4b21      	ldr	r3, [pc, #132]	; (200000a4 <main+0x94>)
20000020:	607b      	str	r3, [r7, #4]
	
	uint8_t keyboard_val;
	while(1){
		p->move(p);
20000022:	687b      	ldr	r3, [r7, #4]
20000024:	69db      	ldr	r3, [r3, #28]
20000026:	687a      	ldr	r2, [r7, #4]
20000028:	0010      	movs	r0, r2
2000002a:	4798      	blx	r3
		graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000002c:	2118      	movs	r1, #24
2000002e:	203f      	movs	r0, #63	; 0x3f
20000030:	f000 fa48 	bl	200004c4 <graphic_write_command>
		graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000034:	2118      	movs	r1, #24
20000036:	20c0      	movs	r0, #192	; 0xc0
20000038:	f000 fa44 	bl	200004c4 <graphic_write_command>
		keyboard_val = keyb();
2000003c:	f000 fe58 	bl	20000cf0 <keyb>
20000040:	0002      	movs	r2, r0
20000042:	1cfb      	adds	r3, r7, #3
20000044:	701a      	strb	r2, [r3, #0]
		switch (keyboard_val){
20000046:	1cfb      	adds	r3, r7, #3
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	2b04      	cmp	r3, #4
2000004c:	d00f      	beq.n	2000006e <main+0x5e>
2000004e:	dc02      	bgt.n	20000056 <main+0x46>
20000050:	2b02      	cmp	r3, #2
20000052:	d014      	beq.n	2000007e <main+0x6e>
20000054:	e022      	b.n	2000009c <main+0x8c>
20000056:	2b06      	cmp	r3, #6
20000058:	d002      	beq.n	20000060 <main+0x50>
2000005a:	2b08      	cmp	r3, #8
2000005c:	d017      	beq.n	2000008e <main+0x7e>
2000005e:	e01d      	b.n	2000009c <main+0x8c>
			case 6: p->set_speed(p, 2, 0); break;
20000060:	687b      	ldr	r3, [r7, #4]
20000062:	6a1b      	ldr	r3, [r3, #32]
20000064:	6878      	ldr	r0, [r7, #4]
20000066:	2200      	movs	r2, #0
20000068:	2102      	movs	r1, #2
2000006a:	4798      	blx	r3
2000006c:	e016      	b.n	2000009c <main+0x8c>
			case 4: p->set_speed(p, -2, 0); break;
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	6a1b      	ldr	r3, [r3, #32]
20000072:	2202      	movs	r2, #2
20000074:	4251      	negs	r1, r2
20000076:	6878      	ldr	r0, [r7, #4]
20000078:	2200      	movs	r2, #0
2000007a:	4798      	blx	r3
2000007c:	e00e      	b.n	2000009c <main+0x8c>
			case 2: p->set_speed(p, 0, -2); break;
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	6a1b      	ldr	r3, [r3, #32]
20000082:	2202      	movs	r2, #2
20000084:	4252      	negs	r2, r2
20000086:	6878      	ldr	r0, [r7, #4]
20000088:	2100      	movs	r1, #0
2000008a:	4798      	blx	r3
2000008c:	e006      	b.n	2000009c <main+0x8c>
			case 8: p->set_speed(p, 0, 2); break;
2000008e:	687b      	ldr	r3, [r7, #4]
20000090:	6a1b      	ldr	r3, [r3, #32]
20000092:	6878      	ldr	r0, [r7, #4]
20000094:	2202      	movs	r2, #2
20000096:	2100      	movs	r1, #0
20000098:	4798      	blx	r3
2000009a:	46c0      	nop			; (mov r8, r8)
		}
		delay_milli(40);
2000009c:	2028      	movs	r0, #40	; 0x28
2000009e:	f000 f865 	bl	2000016c <delay_milli>
	while(1){
200000a2:	e7be      	b.n	20000022 <main+0x12>
200000a4:	20001060 	andcs	r1, r0, r0, rrx

200000a8 <app_init>:
	}
}


void app_init(void){
200000a8:	b580      	push	{r7, lr}
200000aa:	af00      	add	r7, sp, #0
		" LDR R0, =0x08000209\n"
		" BLX R0\n"
		);
#endif

    asciidisplay_init();
200000ac:	f000 fc5a 	bl	20000964 <asciidisplay_init>
    graphicdisplay_init();
200000b0:	f000 fc48 	bl	20000944 <graphicdisplay_init>
    delay_interrupt_init();
200000b4:	f000 f806 	bl	200000c4 <delay_interrupt_init>
    keyboard_init();
200000b8:	f000 fdf2 	bl	20000ca0 <keyboard_init>
    
}
200000bc:	46c0      	nop			; (mov r8, r8)
200000be:	46bd      	mov	sp, r7
200000c0:	bd80      	pop	{r7, pc}
200000c2:	46c0      	nop			; (mov r8, r8)

200000c4 <delay_interrupt_init>:

volatile int systick_flag = 1;
static volatile int delay_counter = 0;
static int mikro;

void delay_interrupt_init(void){
200000c4:	b580      	push	{r7, lr}
200000c6:	af00      	add	r7, sp, #0
    init_systick_interrupt_handler();
200000c8:	f000 f886 	bl	200001d8 <init_systick_interrupt_handler>
}
200000cc:	46c0      	nop			; (mov r8, r8)
200000ce:	46bd      	mov	sp, r7
200000d0:	bd80      	pop	{r7, pc}

200000d2 <delay_250ns>:

void delay_250ns(void){
200000d2:	b580      	push	{r7, lr}
200000d4:	af00      	add	r7, sp, #0
    systick_flag = 0;
200000d6:	4b04      	ldr	r3, [pc, #16]	; (200000e8 <delay_250ns+0x16>)
200000d8:	2200      	movs	r2, #0
200000da:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 4);   
200000dc:	202a      	movs	r0, #42	; 0x2a
200000de:	f000 f863 	bl	200001a8 <start_delay>
}
200000e2:	46c0      	nop			; (mov r8, r8)
200000e4:	46bd      	mov	sp, r7
200000e6:	bd80      	pop	{r7, pc}
200000e8:	20001164 	andcs	r1, r0, r4, ror #2

200000ec <delay_500ns>:

void delay_500ns(void){
200000ec:	b580      	push	{r7, lr}
200000ee:	af00      	add	r7, sp, #0
    systick_flag = 0;
200000f0:	4b04      	ldr	r3, [pc, #16]	; (20000104 <delay_500ns+0x18>)
200000f2:	2200      	movs	r2, #0
200000f4:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 2);   
200000f6:	2054      	movs	r0, #84	; 0x54
200000f8:	f000 f856 	bl	200001a8 <start_delay>
}
200000fc:	46c0      	nop			; (mov r8, r8)
200000fe:	46bd      	mov	sp, r7
20000100:	bd80      	pop	{r7, pc}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	20001164 	andcs	r1, r0, r4, ror #2

20000108 <delay_1mikro>:

void delay_1mikro(void){
20000108:	b580      	push	{r7, lr}
2000010a:	af00      	add	r7, sp, #0
    start_delay(MIKRO_SECOND_PULSES);
2000010c:	20a8      	movs	r0, #168	; 0xa8
2000010e:	f000 f84b 	bl	200001a8 <start_delay>
}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	46bd      	mov	sp, r7
20000116:	bd80      	pop	{r7, pc}

20000118 <delay_1milli>:

void delay_1milli(void){
20000118:	b580      	push	{r7, lr}
2000011a:	af00      	add	r7, sp, #0
#ifndef SIMULATOR
    start_delay(MIKRO_SECOND_PULSES * 1000);
2000011c:	4b03      	ldr	r3, [pc, #12]	; (2000012c <delay_1milli+0x14>)
2000011e:	0018      	movs	r0, r3
20000120:	f000 f842 	bl	200001a8 <start_delay>
#else
    start_delay(MIKRO_SECOND_PULSES);
#endif
}
20000124:	46c0      	nop			; (mov r8, r8)
20000126:	46bd      	mov	sp, r7
20000128:	bd80      	pop	{r7, pc}
2000012a:	46c0      	nop			; (mov r8, r8)
2000012c:	00029040 	andeq	r9, r2, r0, asr #32

20000130 <delay_mikro>:

void delay_mikro(unsigned int count){
20000130:	b580      	push	{r7, lr}
20000132:	b082      	sub	sp, #8
20000134:	af00      	add	r7, sp, #0
20000136:	6078      	str	r0, [r7, #4]
    if(count == 0)return;
20000138:	687b      	ldr	r3, [r7, #4]
2000013a:	2b00      	cmp	r3, #0
2000013c:	d00b      	beq.n	20000156 <delay_mikro+0x26>
    delay_counter = count;
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	4b07      	ldr	r3, [pc, #28]	; (20000160 <delay_mikro+0x30>)
20000142:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
20000144:	4b07      	ldr	r3, [pc, #28]	; (20000164 <delay_mikro+0x34>)
20000146:	2200      	movs	r2, #0
20000148:	601a      	str	r2, [r3, #0]
    mikro = 1;
2000014a:	4b07      	ldr	r3, [pc, #28]	; (20000168 <delay_mikro+0x38>)
2000014c:	2201      	movs	r2, #1
2000014e:	601a      	str	r2, [r3, #0]
    delay_1mikro();
20000150:	f7ff ffda 	bl	20000108 <delay_1mikro>
20000154:	e000      	b.n	20000158 <delay_mikro+0x28>
    if(count == 0)return;
20000156:	46c0      	nop			; (mov r8, r8)
}
20000158:	46bd      	mov	sp, r7
2000015a:	b002      	add	sp, #8
2000015c:	bd80      	pop	{r7, pc}
2000015e:	46c0      	nop			; (mov r8, r8)
20000160:	20001034 	andcs	r1, r0, r4, lsr r0
20000164:	20001164 	andcs	r1, r0, r4, ror #2
20000168:	20001038 	andcs	r1, r0, r8, lsr r0

2000016c <delay_milli>:

void delay_milli(unsigned int count){
2000016c:	b580      	push	{r7, lr}
2000016e:	b082      	sub	sp, #8
20000170:	af00      	add	r7, sp, #0
20000172:	6078      	str	r0, [r7, #4]
    if(count == 0) return;
20000174:	687b      	ldr	r3, [r7, #4]
20000176:	2b00      	cmp	r3, #0
20000178:	d00b      	beq.n	20000192 <delay_milli+0x26>
    delay_counter = count;
2000017a:	687a      	ldr	r2, [r7, #4]
2000017c:	4b07      	ldr	r3, [pc, #28]	; (2000019c <delay_milli+0x30>)
2000017e:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
20000180:	4b07      	ldr	r3, [pc, #28]	; (200001a0 <delay_milli+0x34>)
20000182:	2200      	movs	r2, #0
20000184:	601a      	str	r2, [r3, #0]
    mikro = 0;
20000186:	4b07      	ldr	r3, [pc, #28]	; (200001a4 <delay_milli+0x38>)
20000188:	2200      	movs	r2, #0
2000018a:	601a      	str	r2, [r3, #0]
    delay_1milli();
2000018c:	f7ff ffc4 	bl	20000118 <delay_1milli>
20000190:	e000      	b.n	20000194 <delay_milli+0x28>
    if(count == 0) return;
20000192:	46c0      	nop			; (mov r8, r8)
}
20000194:	46bd      	mov	sp, r7
20000196:	b002      	add	sp, #8
20000198:	bd80      	pop	{r7, pc}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	20001034 	andcs	r1, r0, r4, lsr r0
200001a0:	20001164 	andcs	r1, r0, r4, ror #2
200001a4:	20001038 	andcs	r1, r0, r8, lsr r0

200001a8 <start_delay>:

void start_delay(unsigned int pulses){
200001a8:	b580      	push	{r7, lr}
200001aa:	b082      	sub	sp, #8
200001ac:	af00      	add	r7, sp, #0
200001ae:	6078      	str	r0, [r7, #4]
    SYSTICK.ctrl = 0;
200001b0:	4b08      	ldr	r3, [pc, #32]	; (200001d4 <start_delay+0x2c>)
200001b2:	2200      	movs	r2, #0
200001b4:	601a      	str	r2, [r3, #0]
    SYSTICK.load = pulses-1;
200001b6:	4b07      	ldr	r3, [pc, #28]	; (200001d4 <start_delay+0x2c>)
200001b8:	687a      	ldr	r2, [r7, #4]
200001ba:	3a01      	subs	r2, #1
200001bc:	605a      	str	r2, [r3, #4]
    SYSTICK.val = 0;
200001be:	4b05      	ldr	r3, [pc, #20]	; (200001d4 <start_delay+0x2c>)
200001c0:	2200      	movs	r2, #0
200001c2:	609a      	str	r2, [r3, #8]
    SYSTICK.ctrlFirstByte = 7;
200001c4:	4b03      	ldr	r3, [pc, #12]	; (200001d4 <start_delay+0x2c>)
200001c6:	2207      	movs	r2, #7
200001c8:	701a      	strb	r2, [r3, #0]
}
200001ca:	46c0      	nop			; (mov r8, r8)
200001cc:	46bd      	mov	sp, r7
200001ce:	b002      	add	sp, #8
200001d0:	bd80      	pop	{r7, pc}
200001d2:	46c0      	nop			; (mov r8, r8)
200001d4:	e000e010 	and	lr, r0, r0, lsl r0

200001d8 <init_systick_interrupt_handler>:

void init_systick_interrupt_handler(void){
200001d8:	b580      	push	{r7, lr}
200001da:	af00      	add	r7, sp, #0
    *((void(**)(void))0x2001C03C) = systick_interrupt_handler;
200001dc:	4b02      	ldr	r3, [pc, #8]	; (200001e8 <init_systick_interrupt_handler+0x10>)
200001de:	4a03      	ldr	r2, [pc, #12]	; (200001ec <init_systick_interrupt_handler+0x14>)
200001e0:	601a      	str	r2, [r3, #0]
}
200001e2:	46c0      	nop			; (mov r8, r8)
200001e4:	46bd      	mov	sp, r7
200001e6:	bd80      	pop	{r7, pc}
200001e8:	2001c03c 	andcs	ip, r1, ip, lsr r0
200001ec:	200001f1 	strdcs	r0, [r0], -r1

200001f0 <systick_interrupt_handler>:

void systick_interrupt_handler(void){
200001f0:	b580      	push	{r7, lr}
200001f2:	af00      	add	r7, sp, #0
    SYSTICK.ctrl = 0;
200001f4:	4b0d      	ldr	r3, [pc, #52]	; (2000022c <systick_interrupt_handler+0x3c>)
200001f6:	2200      	movs	r2, #0
200001f8:	601a      	str	r2, [r3, #0]
    delay_counter--;
200001fa:	4b0d      	ldr	r3, [pc, #52]	; (20000230 <systick_interrupt_handler+0x40>)
200001fc:	681b      	ldr	r3, [r3, #0]
200001fe:	1e5a      	subs	r2, r3, #1
20000200:	4b0b      	ldr	r3, [pc, #44]	; (20000230 <systick_interrupt_handler+0x40>)
20000202:	601a      	str	r2, [r3, #0]
    if(delay_counter > 0){
20000204:	4b0a      	ldr	r3, [pc, #40]	; (20000230 <systick_interrupt_handler+0x40>)
20000206:	681b      	ldr	r3, [r3, #0]
20000208:	2b00      	cmp	r3, #0
2000020a:	dd09      	ble.n	20000220 <systick_interrupt_handler+0x30>
        if(mikro){
2000020c:	4b09      	ldr	r3, [pc, #36]	; (20000234 <systick_interrupt_handler+0x44>)
2000020e:	681b      	ldr	r3, [r3, #0]
20000210:	2b00      	cmp	r3, #0
20000212:	d002      	beq.n	2000021a <systick_interrupt_handler+0x2a>
            delay_1mikro();
20000214:	f7ff ff78 	bl	20000108 <delay_1mikro>
            delay_1milli();
        }
    } else {
        systick_flag = 1;
    }
20000218:	e005      	b.n	20000226 <systick_interrupt_handler+0x36>
            delay_1milli();
2000021a:	f7ff ff7d 	bl	20000118 <delay_1milli>
2000021e:	e002      	b.n	20000226 <systick_interrupt_handler+0x36>
        systick_flag = 1;
20000220:	4b05      	ldr	r3, [pc, #20]	; (20000238 <systick_interrupt_handler+0x48>)
20000222:	2201      	movs	r2, #1
20000224:	601a      	str	r2, [r3, #0]
20000226:	46c0      	nop			; (mov r8, r8)
20000228:	46bd      	mov	sp, r7
2000022a:	bd80      	pop	{r7, pc}
2000022c:	e000e010 	and	lr, r0, r0, lsl r0
20000230:	20001034 	andcs	r1, r0, r4, lsr r0
20000234:	20001038 	andcs	r1, r0, r8, lsr r0
20000238:	20001164 	andcs	r1, r0, r4, ror #2

2000023c <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"

void graphic_ctrl_bit_set(uint8_t x){
2000023c:	b580      	push	{r7, lr}
2000023e:	b084      	sub	sp, #16
20000240:	af00      	add	r7, sp, #0
20000242:	0002      	movs	r2, r0
20000244:	1dfb      	adds	r3, r7, #7
20000246:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
20000248:	4a0f      	ldr	r2, [pc, #60]	; (20000288 <graphic_ctrl_bit_set+0x4c>)
2000024a:	230f      	movs	r3, #15
2000024c:	18fb      	adds	r3, r7, r3
2000024e:	7d12      	ldrb	r2, [r2, #20]
20000250:	701a      	strb	r2, [r3, #0]
    control_register |= x;
20000252:	230f      	movs	r3, #15
20000254:	18fb      	adds	r3, r7, r3
20000256:	220f      	movs	r2, #15
20000258:	18b9      	adds	r1, r7, r2
2000025a:	1dfa      	adds	r2, r7, #7
2000025c:	7809      	ldrb	r1, [r1, #0]
2000025e:	7812      	ldrb	r2, [r2, #0]
20000260:	430a      	orrs	r2, r1
20000262:	701a      	strb	r2, [r3, #0]
	control_register &= ~B_SELECT;
20000264:	230f      	movs	r3, #15
20000266:	18fb      	adds	r3, r7, r3
20000268:	220f      	movs	r2, #15
2000026a:	18ba      	adds	r2, r7, r2
2000026c:	7812      	ldrb	r2, [r2, #0]
2000026e:	2104      	movs	r1, #4
20000270:	438a      	bics	r2, r1
20000272:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
20000274:	4a04      	ldr	r2, [pc, #16]	; (20000288 <graphic_ctrl_bit_set+0x4c>)
20000276:	230f      	movs	r3, #15
20000278:	18fb      	adds	r3, r7, r3
2000027a:	781b      	ldrb	r3, [r3, #0]
2000027c:	7513      	strb	r3, [r2, #20]
}
2000027e:	46c0      	nop			; (mov r8, r8)
20000280:	46bd      	mov	sp, r7
20000282:	b004      	add	sp, #16
20000284:	bd80      	pop	{r7, pc}
20000286:	46c0      	nop			; (mov r8, r8)
20000288:	40021000 	andmi	r1, r2, r0

2000028c <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
2000028c:	b580      	push	{r7, lr}
2000028e:	b084      	sub	sp, #16
20000290:	af00      	add	r7, sp, #0
20000292:	0002      	movs	r2, r0
20000294:	1dfb      	adds	r3, r7, #7
20000296:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
20000298:	4a11      	ldr	r2, [pc, #68]	; (200002e0 <graphic_ctrl_bit_clear+0x54>)
2000029a:	230f      	movs	r3, #15
2000029c:	18fb      	adds	r3, r7, r3
2000029e:	7d12      	ldrb	r2, [r2, #20]
200002a0:	701a      	strb	r2, [r3, #0]
    control_register &= (~x);
200002a2:	1dfb      	adds	r3, r7, #7
200002a4:	781b      	ldrb	r3, [r3, #0]
200002a6:	b25b      	sxtb	r3, r3
200002a8:	43db      	mvns	r3, r3
200002aa:	b25b      	sxtb	r3, r3
200002ac:	220f      	movs	r2, #15
200002ae:	18ba      	adds	r2, r7, r2
200002b0:	7812      	ldrb	r2, [r2, #0]
200002b2:	b252      	sxtb	r2, r2
200002b4:	4013      	ands	r3, r2
200002b6:	b25a      	sxtb	r2, r3
200002b8:	230f      	movs	r3, #15
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	701a      	strb	r2, [r3, #0]
    control_register &= ~B_SELECT;
200002be:	230f      	movs	r3, #15
200002c0:	18fb      	adds	r3, r7, r3
200002c2:	220f      	movs	r2, #15
200002c4:	18ba      	adds	r2, r7, r2
200002c6:	7812      	ldrb	r2, [r2, #0]
200002c8:	2104      	movs	r1, #4
200002ca:	438a      	bics	r2, r1
200002cc:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
200002ce:	4a04      	ldr	r2, [pc, #16]	; (200002e0 <graphic_ctrl_bit_clear+0x54>)
200002d0:	230f      	movs	r3, #15
200002d2:	18fb      	adds	r3, r7, r3
200002d4:	781b      	ldrb	r3, [r3, #0]
200002d6:	7513      	strb	r3, [r2, #20]
}
200002d8:	46c0      	nop			; (mov r8, r8)
200002da:	46bd      	mov	sp, r7
200002dc:	b004      	add	sp, #16
200002de:	bd80      	pop	{r7, pc}
200002e0:	40021000 	andmi	r1, r2, r0

200002e4 <select_controller>:

void select_controller(uint8_t controller){
200002e4:	b580      	push	{r7, lr}
200002e6:	b082      	sub	sp, #8
200002e8:	af00      	add	r7, sp, #0
200002ea:	0002      	movs	r2, r0
200002ec:	1dfb      	adds	r3, r7, #7
200002ee:	701a      	strb	r2, [r3, #0]
    switch(controller){
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	2b08      	cmp	r3, #8
200002f6:	d00c      	beq.n	20000312 <select_controller+0x2e>
200002f8:	dc02      	bgt.n	20000300 <select_controller+0x1c>
200002fa:	2b00      	cmp	r3, #0
200002fc:	d005      	beq.n	2000030a <select_controller+0x26>
            break;
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
    }
}
200002fe:	e01a      	b.n	20000336 <select_controller+0x52>
    switch(controller){
20000300:	2b10      	cmp	r3, #16
20000302:	d00d      	beq.n	20000320 <select_controller+0x3c>
20000304:	2b18      	cmp	r3, #24
20000306:	d012      	beq.n	2000032e <select_controller+0x4a>
}
20000308:	e015      	b.n	20000336 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000030a:	2018      	movs	r0, #24
2000030c:	f7ff ffbe 	bl	2000028c <graphic_ctrl_bit_clear>
            break;
20000310:	e011      	b.n	20000336 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS2);
20000312:	2010      	movs	r0, #16
20000314:	f7ff ffba 	bl	2000028c <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS1);
20000318:	2008      	movs	r0, #8
2000031a:	f7ff ff8f 	bl	2000023c <graphic_ctrl_bit_set>
            break;
2000031e:	e00a      	b.n	20000336 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000320:	2008      	movs	r0, #8
20000322:	f7ff ffb3 	bl	2000028c <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000326:	2010      	movs	r0, #16
20000328:	f7ff ff88 	bl	2000023c <graphic_ctrl_bit_set>
            break;
2000032c:	e003      	b.n	20000336 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000032e:	2018      	movs	r0, #24
20000330:	f7ff ff84 	bl	2000023c <graphic_ctrl_bit_set>
            break;
20000334:	46c0      	nop			; (mov r8, r8)
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	b002      	add	sp, #8
2000033c:	bd80      	pop	{r7, pc}

2000033e <graphic_wait_ready>:

void graphic_wait_ready(void){
2000033e:	b580      	push	{r7, lr}
20000340:	b082      	sub	sp, #8
20000342:	af00      	add	r7, sp, #0
    uint8_t display_busy_status;
    // Enable = 0
    graphic_ctrl_bit_clear(B_E);
20000344:	2040      	movs	r0, #64	; 0x40
20000346:	f7ff ffa1 	bl	2000028c <graphic_ctrl_bit_clear>
    // E: 15-8 = input, 7-0 = output
    GPIO_E.moder = 0x00005555;
2000034a:	4b17      	ldr	r3, [pc, #92]	; (200003a8 <graphic_wait_ready+0x6a>)
2000034c:	4a17      	ldr	r2, [pc, #92]	; (200003ac <graphic_wait_ready+0x6e>)
2000034e:	601a      	str	r2, [r3, #0]
    
    // RS = 0, RW = 1
    graphic_ctrl_bit_clear(B_RS);
20000350:	2001      	movs	r0, #1
20000352:	f7ff ff9b 	bl	2000028c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000356:	2002      	movs	r0, #2
20000358:	f7ff ff70 	bl	2000023c <graphic_ctrl_bit_set>
    delay_500ns();
2000035c:	f7ff fec6 	bl	200000ec <delay_500ns>
    
    while(1){
        // Enable = 1
        graphic_ctrl_bit_set(B_E);
20000360:	2040      	movs	r0, #64	; 0x40
20000362:	f7ff ff6b 	bl	2000023c <graphic_ctrl_bit_set>
        delay_500ns();
20000366:	f7ff fec1 	bl	200000ec <delay_500ns>
        // Enable = 0
		display_busy_status = GPIO_E.idrHigh;
2000036a:	4a0f      	ldr	r2, [pc, #60]	; (200003a8 <graphic_wait_ready+0x6a>)
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	7c52      	ldrb	r2, [r2, #17]
20000370:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
20000372:	2040      	movs	r0, #64	; 0x40
20000374:	f7ff ff8a 	bl	2000028c <graphic_ctrl_bit_clear>
        delay_500ns();
20000378:	f7ff feb8 	bl	200000ec <delay_500ns>
        // Exit loop if not busy
        
		display_busy_status &= LCD_BUSY;
2000037c:	1dfb      	adds	r3, r7, #7
2000037e:	1dfa      	adds	r2, r7, #7
20000380:	7812      	ldrb	r2, [r2, #0]
20000382:	217f      	movs	r1, #127	; 0x7f
20000384:	438a      	bics	r2, r1
20000386:	701a      	strb	r2, [r3, #0]
        if(display_busy_status == 0){
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	2b00      	cmp	r3, #0
2000038e:	d000      	beq.n	20000392 <graphic_wait_ready+0x54>
        graphic_ctrl_bit_set(B_E);
20000390:	e7e6      	b.n	20000360 <graphic_wait_ready+0x22>
            break;
20000392:	46c0      	nop			; (mov r8, r8)
        } 
    }
    
    // Enable = 1
    graphic_ctrl_bit_set(B_E); // Commented out to check if this works because it works for NaN
20000394:	2040      	movs	r0, #64	; 0x40
20000396:	f7ff ff51 	bl	2000023c <graphic_ctrl_bit_set>
    // E: 15-0 = output
    GPIO_E.moder = 0x55555555;
2000039a:	4b03      	ldr	r3, [pc, #12]	; (200003a8 <graphic_wait_ready+0x6a>)
2000039c:	4a04      	ldr	r2, [pc, #16]	; (200003b0 <graphic_wait_ready+0x72>)
2000039e:	601a      	str	r2, [r3, #0]
}
200003a0:	46c0      	nop			; (mov r8, r8)
200003a2:	46bd      	mov	sp, r7
200003a4:	b002      	add	sp, #8
200003a6:	bd80      	pop	{r7, pc}
200003a8:	40021000 	andmi	r1, r2, r0
200003ac:	00005555 	andeq	r5, r0, r5, asr r5
200003b0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003b4 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
200003b4:	b580      	push	{r7, lr}
200003b6:	b084      	sub	sp, #16
200003b8:	af00      	add	r7, sp, #0
200003ba:	0002      	movs	r2, r0
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	701a      	strb	r2, [r3, #0]
	//Set enable to 0
	graphic_ctrl_bit_clear(B_E);
200003c0:	2040      	movs	r0, #64	; 0x40
200003c2:	f7ff ff63 	bl	2000028c <graphic_ctrl_bit_clear>
	
	//set E to input high byte / output low byte
	GPIO_E.moder = 0x00005555;
200003c6:	4b1c      	ldr	r3, [pc, #112]	; (20000438 <graphic_read+0x84>)
200003c8:	4a1c      	ldr	r2, [pc, #112]	; (2000043c <graphic_read+0x88>)
200003ca:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_RS | B_RW);
200003cc:	2003      	movs	r0, #3
200003ce:	f7ff ff35 	bl	2000023c <graphic_ctrl_bit_set>
	
	select_controller(controller);
200003d2:	1dfb      	adds	r3, r7, #7
200003d4:	781b      	ldrb	r3, [r3, #0]
200003d6:	0018      	movs	r0, r3
200003d8:	f7ff ff84 	bl	200002e4 <select_controller>
	delay_500ns();
200003dc:	f7ff fe86 	bl	200000ec <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
200003e0:	2040      	movs	r0, #64	; 0x40
200003e2:	f7ff ff2b 	bl	2000023c <graphic_ctrl_bit_set>
	delay_500ns();
200003e6:	f7ff fe81 	bl	200000ec <delay_500ns>
	
	// set return value to what is on the data register
	uint8_t RV = GPIO_E.idrHigh;
200003ea:	4a13      	ldr	r2, [pc, #76]	; (20000438 <graphic_read+0x84>)
200003ec:	230f      	movs	r3, #15
200003ee:	18fb      	adds	r3, r7, r3
200003f0:	7c52      	ldrb	r2, [r2, #17]
200003f2:	701a      	strb	r2, [r3, #0]
	
	graphic_ctrl_bit_clear(B_E);
200003f4:	2040      	movs	r0, #64	; 0x40
200003f6:	f7ff ff49 	bl	2000028c <graphic_ctrl_bit_clear>
	
	//set E to output
	GPIO_E.moder = 0x55555555;
200003fa:	4b0f      	ldr	r3, [pc, #60]	; (20000438 <graphic_read+0x84>)
200003fc:	4a10      	ldr	r2, [pc, #64]	; (20000440 <graphic_read+0x8c>)
200003fe:	601a      	str	r2, [r3, #0]
	
	if((controller & B_CS1) != 0) {
20000400:	1dfb      	adds	r3, r7, #7
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	2208      	movs	r2, #8
20000406:	4013      	ands	r3, r2
20000408:	d004      	beq.n	20000414 <graphic_read+0x60>
		select_controller(B_CS1);
2000040a:	2008      	movs	r0, #8
2000040c:	f7ff ff6a 	bl	200002e4 <select_controller>
		graphic_wait_ready();
20000410:	f7ff ff95 	bl	2000033e <graphic_wait_ready>
	}
	if((controller & B_CS2) != 0){
20000414:	1dfb      	adds	r3, r7, #7
20000416:	781b      	ldrb	r3, [r3, #0]
20000418:	2210      	movs	r2, #16
2000041a:	4013      	ands	r3, r2
2000041c:	d004      	beq.n	20000428 <graphic_read+0x74>
		select_controller(B_CS2);
2000041e:	2010      	movs	r0, #16
20000420:	f7ff ff60 	bl	200002e4 <select_controller>
		graphic_wait_ready();
20000424:	f7ff ff8b 	bl	2000033e <graphic_wait_ready>
		//case B_CS1 | B_CS2: select_controller(B_CS1 | B_CS2); break;
		//default: select_controller(0);
	}*/
	//graphic_wait_ready();
	
	return RV;
20000428:	230f      	movs	r3, #15
2000042a:	18fb      	adds	r3, r7, r3
2000042c:	781b      	ldrb	r3, [r3, #0]
}
2000042e:	0018      	movs	r0, r3
20000430:	46bd      	mov	sp, r7
20000432:	b004      	add	sp, #16
20000434:	bd80      	pop	{r7, pc}
20000436:	46c0      	nop			; (mov r8, r8)
20000438:	40021000 	andmi	r1, r2, r0
2000043c:	00005555 	andeq	r5, r0, r5, asr r5
20000440:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000444 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000444:	b580      	push	{r7, lr}
20000446:	b082      	sub	sp, #8
20000448:	af00      	add	r7, sp, #0
2000044a:	0002      	movs	r2, r0
2000044c:	1dfb      	adds	r3, r7, #7
2000044e:	701a      	strb	r2, [r3, #0]
20000450:	1dbb      	adds	r3, r7, #6
20000452:	1c0a      	adds	r2, r1, #0
20000454:	701a      	strb	r2, [r3, #0]
	//datareg to value
	GPIO_E.odrHigh = value;
20000456:	4a1a      	ldr	r2, [pc, #104]	; (200004c0 <graphic_write+0x7c>)
20000458:	1dfb      	adds	r3, r7, #7
2000045a:	781b      	ldrb	r3, [r3, #0]
2000045c:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
2000045e:	1dbb      	adds	r3, r7, #6
20000460:	781b      	ldrb	r3, [r3, #0]
20000462:	0018      	movs	r0, r3
20000464:	f7ff ff3e 	bl	200002e4 <select_controller>
	delay_500ns();
20000468:	f7ff fe40 	bl	200000ec <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
2000046c:	2040      	movs	r0, #64	; 0x40
2000046e:	f7ff fee5 	bl	2000023c <graphic_ctrl_bit_set>
	delay_500ns();
20000472:	f7ff fe3b 	bl	200000ec <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000476:	2040      	movs	r0, #64	; 0x40
20000478:	f7ff ff08 	bl	2000028c <graphic_ctrl_bit_clear>
	
	//select actual controller, wait while we read
	if (controller & B_CS1){
2000047c:	1dbb      	adds	r3, r7, #6
2000047e:	781b      	ldrb	r3, [r3, #0]
20000480:	2208      	movs	r2, #8
20000482:	4013      	ands	r3, r2
20000484:	d004      	beq.n	20000490 <graphic_write+0x4c>
		select_controller(B_CS1);
20000486:	2008      	movs	r0, #8
20000488:	f7ff ff2c 	bl	200002e4 <select_controller>
		graphic_wait_ready();
2000048c:	f7ff ff57 	bl	2000033e <graphic_wait_ready>
	}
	if (controller & B_CS2){
20000490:	1dbb      	adds	r3, r7, #6
20000492:	781b      	ldrb	r3, [r3, #0]
20000494:	2210      	movs	r2, #16
20000496:	4013      	ands	r3, r2
20000498:	d004      	beq.n	200004a4 <graphic_write+0x60>
		select_controller(B_CS2);
2000049a:	2010      	movs	r0, #16
2000049c:	f7ff ff22 	bl	200002e4 <select_controller>
		graphic_wait_ready();
200004a0:	f7ff ff4d 	bl	2000033e <graphic_wait_ready>
	}
	
	//datareg to 0
	GPIO_E.odrHigh = 0;
200004a4:	4b06      	ldr	r3, [pc, #24]	; (200004c0 <graphic_write+0x7c>)
200004a6:	2200      	movs	r2, #0
200004a8:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
200004aa:	2040      	movs	r0, #64	; 0x40
200004ac:	f7ff fec6 	bl	2000023c <graphic_ctrl_bit_set>
	
	//set controller to 0
	select_controller(0);
200004b0:	2000      	movs	r0, #0
200004b2:	f7ff ff17 	bl	200002e4 <select_controller>
}
200004b6:	46c0      	nop			; (mov r8, r8)
200004b8:	46bd      	mov	sp, r7
200004ba:	b002      	add	sp, #8
200004bc:	bd80      	pop	{r7, pc}
200004be:	46c0      	nop			; (mov r8, r8)
200004c0:	40021000 	andmi	r1, r2, r0

200004c4 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
200004c4:	b580      	push	{r7, lr}
200004c6:	b082      	sub	sp, #8
200004c8:	af00      	add	r7, sp, #0
200004ca:	0002      	movs	r2, r0
200004cc:	1dfb      	adds	r3, r7, #7
200004ce:	701a      	strb	r2, [r3, #0]
200004d0:	1dbb      	adds	r3, r7, #6
200004d2:	1c0a      	adds	r2, r1, #0
200004d4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200004d6:	2040      	movs	r0, #64	; 0x40
200004d8:	f7ff fed8 	bl	2000028c <graphic_ctrl_bit_clear>
	select_controller(controller);
200004dc:	1dbb      	adds	r3, r7, #6
200004de:	781b      	ldrb	r3, [r3, #0]
200004e0:	0018      	movs	r0, r3
200004e2:	f7ff feff 	bl	200002e4 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200004e6:	2003      	movs	r0, #3
200004e8:	f7ff fed0 	bl	2000028c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200004ec:	1dbb      	adds	r3, r7, #6
200004ee:	781a      	ldrb	r2, [r3, #0]
200004f0:	1dfb      	adds	r3, r7, #7
200004f2:	781b      	ldrb	r3, [r3, #0]
200004f4:	0011      	movs	r1, r2
200004f6:	0018      	movs	r0, r3
200004f8:	f7ff ffa4 	bl	20000444 <graphic_write>
}
200004fc:	46c0      	nop			; (mov r8, r8)
200004fe:	46bd      	mov	sp, r7
20000500:	b002      	add	sp, #8
20000502:	bd80      	pop	{r7, pc}

20000504 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000504:	b580      	push	{r7, lr}
20000506:	b082      	sub	sp, #8
20000508:	af00      	add	r7, sp, #0
2000050a:	0002      	movs	r2, r0
2000050c:	1dfb      	adds	r3, r7, #7
2000050e:	701a      	strb	r2, [r3, #0]
20000510:	1dbb      	adds	r3, r7, #6
20000512:	1c0a      	adds	r2, r1, #0
20000514:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000516:	2040      	movs	r0, #64	; 0x40
20000518:	f7ff feb8 	bl	2000028c <graphic_ctrl_bit_clear>
	select_controller(controller);
2000051c:	1dbb      	adds	r3, r7, #6
2000051e:	781b      	ldrb	r3, [r3, #0]
20000520:	0018      	movs	r0, r3
20000522:	f7ff fedf 	bl	200002e4 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000526:	2001      	movs	r0, #1
20000528:	f7ff fe88 	bl	2000023c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
2000052c:	2002      	movs	r0, #2
2000052e:	f7ff fead 	bl	2000028c <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000532:	1dbb      	adds	r3, r7, #6
20000534:	781a      	ldrb	r2, [r3, #0]
20000536:	1dfb      	adds	r3, r7, #7
20000538:	781b      	ldrb	r3, [r3, #0]
2000053a:	0011      	movs	r1, r2
2000053c:	0018      	movs	r0, r3
2000053e:	f7ff ff81 	bl	20000444 <graphic_write>
}
20000542:	46c0      	nop			; (mov r8, r8)
20000544:	46bd      	mov	sp, r7
20000546:	b002      	add	sp, #8
20000548:	bd80      	pop	{r7, pc}

2000054a <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
2000054a:	b580      	push	{r7, lr}
2000054c:	b082      	sub	sp, #8
2000054e:	af00      	add	r7, sp, #0
20000550:	0002      	movs	r2, r0
20000552:	1dfb      	adds	r3, r7, #7
20000554:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
20000556:	1dfb      	adds	r3, r7, #7
20000558:	781b      	ldrb	r3, [r3, #0]
2000055a:	0018      	movs	r0, r3
2000055c:	f7ff ff2a 	bl	200003b4 <graphic_read>
	return graphic_read(controller);
20000560:	1dfb      	adds	r3, r7, #7
20000562:	781b      	ldrb	r3, [r3, #0]
20000564:	0018      	movs	r0, r3
20000566:	f7ff ff25 	bl	200003b4 <graphic_read>
2000056a:	0003      	movs	r3, r0
}
2000056c:	0018      	movs	r0, r3
2000056e:	46bd      	mov	sp, r7
20000570:	b002      	add	sp, #8
20000572:	bd80      	pop	{r7, pc}

20000574 <graphic_initialize>:

void graphic_initialize(void){
20000574:	b580      	push	{r7, lr}
20000576:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000578:	2040      	movs	r0, #64	; 0x40
2000057a:	f7ff fe5f 	bl	2000023c <graphic_ctrl_bit_set>
	
	delay_mikro(10);
2000057e:	200a      	movs	r0, #10
20000580:	f7ff fdd6 	bl	20000130 <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000584:	2078      	movs	r0, #120	; 0x78
20000586:	f7ff fe81 	bl	2000028c <graphic_ctrl_bit_clear>
	
	delay_milli(30);
2000058a:	201e      	movs	r0, #30
2000058c:	f7ff fdee 	bl	2000016c <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000590:	2020      	movs	r0, #32
20000592:	f7ff fe53 	bl	2000023c <graphic_ctrl_bit_set>
	
	delay_milli(100); // Added because NaN has it
20000596:	2064      	movs	r0, #100	; 0x64
20000598:	f7ff fde8 	bl	2000016c <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000059c:	2118      	movs	r1, #24
2000059e:	203e      	movs	r0, #62	; 0x3e
200005a0:	f7ff ff90 	bl	200004c4 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200005a4:	2118      	movs	r1, #24
200005a6:	203f      	movs	r0, #63	; 0x3f
200005a8:	f7ff ff8c 	bl	200004c4 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200005ac:	2118      	movs	r1, #24
200005ae:	20c0      	movs	r0, #192	; 0xc0
200005b0:	f7ff ff88 	bl	200004c4 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200005b4:	2118      	movs	r1, #24
200005b6:	2040      	movs	r0, #64	; 0x40
200005b8:	f7ff ff84 	bl	200004c4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
200005bc:	2118      	movs	r1, #24
200005be:	20b8      	movs	r0, #184	; 0xb8
200005c0:	f7ff ff80 	bl	200004c4 <graphic_write_command>
	
	select_controller(0);
200005c4:	2000      	movs	r0, #0
200005c6:	f7ff fe8d 	bl	200002e4 <select_controller>
}
200005ca:	46c0      	nop			; (mov r8, r8)
200005cc:	46bd      	mov	sp, r7
200005ce:	bd80      	pop	{r7, pc}

200005d0 <graphic_clear_screen>:

void graphic_clear_screen(void){
200005d0:	b580      	push	{r7, lr}
200005d2:	b082      	sub	sp, #8
200005d4:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++){
200005d6:	1dfb      	adds	r3, r7, #7
200005d8:	2200      	movs	r2, #0
200005da:	701a      	strb	r2, [r3, #0]
200005dc:	e023      	b.n	20000626 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
200005de:	1dfb      	adds	r3, r7, #7
200005e0:	781b      	ldrb	r3, [r3, #0]
200005e2:	2248      	movs	r2, #72	; 0x48
200005e4:	4252      	negs	r2, r2
200005e6:	4313      	orrs	r3, r2
200005e8:	b2db      	uxtb	r3, r3
200005ea:	2118      	movs	r1, #24
200005ec:	0018      	movs	r0, r3
200005ee:	f7ff ff69 	bl	200004c4 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200005f2:	2118      	movs	r1, #24
200005f4:	2040      	movs	r0, #64	; 0x40
200005f6:	f7ff ff65 	bl	200004c4 <graphic_write_command>
		
		for(uint8_t add = 0; add < 64; add++){
200005fa:	1dbb      	adds	r3, r7, #6
200005fc:	2200      	movs	r2, #0
200005fe:	701a      	strb	r2, [r3, #0]
20000600:	e008      	b.n	20000614 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000602:	2118      	movs	r1, #24
20000604:	2000      	movs	r0, #0
20000606:	f7ff ff7d 	bl	20000504 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
2000060a:	1dbb      	adds	r3, r7, #6
2000060c:	781a      	ldrb	r2, [r3, #0]
2000060e:	1dbb      	adds	r3, r7, #6
20000610:	3201      	adds	r2, #1
20000612:	701a      	strb	r2, [r3, #0]
20000614:	1dbb      	adds	r3, r7, #6
20000616:	781b      	ldrb	r3, [r3, #0]
20000618:	2b3f      	cmp	r3, #63	; 0x3f
2000061a:	d9f2      	bls.n	20000602 <graphic_clear_screen+0x32>
	for(uint8_t page = 0; page < 8; page++){
2000061c:	1dfb      	adds	r3, r7, #7
2000061e:	781a      	ldrb	r2, [r3, #0]
20000620:	1dfb      	adds	r3, r7, #7
20000622:	3201      	adds	r2, #1
20000624:	701a      	strb	r2, [r3, #0]
20000626:	1dfb      	adds	r3, r7, #7
20000628:	781b      	ldrb	r3, [r3, #0]
2000062a:	2b07      	cmp	r3, #7
2000062c:	d9d7      	bls.n	200005de <graphic_clear_screen+0xe>
		}
	}
}
2000062e:	46c0      	nop			; (mov r8, r8)
20000630:	46bd      	mov	sp, r7
20000632:	b002      	add	sp, #8
20000634:	bd80      	pop	{r7, pc}

20000636 <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
20000636:	b590      	push	{r4, r7, lr}
20000638:	b085      	sub	sp, #20
2000063a:	af00      	add	r7, sp, #0
2000063c:	0004      	movs	r4, r0
2000063e:	0008      	movs	r0, r1
20000640:	0011      	movs	r1, r2
20000642:	1dfb      	adds	r3, r7, #7
20000644:	1c22      	adds	r2, r4, #0
20000646:	701a      	strb	r2, [r3, #0]
20000648:	1dbb      	adds	r3, r7, #6
2000064a:	1c02      	adds	r2, r0, #0
2000064c:	701a      	strb	r2, [r3, #0]
2000064e:	1d7b      	adds	r3, r7, #5
20000650:	1c0a      	adds	r2, r1, #0
20000652:	701a      	strb	r2, [r3, #0]
    // Validate values for input variables
    if(x < 1 || x > 128){
20000654:	1dfb      	adds	r3, r7, #7
20000656:	781b      	ldrb	r3, [r3, #0]
20000658:	2b00      	cmp	r3, #0
2000065a:	d100      	bne.n	2000065e <pixel+0x28>
2000065c:	e0b4      	b.n	200007c8 <pixel+0x192>
2000065e:	1dfb      	adds	r3, r7, #7
20000660:	781b      	ldrb	r3, [r3, #0]
20000662:	2b80      	cmp	r3, #128	; 0x80
20000664:	d900      	bls.n	20000668 <pixel+0x32>
20000666:	e0af      	b.n	200007c8 <pixel+0x192>
        return;
    }
    if(y < 1 || y > 64){
20000668:	1dbb      	adds	r3, r7, #6
2000066a:	781b      	ldrb	r3, [r3, #0]
2000066c:	2b00      	cmp	r3, #0
2000066e:	d100      	bne.n	20000672 <pixel+0x3c>
20000670:	e0ac      	b.n	200007cc <pixel+0x196>
20000672:	1dbb      	adds	r3, r7, #6
20000674:	781b      	ldrb	r3, [r3, #0]
20000676:	2b40      	cmp	r3, #64	; 0x40
20000678:	d900      	bls.n	2000067c <pixel+0x46>
2000067a:	e0a7      	b.n	200007cc <pixel+0x196>
        return;
    }
    if(set != 1 && set != 0){
2000067c:	1d7b      	adds	r3, r7, #5
2000067e:	781b      	ldrb	r3, [r3, #0]
20000680:	2b01      	cmp	r3, #1
20000682:	d004      	beq.n	2000068e <pixel+0x58>
20000684:	1d7b      	adds	r3, r7, #5
20000686:	781b      	ldrb	r3, [r3, #0]
20000688:	2b00      	cmp	r3, #0
2000068a:	d000      	beq.n	2000068e <pixel+0x58>
2000068c:	e0a0      	b.n	200007d0 <pixel+0x19a>
        return;
    }
    
    uint8_t index = (y-1)/8;
2000068e:	1dbb      	adds	r3, r7, #6
20000690:	781b      	ldrb	r3, [r3, #0]
20000692:	3b01      	subs	r3, #1
20000694:	2b00      	cmp	r3, #0
20000696:	da00      	bge.n	2000069a <pixel+0x64>
20000698:	3307      	adds	r3, #7
2000069a:	10db      	asrs	r3, r3, #3
2000069c:	001a      	movs	r2, r3
2000069e:	230c      	movs	r3, #12
200006a0:	18fb      	adds	r3, r7, r3
200006a2:	701a      	strb	r2, [r3, #0]
    // Create mask for y, works as well as switch from book, but with less code
    uint8_t mask = 1;
200006a4:	230f      	movs	r3, #15
200006a6:	18fb      	adds	r3, r7, r3
200006a8:	2201      	movs	r2, #1
200006aa:	701a      	strb	r2, [r3, #0]
    mask = mask << ((y-1)%8);
200006ac:	230f      	movs	r3, #15
200006ae:	18fb      	adds	r3, r7, r3
200006b0:	781a      	ldrb	r2, [r3, #0]
200006b2:	1dbb      	adds	r3, r7, #6
200006b4:	781b      	ldrb	r3, [r3, #0]
200006b6:	3b01      	subs	r3, #1
200006b8:	4947      	ldr	r1, [pc, #284]	; (200007d8 <pixel+0x1a2>)
200006ba:	400b      	ands	r3, r1
200006bc:	d504      	bpl.n	200006c8 <pixel+0x92>
200006be:	3b01      	subs	r3, #1
200006c0:	2108      	movs	r1, #8
200006c2:	4249      	negs	r1, r1
200006c4:	430b      	orrs	r3, r1
200006c6:	3301      	adds	r3, #1
200006c8:	409a      	lsls	r2, r3
200006ca:	230f      	movs	r3, #15
200006cc:	18fb      	adds	r3, r7, r3
200006ce:	701a      	strb	r2, [r3, #0]
		case 6: mask = 0x40; break;
		case 7: mask = 0x80; break;
	}*/
    
    // Invert mask if the bit is going to get cleared
    if(set == 0){
200006d0:	1d7b      	adds	r3, r7, #5
200006d2:	781b      	ldrb	r3, [r3, #0]
200006d4:	2b00      	cmp	r3, #0
200006d6:	d106      	bne.n	200006e6 <pixel+0xb0>
        mask = ~mask;
200006d8:	230f      	movs	r3, #15
200006da:	18fb      	adds	r3, r7, r3
200006dc:	220f      	movs	r2, #15
200006de:	18ba      	adds	r2, r7, r2
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	43d2      	mvns	r2, r2
200006e4:	701a      	strb	r2, [r3, #0]
    }
    
    uint8_t x_actual;
    uint8_t controller;
    // Select applicable chip (screen half), and store the actual value of x
    if(x > 64){
200006e6:	1dfb      	adds	r3, r7, #7
200006e8:	781b      	ldrb	r3, [r3, #0]
200006ea:	2b40      	cmp	r3, #64	; 0x40
200006ec:	d90a      	bls.n	20000704 <pixel+0xce>
        controller = B_CS2;
200006ee:	230d      	movs	r3, #13
200006f0:	18fb      	adds	r3, r7, r3
200006f2:	2210      	movs	r2, #16
200006f4:	701a      	strb	r2, [r3, #0]
        x_actual = x - 65;
200006f6:	230e      	movs	r3, #14
200006f8:	18fb      	adds	r3, r7, r3
200006fa:	1dfa      	adds	r2, r7, #7
200006fc:	7812      	ldrb	r2, [r2, #0]
200006fe:	3a41      	subs	r2, #65	; 0x41
20000700:	701a      	strb	r2, [r3, #0]
20000702:	e009      	b.n	20000718 <pixel+0xe2>
    } else {
        controller = B_CS1;
20000704:	230d      	movs	r3, #13
20000706:	18fb      	adds	r3, r7, r3
20000708:	2208      	movs	r2, #8
2000070a:	701a      	strb	r2, [r3, #0]
        x_actual = x - 1;
2000070c:	230e      	movs	r3, #14
2000070e:	18fb      	adds	r3, r7, r3
20000710:	1dfa      	adds	r2, r7, #7
20000712:	7812      	ldrb	r2, [r2, #0]
20000714:	3a01      	subs	r2, #1
20000716:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000718:	230e      	movs	r3, #14
2000071a:	18fb      	adds	r3, r7, r3
2000071c:	781b      	ldrb	r3, [r3, #0]
2000071e:	2240      	movs	r2, #64	; 0x40
20000720:	4313      	orrs	r3, r2
20000722:	b2da      	uxtb	r2, r3
20000724:	230d      	movs	r3, #13
20000726:	18fb      	adds	r3, r7, r3
20000728:	781b      	ldrb	r3, [r3, #0]
2000072a:	0019      	movs	r1, r3
2000072c:	0010      	movs	r0, r2
2000072e:	f7ff fec9 	bl	200004c4 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
20000732:	230c      	movs	r3, #12
20000734:	18fb      	adds	r3, r7, r3
20000736:	781b      	ldrb	r3, [r3, #0]
20000738:	2248      	movs	r2, #72	; 0x48
2000073a:	4252      	negs	r2, r2
2000073c:	4313      	orrs	r3, r2
2000073e:	b2da      	uxtb	r2, r3
20000740:	230d      	movs	r3, #13
20000742:	18fb      	adds	r3, r7, r3
20000744:	781b      	ldrb	r3, [r3, #0]
20000746:	0019      	movs	r1, r3
20000748:	0010      	movs	r0, r2
2000074a:	f7ff febb 	bl	200004c4 <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
2000074e:	230b      	movs	r3, #11
20000750:	18fc      	adds	r4, r7, r3
20000752:	230d      	movs	r3, #13
20000754:	18fb      	adds	r3, r7, r3
20000756:	781b      	ldrb	r3, [r3, #0]
20000758:	0018      	movs	r0, r3
2000075a:	f7ff fef6 	bl	2000054a <graphic_read_data>
2000075e:	0003      	movs	r3, r0
20000760:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000762:	230e      	movs	r3, #14
20000764:	18fb      	adds	r3, r7, r3
20000766:	781b      	ldrb	r3, [r3, #0]
20000768:	2240      	movs	r2, #64	; 0x40
2000076a:	4313      	orrs	r3, r2
2000076c:	b2da      	uxtb	r2, r3
2000076e:	230d      	movs	r3, #13
20000770:	18fb      	adds	r3, r7, r3
20000772:	781b      	ldrb	r3, [r3, #0]
20000774:	0019      	movs	r1, r3
20000776:	0010      	movs	r0, r2
20000778:	f7ff fea4 	bl	200004c4 <graphic_write_command>
    if(set == 1){
2000077c:	1d7b      	adds	r3, r7, #5
2000077e:	781b      	ldrb	r3, [r3, #0]
20000780:	2b01      	cmp	r3, #1
20000782:	d10a      	bne.n	2000079a <pixel+0x164>
        mask |= temp;
20000784:	230f      	movs	r3, #15
20000786:	18fb      	adds	r3, r7, r3
20000788:	220f      	movs	r2, #15
2000078a:	18b9      	adds	r1, r7, r2
2000078c:	220b      	movs	r2, #11
2000078e:	18ba      	adds	r2, r7, r2
20000790:	7809      	ldrb	r1, [r1, #0]
20000792:	7812      	ldrb	r2, [r2, #0]
20000794:	430a      	orrs	r2, r1
20000796:	701a      	strb	r2, [r3, #0]
20000798:	e009      	b.n	200007ae <pixel+0x178>
    } else {
        mask &= temp;
2000079a:	230f      	movs	r3, #15
2000079c:	18fb      	adds	r3, r7, r3
2000079e:	220f      	movs	r2, #15
200007a0:	18ba      	adds	r2, r7, r2
200007a2:	210b      	movs	r1, #11
200007a4:	1879      	adds	r1, r7, r1
200007a6:	7812      	ldrb	r2, [r2, #0]
200007a8:	7809      	ldrb	r1, [r1, #0]
200007aa:	400a      	ands	r2, r1
200007ac:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
200007ae:	230d      	movs	r3, #13
200007b0:	18fb      	adds	r3, r7, r3
200007b2:	781a      	ldrb	r2, [r3, #0]
200007b4:	230f      	movs	r3, #15
200007b6:	18fb      	adds	r3, r7, r3
200007b8:	781b      	ldrb	r3, [r3, #0]
200007ba:	0011      	movs	r1, r2
200007bc:	0018      	movs	r0, r3
200007be:	f7ff fea1 	bl	20000504 <graphic_write_data>
	delay_500ns();
200007c2:	f7ff fc93 	bl	200000ec <delay_500ns>
200007c6:	e004      	b.n	200007d2 <pixel+0x19c>
        return;
200007c8:	46c0      	nop			; (mov r8, r8)
200007ca:	e002      	b.n	200007d2 <pixel+0x19c>
        return;
200007cc:	46c0      	nop			; (mov r8, r8)
200007ce:	e000      	b.n	200007d2 <pixel+0x19c>
        return;
200007d0:	46c0      	nop			; (mov r8, r8)
}
200007d2:	46bd      	mov	sp, r7
200007d4:	b005      	add	sp, #20
200007d6:	bd90      	pop	{r4, r7, pc}
200007d8:	80000007 	andhi	r0, r0, r7

200007dc <draw_object>:

void draw_object(POBJECT object){
200007dc:	b580      	push	{r7, lr}
200007de:	b084      	sub	sp, #16
200007e0:	af00      	add	r7, sp, #0
200007e2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
200007e4:	2300      	movs	r3, #0
200007e6:	60fb      	str	r3, [r7, #12]
200007e8:	e020      	b.n	2000082c <draw_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 1);
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	681a      	ldr	r2, [r3, #0]
200007ee:	68fb      	ldr	r3, [r7, #12]
200007f0:	3304      	adds	r3, #4
200007f2:	005b      	lsls	r3, r3, #1
200007f4:	18d3      	adds	r3, r2, r3
200007f6:	3304      	adds	r3, #4
200007f8:	781a      	ldrb	r2, [r3, #0]
200007fa:	687b      	ldr	r3, [r7, #4]
200007fc:	68db      	ldr	r3, [r3, #12]
200007fe:	b2db      	uxtb	r3, r3
20000800:	18d3      	adds	r3, r2, r3
20000802:	b2d8      	uxtb	r0, r3
20000804:	687b      	ldr	r3, [r7, #4]
20000806:	681a      	ldr	r2, [r3, #0]
20000808:	68fb      	ldr	r3, [r7, #12]
2000080a:	3304      	adds	r3, #4
2000080c:	005b      	lsls	r3, r3, #1
2000080e:	18d3      	adds	r3, r2, r3
20000810:	3305      	adds	r3, #5
20000812:	781a      	ldrb	r2, [r3, #0]
20000814:	687b      	ldr	r3, [r7, #4]
20000816:	691b      	ldr	r3, [r3, #16]
20000818:	b2db      	uxtb	r3, r3
2000081a:	18d3      	adds	r3, r2, r3
2000081c:	b2db      	uxtb	r3, r3
2000081e:	2201      	movs	r2, #1
20000820:	0019      	movs	r1, r3
20000822:	f7ff ff08 	bl	20000636 <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
20000826:	68fb      	ldr	r3, [r7, #12]
20000828:	3301      	adds	r3, #1
2000082a:	60fb      	str	r3, [r7, #12]
2000082c:	687b      	ldr	r3, [r7, #4]
2000082e:	681b      	ldr	r3, [r3, #0]
20000830:	681a      	ldr	r2, [r3, #0]
20000832:	68fb      	ldr	r3, [r7, #12]
20000834:	429a      	cmp	r2, r3
20000836:	dcd8      	bgt.n	200007ea <draw_object+0xe>
	}
}
20000838:	46c0      	nop			; (mov r8, r8)
2000083a:	46bd      	mov	sp, r7
2000083c:	b004      	add	sp, #16
2000083e:	bd80      	pop	{r7, pc}

20000840 <clear_object>:

void clear_object(POBJECT object){
20000840:	b580      	push	{r7, lr}
20000842:	b084      	sub	sp, #16
20000844:	af00      	add	r7, sp, #0
20000846:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
20000848:	2300      	movs	r3, #0
2000084a:	60fb      	str	r3, [r7, #12]
2000084c:	e020      	b.n	20000890 <clear_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 0);
2000084e:	687b      	ldr	r3, [r7, #4]
20000850:	681a      	ldr	r2, [r3, #0]
20000852:	68fb      	ldr	r3, [r7, #12]
20000854:	3304      	adds	r3, #4
20000856:	005b      	lsls	r3, r3, #1
20000858:	18d3      	adds	r3, r2, r3
2000085a:	3304      	adds	r3, #4
2000085c:	781a      	ldrb	r2, [r3, #0]
2000085e:	687b      	ldr	r3, [r7, #4]
20000860:	68db      	ldr	r3, [r3, #12]
20000862:	b2db      	uxtb	r3, r3
20000864:	18d3      	adds	r3, r2, r3
20000866:	b2d8      	uxtb	r0, r3
20000868:	687b      	ldr	r3, [r7, #4]
2000086a:	681a      	ldr	r2, [r3, #0]
2000086c:	68fb      	ldr	r3, [r7, #12]
2000086e:	3304      	adds	r3, #4
20000870:	005b      	lsls	r3, r3, #1
20000872:	18d3      	adds	r3, r2, r3
20000874:	3305      	adds	r3, #5
20000876:	781a      	ldrb	r2, [r3, #0]
20000878:	687b      	ldr	r3, [r7, #4]
2000087a:	691b      	ldr	r3, [r3, #16]
2000087c:	b2db      	uxtb	r3, r3
2000087e:	18d3      	adds	r3, r2, r3
20000880:	b2db      	uxtb	r3, r3
20000882:	2200      	movs	r2, #0
20000884:	0019      	movs	r1, r3
20000886:	f7ff fed6 	bl	20000636 <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
2000088a:	68fb      	ldr	r3, [r7, #12]
2000088c:	3301      	adds	r3, #1
2000088e:	60fb      	str	r3, [r7, #12]
20000890:	687b      	ldr	r3, [r7, #4]
20000892:	681b      	ldr	r3, [r3, #0]
20000894:	681a      	ldr	r2, [r3, #0]
20000896:	68fb      	ldr	r3, [r7, #12]
20000898:	429a      	cmp	r2, r3
2000089a:	dcd8      	bgt.n	2000084e <clear_object+0xe>
	}
}
2000089c:	46c0      	nop			; (mov r8, r8)
2000089e:	46bd      	mov	sp, r7
200008a0:	b004      	add	sp, #16
200008a2:	bd80      	pop	{r7, pc}

200008a4 <move_object>:

void move_object(POBJECT object){
200008a4:	b580      	push	{r7, lr}
200008a6:	b082      	sub	sp, #8
200008a8:	af00      	add	r7, sp, #0
200008aa:	6078      	str	r0, [r7, #4]
	clear_object(object);
200008ac:	687b      	ldr	r3, [r7, #4]
200008ae:	0018      	movs	r0, r3
200008b0:	f7ff ffc6 	bl	20000840 <clear_object>
	object->pos_x += object->dir_x;
200008b4:	687b      	ldr	r3, [r7, #4]
200008b6:	68da      	ldr	r2, [r3, #12]
200008b8:	687b      	ldr	r3, [r7, #4]
200008ba:	685b      	ldr	r3, [r3, #4]
200008bc:	18d2      	adds	r2, r2, r3
200008be:	687b      	ldr	r3, [r7, #4]
200008c0:	60da      	str	r2, [r3, #12]
	object->pos_y += object->dir_y;
200008c2:	687b      	ldr	r3, [r7, #4]
200008c4:	691a      	ldr	r2, [r3, #16]
200008c6:	687b      	ldr	r3, [r7, #4]
200008c8:	689b      	ldr	r3, [r3, #8]
200008ca:	18d2      	adds	r2, r2, r3
200008cc:	687b      	ldr	r3, [r7, #4]
200008ce:	611a      	str	r2, [r3, #16]
	
	//bounce if object reaches edges of screen
	if (object->pos_x < 1 || (object->pos_x + object->geo->size_x) > 128){
200008d0:	687b      	ldr	r3, [r7, #4]
200008d2:	68db      	ldr	r3, [r3, #12]
200008d4:	2b00      	cmp	r3, #0
200008d6:	dd07      	ble.n	200008e8 <move_object+0x44>
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	68da      	ldr	r2, [r3, #12]
200008dc:	687b      	ldr	r3, [r7, #4]
200008de:	681b      	ldr	r3, [r3, #0]
200008e0:	685b      	ldr	r3, [r3, #4]
200008e2:	18d3      	adds	r3, r2, r3
200008e4:	2b80      	cmp	r3, #128	; 0x80
200008e6:	dd04      	ble.n	200008f2 <move_object+0x4e>
		object->dir_x = -object->dir_x;
200008e8:	687b      	ldr	r3, [r7, #4]
200008ea:	685b      	ldr	r3, [r3, #4]
200008ec:	425a      	negs	r2, r3
200008ee:	687b      	ldr	r3, [r7, #4]
200008f0:	605a      	str	r2, [r3, #4]
	}
	if (object->pos_y < 1 || (object->pos_y + object->geo->size_y) > 64){
200008f2:	687b      	ldr	r3, [r7, #4]
200008f4:	691b      	ldr	r3, [r3, #16]
200008f6:	2b00      	cmp	r3, #0
200008f8:	dd07      	ble.n	2000090a <move_object+0x66>
200008fa:	687b      	ldr	r3, [r7, #4]
200008fc:	691a      	ldr	r2, [r3, #16]
200008fe:	687b      	ldr	r3, [r7, #4]
20000900:	681b      	ldr	r3, [r3, #0]
20000902:	689b      	ldr	r3, [r3, #8]
20000904:	18d3      	adds	r3, r2, r3
20000906:	2b40      	cmp	r3, #64	; 0x40
20000908:	dd04      	ble.n	20000914 <move_object+0x70>
		object->dir_y = -object->dir_y;
2000090a:	687b      	ldr	r3, [r7, #4]
2000090c:	689b      	ldr	r3, [r3, #8]
2000090e:	425a      	negs	r2, r3
20000910:	687b      	ldr	r3, [r7, #4]
20000912:	609a      	str	r2, [r3, #8]
	}
	
	draw_object(object);
20000914:	687b      	ldr	r3, [r7, #4]
20000916:	0018      	movs	r0, r3
20000918:	f7ff ff60 	bl	200007dc <draw_object>
}
2000091c:	46c0      	nop			; (mov r8, r8)
2000091e:	46bd      	mov	sp, r7
20000920:	b002      	add	sp, #8
20000922:	bd80      	pop	{r7, pc}

20000924 <set_object_speed>:

void set_object_speed(POBJECT object, int x, int y){
20000924:	b580      	push	{r7, lr}
20000926:	b084      	sub	sp, #16
20000928:	af00      	add	r7, sp, #0
2000092a:	60f8      	str	r0, [r7, #12]
2000092c:	60b9      	str	r1, [r7, #8]
2000092e:	607a      	str	r2, [r7, #4]
	object->dir_x = x;
20000930:	68fb      	ldr	r3, [r7, #12]
20000932:	68ba      	ldr	r2, [r7, #8]
20000934:	605a      	str	r2, [r3, #4]
	object->dir_y = y;
20000936:	68fb      	ldr	r3, [r7, #12]
20000938:	687a      	ldr	r2, [r7, #4]
2000093a:	609a      	str	r2, [r3, #8]
}
2000093c:	46c0      	nop			; (mov r8, r8)
2000093e:	46bd      	mov	sp, r7
20000940:	b004      	add	sp, #16
20000942:	bd80      	pop	{r7, pc}

20000944 <graphicdisplay_init>:

void graphicdisplay_init(void){
20000944:	b580      	push	{r7, lr}
20000946:	af00      	add	r7, sp, #0
	//port E is output
	GPIO_E.moder = 0x55555555;
20000948:	4b04      	ldr	r3, [pc, #16]	; (2000095c <graphicdisplay_init+0x18>)
2000094a:	4a05      	ldr	r2, [pc, #20]	; (20000960 <graphicdisplay_init+0x1c>)
2000094c:	601a      	str	r2, [r3, #0]
	GPIO_E.ospeedr = 0x55555555;
2000094e:	4b03      	ldr	r3, [pc, #12]	; (2000095c <graphicdisplay_init+0x18>)
20000950:	4a03      	ldr	r2, [pc, #12]	; (20000960 <graphicdisplay_init+0x1c>)
20000952:	609a      	str	r2, [r3, #8]
20000954:	46c0      	nop			; (mov r8, r8)
20000956:	46bd      	mov	sp, r7
20000958:	bd80      	pop	{r7, pc}
2000095a:	46c0      	nop			; (mov r8, r8)
2000095c:	40021000 	andmi	r1, r2, r0
20000960:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000964 <asciidisplay_init>:
#include "asciidisplay.h"

void asciidisplay_init(void){    
20000964:	b580      	push	{r7, lr}
20000966:	af00      	add	r7, sp, #0
    // Port E -> output
    GPIO_E.moder = 0x55555555;
20000968:	4b0c      	ldr	r3, [pc, #48]	; (2000099c <asciidisplay_init+0x38>)
2000096a:	4a0d      	ldr	r2, [pc, #52]	; (200009a0 <asciidisplay_init+0x3c>)
2000096c:	601a      	str	r2, [r3, #0]
    
    // ***DISPLAY INIT***    
    // 2 rows, characters are 5x8 dots
    ascii_command(0x38, 39, 1);
2000096e:	2201      	movs	r2, #1
20000970:	2127      	movs	r1, #39	; 0x27
20000972:	2038      	movs	r0, #56	; 0x38
20000974:	f000 f8fe 	bl	20000b74 <ascii_command>
    // Turn on display, turn on cursor, cursor not blinking
    ascii_command(0xE, 39, 1);
20000978:	2201      	movs	r2, #1
2000097a:	2127      	movs	r1, #39	; 0x27
2000097c:	200e      	movs	r0, #14
2000097e:	f000 f8f9 	bl	20000b74 <ascii_command>
    // Clear display
    ascii_command(0x1, 2, 0);
20000982:	2200      	movs	r2, #0
20000984:	2102      	movs	r1, #2
20000986:	2001      	movs	r0, #1
20000988:	f000 f8f4 	bl	20000b74 <ascii_command>
    // Increment mode, no shift
    ascii_command(0x6, 39, 1);
2000098c:	2201      	movs	r2, #1
2000098e:	2127      	movs	r1, #39	; 0x27
20000990:	2006      	movs	r0, #6
20000992:	f000 f8ef 	bl	20000b74 <ascii_command>
}
20000996:	46c0      	nop			; (mov r8, r8)
20000998:	46bd      	mov	sp, r7
2000099a:	bd80      	pop	{r7, pc}
2000099c:	40021000 	andmi	r1, r2, r0
200009a0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200009a4 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x){
200009a4:	b580      	push	{r7, lr}
200009a6:	b084      	sub	sp, #16
200009a8:	af00      	add	r7, sp, #0
200009aa:	0002      	movs	r2, r0
200009ac:	1dfb      	adds	r3, r7, #7
200009ae:	701a      	strb	r2, [r3, #0]
    // Set bits that are 1 in x to 1, leave rest be
    unsigned char port_val = GPIO_E.odrLow;
200009b0:	4a0c      	ldr	r2, [pc, #48]	; (200009e4 <ascii_ctrl_bit_set+0x40>)
200009b2:	230f      	movs	r3, #15
200009b4:	18fb      	adds	r3, r7, r3
200009b6:	7d12      	ldrb	r2, [r2, #20]
200009b8:	701a      	strb	r2, [r3, #0]
    port_val |= x;
200009ba:	230f      	movs	r3, #15
200009bc:	18fb      	adds	r3, r7, r3
200009be:	220f      	movs	r2, #15
200009c0:	18b9      	adds	r1, r7, r2
200009c2:	1dfa      	adds	r2, r7, #7
200009c4:	7809      	ldrb	r1, [r1, #0]
200009c6:	7812      	ldrb	r2, [r2, #0]
200009c8:	430a      	orrs	r2, r1
200009ca:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = port_val | B_SELECT;
200009cc:	4a05      	ldr	r2, [pc, #20]	; (200009e4 <ascii_ctrl_bit_set+0x40>)
200009ce:	230f      	movs	r3, #15
200009d0:	18fb      	adds	r3, r7, r3
200009d2:	781b      	ldrb	r3, [r3, #0]
200009d4:	2104      	movs	r1, #4
200009d6:	430b      	orrs	r3, r1
200009d8:	b2db      	uxtb	r3, r3
200009da:	7513      	strb	r3, [r2, #20]
}
200009dc:	46c0      	nop			; (mov r8, r8)
200009de:	46bd      	mov	sp, r7
200009e0:	b004      	add	sp, #16
200009e2:	bd80      	pop	{r7, pc}
200009e4:	40021000 	andmi	r1, r2, r0

200009e8 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
200009e8:	b580      	push	{r7, lr}
200009ea:	b084      	sub	sp, #16
200009ec:	af00      	add	r7, sp, #0
200009ee:	0002      	movs	r2, r0
200009f0:	1dfb      	adds	r3, r7, #7
200009f2:	701a      	strb	r2, [r3, #0]
    // Set any bits that are 0 in x to 0, leave rest as they were
    unsigned char port_val = GPIO_E.odrLow;
200009f4:	4a0d      	ldr	r2, [pc, #52]	; (20000a2c <ascii_ctrl_bit_clear+0x44>)
200009f6:	230f      	movs	r3, #15
200009f8:	18fb      	adds	r3, r7, r3
200009fa:	7d12      	ldrb	r2, [r2, #20]
200009fc:	701a      	strb	r2, [r3, #0]
    port_val &= x ^ 0xFF;
200009fe:	1dfb      	adds	r3, r7, #7
20000a00:	781b      	ldrb	r3, [r3, #0]
20000a02:	43db      	mvns	r3, r3
20000a04:	b2da      	uxtb	r2, r3
20000a06:	230f      	movs	r3, #15
20000a08:	18fb      	adds	r3, r7, r3
20000a0a:	210f      	movs	r1, #15
20000a0c:	1879      	adds	r1, r7, r1
20000a0e:	7809      	ldrb	r1, [r1, #0]
20000a10:	400a      	ands	r2, r1
20000a12:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = port_val | B_SELECT;
20000a14:	4a05      	ldr	r2, [pc, #20]	; (20000a2c <ascii_ctrl_bit_clear+0x44>)
20000a16:	230f      	movs	r3, #15
20000a18:	18fb      	adds	r3, r7, r3
20000a1a:	781b      	ldrb	r3, [r3, #0]
20000a1c:	2104      	movs	r1, #4
20000a1e:	430b      	orrs	r3, r1
20000a20:	b2db      	uxtb	r3, r3
20000a22:	7513      	strb	r3, [r2, #20]
    //delay_250ns();
}
20000a24:	46c0      	nop			; (mov r8, r8)
20000a26:	46bd      	mov	sp, r7
20000a28:	b004      	add	sp, #16
20000a2a:	bd80      	pop	{r7, pc}
20000a2c:	40021000 	andmi	r1, r2, r0

20000a30 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000a30:	b580      	push	{r7, lr}
20000a32:	b082      	sub	sp, #8
20000a34:	af00      	add	r7, sp, #0
20000a36:	0002      	movs	r2, r0
20000a38:	1dfb      	adds	r3, r7, #7
20000a3a:	701a      	strb	r2, [r3, #0]
    // Prepare display for sending command
    ascii_ctrl_bit_clear(B_RS);
20000a3c:	2001      	movs	r0, #1
20000a3e:	f7ff ffd3 	bl	200009e8 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear( B_RW);
20000a42:	2002      	movs	r0, #2
20000a44:	f7ff ffd0 	bl	200009e8 <ascii_ctrl_bit_clear>
    
    // Write command
    ascii_write_controller(command);
20000a48:	1dfb      	adds	r3, r7, #7
20000a4a:	781b      	ldrb	r3, [r3, #0]
20000a4c:	0018      	movs	r0, r3
20000a4e:	f000 f861 	bl	20000b14 <ascii_write_controller>
}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	46bd      	mov	sp, r7
20000a56:	b002      	add	sp, #8
20000a58:	bd80      	pop	{r7, pc}

20000a5a <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000a5a:	b580      	push	{r7, lr}
20000a5c:	b082      	sub	sp, #8
20000a5e:	af00      	add	r7, sp, #0
20000a60:	0002      	movs	r2, r0
20000a62:	1dfb      	adds	r3, r7, #7
20000a64:	701a      	strb	r2, [r3, #0]
    // Prepare display for writing data
    ascii_ctrl_bit_set(B_RS);
20000a66:	2001      	movs	r0, #1
20000a68:	f7ff ff9c 	bl	200009a4 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
20000a6c:	2002      	movs	r0, #2
20000a6e:	f7ff ffbb 	bl	200009e8 <ascii_ctrl_bit_clear>
    
    // Write data
    ascii_write_controller(data);
20000a72:	1dfb      	adds	r3, r7, #7
20000a74:	781b      	ldrb	r3, [r3, #0]
20000a76:	0018      	movs	r0, r3
20000a78:	f000 f84c 	bl	20000b14 <ascii_write_controller>
}
20000a7c:	46c0      	nop			; (mov r8, r8)
20000a7e:	46bd      	mov	sp, r7
20000a80:	b002      	add	sp, #8
20000a82:	bd80      	pop	{r7, pc}

20000a84 <ascii_read_data>:

unsigned char ascii_read_data(void){
20000a84:	b590      	push	{r4, r7, lr}
20000a86:	b083      	sub	sp, #12
20000a88:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    GPIO_E.moder &= 0x0000FFFF;
20000a8a:	4b0e      	ldr	r3, [pc, #56]	; (20000ac4 <ascii_read_data+0x40>)
20000a8c:	4a0d      	ldr	r2, [pc, #52]	; (20000ac4 <ascii_read_data+0x40>)
20000a8e:	6812      	ldr	r2, [r2, #0]
20000a90:	0412      	lsls	r2, r2, #16
20000a92:	0c12      	lsrs	r2, r2, #16
20000a94:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading data
    ascii_ctrl_bit_set(B_RW);
20000a96:	2002      	movs	r0, #2
20000a98:	f7ff ff84 	bl	200009a4 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RS);
20000a9c:	2001      	movs	r0, #1
20000a9e:	f7ff ff81 	bl	200009a4 <ascii_ctrl_bit_set>
    
    return_value = ascii_read_controller();
20000aa2:	1dfc      	adds	r4, r7, #7
20000aa4:	f000 f84e 	bl	20000b44 <ascii_read_controller>
20000aa8:	0003      	movs	r3, r0
20000aaa:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    GPIO_E.moder |= 0x55550000;
20000aac:	4b05      	ldr	r3, [pc, #20]	; (20000ac4 <ascii_read_data+0x40>)
20000aae:	4a05      	ldr	r2, [pc, #20]	; (20000ac4 <ascii_read_data+0x40>)
20000ab0:	6812      	ldr	r2, [r2, #0]
20000ab2:	4905      	ldr	r1, [pc, #20]	; (20000ac8 <ascii_read_data+0x44>)
20000ab4:	430a      	orrs	r2, r1
20000ab6:	601a      	str	r2, [r3, #0]
    
    return return_value;
20000ab8:	1dfb      	adds	r3, r7, #7
20000aba:	781b      	ldrb	r3, [r3, #0]
}
20000abc:	0018      	movs	r0, r3
20000abe:	46bd      	mov	sp, r7
20000ac0:	b003      	add	sp, #12
20000ac2:	bd90      	pop	{r4, r7, pc}
20000ac4:	40021000 	andmi	r1, r2, r0
20000ac8:	55550000 	ldrbpl	r0, [r5, #-0]

20000acc <ascii_read_status>:

unsigned char ascii_read_status(void){
20000acc:	b590      	push	{r4, r7, lr}
20000ace:	b083      	sub	sp, #12
20000ad0:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    GPIO_E.moder &= 0x0000FFFF;
20000ad2:	4b0e      	ldr	r3, [pc, #56]	; (20000b0c <ascii_read_status+0x40>)
20000ad4:	4a0d      	ldr	r2, [pc, #52]	; (20000b0c <ascii_read_status+0x40>)
20000ad6:	6812      	ldr	r2, [r2, #0]
20000ad8:	0412      	lsls	r2, r2, #16
20000ada:	0c12      	lsrs	r2, r2, #16
20000adc:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading status and address
    ascii_ctrl_bit_clear(B_RS);
20000ade:	2001      	movs	r0, #1
20000ae0:	f7ff ff82 	bl	200009e8 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000ae4:	2002      	movs	r0, #2
20000ae6:	f7ff ff5d 	bl	200009a4 <ascii_ctrl_bit_set>
    
    // Read values from display
    return_value = ascii_read_controller();
20000aea:	1dfc      	adds	r4, r7, #7
20000aec:	f000 f82a 	bl	20000b44 <ascii_read_controller>
20000af0:	0003      	movs	r3, r0
20000af2:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    GPIO_E.moder |= 0x55550000;
20000af4:	4b05      	ldr	r3, [pc, #20]	; (20000b0c <ascii_read_status+0x40>)
20000af6:	4a05      	ldr	r2, [pc, #20]	; (20000b0c <ascii_read_status+0x40>)
20000af8:	6812      	ldr	r2, [r2, #0]
20000afa:	4905      	ldr	r1, [pc, #20]	; (20000b10 <ascii_read_status+0x44>)
20000afc:	430a      	orrs	r2, r1
20000afe:	601a      	str	r2, [r3, #0]
    
    return return_value;
20000b00:	1dfb      	adds	r3, r7, #7
20000b02:	781b      	ldrb	r3, [r3, #0]
}
20000b04:	0018      	movs	r0, r3
20000b06:	46bd      	mov	sp, r7
20000b08:	b003      	add	sp, #12
20000b0a:	bd90      	pop	{r4, r7, pc}
20000b0c:	40021000 	andmi	r1, r2, r0
20000b10:	55550000 	ldrbpl	r0, [r5, #-0]

20000b14 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
20000b14:	b580      	push	{r7, lr}
20000b16:	b082      	sub	sp, #8
20000b18:	af00      	add	r7, sp, #0
20000b1a:	0002      	movs	r2, r0
20000b1c:	1dfb      	adds	r3, r7, #7
20000b1e:	701a      	strb	r2, [r3, #0]
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
20000b20:	2040      	movs	r0, #64	; 0x40
20000b22:	f7ff ff3f 	bl	200009a4 <ascii_ctrl_bit_set>
    
    // Set data register values
    GPIO_E.odrHigh = byte;
20000b26:	4a06      	ldr	r2, [pc, #24]	; (20000b40 <ascii_write_controller+0x2c>)
20000b28:	1dfb      	adds	r3, r7, #7
20000b2a:	781b      	ldrb	r3, [r3, #0]
20000b2c:	7553      	strb	r3, [r2, #21]
    
    // Wait for 230ns (here at least 250, hope this should still work)
    delay_250ns();
20000b2e:	f7ff fad0 	bl	200000d2 <delay_250ns>
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
20000b32:	2040      	movs	r0, #64	; 0x40
20000b34:	f7ff ff58 	bl	200009e8 <ascii_ctrl_bit_clear>
}
20000b38:	46c0      	nop			; (mov r8, r8)
20000b3a:	46bd      	mov	sp, r7
20000b3c:	b002      	add	sp, #8
20000b3e:	bd80      	pop	{r7, pc}
20000b40:	40021000 	andmi	r1, r2, r0

20000b44 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20000b44:	b580      	push	{r7, lr}
20000b46:	b082      	sub	sp, #8
20000b48:	af00      	add	r7, sp, #0
    unsigned char return_value;
    
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
20000b4a:	2040      	movs	r0, #64	; 0x40
20000b4c:	f7ff ff2a 	bl	200009a4 <ascii_ctrl_bit_set>
    
    // Wait for at least 360ns, here at least 500
    delay_500ns();
20000b50:	f7ff facc 	bl	200000ec <delay_500ns>
    
    // Read data register
    return_value = GPIO_E.idrHigh;
20000b54:	4a06      	ldr	r2, [pc, #24]	; (20000b70 <ascii_read_controller+0x2c>)
20000b56:	1dfb      	adds	r3, r7, #7
20000b58:	7c52      	ldrb	r2, [r2, #17]
20000b5a:	701a      	strb	r2, [r3, #0]
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
20000b5c:	2040      	movs	r0, #64	; 0x40
20000b5e:	f7ff ff43 	bl	200009e8 <ascii_ctrl_bit_clear>
    
    return return_value;
20000b62:	1dfb      	adds	r3, r7, #7
20000b64:	781b      	ldrb	r3, [r3, #0]
}
20000b66:	0018      	movs	r0, r3
20000b68:	46bd      	mov	sp, r7
20000b6a:	b002      	add	sp, #8
20000b6c:	bd80      	pop	{r7, pc}
20000b6e:	46c0      	nop			; (mov r8, r8)
20000b70:	40021000 	andmi	r1, r2, r0

20000b74 <ascii_command>:

void ascii_command(unsigned char command, unsigned int post_command_delay, unsigned short us){    
20000b74:	b580      	push	{r7, lr}
20000b76:	b082      	sub	sp, #8
20000b78:	af00      	add	r7, sp, #0
20000b7a:	6039      	str	r1, [r7, #0]
20000b7c:	0011      	movs	r1, r2
20000b7e:	1dfb      	adds	r3, r7, #7
20000b80:	1c02      	adds	r2, r0, #0
20000b82:	701a      	strb	r2, [r3, #0]
20000b84:	1d3b      	adds	r3, r7, #4
20000b86:	1c0a      	adds	r2, r1, #0
20000b88:	801a      	strh	r2, [r3, #0]
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while((ascii_read_status() & 0x80) != 0);
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	f7ff ff9e 	bl	20000acc <ascii_read_status>
20000b90:	0003      	movs	r3, r0
20000b92:	b25b      	sxtb	r3, r3
20000b94:	2b00      	cmp	r3, #0
20000b96:	dbf9      	blt.n	20000b8c <ascii_command+0x18>
    delay_mikro(8);
20000b98:	2008      	movs	r0, #8
20000b9a:	f7ff fac9 	bl	20000130 <delay_mikro>
    
    // Send command
    ascii_write_cmd(command);
20000b9e:	1dfb      	adds	r3, r7, #7
20000ba0:	781b      	ldrb	r3, [r3, #0]
20000ba2:	0018      	movs	r0, r3
20000ba4:	f7ff ff44 	bl	20000a30 <ascii_write_cmd>
    
    // Wait for the entered amount of time
    if(us == 1){
20000ba8:	1d3b      	adds	r3, r7, #4
20000baa:	881b      	ldrh	r3, [r3, #0]
20000bac:	2b01      	cmp	r3, #1
20000bae:	d104      	bne.n	20000bba <ascii_command+0x46>
        delay_mikro(post_command_delay);
20000bb0:	683b      	ldr	r3, [r7, #0]
20000bb2:	0018      	movs	r0, r3
20000bb4:	f7ff fabc 	bl	20000130 <delay_mikro>
    } else {
        delay_milli(post_command_delay);
    }
}
20000bb8:	e003      	b.n	20000bc2 <ascii_command+0x4e>
        delay_milli(post_command_delay);
20000bba:	683b      	ldr	r3, [r7, #0]
20000bbc:	0018      	movs	r0, r3
20000bbe:	f7ff fad5 	bl	2000016c <delay_milli>
}
20000bc2:	46c0      	nop			; (mov r8, r8)
20000bc4:	46bd      	mov	sp, r7
20000bc6:	b002      	add	sp, #8
20000bc8:	bd80      	pop	{r7, pc}

20000bca <ascii_write_char>:

void ascii_write_char(unsigned char character){
20000bca:	b580      	push	{r7, lr}
20000bcc:	b082      	sub	sp, #8
20000bce:	af00      	add	r7, sp, #0
20000bd0:	0002      	movs	r2, r0
20000bd2:	1dfb      	adds	r3, r7, #7
20000bd4:	701a      	strb	r2, [r3, #0]
    // Prepare to check if display ready
    ascii_ctrl_bit_set(B_RW);
20000bd6:	2002      	movs	r0, #2
20000bd8:	f7ff fee4 	bl	200009a4 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RS);
20000bdc:	2001      	movs	r0, #1
20000bde:	f7ff ff03 	bl	200009e8 <ascii_ctrl_bit_clear>
    
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while((ascii_read_status() & 0x80) != 0);
20000be2:	46c0      	nop			; (mov r8, r8)
20000be4:	f7ff ff72 	bl	20000acc <ascii_read_status>
20000be8:	0003      	movs	r3, r0
20000bea:	b25b      	sxtb	r3, r3
20000bec:	2b00      	cmp	r3, #0
20000bee:	dbf9      	blt.n	20000be4 <ascii_write_char+0x1a>
    delay_mikro(8);
20000bf0:	2008      	movs	r0, #8
20000bf2:	f7ff fa9d 	bl	20000130 <delay_mikro>
    
    // Write character do display
    ascii_write_data(character);
20000bf6:	1dfb      	adds	r3, r7, #7
20000bf8:	781b      	ldrb	r3, [r3, #0]
20000bfa:	0018      	movs	r0, r3
20000bfc:	f7ff ff2d 	bl	20000a5a <ascii_write_data>
    
    // Delay for 43us
    delay_mikro(43);
20000c00:	202b      	movs	r0, #43	; 0x2b
20000c02:	f7ff fa95 	bl	20000130 <delay_mikro>
}
20000c06:	46c0      	nop			; (mov r8, r8)
20000c08:	46bd      	mov	sp, r7
20000c0a:	b002      	add	sp, #8
20000c0c:	bd80      	pop	{r7, pc}

20000c0e <gotoxy>:

void gotoxy(unsigned int row, unsigned int column){
20000c0e:	b580      	push	{r7, lr}
20000c10:	b084      	sub	sp, #16
20000c12:	af00      	add	r7, sp, #0
20000c14:	6078      	str	r0, [r7, #4]
20000c16:	6039      	str	r1, [r7, #0]
    // Make sure row not out of bounds
    if(row < 1 || row > 20){
20000c18:	687b      	ldr	r3, [r7, #4]
20000c1a:	2b00      	cmp	r3, #0
20000c1c:	d025      	beq.n	20000c6a <gotoxy+0x5c>
20000c1e:	687b      	ldr	r3, [r7, #4]
20000c20:	2b14      	cmp	r3, #20
20000c22:	d822      	bhi.n	20000c6a <gotoxy+0x5c>
        return;
    }
    // Make sure column not out of bounds
    if(column < 1 || column > 2){
20000c24:	683b      	ldr	r3, [r7, #0]
20000c26:	2b00      	cmp	r3, #0
20000c28:	d021      	beq.n	20000c6e <gotoxy+0x60>
20000c2a:	683b      	ldr	r3, [r7, #0]
20000c2c:	2b02      	cmp	r3, #2
20000c2e:	d81e      	bhi.n	20000c6e <gotoxy+0x60>
        return;
    }
    
    // Set address to the correct location
    unsigned char address = row - 1;
20000c30:	687b      	ldr	r3, [r7, #4]
20000c32:	b2da      	uxtb	r2, r3
20000c34:	230f      	movs	r3, #15
20000c36:	18fb      	adds	r3, r7, r3
20000c38:	3a01      	subs	r2, #1
20000c3a:	701a      	strb	r2, [r3, #0]
    if(column == 2){
20000c3c:	683b      	ldr	r3, [r7, #0]
20000c3e:	2b02      	cmp	r3, #2
20000c40:	d106      	bne.n	20000c50 <gotoxy+0x42>
        address += 0x40;
20000c42:	230f      	movs	r3, #15
20000c44:	18fb      	adds	r3, r7, r3
20000c46:	220f      	movs	r2, #15
20000c48:	18ba      	adds	r2, r7, r2
20000c4a:	7812      	ldrb	r2, [r2, #0]
20000c4c:	3240      	adds	r2, #64	; 0x40
20000c4e:	701a      	strb	r2, [r3, #0]
    }
    
    // Send command to mark correct spot
    ascii_command(0x80 | address, 39, 1);
20000c50:	230f      	movs	r3, #15
20000c52:	18fb      	adds	r3, r7, r3
20000c54:	781b      	ldrb	r3, [r3, #0]
20000c56:	2280      	movs	r2, #128	; 0x80
20000c58:	4252      	negs	r2, r2
20000c5a:	4313      	orrs	r3, r2
20000c5c:	b2db      	uxtb	r3, r3
20000c5e:	2201      	movs	r2, #1
20000c60:	2127      	movs	r1, #39	; 0x27
20000c62:	0018      	movs	r0, r3
20000c64:	f7ff ff86 	bl	20000b74 <ascii_command>
20000c68:	e002      	b.n	20000c70 <gotoxy+0x62>
        return;
20000c6a:	46c0      	nop			; (mov r8, r8)
20000c6c:	e000      	b.n	20000c70 <gotoxy+0x62>
        return;
20000c6e:	46c0      	nop			; (mov r8, r8)
}
20000c70:	46bd      	mov	sp, r7
20000c72:	b004      	add	sp, #16
20000c74:	bd80      	pop	{r7, pc}

20000c76 <ascii_write_string>:

void ascii_write_string(char *s){
20000c76:	b580      	push	{r7, lr}
20000c78:	b082      	sub	sp, #8
20000c7a:	af00      	add	r7, sp, #0
20000c7c:	6078      	str	r0, [r7, #4]
    // Write each character onto the display until the finishing character is reached
    while(*s != 0){
20000c7e:	e006      	b.n	20000c8e <ascii_write_string+0x18>
        ascii_write_char(*s++);
20000c80:	687b      	ldr	r3, [r7, #4]
20000c82:	1c5a      	adds	r2, r3, #1
20000c84:	607a      	str	r2, [r7, #4]
20000c86:	781b      	ldrb	r3, [r3, #0]
20000c88:	0018      	movs	r0, r3
20000c8a:	f7ff ff9e 	bl	20000bca <ascii_write_char>
    while(*s != 0){
20000c8e:	687b      	ldr	r3, [r7, #4]
20000c90:	781b      	ldrb	r3, [r3, #0]
20000c92:	2b00      	cmp	r3, #0
20000c94:	d1f4      	bne.n	20000c80 <ascii_write_string+0xa>
    }
}
20000c96:	46c0      	nop			; (mov r8, r8)
20000c98:	46bd      	mov	sp, r7
20000c9a:	b002      	add	sp, #8
20000c9c:	bd80      	pop	{r7, pc}
20000c9e:	46c0      	nop			; (mov r8, r8)

20000ca0 <keyboard_init>:
#include "keypad.h"

void keyboard_init (void) {
20000ca0:	b580      	push	{r7, lr}
20000ca2:	af00      	add	r7, sp, #0
	GPIO_D.moder = 0x55005555;
20000ca4:	4b10      	ldr	r3, [pc, #64]	; (20000ce8 <keyboard_init+0x48>)
20000ca6:	4a11      	ldr	r2, [pc, #68]	; (20000cec <keyboard_init+0x4c>)
20000ca8:	601a      	str	r2, [r3, #0]
	GPIO_D.otyper &= 0x00FF;
20000caa:	4b0f      	ldr	r3, [pc, #60]	; (20000ce8 <keyboard_init+0x48>)
20000cac:	4a0e      	ldr	r2, [pc, #56]	; (20000ce8 <keyboard_init+0x48>)
20000cae:	6852      	ldr	r2, [r2, #4]
20000cb0:	21ff      	movs	r1, #255	; 0xff
20000cb2:	400a      	ands	r2, r1
20000cb4:	605a      	str	r2, [r3, #4]
	GPIO_D.otyper |= 0x0000;
20000cb6:	4b0c      	ldr	r3, [pc, #48]	; (20000ce8 <keyboard_init+0x48>)
20000cb8:	4a0b      	ldr	r2, [pc, #44]	; (20000ce8 <keyboard_init+0x48>)
20000cba:	6852      	ldr	r2, [r2, #4]
20000cbc:	605a      	str	r2, [r3, #4]
	GPIO_D.pupdr &= 0x0000FFFF;
20000cbe:	4b0a      	ldr	r3, [pc, #40]	; (20000ce8 <keyboard_init+0x48>)
20000cc0:	4a09      	ldr	r2, [pc, #36]	; (20000ce8 <keyboard_init+0x48>)
20000cc2:	68d2      	ldr	r2, [r2, #12]
20000cc4:	0412      	lsls	r2, r2, #16
20000cc6:	0c12      	lsrs	r2, r2, #16
20000cc8:	60da      	str	r2, [r3, #12]
	GPIO_D.pupdr |= 0x00AA0000;
20000cca:	4b07      	ldr	r3, [pc, #28]	; (20000ce8 <keyboard_init+0x48>)
20000ccc:	4a06      	ldr	r2, [pc, #24]	; (20000ce8 <keyboard_init+0x48>)
20000cce:	68d2      	ldr	r2, [r2, #12]
20000cd0:	21aa      	movs	r1, #170	; 0xaa
20000cd2:	0409      	lsls	r1, r1, #16
20000cd4:	430a      	orrs	r2, r1
20000cd6:	60da      	str	r2, [r3, #12]
	GPIO_D.odrHigh &= 0x00FF;
20000cd8:	4b03      	ldr	r3, [pc, #12]	; (20000ce8 <keyboard_init+0x48>)
20000cda:	4a03      	ldr	r2, [pc, #12]	; (20000ce8 <keyboard_init+0x48>)
20000cdc:	7d52      	ldrb	r2, [r2, #21]
20000cde:	b2d2      	uxtb	r2, r2
20000ce0:	755a      	strb	r2, [r3, #21]
}
20000ce2:	46c0      	nop			; (mov r8, r8)
20000ce4:	46bd      	mov	sp, r7
20000ce6:	bd80      	pop	{r7, pc}
20000ce8:	40020c00 	andmi	r0, r2, r0, lsl #24
20000cec:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab

20000cf0 <keyb>:

unsigned char keyb(void){
20000cf0:	b580      	push	{r7, lr}
20000cf2:	b082      	sub	sp, #8
20000cf4:	af00      	add	r7, sp, #0
	unsigned char row, column;
	
	for (unsigned char row = 1; row <= 4; row++) {
20000cf6:	1dfb      	adds	r3, r7, #7
20000cf8:	2201      	movs	r2, #1
20000cfa:	701a      	strb	r2, [r3, #0]
20000cfc:	e020      	b.n	20000d40 <keyb+0x50>
		// mind the one indexing of rows and columns, to simplify resetting of values
		ActivateRow(row);
20000cfe:	1dfb      	adds	r3, r7, #7
20000d00:	781b      	ldrb	r3, [r3, #0]
20000d02:	0018      	movs	r0, r3
20000d04:	f000 f82a 	bl	20000d5c <ActivateRow>
		column = ReadColumn();
20000d08:	f000 f854 	bl	20000db4 <ReadColumn>
20000d0c:	0002      	movs	r2, r0
20000d0e:	1dbb      	adds	r3, r7, #6
20000d10:	701a      	strb	r2, [r3, #0]
		if (column > 0){
20000d12:	1dbb      	adds	r3, r7, #6
20000d14:	781b      	ldrb	r3, [r3, #0]
20000d16:	2b00      	cmp	r3, #0
20000d18:	d00d      	beq.n	20000d36 <keyb+0x46>
			ActivateRow(0);
20000d1a:	2000      	movs	r0, #0
20000d1c:	f000 f81e 	bl	20000d5c <ActivateRow>
			return key[row - 1][column - 1];
20000d20:	1dfb      	adds	r3, r7, #7
20000d22:	781b      	ldrb	r3, [r3, #0]
20000d24:	1e5a      	subs	r2, r3, #1
20000d26:	1dbb      	adds	r3, r7, #6
20000d28:	781b      	ldrb	r3, [r3, #0]
20000d2a:	3b01      	subs	r3, #1
20000d2c:	490a      	ldr	r1, [pc, #40]	; (20000d58 <keyb+0x68>)
20000d2e:	0092      	lsls	r2, r2, #2
20000d30:	188a      	adds	r2, r1, r2
20000d32:	5cd3      	ldrb	r3, [r2, r3]
20000d34:	e00c      	b.n	20000d50 <keyb+0x60>
	for (unsigned char row = 1; row <= 4; row++) {
20000d36:	1dfb      	adds	r3, r7, #7
20000d38:	781a      	ldrb	r2, [r3, #0]
20000d3a:	1dfb      	adds	r3, r7, #7
20000d3c:	3201      	adds	r2, #1
20000d3e:	701a      	strb	r2, [r3, #0]
20000d40:	1dfb      	adds	r3, r7, #7
20000d42:	781b      	ldrb	r3, [r3, #0]
20000d44:	2b04      	cmp	r3, #4
20000d46:	d9da      	bls.n	20000cfe <keyb+0xe>
			//return decode7segMatrix[row - 1][column - 1];
		}
	}
	ActivateRow(0);
20000d48:	2000      	movs	r0, #0
20000d4a:	f000 f807 	bl	20000d5c <ActivateRow>
	return 0xFF;
20000d4e:	23ff      	movs	r3, #255	; 0xff
}
20000d50:	0018      	movs	r0, r3
20000d52:	46bd      	mov	sp, r7
20000d54:	b002      	add	sp, #8
20000d56:	bd80      	pop	{r7, pc}
20000d58:	20001168 	andcs	r1, r0, r8, ror #2

20000d5c <ActivateRow>:

void ActivateRow(unsigned char row) {
20000d5c:	b580      	push	{r7, lr}
20000d5e:	b082      	sub	sp, #8
20000d60:	af00      	add	r7, sp, #0
20000d62:	0002      	movs	r2, r0
20000d64:	1dfb      	adds	r3, r7, #7
20000d66:	701a      	strb	r2, [r3, #0]
	switch(row){
20000d68:	1dfb      	adds	r3, r7, #7
20000d6a:	781b      	ldrb	r3, [r3, #0]
20000d6c:	2b04      	cmp	r3, #4
20000d6e:	d818      	bhi.n	20000da2 <ActivateRow+0x46>
20000d70:	009a      	lsls	r2, r3, #2
20000d72:	4b0e      	ldr	r3, [pc, #56]	; (20000dac <ActivateRow+0x50>)
20000d74:	18d3      	adds	r3, r2, r3
20000d76:	681b      	ldr	r3, [r3, #0]
20000d78:	469f      	mov	pc, r3
		case 0: GPIO_D.odrHigh = 0x0; break; //0 to reset
20000d7a:	4b0d      	ldr	r3, [pc, #52]	; (20000db0 <ActivateRow+0x54>)
20000d7c:	2200      	movs	r2, #0
20000d7e:	755a      	strb	r2, [r3, #21]
20000d80:	e00f      	b.n	20000da2 <ActivateRow+0x46>
		case 1: GPIO_D.odrHigh = 0x10; break;
20000d82:	4b0b      	ldr	r3, [pc, #44]	; (20000db0 <ActivateRow+0x54>)
20000d84:	2210      	movs	r2, #16
20000d86:	755a      	strb	r2, [r3, #21]
20000d88:	e00b      	b.n	20000da2 <ActivateRow+0x46>
		case 2: GPIO_D.odrHigh = 0x20; break;
20000d8a:	4b09      	ldr	r3, [pc, #36]	; (20000db0 <ActivateRow+0x54>)
20000d8c:	2220      	movs	r2, #32
20000d8e:	755a      	strb	r2, [r3, #21]
20000d90:	e007      	b.n	20000da2 <ActivateRow+0x46>
		case 3: GPIO_D.odrHigh = 0x40; break;
20000d92:	4b07      	ldr	r3, [pc, #28]	; (20000db0 <ActivateRow+0x54>)
20000d94:	2240      	movs	r2, #64	; 0x40
20000d96:	755a      	strb	r2, [r3, #21]
20000d98:	e003      	b.n	20000da2 <ActivateRow+0x46>
		case 4: GPIO_D.odrHigh = 0x80; break;
20000d9a:	4b05      	ldr	r3, [pc, #20]	; (20000db0 <ActivateRow+0x54>)
20000d9c:	2280      	movs	r2, #128	; 0x80
20000d9e:	755a      	strb	r2, [r3, #21]
20000da0:	46c0      	nop			; (mov r8, r8)
	}
}
20000da2:	46c0      	nop			; (mov r8, r8)
20000da4:	46bd      	mov	sp, r7
20000da6:	b002      	add	sp, #8
20000da8:	bd80      	pop	{r7, pc}
20000daa:	46c0      	nop			; (mov r8, r8)
20000dac:	20001258 	andcs	r1, r0, r8, asr r2
20000db0:	40020c00 	andmi	r0, r2, r0, lsl #24

20000db4 <ReadColumn>:

int ReadColumn(void) {
20000db4:	b580      	push	{r7, lr}
20000db6:	b082      	sub	sp, #8
20000db8:	af00      	add	r7, sp, #0
	// Returns column number of pressed key, observe that the columns of the keyboard are read from right to left!
	unsigned char c;
	c = GPIO_D.idrHigh;
20000dba:	4a12      	ldr	r2, [pc, #72]	; (20000e04 <ReadColumn+0x50>)
20000dbc:	1dfb      	adds	r3, r7, #7
20000dbe:	7c52      	ldrb	r2, [r2, #17]
20000dc0:	701a      	strb	r2, [r3, #0]
	if (c & 0x8){return 4;}
20000dc2:	1dfb      	adds	r3, r7, #7
20000dc4:	781b      	ldrb	r3, [r3, #0]
20000dc6:	2208      	movs	r2, #8
20000dc8:	4013      	ands	r3, r2
20000dca:	d001      	beq.n	20000dd0 <ReadColumn+0x1c>
20000dcc:	2304      	movs	r3, #4
20000dce:	e015      	b.n	20000dfc <ReadColumn+0x48>
	if (c & 0x4){return 3;}
20000dd0:	1dfb      	adds	r3, r7, #7
20000dd2:	781b      	ldrb	r3, [r3, #0]
20000dd4:	2204      	movs	r2, #4
20000dd6:	4013      	ands	r3, r2
20000dd8:	d001      	beq.n	20000dde <ReadColumn+0x2a>
20000dda:	2303      	movs	r3, #3
20000ddc:	e00e      	b.n	20000dfc <ReadColumn+0x48>
	if (c & 0x2){return 2;}
20000dde:	1dfb      	adds	r3, r7, #7
20000de0:	781b      	ldrb	r3, [r3, #0]
20000de2:	2202      	movs	r2, #2
20000de4:	4013      	ands	r3, r2
20000de6:	d001      	beq.n	20000dec <ReadColumn+0x38>
20000de8:	2302      	movs	r3, #2
20000dea:	e007      	b.n	20000dfc <ReadColumn+0x48>
	if (c & 0x1){return 1;}
20000dec:	1dfb      	adds	r3, r7, #7
20000dee:	781b      	ldrb	r3, [r3, #0]
20000df0:	2201      	movs	r2, #1
20000df2:	4013      	ands	r3, r2
20000df4:	d001      	beq.n	20000dfa <ReadColumn+0x46>
20000df6:	2301      	movs	r3, #1
20000df8:	e000      	b.n	20000dfc <ReadColumn+0x48>
	return 0;
20000dfa:	2300      	movs	r3, #0
20000dfc:	0018      	movs	r0, r3
20000dfe:	46bd      	mov	sp, r7
20000e00:	b002      	add	sp, #8
20000e02:	bd80      	pop	{r7, pc}
20000e04:	40020c00 	andmi	r0, r2, r0, lsl #24

20000e08 <sprites_init>:
#include "sprites.h"

void sprites_init(void){
20000e08:	b580      	push	{r7, lr}
20000e0a:	4f7c      	ldr	r7, [pc, #496]	; (20000ffc <sprites_init+0x1f4>)
20000e0c:	44bd      	add	sp, r7
20000e0e:	af00      	add	r7, sp, #0
    GEOMETRY spoopy_geometry = {
20000e10:	4b7b      	ldr	r3, [pc, #492]	; (20001000 <sprites_init+0x1f8>)
20000e12:	228c      	movs	r2, #140	; 0x8c
20000e14:	00d2      	lsls	r2, r2, #3
20000e16:	4694      	mov	ip, r2
20000e18:	44bc      	add	ip, r7
20000e1a:	4463      	add	r3, ip
20000e1c:	0018      	movs	r0, r3
20000e1e:	2383      	movs	r3, #131	; 0x83
20000e20:	009b      	lsls	r3, r3, #2
20000e22:	001a      	movs	r2, r3
20000e24:	2100      	movs	r1, #0
20000e26:	f000 f8fd 	bl	20001024 <memset>
20000e2a:	4b75      	ldr	r3, [pc, #468]	; (20001000 <sprites_init+0x1f8>)
20000e2c:	228c      	movs	r2, #140	; 0x8c
20000e2e:	00d2      	lsls	r2, r2, #3
20000e30:	4694      	mov	ip, r2
20000e32:	44bc      	add	ip, r7
20000e34:	4463      	add	r3, ip
20000e36:	2220      	movs	r2, #32
20000e38:	601a      	str	r2, [r3, #0]
20000e3a:	4b71      	ldr	r3, [pc, #452]	; (20001000 <sprites_init+0x1f8>)
20000e3c:	228c      	movs	r2, #140	; 0x8c
20000e3e:	00d2      	lsls	r2, r2, #3
20000e40:	4694      	mov	ip, r2
20000e42:	44bc      	add	ip, r7
20000e44:	4463      	add	r3, ip
20000e46:	2210      	movs	r2, #16
20000e48:	605a      	str	r2, [r3, #4]
20000e4a:	4b6d      	ldr	r3, [pc, #436]	; (20001000 <sprites_init+0x1f8>)
20000e4c:	228c      	movs	r2, #140	; 0x8c
20000e4e:	00d2      	lsls	r2, r2, #3
20000e50:	4694      	mov	ip, r2
20000e52:	44bc      	add	ip, r7
20000e54:	4463      	add	r3, ip
20000e56:	2210      	movs	r2, #16
20000e58:	609a      	str	r2, [r3, #8]
20000e5a:	4b6a      	ldr	r3, [pc, #424]	; (20001004 <sprites_init+0x1fc>)
20000e5c:	b2da      	uxtb	r2, r3
20000e5e:	4b68      	ldr	r3, [pc, #416]	; (20001000 <sprites_init+0x1f8>)
20000e60:	218c      	movs	r1, #140	; 0x8c
20000e62:	00c9      	lsls	r1, r1, #3
20000e64:	468c      	mov	ip, r1
20000e66:	44bc      	add	ip, r7
20000e68:	4463      	add	r3, ip
20000e6a:	731a      	strb	r2, [r3, #12]
		spoopy_width, spoopy_height, // Size x and y
		// px
		spoopy_bits
	};
	
	OBJECT spoopy = {
20000e6c:	4b66      	ldr	r3, [pc, #408]	; (20001008 <sprites_init+0x200>)
20000e6e:	228c      	movs	r2, #140	; 0x8c
20000e70:	00d2      	lsls	r2, r2, #3
20000e72:	4694      	mov	ip, r2
20000e74:	44bc      	add	ip, r7
20000e76:	4463      	add	r3, ip
20000e78:	2295      	movs	r2, #149	; 0x95
20000e7a:	0092      	lsls	r2, r2, #2
20000e7c:	18ba      	adds	r2, r7, r2
20000e7e:	601a      	str	r2, [r3, #0]
20000e80:	4b61      	ldr	r3, [pc, #388]	; (20001008 <sprites_init+0x200>)
20000e82:	228c      	movs	r2, #140	; 0x8c
20000e84:	00d2      	lsls	r2, r2, #3
20000e86:	4694      	mov	ip, r2
20000e88:	44bc      	add	ip, r7
20000e8a:	4463      	add	r3, ip
20000e8c:	2200      	movs	r2, #0
20000e8e:	605a      	str	r2, [r3, #4]
20000e90:	4b5d      	ldr	r3, [pc, #372]	; (20001008 <sprites_init+0x200>)
20000e92:	228c      	movs	r2, #140	; 0x8c
20000e94:	00d2      	lsls	r2, r2, #3
20000e96:	4694      	mov	ip, r2
20000e98:	44bc      	add	ip, r7
20000e9a:	4463      	add	r3, ip
20000e9c:	2200      	movs	r2, #0
20000e9e:	609a      	str	r2, [r3, #8]
20000ea0:	4b59      	ldr	r3, [pc, #356]	; (20001008 <sprites_init+0x200>)
20000ea2:	228c      	movs	r2, #140	; 0x8c
20000ea4:	00d2      	lsls	r2, r2, #3
20000ea6:	4694      	mov	ip, r2
20000ea8:	44bc      	add	ip, r7
20000eaa:	4463      	add	r3, ip
20000eac:	2201      	movs	r2, #1
20000eae:	60da      	str	r2, [r3, #12]
20000eb0:	4b55      	ldr	r3, [pc, #340]	; (20001008 <sprites_init+0x200>)
20000eb2:	228c      	movs	r2, #140	; 0x8c
20000eb4:	00d2      	lsls	r2, r2, #3
20000eb6:	4694      	mov	ip, r2
20000eb8:	44bc      	add	ip, r7
20000eba:	4463      	add	r3, ip
20000ebc:	2202      	movs	r2, #2
20000ebe:	611a      	str	r2, [r3, #16]
20000ec0:	4b51      	ldr	r3, [pc, #324]	; (20001008 <sprites_init+0x200>)
20000ec2:	228c      	movs	r2, #140	; 0x8c
20000ec4:	00d2      	lsls	r2, r2, #3
20000ec6:	4694      	mov	ip, r2
20000ec8:	44bc      	add	ip, r7
20000eca:	4463      	add	r3, ip
20000ecc:	4a4f      	ldr	r2, [pc, #316]	; (2000100c <sprites_init+0x204>)
20000ece:	615a      	str	r2, [r3, #20]
20000ed0:	4b4d      	ldr	r3, [pc, #308]	; (20001008 <sprites_init+0x200>)
20000ed2:	228c      	movs	r2, #140	; 0x8c
20000ed4:	00d2      	lsls	r2, r2, #3
20000ed6:	4694      	mov	ip, r2
20000ed8:	44bc      	add	ip, r7
20000eda:	4463      	add	r3, ip
20000edc:	4a4c      	ldr	r2, [pc, #304]	; (20001010 <sprites_init+0x208>)
20000ede:	619a      	str	r2, [r3, #24]
20000ee0:	4b49      	ldr	r3, [pc, #292]	; (20001008 <sprites_init+0x200>)
20000ee2:	228c      	movs	r2, #140	; 0x8c
20000ee4:	00d2      	lsls	r2, r2, #3
20000ee6:	4694      	mov	ip, r2
20000ee8:	44bc      	add	ip, r7
20000eea:	4463      	add	r3, ip
20000eec:	4a49      	ldr	r2, [pc, #292]	; (20001014 <sprites_init+0x20c>)
20000eee:	61da      	str	r2, [r3, #28]
20000ef0:	4b45      	ldr	r3, [pc, #276]	; (20001008 <sprites_init+0x200>)
20000ef2:	228c      	movs	r2, #140	; 0x8c
20000ef4:	00d2      	lsls	r2, r2, #3
20000ef6:	4694      	mov	ip, r2
20000ef8:	44bc      	add	ip, r7
20000efa:	4463      	add	r3, ip
20000efc:	4a46      	ldr	r2, [pc, #280]	; (20001018 <sprites_init+0x210>)
20000efe:	621a      	str	r2, [r3, #32]
		clear_object,
		move_object,
		set_object_speed
	};
	
	GEOMETRY portal_geometry = {
20000f00:	4b46      	ldr	r3, [pc, #280]	; (2000101c <sprites_init+0x214>)
20000f02:	228c      	movs	r2, #140	; 0x8c
20000f04:	00d2      	lsls	r2, r2, #3
20000f06:	4694      	mov	ip, r2
20000f08:	44bc      	add	ip, r7
20000f0a:	4463      	add	r3, ip
20000f0c:	0018      	movs	r0, r3
20000f0e:	2383      	movs	r3, #131	; 0x83
20000f10:	009b      	lsls	r3, r3, #2
20000f12:	001a      	movs	r2, r3
20000f14:	2100      	movs	r1, #0
20000f16:	f000 f885 	bl	20001024 <memset>
20000f1a:	4b40      	ldr	r3, [pc, #256]	; (2000101c <sprites_init+0x214>)
20000f1c:	228c      	movs	r2, #140	; 0x8c
20000f1e:	00d2      	lsls	r2, r2, #3
20000f20:	4694      	mov	ip, r2
20000f22:	44bc      	add	ip, r7
20000f24:	4463      	add	r3, ip
20000f26:	2220      	movs	r2, #32
20000f28:	601a      	str	r2, [r3, #0]
20000f2a:	4b3c      	ldr	r3, [pc, #240]	; (2000101c <sprites_init+0x214>)
20000f2c:	228c      	movs	r2, #140	; 0x8c
20000f2e:	00d2      	lsls	r2, r2, #3
20000f30:	4694      	mov	ip, r2
20000f32:	44bc      	add	ip, r7
20000f34:	4463      	add	r3, ip
20000f36:	2210      	movs	r2, #16
20000f38:	605a      	str	r2, [r3, #4]
20000f3a:	4b38      	ldr	r3, [pc, #224]	; (2000101c <sprites_init+0x214>)
20000f3c:	228c      	movs	r2, #140	; 0x8c
20000f3e:	00d2      	lsls	r2, r2, #3
20000f40:	4694      	mov	ip, r2
20000f42:	44bc      	add	ip, r7
20000f44:	4463      	add	r3, ip
20000f46:	2210      	movs	r2, #16
20000f48:	609a      	str	r2, [r3, #8]
20000f4a:	4b35      	ldr	r3, [pc, #212]	; (20001020 <sprites_init+0x218>)
20000f4c:	b2da      	uxtb	r2, r3
20000f4e:	4b33      	ldr	r3, [pc, #204]	; (2000101c <sprites_init+0x214>)
20000f50:	218c      	movs	r1, #140	; 0x8c
20000f52:	00c9      	lsls	r1, r1, #3
20000f54:	468c      	mov	ip, r1
20000f56:	44bc      	add	ip, r7
20000f58:	4463      	add	r3, ip
20000f5a:	731a      	strb	r2, [r3, #12]
		32,
		portal_width, portal_height,
		portal_bits
	};
	
	OBJECT portal = {
20000f5c:	4b27      	ldr	r3, [pc, #156]	; (20000ffc <sprites_init+0x1f4>)
20000f5e:	228c      	movs	r2, #140	; 0x8c
20000f60:	00d2      	lsls	r2, r2, #3
20000f62:	4694      	mov	ip, r2
20000f64:	44bc      	add	ip, r7
20000f66:	4463      	add	r3, ip
20000f68:	2224      	movs	r2, #36	; 0x24
20000f6a:	18ba      	adds	r2, r7, r2
20000f6c:	601a      	str	r2, [r3, #0]
20000f6e:	4b23      	ldr	r3, [pc, #140]	; (20000ffc <sprites_init+0x1f4>)
20000f70:	228c      	movs	r2, #140	; 0x8c
20000f72:	00d2      	lsls	r2, r2, #3
20000f74:	4694      	mov	ip, r2
20000f76:	44bc      	add	ip, r7
20000f78:	4463      	add	r3, ip
20000f7a:	2200      	movs	r2, #0
20000f7c:	605a      	str	r2, [r3, #4]
20000f7e:	4b1f      	ldr	r3, [pc, #124]	; (20000ffc <sprites_init+0x1f4>)
20000f80:	228c      	movs	r2, #140	; 0x8c
20000f82:	00d2      	lsls	r2, r2, #3
20000f84:	4694      	mov	ip, r2
20000f86:	44bc      	add	ip, r7
20000f88:	4463      	add	r3, ip
20000f8a:	2200      	movs	r2, #0
20000f8c:	609a      	str	r2, [r3, #8]
20000f8e:	4b1b      	ldr	r3, [pc, #108]	; (20000ffc <sprites_init+0x1f4>)
20000f90:	228c      	movs	r2, #140	; 0x8c
20000f92:	00d2      	lsls	r2, r2, #3
20000f94:	4694      	mov	ip, r2
20000f96:	44bc      	add	ip, r7
20000f98:	4463      	add	r3, ip
20000f9a:	2201      	movs	r2, #1
20000f9c:	60da      	str	r2, [r3, #12]
20000f9e:	4b17      	ldr	r3, [pc, #92]	; (20000ffc <sprites_init+0x1f4>)
20000fa0:	228c      	movs	r2, #140	; 0x8c
20000fa2:	00d2      	lsls	r2, r2, #3
20000fa4:	4694      	mov	ip, r2
20000fa6:	44bc      	add	ip, r7
20000fa8:	4463      	add	r3, ip
20000faa:	2201      	movs	r2, #1
20000fac:	611a      	str	r2, [r3, #16]
20000fae:	4b13      	ldr	r3, [pc, #76]	; (20000ffc <sprites_init+0x1f4>)
20000fb0:	228c      	movs	r2, #140	; 0x8c
20000fb2:	00d2      	lsls	r2, r2, #3
20000fb4:	4694      	mov	ip, r2
20000fb6:	44bc      	add	ip, r7
20000fb8:	4463      	add	r3, ip
20000fba:	4a14      	ldr	r2, [pc, #80]	; (2000100c <sprites_init+0x204>)
20000fbc:	615a      	str	r2, [r3, #20]
20000fbe:	4b0f      	ldr	r3, [pc, #60]	; (20000ffc <sprites_init+0x1f4>)
20000fc0:	228c      	movs	r2, #140	; 0x8c
20000fc2:	00d2      	lsls	r2, r2, #3
20000fc4:	4694      	mov	ip, r2
20000fc6:	44bc      	add	ip, r7
20000fc8:	4463      	add	r3, ip
20000fca:	4a11      	ldr	r2, [pc, #68]	; (20001010 <sprites_init+0x208>)
20000fcc:	619a      	str	r2, [r3, #24]
20000fce:	4b0b      	ldr	r3, [pc, #44]	; (20000ffc <sprites_init+0x1f4>)
20000fd0:	228c      	movs	r2, #140	; 0x8c
20000fd2:	00d2      	lsls	r2, r2, #3
20000fd4:	4694      	mov	ip, r2
20000fd6:	44bc      	add	ip, r7
20000fd8:	4463      	add	r3, ip
20000fda:	4a0e      	ldr	r2, [pc, #56]	; (20001014 <sprites_init+0x20c>)
20000fdc:	61da      	str	r2, [r3, #28]
20000fde:	4b07      	ldr	r3, [pc, #28]	; (20000ffc <sprites_init+0x1f4>)
20000fe0:	228c      	movs	r2, #140	; 0x8c
20000fe2:	00d2      	lsls	r2, r2, #3
20000fe4:	4694      	mov	ip, r2
20000fe6:	44bc      	add	ip, r7
20000fe8:	4463      	add	r3, ip
20000fea:	4a0b      	ldr	r2, [pc, #44]	; (20001018 <sprites_init+0x210>)
20000fec:	621a      	str	r2, [r3, #32]
		draw_object,
		clear_object,
		move_object,
		set_object_speed
	};
20000fee:	46c0      	nop			; (mov r8, r8)
20000ff0:	46bd      	mov	sp, r7
20000ff2:	238c      	movs	r3, #140	; 0x8c
20000ff4:	00db      	lsls	r3, r3, #3
20000ff6:	449d      	add	sp, r3
20000ff8:	bd80      	pop	{r7, pc}
20000ffa:	46c0      	nop			; (mov r8, r8)
20000ffc:	fffffba0 			; <UNDEFINED> instruction: 0xfffffba0
20001000:	fffffdf4 			; <UNDEFINED> instruction: 0xfffffdf4
20001004:	20001178 	andcs	r1, r0, r8, ror r1
20001008:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
2000100c:	200007dd 	ldrdcs	r0, [r0], -sp
20001010:	20000841 	andcs	r0, r0, r1, asr #16
20001014:	200008a5 	andcs	r0, r0, r5, lsr #17
20001018:	20000925 	andcs	r0, r0, r5, lsr #18
2000101c:	fffffbc4 			; <UNDEFINED> instruction: 0xfffffbc4
20001020:	20001218 	andcs	r1, r0, r8, lsl r2

20001024 <memset>:
20001024:	0003      	movs	r3, r0
20001026:	1882      	adds	r2, r0, r2
20001028:	4293      	cmp	r3, r2
2000102a:	d100      	bne.n	2000102e <memset+0xa>
2000102c:	4770      	bx	lr
2000102e:	7019      	strb	r1, [r3, #0]
20001030:	3301      	adds	r3, #1
20001032:	e7f9      	b.n	20001028 <memset+0x4>

20001034 <delay_counter>:
20001034:	00000000 	andeq	r0, r0, r0

20001038 <mikro>:
20001038:	00000000 	andeq	r0, r0, r0

2000103c <portal>:
	...

20001060 <spoopy>:
	...

20001084 <spoopy_bits>:
20001084:	c2433c3c 	subgt	r3, r3, #60, 24	; 0x3c00
20001088:	d00fb99d 	mulle	pc, sp, r9	; <UNPREDICTABLE>
2000108c:	524a2e74 	subpl	r2, sl, #116, 28	; 0x740
20001090:	5e7a566a 	cdppl	6, 7, cr5, cr10, cr10, {3}
20001094:	1ff82184 	svcne	0x00f82184
20001098:	100c0c30 	andne	r0, ip, r0, lsr ip
2000109c:	38162412 	ldmdacc	r6, {r1, r4, sl, sp}
200010a0:	1e7811c8 	rpwne<illegal precision>m	f1, f0, #0.0

200010a4 <spoopy_right_bits>:
200010a4:	0f0607f8 	svceq	0x000607f8
200010a8:	20091031 	andcs	r1, r9, r1, lsr r0
200010ac:	24842707 	strcs	r2, [r4], #1799	; 0x707
200010b0:	27842684 	strcs	r2, [r4, r4, lsl #13]
200010b4:	0ff01808 	svceq	0x00f01808
200010b8:	180c0c30 	stmdane	ip, {r4, r5, sl, fp}
200010bc:	08161812 	ldmdaeq	r6, {r1, r4, fp, ip}
200010c0:	1e7811c8 	rpwne<illegal precision>m	f1, f0, #0.0

200010c4 <spoopy_left_bits>:
200010c4:	60f01fe0 	rscsvs	r1, r0, r0, ror #31
200010c8:	90048c08 	andls	r8, r4, r8, lsl #24
200010cc:	2124e0e4 			; <UNDEFINED> instruction: 0x2124e0e4
200010d0:	21e42164 	mvncs	r2, r4, ror #2
200010d4:	0ff01018 	svceq	0x00f01018
200010d8:	30180c30 	andscc	r0, r8, r0, lsr ip
200010dc:	68104818 	ldmdavs	r0, {r3, r4, fp, lr}
200010e0:	1e781388 	cdpne	3, 7, cr1, cr8, cr8, {4}

200010e4 <spoopy_back_bits>:
200010e4:	c2433c3c 	subgt	r3, r3, #60, 24	; 0x3c00
200010e8:	f00bb99d 			; <UNDEFINED> instruction: 0xf00bb99d
200010ec:	40022004 	andmi	r2, r2, r4
200010f0:	40024002 	andmi	r4, r2, r2
200010f4:	1ff82004 	svcne	0x00f82004
200010f8:	300e0810 	andcc	r0, lr, r0, lsl r8
200010fc:	780c4802 	stmdavc	ip, {r1, fp, lr}
20001100:	1e781388 	cdpne	3, 7, cr1, cr8, cr8, {4}

20001104 <enemy_bits>:
20001104:	7ffe781e 	svcvc	0x00fe781e
20001108:	2c346006 	ldccs	0, cr6, [r4], #-24	; 0xffffffe8
2000110c:	12481668 	subne	r1, r8, #104, 12	; 0x6800000
20001110:	07e00c30 			; <UNDEFINED> instruction: 0x07e00c30
20001114:	0db00660 	ldceq	6, cr0, [r0, #384]!	; 0x180
20001118:	17680ad0 			; <UNDEFINED> instruction: 0x17680ad0
2000111c:	366c399c 			; <UNDEFINED> instruction: 0x366c399c
20001120:	399c2ff4 	ldmibcc	ip, {r2, r4, r5, r6, r7, r8, r9, sl, fp, sp}

20001124 <portal_bits>:
20001124:	aaaa5555 	bge	1ea96680 <startup-0x1569980>
20001128:	aaaa5555 	bge	1ea96684 <startup-0x156997c>
2000112c:	aaaa5555 	bge	1ea96688 <startup-0x1569978>
20001130:	aaaa5555 	bge	1ea9668c <startup-0x1569974>
20001134:	aaaa5555 	bge	1ea96690 <startup-0x1569970>
20001138:	aaaa5555 	bge	1ea96694 <startup-0x156996c>
2000113c:	aaaa5555 	bge	1ea96698 <startup-0x1569968>
20001140:	aaaa5555 	bge	1ea9669c <startup-0x1569964>

20001144 <end_portal_bits>:
20001144:	aaaa5555 	bge	1ea966a0 <startup-0x1569960>
20001148:	daa27555 	ble	1e89e6a4 <startup-0x176195c>
2000114c:	aaaa7555 	bge	1ea9e6a8 <startup-0x1561958>
20001150:	aaaa5555 	bge	1ea966ac <startup-0x1569954>
20001154:	aaaa5555 	bge	1ea966b0 <startup-0x1569950>
20001158:	8aaa5555 	bhi	1ea966b4 <startup-0x156994c>
2000115c:	fabe555d 	blx	1ef966d8 <startup-0x1069928>
20001160:	8aaa555d 	bhi	1ea966dc <startup-0x1569924>

20001164 <systick_flag>:
20001164:	00000001 	andeq	r0, r0, r1

20001168 <key>:
20001168:	0a030201 	beq	200c1974 <end_portal_bits+0xc073c>
2000116c:	0b060504 	bleq	20182584 <end_portal_bits+0x18134c>
20001170:	0c090807 	stceq	8, cr0, [r9], {7}
20001174:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001144 <end_portal_bits>

20001178 <spoopy_bits>:
20001178:	c2433c3c 	subgt	r3, r3, #60, 24	; 0x3c00
2000117c:	d00fb99d 	mulle	pc, sp, r9	; <UNPREDICTABLE>
20001180:	524a2e74 	subpl	r2, sl, #116, 28	; 0x740
20001184:	5e7a566a 	cdppl	6, 7, cr5, cr10, cr10, {3}
20001188:	1ff82184 	svcne	0x00f82184
2000118c:	100c0c30 	andne	r0, ip, r0, lsr ip
20001190:	38162412 	ldmdacc	r6, {r1, r4, sl, sp}
20001194:	1e7811c8 	rpwne<illegal precision>m	f1, f0, #0.0

20001198 <spoopy_right_bits>:
20001198:	0f0607f8 	svceq	0x000607f8
2000119c:	20091031 	andcs	r1, r9, r1, lsr r0
200011a0:	24842707 	strcs	r2, [r4], #1799	; 0x707
200011a4:	27842684 	strcs	r2, [r4, r4, lsl #13]
200011a8:	0ff01808 	svceq	0x00f01808
200011ac:	180c0c30 	stmdane	ip, {r4, r5, sl, fp}
200011b0:	08161812 	ldmdaeq	r6, {r1, r4, fp, ip}
200011b4:	1e7811c8 	rpwne<illegal precision>m	f1, f0, #0.0

200011b8 <spoopy_left_bits>:
200011b8:	60f01fe0 	rscsvs	r1, r0, r0, ror #31
200011bc:	90048c08 	andls	r8, r4, r8, lsl #24
200011c0:	2124e0e4 			; <UNDEFINED> instruction: 0x2124e0e4
200011c4:	21e42164 	mvncs	r2, r4, ror #2
200011c8:	0ff01018 	svceq	0x00f01018
200011cc:	30180c30 	andscc	r0, r8, r0, lsr ip
200011d0:	68104818 	ldmdavs	r0, {r3, r4, fp, lr}
200011d4:	1e781388 	cdpne	3, 7, cr1, cr8, cr8, {4}

200011d8 <spoopy_back_bits>:
200011d8:	c2433c3c 	subgt	r3, r3, #60, 24	; 0x3c00
200011dc:	f00bb99d 			; <UNDEFINED> instruction: 0xf00bb99d
200011e0:	40022004 	andmi	r2, r2, r4
200011e4:	40024002 	andmi	r4, r2, r2
200011e8:	1ff82004 	svcne	0x00f82004
200011ec:	300e0810 	andcc	r0, lr, r0, lsl r8
200011f0:	780c4802 	stmdavc	ip, {r1, fp, lr}
200011f4:	1e781388 	cdpne	3, 7, cr1, cr8, cr8, {4}

200011f8 <enemy_bits>:
200011f8:	7ffe781e 	svcvc	0x00fe781e
200011fc:	2c346006 	ldccs	0, cr6, [r4], #-24	; 0xffffffe8
20001200:	12481668 	subne	r1, r8, #104, 12	; 0x6800000
20001204:	07e00c30 			; <UNDEFINED> instruction: 0x07e00c30
20001208:	0db00660 	ldceq	6, cr0, [r0, #384]!	; 0x180
2000120c:	17680ad0 			; <UNDEFINED> instruction: 0x17680ad0
20001210:	366c399c 			; <UNDEFINED> instruction: 0x366c399c
20001214:	399c2ff4 	ldmibcc	ip, {r2, r4, r5, r6, r7, r8, r9, sl, fp, sp}

20001218 <portal_bits>:
20001218:	aaaa5555 	bge	1ea96774 <startup-0x156988c>
2000121c:	aaaa5555 	bge	1ea96778 <startup-0x1569888>
20001220:	aaaa5555 	bge	1ea9677c <startup-0x1569884>
20001224:	aaaa5555 	bge	1ea96780 <startup-0x1569880>
20001228:	aaaa5555 	bge	1ea96784 <startup-0x156987c>
2000122c:	aaaa5555 	bge	1ea96788 <startup-0x1569878>
20001230:	aaaa5555 	bge	1ea9678c <startup-0x1569874>
20001234:	aaaa5555 	bge	1ea96790 <startup-0x1569870>

20001238 <end_portal_bits>:
20001238:	aaaa5555 	bge	1ea96794 <startup-0x156986c>
2000123c:	daa27555 	ble	1e89e798 <startup-0x1761868>
20001240:	aaaa7555 	bge	1ea9e79c <startup-0x1561864>
20001244:	aaaa5555 	bge	1ea967a0 <startup-0x1569860>
20001248:	aaaa5555 	bge	1ea967a4 <startup-0x156985c>
2000124c:	8aaa5555 	bhi	1ea967a8 <startup-0x1569858>
20001250:	fabe555d 	blx	1ef967cc <startup-0x1069834>
20001254:	8aaa555d 	bhi	1ea967d0 <startup-0x1569830>
20001258:	20000d7a 	andcs	r0, r0, sl, ror sp
2000125c:	20000d82 	andcs	r0, r0, r2, lsl #27
20001260:	20000d8a 	andcs	r0, r0, sl, lsl #27
20001264:	20000d92 	mulcs	r0, r2, sp
20001268:	20000d9a 	mulcs	r0, sl, sp

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002f3 	strdeq	r0, [r0], -r3
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000021 	andeq	r0, r0, r1, lsr #32
      10:	00017a0c 	andeq	r7, r1, ip, lsl #20
	...
      20:	08010200 	stmdaeq	r1, {r9}
      24:	00000147 	andeq	r0, r0, r7, asr #2
      28:	d3070402 	movwle	r0, #29698	; 0x7402
      2c:	02000001 	andeq	r0, r0, #1
      30:	01cd0702 	biceq	r0, sp, r2, lsl #14
      34:	13030000 	movwne	r0, #12288	; 0x3000
      38:	02000001 	andeq	r0, r0, #1
      3c:	00002118 	andeq	r2, r0, r8, lsl r1
      40:	01550400 	cmpeq	r5, r0, lsl #8
      44:	02020000 	andeq	r0, r2, #0
      48:	0000621a 	andeq	r6, r0, sl, lsl r2
      4c:	00780500 	rsbseq	r0, r8, r0, lsl #10
      50:	00361b02 	eorseq	r1, r6, r2, lsl #22
      54:	05000000 	streq	r0, [r0, #-0]
      58:	1c020079 	stcne	0, cr0, [r2], {121}	; 0x79
      5c:	00000036 	andeq	r0, r0, r6, lsr r0
      60:	1b030001 	blne	c006c <startup-0x1ff3ff94>
      64:	02000001 	andeq	r0, r0, #1
      68:	0000411d 	andeq	r4, r0, sp, lsl r1
      6c:	00b90600 	adcseq	r0, r9, r0, lsl #12
      70:	020c0000 	andeq	r0, ip, #0
      74:	00aa1f02 	adceq	r1, sl, r2, lsl #30
      78:	3d070000 	stccc	0, cr0, [r7, #-0]
      7c:	02000001 	andeq	r0, r0, #1
      80:	0000aa20 	andeq	sl, r0, r0, lsr #20
      84:	cc070000 	stcgt	0, cr0, [r7], {-0}
      88:	02000000 	andeq	r0, r0, #0
      8c:	0000aa21 	andeq	sl, r0, r1, lsr #20
      90:	d3070400 	movwle	r0, #29696	; 0x7400
      94:	02000000 	andeq	r0, r0, #0
      98:	0000aa22 	andeq	sl, r0, r2, lsr #20
      9c:	70050800 	andvc	r0, r5, r0, lsl #16
      a0:	23020078 	movwcs	r0, #8312	; 0x2078
      a4:	000000b1 	strheq	r0, [r0], -r1
      a8:	0408000c 	streq	r0, [r8], #-12
      ac:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      b0:	00620900 	rsbeq	r0, r2, r0, lsl #18
      b4:	00c10000 	sbceq	r0, r1, r0
      b8:	c10a0000 	mrsgt	r0, (UNDEF: 10)
      bc:	ff000000 			; <UNDEFINED> instruction: 0xff000000
      c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
      c4:	000000c3 	andeq	r0, r0, r3, asr #1
      c8:	00010203 	andeq	r0, r1, r3, lsl #4
      cc:	d3240200 			; <UNDEFINED> instruction: 0xd3240200
      d0:	0b000000 	bleq	d8 <startup-0x1fffff28>
      d4:	00006d04 	andeq	r6, r0, r4, lsl #26
      d8:	01ec0400 	mvneq	r0, r0, lsl #8
      dc:	02240000 	eoreq	r0, r4, #0
      e0:	00015226 	andeq	r5, r1, r6, lsr #4
      e4:	65670500 	strbvs	r0, [r7, #-1280]!	; 0xfffffb00
      e8:	2702006f 	strcs	r0, [r2, -pc, rrx]
      ec:	000000c8 	andeq	r0, r0, r8, asr #1
      f0:	02340700 	eorseq	r0, r4, #0, 14
      f4:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
      f8:	000000aa 	andeq	r0, r0, sl, lsr #1
      fc:	023a0704 	eorseq	r0, sl, #4, 14	; 0x100000
     100:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
     104:	000000aa 	andeq	r0, r0, sl, lsr #1
     108:	01e00708 	mvneq	r0, r8, lsl #14
     10c:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
     110:	000000aa 	andeq	r0, r0, sl, lsr #1
     114:	01e6070c 	mvneq	r0, ip, lsl #14
     118:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
     11c:	000000aa 	andeq	r0, r0, sl, lsr #1
     120:	01fc0710 	mvnseq	r0, r0, lsl r7
     124:	2a020000 	bcs	8012c <startup-0x1ff7fed4>
     128:	00000163 	andeq	r0, r0, r3, ror #2
     12c:	043c0714 	ldrteq	r0, [ip], #-1812	; 0xfffff8ec
     130:	2b020000 	blcs	80138 <startup-0x1ff7fec8>
     134:	00000163 	andeq	r0, r0, r3, ror #2
     138:	01210718 			; <UNDEFINED> instruction: 0x01210718
     13c:	2c020000 	stccs	0, cr0, [r2], {-0}
     140:	00000163 	andeq	r0, r0, r3, ror #2
     144:	0201071c 	andeq	r0, r1, #28, 14	; 0x700000
     148:	2d020000 	stccs	0, cr0, [r2, #-0]
     14c:	0000017e 	andeq	r0, r0, lr, ror r1
     150:	5d0c0020 	stcpl	0, cr0, [ip, #-128]	; 0xffffff80
     154:	0d000001 	stceq	0, cr0, [r0, #-4]
     158:	0000015d 	andeq	r0, r0, sp, asr r1
     15c:	d9040b00 	stmdble	r4, {r8, r9, fp}
     160:	0b000000 	bleq	168 <startup-0x1ffffe98>
     164:	00015204 	andeq	r5, r1, r4, lsl #4
     168:	017e0c00 	cmneq	lr, r0, lsl #24
     16c:	5d0d0000 	stcpl	0, cr0, [sp, #-0]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	000000aa 	andeq	r0, r0, sl, lsr #1
     178:	0000aa0d 	andeq	sl, r0, sp, lsl #20
     17c:	040b0000 	streq	r0, [fp], #-0
     180:	00000169 	andeq	r0, r0, r9, ror #2
     184:	00022d03 	andeq	r2, r2, r3, lsl #26
     188:	d92e0200 	stmdble	lr!, {r9}
     18c:	03000000 	movweq	r0, #0
     190:	0000022c 	andeq	r0, r0, ip, lsr #4
     194:	015d2e02 	cmpeq	sp, r2, lsl #28
     198:	0c0e0000 	stceq	0, cr0, [lr], {-0}
     19c:	03000001 	movweq	r0, #1
     1a0:	00018408 	andeq	r8, r1, r8, lsl #8
     1a4:	60030500 	andvs	r0, r3, r0, lsl #10
     1a8:	0e200010 	miaeq	acc0, r0, r0
     1ac:	00000225 	andeq	r0, r0, r5, lsr #4
     1b0:	01840903 	orreq	r0, r4, r3, lsl #18
     1b4:	03050000 	movweq	r0, #20480	; 0x5000
     1b8:	2000103c 	andcs	r1, r0, ip, lsr r0
     1bc:	00002109 	andeq	r2, r0, r9, lsl #2
     1c0:	0001cc00 	andeq	ip, r1, r0, lsl #24
     1c4:	00c10a00 	sbceq	r0, r1, r0, lsl #20
     1c8:	001f0000 	andseq	r0, pc, r0
     1cc:	00016e0f 	andeq	r6, r1, pc, lsl #28
     1d0:	bc0d0300 	stclt	3, cr0, [sp], {-0}
     1d4:	05000001 	streq	r0, [r0, #-1]
     1d8:	00108403 	andseq	r8, r0, r3, lsl #8
     1dc:	015c0f20 	cmpeq	ip, r0, lsr #30
     1e0:	15030000 	strne	r0, [r3, #-0]
     1e4:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     1e8:	10a40305 	adcne	r0, r4, r5, lsl #6
     1ec:	140f2000 	strne	r2, [pc], #-0	; 1f4 <startup-0x1ffffe0c>
     1f0:	03000002 	movweq	r0, #2
     1f4:	0001bc1c 	andeq	fp, r1, ip, lsl ip
     1f8:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
     1fc:	0f200010 	svceq	0x00200010
     200:	00000010 	andeq	r0, r0, r0, lsl r0
     204:	01bc2303 			; <UNDEFINED> instruction: 0x01bc2303
     208:	03050000 	movweq	r0, #20480	; 0x5000
     20c:	200010e4 	andcs	r1, r0, r4, ror #1
     210:	0001f10f 	andeq	pc, r1, pc, lsl #2
     214:	bc2a0300 	stclt	3, cr0, [sl], #-0
     218:	05000001 	streq	r0, [r0, #-1]
     21c:	00110403 	andseq	r0, r1, r3, lsl #8
     220:	00040f20 	andeq	r0, r4, r0, lsr #30
     224:	31030000 	mrscc	r0, (UNDEF: 3)
     228:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     22c:	11240305 			; <UNDEFINED> instruction: 0x11240305
     230:	000f2000 	andeq	r2, pc, r0
     234:	03000000 	movweq	r0, #0
     238:	0001bc38 	andeq	fp, r1, r8, lsr ip
     23c:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
     240:	10200011 	eorne	r0, r0, r1, lsl r0
     244:	0000020b 	andeq	r0, r0, fp, lsl #4
     248:	00a82f01 	adceq	r2, r8, r1, lsl #30
     24c:	001a2000 	andseq	r2, sl, r0
     250:	9c010000 	stcls	0, cr0, [r1], {-0}
     254:	00000277 	andeq	r0, r0, r7, ror r2
     258:	00012b11 	andeq	r2, r1, r1, lsl fp
     25c:	aa380100 	bge	e00664 <startup-0x1f1ff99c>
     260:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
     264:	12000002 	andne	r0, r0, #2
     268:	00f41300 	rscseq	r1, r4, r0, lsl #6
     26c:	17010000 	strne	r0, [r1, -r0]
     270:	000000aa 	andeq	r0, r0, sl, lsr #1
     274:	10000012 	andne	r0, r0, r2, lsl r0
     278:	000000e2 	andeq	r0, r0, r2, ror #1
     27c:	00101601 	andseq	r1, r0, r1, lsl #12
     280:	00982000 	addseq	r2, r8, r0
     284:	9c010000 	stcls	0, cr0, [r1], {-0}
     288:	000002e5 	andeq	r0, r0, r5, ror #5
     28c:	0000f411 	andeq	pc, r0, r1, lsl r4	; <UNPREDICTABLE>
     290:	aa170100 	bge	5c0698 <startup-0x1fa3f968>
     294:	9d000000 	stcls	0, cr0, [r0, #-0]
     298:	12000002 	andne	r0, r0, #2
     29c:	010c1400 	tsteq	ip, r0, lsl #8
     2a0:	1a010000 	bne	402a8 <startup-0x1ffbfd58>
     2a4:	00000184 	andeq	r0, r0, r4, lsl #3
     2a8:	00022514 	andeq	r2, r2, r4, lsl r5
     2ac:	841b0100 	ldrhi	r0, [fp], #-256	; 0xffffff00
     2b0:	15000001 	strne	r0, [r0, #-1]
     2b4:	1c010070 	stcne	0, cr0, [r1], {112}	; 0x70
     2b8:	0000018f 	andeq	r0, r0, pc, lsl #3
     2bc:	0f749102 	svceq	0x00749102
     2c0:	000000e7 	andeq	r0, r0, r7, ror #1
     2c4:	00361e01 	eorseq	r1, r6, r1, lsl #28
     2c8:	91020000 	mrsls	r0, (UNDEF: 2)
     2cc:	00221673 	eoreq	r1, r2, r3, ror r6
     2d0:	00802000 	addeq	r2, r0, r0
     2d4:	26130000 	ldrcs	r0, [r3], -r0
     2d8:	01000001 	tsteq	r0, r1
     2dc:	0000aa23 	andeq	sl, r0, r3, lsr #20
     2e0:	00001200 	andeq	r1, r0, r0, lsl #4
     2e4:	00da1700 	sbcseq	r1, sl, r0, lsl #14
     2e8:	0d010000 	stceq	0, cr0, [r1, #-0]
     2ec:	20000000 	andcs	r0, r0, r0
     2f0:	0000000c 	andeq	r0, r0, ip
     2f4:	e2009c01 	and	r9, r0, #256	; 0x100
     2f8:	04000001 	streq	r0, [r0], #-1
     2fc:	00014000 	andeq	r4, r1, r0
     300:	21010400 	tstcs	r1, r0, lsl #8
     304:	0c000000 	stceq	0, cr0, [r0], {-0}
     308:	000002a6 	andeq	r0, r0, r6, lsr #5
     30c:	200000c4 	andcs	r0, r0, r4, asr #1
     310:	00000178 	andeq	r0, r0, r8, ror r1
     314:	000000ce 	andeq	r0, r0, lr, asr #1
     318:	47080102 	strmi	r0, [r8, -r2, lsl #2]
     31c:	02000001 	andeq	r0, r0, #1
     320:	01d30704 	bicseq	r0, r3, r4, lsl #14
     324:	04030000 	streq	r0, [r3], #-0
     328:	00680702 	rsbeq	r0, r8, r2, lsl #14
     32c:	3a040000 	bcc	100334 <startup-0x1feffccc>
     330:	02000003 	andeq	r0, r0, #3
     334:	00002108 	andeq	r2, r0, r8, lsl #2
     338:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
     33c:	02000003 	andeq	r0, r0, #3
     340:	00002109 	andeq	r2, r0, r9, lsl #2
     344:	1e040100 	adfnes	f0, f4, f0
     348:	02000003 	andeq	r0, r0, #3
     34c:	0000210a 	andeq	r2, r0, sl, lsl #2
     350:	52040200 	andpl	r0, r4, #0, 4
     354:	02000003 	andeq	r0, r0, #3
     358:	0000210b 	andeq	r2, r0, fp, lsl #2
     35c:	05000300 	streq	r0, [r0, #-768]	; 0xfffffd00
     360:	81050204 	tsthi	r5, r4, lsl #4
     364:	06000000 	streq	r0, [r0], -r0
     368:	00000295 	muleq	r0, r5, r2
     36c:	00280602 	eoreq	r0, r8, r2, lsl #12
     370:	2f070000 	svccs	0x00070000
     374:	00000000 	andeq	r0, r0, r0
     378:	00035c08 	andeq	r5, r3, r8, lsl #24
     37c:	04021000 	streq	r1, [r2], #-0
     380:	000000b8 	strheq	r0, [r0], -r8
     384:	00006809 	andeq	r6, r0, r9, lsl #16
     388:	01040000 	mrseq	r0, (UNDEF: 4)
     38c:	02000003 	andeq	r0, r0, #3
     390:	0000280e 	andeq	r2, r0, lr, lsl #16
     394:	760a0400 	strvc	r0, [sl], -r0, lsl #8
     398:	02006c61 	andeq	r6, r0, #24832	; 0x6100
     39c:	0000280f 	andeq	r2, r0, pc, lsl #16
     3a0:	92040800 	andls	r0, r4, #0, 16
     3a4:	02000003 	andeq	r0, r0, #3
     3a8:	00002810 	andeq	r2, r0, r0, lsl r8
     3ac:	0b000c00 	bleq	33b4 <startup-0x1fffcc4c>
     3b0:	00000271 	andeq	r0, r0, r1, ror r2
     3b4:	00811102 	addeq	r1, r1, r2, lsl #2
     3b8:	980c0000 	stmdals	ip, {}	; <UNPREDICTABLE>
     3bc:	01000003 	tsteq	r0, r3
     3c0:	0000db03 	andeq	sp, r0, r3, lsl #22
     3c4:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
     3c8:	0d200011 	stceq	0, cr0, [r0, #-68]!	; 0xffffffbc
     3cc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     3d0:	d40e0074 	strle	r0, [lr], #-116	; 0xffffff8c
     3d4:	0f000000 	svceq	0x00000000
     3d8:	0000032c 	andeq	r0, r0, ip, lsr #6
     3dc:	00db0401 	sbcseq	r0, fp, r1, lsl #8
     3e0:	03050000 	movweq	r0, #20480	; 0x5000
     3e4:	20001034 	andcs	r1, r0, r4, lsr r0
     3e8:	0003800f 	andeq	r8, r3, pc
     3ec:	d4050100 	strle	r0, [r5], #-256	; 0xffffff00
     3f0:	05000000 	streq	r0, [r0, #-0]
     3f4:	00103803 	andseq	r3, r0, r3, lsl #16
     3f8:	02511020 	subseq	r1, r1, #32
     3fc:	3c010000 	stccc	0, cr0, [r1], {-0}
     400:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     404:	0000004c 	andeq	r0, r0, ip, asr #32
     408:	4c119c01 	ldcmi	12, cr9, [r1], {1}
     40c:	01000002 	tsteq	r0, r2
     410:	0001d838 	andeq	sp, r1, r8, lsr r8
     414:	00001820 	andeq	r1, r0, r0, lsr #16
     418:	129c0100 	addsne	r0, ip, #0, 2
     41c:	0000029a 	muleq	r0, sl, r2
     420:	01a83101 			; <UNDEFINED> instruction: 0x01a83101
     424:	00302000 	eorseq	r2, r0, r0
     428:	9c010000 	stcls	0, cr0, [r1], {-0}
     42c:	00000148 	andeq	r0, r0, r8, asr #2
     430:	00037213 	andeq	r7, r3, r3, lsl r2
     434:	28310100 	ldmdacs	r1!, {r8}
     438:	02000000 	andeq	r0, r0, #0
     43c:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
     440:	00000240 	andeq	r0, r0, r0, asr #4
     444:	016c2901 	cmneq	ip, r1, lsl #18
     448:	003c2000 	eorseq	r2, ip, r0
     44c:	9c010000 	stcls	0, cr0, [r1], {-0}
     450:	0000016c 	andeq	r0, r0, ip, ror #2
     454:	00026b13 	andeq	r6, r2, r3, lsl fp
     458:	28290100 	stmdacs	r9!, {r8}
     45c:	02000000 	andeq	r0, r0, #0
     460:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
     464:	00000386 	andeq	r0, r0, r6, lsl #7
     468:	01302101 	teqeq	r0, r1, lsl #2
     46c:	003c2000 	eorseq	r2, ip, r0
     470:	9c010000 	stcls	0, cr0, [r1], {-0}
     474:	00000190 	muleq	r0, r0, r1
     478:	00026b13 	andeq	r6, r2, r3, lsl fp
     47c:	28210100 	stmdacs	r1!, {r8}
     480:	02000000 	andeq	r0, r0, #0
     484:	10007491 	mulne	r0, r1, r4
     488:	00000365 	andeq	r0, r0, r5, ror #6
     48c:	01181901 	tsteq	r8, r1, lsl #18
     490:	00182000 	andseq	r2, r8, r0
     494:	9c010000 	stcls	0, cr0, [r1], {-0}
     498:	00037910 	andeq	r7, r3, r0, lsl r9
     49c:	08150100 	ldmdaeq	r5, {r8}
     4a0:	10200001 	eorne	r0, r0, r1
     4a4:	01000000 	mrseq	r0, (UNDEF: 0)
     4a8:	0312109c 	tsteq	r2, #156	; 0x9c
     4ac:	10010000 	andne	r0, r1, r0
     4b0:	200000ec 	andcs	r0, r0, ip, ror #1
     4b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     4b8:	06109c01 	ldreq	r9, [r0], -r1, lsl #24
     4bc:	01000003 	tsteq	r0, r3
     4c0:	0000d20b 	andeq	sp, r0, fp, lsl #4
     4c4:	00001a20 	andeq	r1, r0, r0, lsr #20
     4c8:	109c0100 	addsne	r0, ip, r0, lsl #2
     4cc:	00000280 	andeq	r0, r0, r0, lsl #5
     4d0:	00c40701 	sbceq	r0, r4, r1, lsl #14
     4d4:	000e2000 	andeq	r2, lr, r0
     4d8:	9c010000 	stcls	0, cr0, [r1], {-0}
     4dc:	0005aa00 	andeq	sl, r5, r0, lsl #20
     4e0:	73000400 	movwvc	r0, #1024	; 0x400
     4e4:	04000002 	streq	r0, [r0], #-2
     4e8:	00002101 	andeq	r2, r0, r1, lsl #2
     4ec:	046c0c00 	strbteq	r0, [ip], #-3072	; 0xfffff400
     4f0:	023c0000 	eorseq	r0, ip, #0
     4f4:	07282000 	streq	r2, [r8, -r0]!
     4f8:	01970000 	orrseq	r0, r7, r0
     4fc:	02020000 	andeq	r0, r2, #0
     500:	00420c02 	subeq	r0, r2, r2, lsl #24
     504:	0a030000 	beq	c050c <startup-0x1ff3faf4>
     508:	02000005 	andeq	r0, r0, #5
     50c:	0000420d 	andeq	r4, r0, sp, lsl #4
     510:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
     514:	02000004 	andeq	r0, r0, #4
     518:	0000420e 	andeq	r4, r0, lr, lsl #4
     51c:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
     520:	01470801 	cmpeq	r7, r1, lsl #16
     524:	04050000 	streq	r0, [r5], #-0
     528:	00620a02 	rsbeq	r0, r2, r2, lsl #20
     52c:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
     530:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
     534:	0000620b 	andeq	r6, r0, fp, lsl #4
     538:	00210700 	eoreq	r0, r1, r0, lsl #14
     53c:	04000000 	streq	r0, [r0], #-0
     540:	01d30704 	bicseq	r0, r3, r4, lsl #14
     544:	02020000 	andeq	r0, r2, #0
     548:	008a1302 	addeq	r1, sl, r2, lsl #6
     54c:	da030000 	ble	c0554 <startup-0x1ff3faac>
     550:	02000004 	andeq	r0, r0, #4
     554:	00004214 	andeq	r4, r0, r4, lsl r2
     558:	02030000 	andeq	r0, r3, #0
     55c:	02000004 	andeq	r0, r0, #4
     560:	00004215 	andeq	r4, r0, r5, lsl r2
     564:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     568:	a3110204 	tstge	r1, #4, 4	; 0x40000000
     56c:	06000000 	streq	r0, [r0], -r0
     570:	0072646f 	rsbseq	r6, r2, pc, ror #8
     574:	00621202 	rsbeq	r1, r2, r2, lsl #4
     578:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
     57c:	00000000 	andeq	r0, r0, r0
     580:	0003a508 	andeq	sl, r3, r8, lsl #10
     584:	04021800 	streq	r1, [r2], #-2048	; 0xfffff800
     588:	000000ec 	andeq	r0, r0, ip, ror #1
     58c:	00055b03 	andeq	r5, r5, r3, lsl #22
     590:	62050200 	andvs	r0, r5, #0, 4
     594:	00000000 	andeq	r0, r0, r0
     598:	0003de03 	andeq	sp, r3, r3, lsl #28
     59c:	62060200 	andvs	r0, r6, #0, 4
     5a0:	04000000 	streq	r0, [r0], #-0
     5a4:	0004fd03 	andeq	pc, r4, r3, lsl #26
     5a8:	62070200 	andvs	r0, r7, #0, 4
     5ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     5b0:	00046603 	andeq	r6, r4, r3, lsl #12
     5b4:	62080200 	andvs	r0, r8, #0, 4
     5b8:	0c000000 	stceq	0, cr0, [r0], {-0}
     5bc:	00004909 	andeq	r4, r0, r9, lsl #18
     5c0:	8a091000 	bhi	2445c8 <startup-0x1fdbba38>
     5c4:	14000000 	strne	r0, [r0], #-0
     5c8:	04260a00 	strteq	r0, [r6], #-2560	; 0xfffff600
     5cc:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     5d0:	000000a3 	andeq	r0, r0, r3, lsr #1
     5d4:	0001130a 	andeq	r1, r1, sl, lsl #6
     5d8:	42180300 	andsmi	r0, r8, #0, 6
     5dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     5e0:	00000155 	andeq	r0, r0, r5, asr r1
     5e4:	231a0302 	tstcs	sl, #134217728	; 0x8000000
     5e8:	0b000001 	bleq	5f4 <startup-0x1ffffa0c>
     5ec:	1b030078 	blne	c07d4 <startup-0x1ff3f82c>
     5f0:	000000f7 	strdeq	r0, [r0], -r7
     5f4:	00790b00 	rsbseq	r0, r9, r0, lsl #22
     5f8:	00f71c03 	rscseq	r1, r7, r3, lsl #24
     5fc:	00010000 	andeq	r0, r1, r0
     600:	00011b0a 	andeq	r1, r1, sl, lsl #22
     604:	021d0300 	andseq	r0, sp, #0, 6
     608:	0c000001 	stceq	0, cr0, [r0], {1}
     60c:	000000b9 	strheq	r0, [r0], -r9
     610:	1f03020c 	svcne	0x0003020c
     614:	0000016b 	andeq	r0, r0, fp, ror #2
     618:	00013d03 	andeq	r3, r1, r3, lsl #26
     61c:	6b200300 	blvs	801224 <startup-0x1f7feddc>
     620:	00000001 	andeq	r0, r0, r1
     624:	0000cc03 	andeq	ip, r0, r3, lsl #24
     628:	6b210300 	blvs	841230 <startup-0x1f7bedd0>
     62c:	04000001 	streq	r0, [r0], #-1
     630:	0000d303 	andeq	sp, r0, r3, lsl #6
     634:	6b220300 	blvs	88123c <startup-0x1f77edc4>
     638:	08000001 	stmdaeq	r0, {r0}
     63c:	0078700b 	rsbseq	r7, r8, fp
     640:	01722303 	cmneq	r2, r3, lsl #6
     644:	000c0000 	andeq	r0, ip, r0
     648:	6905040d 	stmdbvs	r5, {r0, r2, r3, sl}
     64c:	0e00746e 	cdpeq	4, 0, cr7, cr0, cr14, {3}
     650:	00000123 	andeq	r0, r0, r3, lsr #2
     654:	00000182 	andeq	r0, r0, r2, lsl #3
     658:	0001820f 	andeq	r8, r1, pc, lsl #4
     65c:	0400ff00 	streq	pc, [r0], #-3840	; 0xfffff100
     660:	00c30704 	sbceq	r0, r3, r4, lsl #14
     664:	020a0000 	andeq	r0, sl, #0
     668:	03000001 	movweq	r0, #1
     66c:	00019424 	andeq	r9, r1, r4, lsr #8
     670:	2e041000 	cdpcs	0, 0, cr1, cr4, cr0, {0}
     674:	08000001 	stmdaeq	r0, {r0}
     678:	000001ec 	andeq	r0, r0, ip, ror #3
     67c:	13260324 			; <UNDEFINED> instruction: 0x13260324
     680:	0b000002 	bleq	690 <startup-0x1ffff970>
     684:	006f6567 	rsbeq	r6, pc, r7, ror #10
     688:	01892703 	orreq	r2, r9, r3, lsl #14
     68c:	03000000 	movweq	r0, #0
     690:	00000234 	andeq	r0, r0, r4, lsr r2
     694:	016b2803 	cmneq	fp, r3, lsl #16
     698:	03040000 	movweq	r0, #16384	; 0x4000
     69c:	0000023a 	andeq	r0, r0, sl, lsr r2
     6a0:	016b2803 	cmneq	fp, r3, lsl #16
     6a4:	03080000 	movweq	r0, #32768	; 0x8000
     6a8:	000001e0 	andeq	r0, r0, r0, ror #3
     6ac:	016b2903 	cmneq	fp, r3, lsl #18
     6b0:	030c0000 	movweq	r0, #49152	; 0xc000
     6b4:	000001e6 	andeq	r0, r0, r6, ror #3
     6b8:	016b2903 	cmneq	fp, r3, lsl #18
     6bc:	03100000 	tsteq	r0, #0
     6c0:	000001fc 	strdeq	r0, [r0], -ip
     6c4:	02242a03 	eoreq	r2, r4, #12288	; 0x3000
     6c8:	03140000 	tsteq	r4, #0
     6cc:	0000043c 	andeq	r0, r0, ip, lsr r4
     6d0:	02242b03 	eoreq	r2, r4, #3072	; 0xc00
     6d4:	03180000 	tsteq	r8, #0
     6d8:	00000121 	andeq	r0, r0, r1, lsr #2
     6dc:	02242c03 	eoreq	r2, r4, #768	; 0x300
     6e0:	031c0000 	tsteq	ip, #0
     6e4:	00000201 	andeq	r0, r0, r1, lsl #4
     6e8:	023f2d03 	eorseq	r2, pc, #3, 26	; 0xc0
     6ec:	00200000 	eoreq	r0, r0, r0
     6f0:	00021e11 	andeq	r1, r2, r1, lsl lr
     6f4:	021e1200 	andseq	r1, lr, #0, 4
     6f8:	10000000 	andne	r0, r0, r0
     6fc:	00019a04 	andeq	r9, r1, r4, lsl #20
     700:	13041000 	movwne	r1, #16384	; 0x4000
     704:	11000002 	tstne	r0, r2
     708:	0000023f 	andeq	r0, r0, pc, lsr r2
     70c:	00021e12 	andeq	r1, r2, r2, lsl lr
     710:	016b1200 	cmneq	fp, r0, lsl #4
     714:	6b120000 	blvs	48071c <startup-0x1fb7f8e4>
     718:	00000001 	andeq	r0, r0, r1
     71c:	022a0410 	eoreq	r0, sl, #16, 8	; 0x10000000
     720:	2c0a0000 	stccs	0, cr0, [sl], {-0}
     724:	03000002 	movweq	r0, #2
     728:	00021e2e 	andeq	r1, r2, lr, lsr #28
     72c:	04c61300 	strbeq	r1, [r6], #768	; 0x300
     730:	1a010000 	bne	40738 <startup-0x1ffbf8c8>
     734:	00094401 	andeq	r4, r9, r1, lsl #8
     738:	00002020 	andeq	r2, r0, r0, lsr #32
     73c:	149c0100 	ldrne	r0, [ip], #256	; 0x100
     740:	00000524 	andeq	r0, r0, r4, lsr #10
     744:	24011501 	strcs	r1, [r1], #-1281	; 0xfffffaff
     748:	20200009 	eorcs	r0, r0, r9
     74c:	01000000 	mrseq	r0, (UNDEF: 0)
     750:	0002a29c 	muleq	r2, ip, r2
     754:	05731500 	ldrbeq	r1, [r3, #-1280]!	; 0xfffffb00
     758:	15010000 	strne	r0, [r1, #-0]
     75c:	00024501 	andeq	r4, r2, r1, lsl #10
     760:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     764:	01007816 	tsteq	r0, r6, lsl r8
     768:	016b0115 	cmneq	fp, r5, lsl r1
     76c:	91020000 	mrsls	r0, (UNDEF: 2)
     770:	00791670 	rsbseq	r1, r9, r0, ror r6
     774:	6b011501 	blvs	45b80 <startup-0x1ffba480>
     778:	02000001 	andeq	r0, r0, #1
     77c:	17006c91 			; <UNDEFINED> instruction: 0x17006c91
     780:	0000056e 	andeq	r0, r0, lr, ror #10
     784:	a4010501 	strge	r0, [r1], #-1281	; 0xfffffaff
     788:	80200008 	eorhi	r0, r0, r8
     78c:	01000000 	mrseq	r0, (UNDEF: 0)
     790:	0002c89c 	muleq	r2, ip, r8
     794:	05731500 	ldrbeq	r1, [r3, #-1280]!	; 0xfffffb00
     798:	05010000 	streq	r0, [r1, #-0]
     79c:	00024501 	andeq	r4, r2, r1, lsl #10
     7a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     7a4:	054e1800 	strbeq	r1, [lr, #-2048]	; 0xfffff800
     7a8:	ff010000 			; <UNDEFINED> instruction: 0xff010000
     7ac:	20000840 	andcs	r0, r0, r0, asr #16
     7b0:	00000064 	andeq	r0, r0, r4, rrx
     7b4:	03039c01 	movweq	r9, #15361	; 0x3c01
     7b8:	73190000 	tstvc	r9, #0
     7bc:	01000005 	tsteq	r0, r5
     7c0:	000245ff 	strdeq	r4, [r2], -pc	; <UNPREDICTABLE>
     7c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     7c8:	0008481a 	andeq	r4, r8, sl, lsl r8
     7cc:	00005420 	andeq	r5, r0, r0, lsr #8
     7d0:	00691b00 	rsbeq	r1, r9, r0, lsl #22
     7d4:	6b010001 	blvs	407e0 <startup-0x1ffbf820>
     7d8:	02000001 	andeq	r0, r0, #1
     7dc:	00007491 	muleq	r0, r1, r4
     7e0:	0003c018 	andeq	ip, r3, r8, lsl r0
     7e4:	dcf90100 	ldflee	f0, [r9]
     7e8:	64200007 	strtvs	r0, [r0], #-7
     7ec:	01000000 	mrseq	r0, (UNDEF: 0)
     7f0:	00033d9c 	muleq	r3, ip, sp
     7f4:	05731900 	ldrbeq	r1, [r3, #-2304]!	; 0xfffff700
     7f8:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
     7fc:	00000245 	andeq	r0, r0, r5, asr #4
     800:	1a6c9102 	bne	1b24c10 <startup-0x1e4db3f0>
     804:	200007e4 	andcs	r0, r0, r4, ror #15
     808:	00000054 	andeq	r0, r0, r4, asr r0
     80c:	0100691c 	tsteq	r0, ip, lsl r9
     810:	00016bfa 	strdeq	r6, [r1], -sl
     814:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     818:	fc180000 	ldc2	0, cr0, [r8], {-0}
     81c:	01000003 	tsteq	r0, r3
     820:	000636c1 	andeq	r3, r6, r1, asr #13
     824:	0001a620 	andeq	sl, r1, r0, lsr #12
     828:	bf9c0100 	svclt	0x009c0100
     82c:	1d000003 	stcne	0, cr0, [r0, #-12]
     830:	c1010078 	tstgt	r1, r8, ror r0
     834:	000000f7 	strdeq	r0, [r0], -r7
     838:	1d679102 	stfnep	f1, [r7, #-8]!
     83c:	c1010079 	tstgt	r1, r9, ror r0
     840:	000000f7 	strdeq	r0, [r0], -r7
     844:	1d669102 	stfnep	f1, [r6, #-8]!
     848:	00746573 	rsbseq	r6, r4, r3, ror r5
     84c:	00f7c101 	rscseq	ip, r7, r1, lsl #2
     850:	91020000 	mrsls	r0, (UNDEF: 2)
     854:	05481e65 	strbeq	r1, [r8, #-3685]	; 0xfffff19b
     858:	cd010000 	stcgt	0, cr0, [r1, #-0]
     85c:	000000f7 	strdeq	r0, [r0], -r7
     860:	1e6c9102 	lgnnee	f1, f2
     864:	00000505 	andeq	r0, r0, r5, lsl #10
     868:	00f7cf01 	rscseq	ip, r7, r1, lsl #30
     86c:	91020000 	mrsls	r0, (UNDEF: 2)
     870:	040a1e6f 	streq	r1, [sl], #-3695	; 0xfffff191
     874:	e1010000 	mrs	r0, (UNDEF: 1)
     878:	000000f7 	strdeq	r0, [r0], -r7
     87c:	1e6e9102 	lgnnee	f1, f2
     880:	0000066a 	andeq	r0, r0, sl, ror #12
     884:	00f7e201 	rscseq	lr, r7, r1, lsl #4
     888:	91020000 	mrsls	r0, (UNDEF: 2)
     88c:	04211e6d 	strteq	r1, [r1], #-3693	; 0xfffff193
     890:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
     894:	000000f7 	strdeq	r0, [r0], -r7
     898:	006b9102 	rsbeq	r9, fp, r2, lsl #2
     89c:	00059018 	andeq	r9, r5, r8, lsl r0
     8a0:	d0b60100 	adcsle	r0, r6, r0, lsl #2
     8a4:	66200005 	strtvs	r0, [r0], -r5
     8a8:	01000000 	mrseq	r0, (UNDEF: 0)
     8ac:	0004059c 	muleq	r4, ip, r5
     8b0:	05d61a00 	ldrbeq	r1, [r6, #2560]	; 0xa00
     8b4:	00582000 	subseq	r2, r8, r0
     8b8:	f71e0000 			; <UNDEFINED> instruction: 0xf71e0000
     8bc:	01000003 	tsteq	r0, r3
     8c0:	0000f7b7 			; <UNDEFINED> instruction: 0x0000f7b7
     8c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     8c8:	0005fa1a 	andeq	pc, r5, sl, lsl sl	; <UNPREDICTABLE>
     8cc:	00002220 	andeq	r2, r0, r0, lsr #4
     8d0:	64611c00 	strbtvs	r1, [r1], #-3072	; 0xfffff400
     8d4:	bb010064 	bllt	40a6c <startup-0x1ffbf594>
     8d8:	000000f7 	strdeq	r0, [r0], -r7
     8dc:	00769102 	rsbseq	r9, r6, r2, lsl #2
     8e0:	531f0000 	tstpl	pc, #0
     8e4:	01000004 	tsteq	r0, r4
     8e8:	000574a1 	andeq	r7, r5, r1, lsr #9
     8ec:	00005c20 	andeq	r5, r0, r0, lsr #24
     8f0:	209c0100 	addscs	r0, ip, r0, lsl #2
     8f4:	000003e5 	andeq	r0, r0, r5, ror #7
     8f8:	00f79c01 	rscseq	r9, r7, r1, lsl #24
     8fc:	054a0000 	strbeq	r0, [sl, #-0]
     900:	002a2000 	eoreq	r2, sl, r0
     904:	9c010000 	stcls	0, cr0, [r1], {-0}
     908:	0000043e 	andeq	r0, r0, lr, lsr r4
     90c:	00066a19 	andeq	r6, r6, r9, lsl sl
     910:	f79c0100 			; <UNDEFINED> instruction: 0xf79c0100
     914:	02000000 	andeq	r0, r0, #0
     918:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     91c:	00000511 	andeq	r0, r0, r1, lsl r5
     920:	05049401 	streq	r9, [r4, #-1025]	; 0xfffffbff
     924:	00462000 	subeq	r2, r6, r0
     928:	9c010000 	stcls	0, cr0, [r1], {-0}
     92c:	00000470 	andeq	r0, r0, r0, ror r4
     930:	0003f219 	andeq	pc, r3, r9, lsl r2	; <UNPREDICTABLE>
     934:	f7940100 			; <UNDEFINED> instruction: 0xf7940100
     938:	02000000 	andeq	r0, r0, #0
     93c:	6a197791 	bvs	65e788 <startup-0x1f9a1878>
     940:	01000006 	tsteq	r0, r6
     944:	0000f794 	muleq	r0, r4, r7
     948:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     94c:	057a1800 	ldrbeq	r1, [sl, #-2048]!	; 0xfffff800
     950:	8d010000 	stchi	0, cr0, [r1, #-0]
     954:	200004c4 	andcs	r0, r0, r4, asr #9
     958:	00000040 	andeq	r0, r0, r0, asr #32
     95c:	04a29c01 	strteq	r9, [r2], #3073	; 0xc01
     960:	88190000 	ldmdahi	r9, {}	; <UNPREDICTABLE>
     964:	01000005 	tsteq	r0, r5
     968:	0000f78d 	andeq	pc, r0, sp, lsl #15
     96c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     970:	00066a19 	andeq	r6, r6, r9, lsl sl
     974:	f78d0100 			; <UNDEFINED> instruction: 0xf78d0100
     978:	02000000 	andeq	r0, r0, #0
     97c:	18007691 	stmdane	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
     980:	00000413 	andeq	r0, r0, r3, lsl r4
     984:	04447101 	strbeq	r7, [r4], #-257	; 0xfffffeff
     988:	00802000 	addeq	r2, r0, r0
     98c:	9c010000 	stcls	0, cr0, [r1], {-0}
     990:	000004d4 	ldrdeq	r0, [r0], -r4
     994:	0005e719 	andeq	lr, r5, r9, lsl r7
     998:	f7710100 			; <UNDEFINED> instruction: 0xf7710100
     99c:	02000000 	andeq	r0, r0, #0
     9a0:	6a197791 	bvs	65e7ec <startup-0x1f9a1814>
     9a4:	01000006 	tsteq	r0, r6
     9a8:	0000f771 	andeq	pc, r0, r1, ror r7	; <UNPREDICTABLE>
     9ac:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     9b0:	05612000 	strbeq	r2, [r1, #-0]!
     9b4:	46010000 	strmi	r0, [r1], -r0
     9b8:	000000f7 	strdeq	r0, [r0], -r7
     9bc:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
     9c0:	00000090 	muleq	r0, r0, r0
     9c4:	05099c01 	streq	r9, [r9, #-3073]	; 0xfffff3ff
     9c8:	6a190000 	bvs	6409d0 <startup-0x1f9bf630>
     9cc:	01000006 	tsteq	r0, r6
     9d0:	0000f746 	andeq	pc, r0, r6, asr #14
     9d4:	6f910200 	svcvs	0x00910200
     9d8:	0056521c 	subseq	r5, r6, ip, lsl r2
     9dc:	00f75601 	rscseq	r5, r7, r1, lsl #12
     9e0:	91020000 	mrsls	r0, (UNDEF: 2)
     9e4:	35180077 	ldrcc	r0, [r8, #-119]	; 0xffffff89
     9e8:	01000005 	tsteq	r0, r5
     9ec:	00033e24 	andeq	r3, r3, r4, lsr #28
     9f0:	00007620 	andeq	r7, r0, r0, lsr #12
     9f4:	2d9c0100 	ldfcss	f0, [ip]
     9f8:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
     9fc:	000004e1 	andeq	r0, r0, r1, ror #9
     a00:	00f72501 	rscseq	r2, r7, r1, lsl #10
     a04:	91020000 	mrsls	r0, (UNDEF: 2)
     a08:	cc180077 	ldcgt	0, cr0, [r8], {119}	; 0x77
     a0c:	01000003 	tsteq	r0, r3
     a10:	0002e411 	andeq	lr, r2, r1, lsl r4
     a14:	00005a20 	andeq	r5, r0, r0, lsr #20
     a18:	519c0100 	orrspl	r0, ip, r0, lsl #2
     a1c:	19000005 	stmdbne	r0, {r0, r2}
     a20:	0000066a 	andeq	r0, r0, sl, ror #12
     a24:	00f71101 	rscseq	r1, r7, r1, lsl #2
     a28:	91020000 	mrsls	r0, (UNDEF: 2)
     a2c:	2b210077 	blcs	840c10 <startup-0x1f7bf3f0>
     a30:	01000004 	tsteq	r0, r4
     a34:	00028c0a 	andeq	r8, r2, sl, lsl #24
     a38:	00005820 	andeq	r5, r0, r0, lsr #16
     a3c:	819c0100 	orrshi	r0, ip, r0, lsl #2
     a40:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
     a44:	0a010078 	beq	40c2c <startup-0x1ffbf3d4>
     a48:	000000f7 	strdeq	r0, [r0], -r7
     a4c:	1e6f9102 	lgnnee	f1, f2
     a50:	00000442 	andeq	r0, r0, r2, asr #8
     a54:	00f70b01 	rscseq	r0, r7, r1, lsl #22
     a58:	91020000 	mrsls	r0, (UNDEF: 2)
     a5c:	ab220077 	blge	880c40 <startup-0x1f77f3c0>
     a60:	01000003 	tsteq	r0, r3
     a64:	00023c03 	andeq	r3, r2, r3, lsl #24
     a68:	00005020 	andeq	r5, r0, r0, lsr #32
     a6c:	1d9c0100 	ldfnes	f0, [ip]
     a70:	03010078 	movweq	r0, #4216	; 0x1078
     a74:	000000f7 	strdeq	r0, [r0], -r7
     a78:	1e6f9102 	lgnnee	f1, f2
     a7c:	00000442 	andeq	r0, r0, r2, asr #8
     a80:	00f70401 	rscseq	r0, r7, r1, lsl #8
     a84:	91020000 	mrsls	r0, (UNDEF: 2)
     a88:	22000077 	andcs	r0, r0, #119	; 0x77
     a8c:	04000003 	streq	r0, [r0], #-3
     a90:	00048400 	andeq	r8, r4, r0, lsl #8
     a94:	21010400 	tstcs	r1, r0, lsl #8
     a98:	0c000000 	stceq	0, cr0, [r0], {-0}
     a9c:	000005ed 	andeq	r0, r0, sp, ror #11
     aa0:	20000964 	andcs	r0, r0, r4, ror #18
     aa4:	0000033a 	andeq	r0, r0, sl, lsr r3
     aa8:	0000035e 	andeq	r0, r0, lr, asr r3
     aac:	0c020202 	sfmeq	f0, 4, [r2], {2}
     ab0:	00000042 	andeq	r0, r0, r2, asr #32
     ab4:	00050a03 	andeq	r0, r5, r3, lsl #20
     ab8:	420d0200 	andmi	r0, sp, #0, 4
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	0004f503 	andeq	pc, r4, r3, lsl #10
     ac4:	420e0200 	andmi	r0, lr, #0, 4
     ac8:	01000000 	mrseq	r0, (UNDEF: 0)
     acc:	08010400 	stmdaeq	r1, {sl}
     ad0:	00000147 	andeq	r0, r0, r7, asr #2
     ad4:	0a020405 	beq	81af0 <startup-0x1ff7e510>
     ad8:	00000062 	andeq	r0, r0, r2, rrx
     adc:	72646906 	rsbvc	r6, r4, #98304	; 0x18000
     ae0:	620b0200 	andvs	r0, fp, #0, 4
     ae4:	07000000 	streq	r0, [r0, -r0]
     ae8:	00000021 	andeq	r0, r0, r1, lsr #32
     aec:	07040400 	streq	r0, [r4, -r0, lsl #8]
     af0:	000001d3 	ldrdeq	r0, [r0], -r3
     af4:	13020202 	movwne	r0, #8706	; 0x2202
     af8:	0000008a 	andeq	r0, r0, sl, lsl #1
     afc:	0004da03 	andeq	sp, r4, r3, lsl #20
     b00:	42140200 	andsmi	r0, r4, #0, 4
     b04:	00000000 	andeq	r0, r0, r0
     b08:	00040203 	andeq	r0, r4, r3, lsl #4
     b0c:	42150200 	andsmi	r0, r5, #0, 4
     b10:	01000000 	mrseq	r0, (UNDEF: 0)
     b14:	02040500 	andeq	r0, r4, #0, 10
     b18:	0000a311 	andeq	sl, r0, r1, lsl r3
     b1c:	646f0600 	strbtvs	r0, [pc], #-1536	; b24 <startup-0x1ffff4dc>
     b20:	12020072 	andne	r0, r2, #114	; 0x72
     b24:	00000062 	andeq	r0, r0, r2, rrx
     b28:	00006907 	andeq	r6, r0, r7, lsl #18
     b2c:	a5080000 	strge	r0, [r8, #-0]
     b30:	18000003 	stmdane	r0, {r0, r1}
     b34:	00ec0402 	rsceq	r0, ip, r2, lsl #8
     b38:	5b030000 	blpl	c0b40 <startup-0x1ff3f4c0>
     b3c:	02000005 	andeq	r0, r0, #5
     b40:	00006205 	andeq	r6, r0, r5, lsl #4
     b44:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
     b48:	02000003 	andeq	r0, r0, #3
     b4c:	00006206 	andeq	r6, r0, r6, lsl #4
     b50:	fd030400 	stc2	4, cr0, [r3, #-0]
     b54:	02000004 	andeq	r0, r0, #4
     b58:	00006207 	andeq	r6, r0, r7, lsl #4
     b5c:	66030800 	strvs	r0, [r3], -r0, lsl #16
     b60:	02000004 	andeq	r0, r0, #4
     b64:	00006208 	andeq	r6, r0, r8, lsl #4
     b68:	49090c00 	stmdbmi	r9, {sl, fp}
     b6c:	10000000 	andne	r0, r0, r0
     b70:	00008a09 	andeq	r8, r0, r9, lsl #20
     b74:	0a001400 	beq	5b7c <startup-0x1fffa484>
     b78:	00000426 	andeq	r0, r0, r6, lsr #8
     b7c:	00a31802 	adceq	r1, r3, r2, lsl #16
     b80:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
     b84:	01000005 	tsteq	r0, r5
     b88:	000c76aa 	andeq	r7, ip, sl, lsr #13
     b8c:	00002820 	andeq	r2, r0, r0, lsr #16
     b90:	199c0100 	ldmibne	ip, {r8}
     b94:	0c000001 	stceq	0, cr0, [r0], {1}
     b98:	aa010073 	bge	40d6c <startup-0x1ffbf294>
     b9c:	00000119 	andeq	r0, r0, r9, lsl r1
     ba0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     ba4:	011f040d 	tsteq	pc, sp, lsl #8
     ba8:	01040000 	mrseq	r0, (UNDEF: 4)
     bac:	00015008 	andeq	r5, r1, r8
     bb0:	05c10b00 	strbeq	r0, [r1, #2816]	; 0xb00
     bb4:	96010000 	strls	r0, [r1], -r0
     bb8:	20000c0e 	andcs	r0, r0, lr, lsl #24
     bbc:	00000068 	andeq	r0, r0, r8, rrx
     bc0:	01669c01 	cmneq	r6, r1, lsl #24
     bc4:	720c0000 	andvc	r0, ip, #0
     bc8:	0100776f 	tsteq	r0, pc, ror #14
     bcc:	00006296 	muleq	r0, r6, r2
     bd0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     bd4:	0006580e 	andeq	r5, r6, lr, lsl #16
     bd8:	62960100 	addsvs	r0, r6, #0, 2
     bdc:	02000000 	andeq	r0, r0, #0
     be0:	a10f6891 			; <UNDEFINED> instruction: 0xa10f6891
     be4:	01000006 	tsteq	r0, r6
     be8:	000042a1 	andeq	r4, r0, r1, lsr #5
     bec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     bf0:	07040b00 	streq	r0, [r4, -r0, lsl #22]
     bf4:	86010000 	strhi	r0, [r1], -r0
     bf8:	20000bca 	andcs	r0, r0, sl, asr #23
     bfc:	00000044 	andeq	r0, r0, r4, asr #32
     c00:	018a9c01 	orreq	r9, sl, r1, lsl #24
     c04:	b70e0000 	strlt	r0, [lr, -r0]
     c08:	01000005 	tsteq	r0, r5
     c0c:	00004286 	andeq	r4, r0, r6, lsl #5
     c10:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     c14:	06ba0b00 	ldrteq	r0, [sl], r0, lsl #22
     c18:	76010000 	strvc	r0, [r1], -r0
     c1c:	20000b74 	andcs	r0, r0, r4, ror fp
     c20:	00000056 	andeq	r0, r0, r6, asr r0
     c24:	01c99c01 	biceq	r9, r9, r1, lsl #24
     c28:	880e0000 	stmdahi	lr, {}	; <UNPREDICTABLE>
     c2c:	01000005 	tsteq	r0, r5
     c30:	00004276 	andeq	r4, r0, r6, ror r2
     c34:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     c38:	0006450e 	andeq	r4, r6, lr, lsl #10
     c3c:	62760100 	rsbsvs	r0, r6, #0, 2
     c40:	02000000 	andeq	r0, r0, #0
     c44:	750c7091 	strvc	r7, [ip, #-145]	; 0xffffff6f
     c48:	76010073 			; <UNDEFINED> instruction: 0x76010073
     c4c:	000001c9 	andeq	r0, r0, r9, asr #3
     c50:	00749102 	rsbseq	r9, r4, r2, lsl #2
     c54:	cd070204 	sfmgt	f0, 4, [r7, #-16]
     c58:	10000001 	andne	r0, r0, r1
     c5c:	0000065f 	andeq	r0, r0, pc, asr r6
     c60:	00426401 	subeq	r6, r2, r1, lsl #8
     c64:	0b440000 	bleq	1100c6c <startup-0x1eeff394>
     c68:	00302000 	eorseq	r2, r0, r0
     c6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     c70:	000001f8 	strdeq	r0, [r0], -r8
     c74:	0005e00f 	andeq	lr, r5, pc
     c78:	42650100 	rsbmi	r0, r5, #0, 2
     c7c:	02000000 	andeq	r0, r0, #0
     c80:	0b007791 	bleq	1eacc <startup-0x1ffe1534>
     c84:	000006ed 	andeq	r0, r0, sp, ror #13
     c88:	0b145601 	bleq	516494 <startup-0x1fae9b6c>
     c8c:	00302000 	eorseq	r2, r0, r0
     c90:	9c010000 	stcls	0, cr0, [r1], {-0}
     c94:	0000021c 	andeq	r0, r0, ip, lsl r2
     c98:	0005c80e 	andeq	ip, r5, lr, lsl #16
     c9c:	42560100 	subsmi	r0, r6, #0, 2
     ca0:	02000000 	andeq	r0, r0, #0
     ca4:	10007791 	mulne	r0, r1, r7
     ca8:	000005a5 	andeq	r0, r0, r5, lsr #11
     cac:	00424401 	subeq	r4, r2, r1, lsl #8
     cb0:	0acc0000 	beq	ff300cb8 <end_portal_bits+0xdf2ffa80>
     cb4:	00482000 	subeq	r2, r8, r0
     cb8:	9c010000 	stcls	0, cr0, [r1], {-0}
     cbc:	00000244 	andeq	r0, r0, r4, asr #4
     cc0:	0005e00f 	andeq	lr, r5, pc
     cc4:	42450100 	submi	r0, r5, #0, 2
     cc8:	02000000 	andeq	r0, r0, #0
     ccc:	10006f91 	mulne	r0, r1, pc	; <UNPREDICTABLE>
     cd0:	000006dd 	ldrdeq	r0, [r0], -sp
     cd4:	00423301 	subeq	r3, r2, r1, lsl #6
     cd8:	0a840000 	beq	fe100ce0 <end_portal_bits+0xde0ffaa8>
     cdc:	00482000 	subeq	r2, r8, r0
     ce0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ce4:	0000026c 	andeq	r0, r0, ip, ror #4
     ce8:	0005e00f 	andeq	lr, r5, pc
     cec:	42340100 	eorsmi	r0, r4, #0, 2
     cf0:	02000000 	andeq	r0, r0, #0
     cf4:	0b006f91 	bleq	1cb40 <startup-0x1ffe34c0>
     cf8:	000006a9 	andeq	r0, r0, r9, lsr #13
     cfc:	0a5a2a01 	beq	168b508 <startup-0x1e974af8>
     d00:	002a2000 	eoreq	r2, sl, r0
     d04:	9c010000 	stcls	0, cr0, [r1], {-0}
     d08:	00000290 	muleq	r0, r0, r2
     d0c:	0003f20e 	andeq	pc, r3, lr, lsl #4
     d10:	422a0100 	eormi	r0, sl, #0, 2
     d14:	02000000 	andeq	r0, r0, #0
     d18:	0b007791 	bleq	1eb64 <startup-0x1ffe149c>
     d1c:	00000691 	muleq	r0, r1, r6
     d20:	0a302101 	beq	c0912c <startup-0x1f3f6ed4>
     d24:	002a2000 	eoreq	r2, sl, r0
     d28:	9c010000 	stcls	0, cr0, [r1], {-0}
     d2c:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     d30:	0005880e 	andeq	r8, r5, lr, lsl #16
     d34:	42210100 	eormi	r0, r1, #0, 2
     d38:	02000000 	andeq	r0, r0, #0
     d3c:	11007791 			; <UNDEFINED> instruction: 0x11007791
     d40:	000006c8 	andeq	r0, r0, r8, asr #13
     d44:	09e81901 	stmibeq	r8!, {r0, r8, fp, ip}^
     d48:	00482000 	subeq	r2, r8, r0
     d4c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d50:	000002e4 	andeq	r0, r0, r4, ror #5
     d54:	0100780c 	tsteq	r0, ip, lsl #16
     d58:	00004219 	andeq	r4, r0, r9, lsl r2
     d5c:	6f910200 	svcvs	0x00910200
     d60:	0006880f 	andeq	r8, r6, pc, lsl #16
     d64:	421b0100 	andsmi	r0, fp, #0, 2
     d68:	02000000 	andeq	r0, r0, #0
     d6c:	11007791 			; <UNDEFINED> instruction: 0x11007791
     d70:	00000675 	andeq	r0, r0, r5, ror r6
     d74:	09a41201 	stmibeq	r4!, {r0, r9, ip}
     d78:	00442000 	subeq	r2, r4, r0
     d7c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d80:	00000314 	andeq	r0, r0, r4, lsl r3
     d84:	0100780c 	tsteq	r0, ip, lsl #16
     d88:	00004212 	andeq	r4, r0, r2, lsl r2
     d8c:	6f910200 	svcvs	0x00910200
     d90:	0006880f 	andeq	r8, r6, pc, lsl #16
     d94:	42140100 	andsmi	r0, r4, #0, 2
     d98:	02000000 	andeq	r0, r0, #0
     d9c:	12007791 	andne	r7, r0, #38010880	; 0x2440000
     da0:	0000012b 	andeq	r0, r0, fp, lsr #2
     da4:	09640301 	stmdbeq	r4!, {r0, r8, r9}^
     da8:	00402000 	subeq	r2, r0, r0
     dac:	9c010000 	stcls	0, cr0, [r1], {-0}
     db0:	0001cf00 	andeq	ip, r1, r0, lsl #30
     db4:	a1000400 	tstge	r0, r0, lsl #8
     db8:	04000005 	streq	r0, [r0], #-5
     dbc:	00002101 	andeq	r2, r0, r1, lsl #2
     dc0:	07210c00 	streq	r0, [r1, -r0, lsl #24]!
     dc4:	0ca00000 	stceq	0, cr0, [r0]
     dc8:	01682000 	cmneq	r8, r0
     dcc:	04640000 	strbteq	r0, [r4], #-0
     dd0:	02020000 	andeq	r0, r2, #0
     dd4:	00420c02 	subeq	r0, r2, r2, lsl #24
     dd8:	0a030000 	beq	c0de0 <startup-0x1ff3f220>
     ddc:	02000005 	andeq	r0, r0, #5
     de0:	0000420d 	andeq	r4, r0, sp, lsl #4
     de4:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
     de8:	02000004 	andeq	r0, r0, #4
     dec:	0000420e 	andeq	r4, r0, lr, lsl #4
     df0:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
     df4:	01470801 	cmpeq	r7, r1, lsl #16
     df8:	04050000 	streq	r0, [r5], #-0
     dfc:	00620a02 	rsbeq	r0, r2, r2, lsl #20
     e00:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
     e04:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
     e08:	0000620b 	andeq	r6, r0, fp, lsl #4
     e0c:	00210700 	eoreq	r0, r1, r0, lsl #14
     e10:	04000000 	streq	r0, [r0], #-0
     e14:	01d30704 	bicseq	r0, r3, r4, lsl #14
     e18:	02020000 	andeq	r0, r2, #0
     e1c:	008a1302 	addeq	r1, sl, r2, lsl #6
     e20:	da030000 	ble	c0e28 <startup-0x1ff3f1d8>
     e24:	02000004 	andeq	r0, r0, #4
     e28:	00004214 	andeq	r4, r0, r4, lsl r2
     e2c:	02030000 	andeq	r0, r3, #0
     e30:	02000004 	andeq	r0, r0, #4
     e34:	00004215 	andeq	r4, r0, r5, lsl r2
     e38:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     e3c:	a3110204 	tstge	r1, #4, 4	; 0x40000000
     e40:	06000000 	streq	r0, [r0], -r0
     e44:	0072646f 	rsbseq	r6, r2, pc, ror #8
     e48:	00621202 	rsbeq	r1, r2, r2, lsl #4
     e4c:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
     e50:	00000000 	andeq	r0, r0, r0
     e54:	0003a508 	andeq	sl, r3, r8, lsl #10
     e58:	04021800 	streq	r1, [r2], #-2048	; 0xfffff800
     e5c:	000000ec 	andeq	r0, r0, ip, ror #1
     e60:	00055b03 	andeq	r5, r5, r3, lsl #22
     e64:	62050200 	andvs	r0, r5, #0, 4
     e68:	00000000 	andeq	r0, r0, r0
     e6c:	0003de03 	andeq	sp, r3, r3, lsl #28
     e70:	62060200 	andvs	r0, r6, #0, 4
     e74:	04000000 	streq	r0, [r0], #-0
     e78:	0004fd03 	andeq	pc, r4, r3, lsl #26
     e7c:	62070200 	andvs	r0, r7, #0, 4
     e80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e84:	00046603 	andeq	r6, r4, r3, lsl #12
     e88:	62080200 	andvs	r0, r8, #0, 4
     e8c:	0c000000 	stceq	0, cr0, [r0], {-0}
     e90:	00004909 	andeq	r4, r0, r9, lsl #18
     e94:	8a091000 	bhi	244e9c <startup-0x1fdbb164>
     e98:	14000000 	strne	r0, [r0], #-0
     e9c:	04260a00 	strteq	r0, [r6], #-2560	; 0xfffff600
     ea0:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     ea4:	000000a3 	andeq	r0, r0, r3, lsr #1
     ea8:	0000420b 	andeq	r4, r0, fp, lsl #4
     eac:	00010d00 	andeq	r0, r1, r0, lsl #26
     eb0:	010d0c00 	tsteq	sp, r0, lsl #24
     eb4:	0c030000 	stceq	0, cr0, [r3], {-0}
     eb8:	0000010d 	andeq	r0, r0, sp, lsl #2
     ebc:	04040003 	streq	r0, [r4], #-3
     ec0:	0000c307 	andeq	ip, r0, r7, lsl #6
     ec4:	656b0d00 	strbvs	r0, [fp, #-3328]!	; 0xfffff300
     ec8:	06030079 			; <UNDEFINED> instruction: 0x06030079
     ecc:	000000f7 	strdeq	r0, [r0], -r7
     ed0:	11680305 	cmnne	r8, r5, lsl #6
     ed4:	730e2000 	movwvc	r2, #57344	; 0xe000
     ed8:	01000007 	tsteq	r0, r7
     edc:	00014b27 	andeq	r4, r1, r7, lsr #22
     ee0:	000db400 	andeq	fp, sp, r0, lsl #8
     ee4:	00005420 	andeq	r5, r0, r0, lsr #8
     ee8:	4b9c0100 	blmi	fe7012f0 <end_portal_bits+0xde7000b8>
     eec:	0d000001 	stceq	0, cr0, [r0, #-4]
     ef0:	29010063 	stmdbcs	r1, {r0, r1, r5, r6}
     ef4:	00000042 	andeq	r0, r0, r2, asr #32
     ef8:	00779102 	rsbseq	r9, r7, r2, lsl #2
     efc:	6905040f 	stmdbvs	r5, {r0, r1, r2, r3, sl}
     f00:	1000746e 	andne	r7, r0, lr, ror #8
     f04:	00000715 	andeq	r0, r0, r5, lsl r7
     f08:	0d5c1d01 	ldcleq	13, cr1, [ip, #-4]
     f0c:	00582000 	subseq	r2, r8, r0
     f10:	9c010000 	stcls	0, cr0, [r1], {-0}
     f14:	00000176 	andeq	r0, r0, r6, ror r1
     f18:	776f7211 			; <UNDEFINED> instruction: 0x776f7211
     f1c:	421d0100 	andsmi	r0, sp, #0, 2
     f20:	02000000 	andeq	r0, r0, #0
     f24:	12007791 	andne	r7, r0, #38010880	; 0x2440000
     f28:	00000126 	andeq	r0, r0, r6, lsr #2
     f2c:	00420c01 	subeq	r0, r2, r1, lsl #24
     f30:	0cf00000 	ldcleq	0, cr0, [r0]
     f34:	006c2000 	rsbeq	r2, ip, r0
     f38:	9c010000 	stcls	0, cr0, [r1], {-0}
     f3c:	000001c1 	andeq	r0, r0, r1, asr #3
     f40:	776f7213 			; <UNDEFINED> instruction: 0x776f7213
     f44:	420d0100 	andmi	r0, sp, #0, 2
     f48:	14000000 	strne	r0, [r0], #-0
     f4c:	00000658 	andeq	r0, r0, r8, asr r6
     f50:	00420d01 	subeq	r0, r2, r1, lsl #26
     f54:	91020000 	mrsls	r0, (UNDEF: 2)
     f58:	0cf61576 	cfldr64eq	mvdx1, [r6], #472	; 0x1d8
     f5c:	00522000 	subseq	r2, r2, r0
     f60:	720d0000 	andvc	r0, sp, #0
     f64:	0100776f 	tsteq	r0, pc, ror #14
     f68:	0000420f 	andeq	r4, r0, pc, lsl #4
     f6c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f70:	f4160000 			; <UNDEFINED> instruction: 0xf4160000
     f74:	01000000 	mrseq	r0, (UNDEF: 0)
     f78:	000ca003 	andeq	sl, ip, r3
     f7c:	00005020 	andeq	r5, r0, r0, lsr #32
     f80:	009c0100 	addseq	r0, ip, r0, lsl #2
     f84:	00000287 	andeq	r0, r0, r7, lsl #5
     f88:	06ea0004 	strbteq	r0, [sl], r4
     f8c:	01040000 	mrseq	r0, (UNDEF: 4)
     f90:	00000021 	andeq	r0, r0, r1, lsr #32
     f94:	00077e0c 	andeq	r7, r7, ip, lsl #28
     f98:	000e0800 	andeq	r0, lr, r0, lsl #16
     f9c:	00021c20 	andeq	r1, r2, r0, lsr #24
     fa0:	00054600 	andeq	r4, r5, r0, lsl #12
     fa4:	08010200 	stmdaeq	r1, {r9}
     fa8:	00000147 	andeq	r0, r0, r7, asr #2
     fac:	d3070402 	movwle	r0, #29698	; 0x7402
     fb0:	03000001 	movweq	r0, #1
     fb4:	00000113 	andeq	r0, r0, r3, lsl r1
     fb8:	00211802 	eoreq	r1, r1, r2, lsl #16
     fbc:	55040000 	strpl	r0, [r4, #-0]
     fc0:	02000001 	andeq	r0, r0, #1
     fc4:	005b1a02 	subseq	r1, fp, r2, lsl #20
     fc8:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
     fcc:	2f1b0200 	svccs	0x001b0200
     fd0:	00000000 	andeq	r0, r0, r0
     fd4:	02007905 	andeq	r7, r0, #81920	; 0x14000
     fd8:	00002f1c 	andeq	r2, r0, ip, lsl pc
     fdc:	03000100 	movweq	r0, #256	; 0x100
     fe0:	0000011b 	andeq	r0, r0, fp, lsl r1
     fe4:	003a1d02 	eorseq	r1, sl, r2, lsl #26
     fe8:	b9060000 	stmdblt	r6, {}	; <UNPREDICTABLE>
     fec:	0c000000 	stceq	0, cr0, [r0], {-0}
     ff0:	a31f0202 	tstge	pc, #536870912	; 0x20000000
     ff4:	07000000 	streq	r0, [r0, -r0]
     ff8:	0000013d 	andeq	r0, r0, sp, lsr r1
     ffc:	00a32002 	adceq	r2, r3, r2
    1000:	07000000 	streq	r0, [r0, -r0]
    1004:	000000cc 	andeq	r0, r0, ip, asr #1
    1008:	00a32102 	adceq	r2, r3, r2, lsl #2
    100c:	07040000 	streq	r0, [r4, -r0]
    1010:	000000d3 	ldrdeq	r0, [r0], -r3
    1014:	00a32202 	adceq	r2, r3, r2, lsl #4
    1018:	05080000 	streq	r0, [r8, #-0]
    101c:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
    1020:	0000aa23 	andeq	sl, r0, r3, lsr #20
    1024:	08000c00 	stmdaeq	r0, {sl, fp}
    1028:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    102c:	5b090074 	blpl	241204 <startup-0x1fdbedfc>
    1030:	ba000000 	blt	1038 <startup-0x1fffefc8>
    1034:	0a000000 	beq	103c <startup-0x1fffefc4>
    1038:	000000ba 	strheq	r0, [r0], -sl
    103c:	040200ff 	streq	r0, [r2], #-255	; 0xffffff01
    1040:	0000c307 	andeq	ip, r0, r7, lsl #6
    1044:	01030300 	mrseq	r0, SP_svc
    1048:	24020000 	strcs	r0, [r2], #-0
    104c:	00000066 	andeq	r0, r0, r6, rrx
    1050:	00010203 	andeq	r0, r1, r3, lsl #4
    1054:	d7240200 	strle	r0, [r4, -r0, lsl #4]!
    1058:	0b000000 	bleq	1060 <startup-0x1fffefa0>
    105c:	00006604 	andeq	r6, r0, r4, lsl #12
    1060:	01ec0400 	mvneq	r0, r0, lsl #8
    1064:	02240000 	eoreq	r0, r4, #0
    1068:	00015626 	andeq	r5, r1, r6, lsr #12
    106c:	65670500 	strbvs	r0, [r7, #-1280]!	; 0xfffffb00
    1070:	2702006f 	strcs	r0, [r2, -pc, rrx]
    1074:	000000cc 	andeq	r0, r0, ip, asr #1
    1078:	02340700 	eorseq	r0, r4, #0, 14
    107c:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    1080:	000000a3 	andeq	r0, r0, r3, lsr #1
    1084:	023a0704 	eorseq	r0, sl, #4, 14	; 0x100000
    1088:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    108c:	000000a3 	andeq	r0, r0, r3, lsr #1
    1090:	01e00708 	mvneq	r0, r8, lsl #14
    1094:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    1098:	000000a3 	andeq	r0, r0, r3, lsr #1
    109c:	01e6070c 	mvneq	r0, ip, lsl #14
    10a0:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    10a4:	000000a3 	andeq	r0, r0, r3, lsr #1
    10a8:	01fc0710 	mvnseq	r0, r0, lsl r7
    10ac:	2a020000 	bcs	810b4 <startup-0x1ff7ef4c>
    10b0:	00000167 	andeq	r0, r0, r7, ror #2
    10b4:	043c0714 	ldrteq	r0, [ip], #-1812	; 0xfffff8ec
    10b8:	2b020000 	blcs	810c0 <startup-0x1ff7ef40>
    10bc:	00000167 	andeq	r0, r0, r7, ror #2
    10c0:	01210718 			; <UNDEFINED> instruction: 0x01210718
    10c4:	2c020000 	stccs	0, cr0, [r2], {-0}
    10c8:	00000167 	andeq	r0, r0, r7, ror #2
    10cc:	0201071c 	andeq	r0, r1, #28, 14	; 0x700000
    10d0:	2d020000 	stccs	0, cr0, [r2, #-0]
    10d4:	00000182 	andeq	r0, r0, r2, lsl #3
    10d8:	610c0020 	tstvs	ip, r0, lsr #32
    10dc:	0d000001 	stceq	0, cr0, [r0, #-4]
    10e0:	00000161 	andeq	r0, r0, r1, ror #2
    10e4:	dd040b00 	vstrle	d0, [r4, #-0]
    10e8:	0b000000 	bleq	10f0 <startup-0x1fffef10>
    10ec:	00015604 	andeq	r5, r1, r4, lsl #12
    10f0:	01820c00 	orreq	r0, r2, r0, lsl #24
    10f4:	610d0000 	mrsvs	r0, (UNDEF: 13)
    10f8:	0d000001 	stceq	0, cr0, [r0, #-4]
    10fc:	000000a3 	andeq	r0, r0, r3, lsr #1
    1100:	0000a30d 	andeq	sl, r0, sp, lsl #6
    1104:	040b0000 	streq	r0, [fp], #-0
    1108:	0000016d 	andeq	r0, r0, sp, ror #2
    110c:	00022d03 	andeq	r2, r2, r3, lsl #26
    1110:	dd2e0200 	sfmle	f0, 4, [lr, #-0]
    1114:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1118:	0000010c 	andeq	r0, r0, ip, lsl #2
    111c:	01880803 	orreq	r0, r8, r3, lsl #16
    1120:	03050000 	movweq	r0, #20480	; 0x5000
    1124:	20001060 	andcs	r1, r0, r0, rrx
    1128:	0002250e 	andeq	r2, r2, lr, lsl #10
    112c:	88090300 	stmdahi	r9, {r8, r9}
    1130:	05000001 	streq	r0, [r0, #-1]
    1134:	00103c03 	andseq	r3, r0, r3, lsl #24
    1138:	00210920 	eoreq	r0, r1, r0, lsr #18
    113c:	01c50000 	biceq	r0, r5, r0
    1140:	ba0a0000 	blt	281148 <startup-0x1fd7eeb8>
    1144:	1f000000 	svcne	0x00000000
    1148:	016e0f00 	cmneq	lr, r0, lsl #30
    114c:	0d030000 	stceq	0, cr0, [r3, #-0]
    1150:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    1154:	11780305 	cmnne	r8, r5, lsl #6
    1158:	5c0f2000 	stcpl	0, cr2, [pc], {-0}
    115c:	03000001 	movweq	r0, #1
    1160:	0001b515 	andeq	fp, r1, r5, lsl r5
    1164:	98030500 	stmdals	r3, {r8, sl}
    1168:	0f200011 	svceq	0x00200011
    116c:	00000214 	andeq	r0, r0, r4, lsl r2
    1170:	01b51c03 			; <UNDEFINED> instruction: 0x01b51c03
    1174:	03050000 	movweq	r0, #20480	; 0x5000
    1178:	200011b8 			; <UNDEFINED> instruction: 0x200011b8
    117c:	0000100f 	andeq	r1, r0, pc
    1180:	b5230300 	strlt	r0, [r3, #-768]!	; 0xfffffd00
    1184:	05000001 	streq	r0, [r0, #-1]
    1188:	0011d803 	andseq	sp, r1, r3, lsl #16
    118c:	01f10f20 	mvnseq	r0, r0, lsr #30
    1190:	2a030000 	bcs	c1198 <startup-0x1ff3ee68>
    1194:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    1198:	11f80305 	mvnsne	r0, r5, lsl #6
    119c:	040f2000 	streq	r2, [pc], #-0	; 11a4 <startup-0x1fffee5c>
    11a0:	03000000 	movweq	r0, #0
    11a4:	0001b531 	andeq	fp, r1, r1, lsr r5
    11a8:	18030500 	stmdane	r3, {r8, sl}
    11ac:	0f200012 	svceq	0x00200012
    11b0:	00000000 	andeq	r0, r0, r0
    11b4:	01b53803 			; <UNDEFINED> instruction: 0x01b53803
    11b8:	03050000 	movweq	r0, #20480	; 0x5000
    11bc:	20001238 	andcs	r1, r0, r8, lsr r2
    11c0:	0007d110 	andeq	sp, r7, r0, lsl r1
    11c4:	08030100 	stmdaeq	r3, {r8}
    11c8:	1c20000e 	stcne	0, cr0, [r0], #-56	; 0xffffffc8
    11cc:	01000002 	tsteq	r0, r2
    11d0:	07de0f9c 	bfieq	r0, ip, (invalid: 31:30)
    11d4:	04010000 	streq	r0, [r1], #-0
    11d8:	000000c1 	andeq	r0, r0, r1, asr #1
    11dc:	7bec9103 	blvc	ffb255f0 <end_portal_bits+0xdfb243b8>
    11e0:	00010c0f 	andeq	r0, r1, pc, lsl #24
    11e4:	880b0100 	stmdahi	fp, {r8}
    11e8:	03000001 	movweq	r0, #1
    11ec:	0f7bc891 	svceq	0x007bc891
    11f0:	000007ee 	andeq	r0, r0, lr, ror #15
    11f4:	00c11501 	sbceq	r1, r1, r1, lsl #10
    11f8:	91030000 	mrsls	r0, (UNDEF: 3)
    11fc:	250f77bc 	strcs	r7, [pc, #-1980]	; a48 <startup-0x1ffff5b8>
    1200:	01000002 	tsteq	r0, r2
    1204:	0001881b 	andeq	r8, r1, fp, lsl r8
    1208:	98910300 	ldmls	r1, {r8, r9}
    120c:	Address 0x0000120c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03001603 	movweq	r1, #1539	; 0x603
  20:	3b0b3a0e 	blcc	2ce860 <startup-0x1fd317a0>
  24:	0013490b 	andseq	r4, r3, fp, lsl #18
  28:	01130400 	tsteq	r3, r0, lsl #8
  2c:	0b0b0e03 	bleq	2c3840 <startup-0x1fd3c7c0>
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	00001301 	andeq	r1, r0, r1, lsl #6
  38:	03000d05 	movweq	r0, #3333	; 0xd05
  3c:	3b0b3a08 	blcc	2ce864 <startup-0x1fd3179c>
  40:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  44:	0600000b 	streq	r0, [r0], -fp
  48:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  4c:	0b3a050b 	bleq	e81480 <startup-0x1f17eb80>
  50:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  54:	0d070000 	stceq	0, cr0, [r7, #-0]
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	000b3813 	andeq	r3, fp, r3, lsl r8
  64:	00240800 	eoreq	r0, r4, r0, lsl #16
  68:	0b3e0b0b 	bleq	f82c9c <startup-0x1f07d364>
  6c:	00000803 	andeq	r0, r0, r3, lsl #16
  70:	49010109 	stmdbmi	r1, {r0, r3, r8}
  74:	00130113 	andseq	r0, r3, r3, lsl r1
  78:	00210a00 	eoreq	r0, r1, r0, lsl #20
  7c:	0b2f1349 	bleq	bc4da8 <startup-0x1f43b258>
  80:	0f0b0000 	svceq	0x000b0000
  84:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  88:	0c000013 	stceq	0, cr0, [r0], {19}
  8c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  90:	00001301 	andeq	r1, r0, r1, lsl #6
  94:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
  98:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  a8:	00001802 	andeq	r1, r0, r2, lsl #16
  ac:	0300340f 	movweq	r3, #1039	; 0x40f
  b0:	3b0b3a0e 	blcc	2ce8f0 <startup-0x1fd31710>
  b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  b8:	10000018 	andne	r0, r0, r8, lsl r0
  bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  c0:	0b3a0e03 	bleq	e838d4 <startup-0x1f17c72c>
  c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  cc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  d0:	00130119 	andseq	r0, r3, r9, lsl r1
  d4:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
  d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  dc:	0b3b0b3a 	bleq	ec2dcc <startup-0x1f13d234>
  e0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
  e4:	00001301 	andeq	r1, r0, r1, lsl #6
  e8:	00001812 	andeq	r1, r0, r2, lsl r8
  ec:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
  f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  f4:	0b3b0b3a 	bleq	ec2de4 <startup-0x1f13d21c>
  f8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
  fc:	34140000 	ldrcc	r0, [r4], #-0
 100:	3a0e0300 	bcc	380d08 <startup-0x1fc7f2f8>
 104:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 108:	3c193f13 	ldccc	15, cr3, [r9], {19}
 10c:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
 110:	08030034 	stmdaeq	r3, {r2, r4, r5}
 114:	0b3b0b3a 	bleq	ec2e04 <startup-0x1f13d1fc>
 118:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 11c:	0b160000 	bleq	580124 <startup-0x1fa7fedc>
 120:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 124:	17000006 	strne	r0, [r0, -r6]
 128:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 12c:	0b3a0e03 	bleq	e83940 <startup-0x1f17c6c0>
 130:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 134:	06120111 			; <UNDEFINED> instruction: 0x06120111
 138:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 13c:	00000019 	andeq	r0, r0, r9, lsl r0
 140:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 144:	030b130e 	movweq	r1, #45838	; 0xb30e
 148:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 14c:	00171006 	andseq	r1, r7, r6
 150:	00240200 	eoreq	r0, r4, r0, lsl #4
 154:	0b3e0b0b 	bleq	f82d88 <startup-0x1f07d278>
 158:	00000e03 	andeq	r0, r0, r3, lsl #28
 15c:	0b011303 	bleq	44d70 <startup-0x1ffbb290>
 160:	3b0b3a0b 	blcc	2ce994 <startup-0x1fd3166c>
 164:	0013010b 	andseq	r0, r3, fp, lsl #2
 168:	000d0400 	andeq	r0, sp, r0, lsl #8
 16c:	0b3a0e03 	bleq	e83980 <startup-0x1f17c680>
 170:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 174:	00000b38 	andeq	r0, r0, r8, lsr fp
 178:	0b011705 	bleq	45d94 <startup-0x1ffba26c>
 17c:	3b0b3a0b 	blcc	2ce9b0 <startup-0x1fd31650>
 180:	0013010b 	andseq	r0, r3, fp, lsl #2
 184:	000d0600 	andeq	r0, sp, r0, lsl #12
 188:	0b3a0e03 	bleq	e8399c <startup-0x1f17c664>
 18c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 190:	0d070000 	stceq	0, cr0, [r7, #-0]
 194:	00134900 	andseq	r4, r3, r0, lsl #18
 198:	01130800 	tsteq	r3, r0, lsl #16
 19c:	0b0b0e03 	bleq	2c39b0 <startup-0x1fd3c650>
 1a0:	0b3b0b3a 	bleq	ec2e90 <startup-0x1f13d170>
 1a4:	00001301 	andeq	r1, r0, r1, lsl #6
 1a8:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 1ac:	000b3813 	andeq	r3, fp, r3, lsl r8
 1b0:	000d0a00 	andeq	r0, sp, r0, lsl #20
 1b4:	0b3a0803 	bleq	e821c8 <startup-0x1f17de38>
 1b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1bc:	00000b38 	andeq	r0, r0, r8, lsr fp
 1c0:	0300160b 	movweq	r1, #1547	; 0x60b
 1c4:	3b0b3a0e 	blcc	2cea04 <startup-0x1fd315fc>
 1c8:	0013490b 	andseq	r4, r3, fp, lsl #18
 1cc:	00340c00 	eorseq	r0, r4, r0, lsl #24
 1d0:	0b3a0e03 	bleq	e839e4 <startup-0x1f17c61c>
 1d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1d8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 1dc:	240d0000 	strcs	r0, [sp], #-0
 1e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1e4:	0008030b 	andeq	r0, r8, fp, lsl #6
 1e8:	00350e00 	eorseq	r0, r5, r0, lsl #28
 1ec:	00001349 	andeq	r1, r0, r9, asr #6
 1f0:	0300340f 	movweq	r3, #1039	; 0x40f
 1f4:	3b0b3a0e 	blcc	2cea34 <startup-0x1fd315cc>
 1f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1fc:	10000018 	andne	r0, r0, r8, lsl r0
 200:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 204:	0b3a0e03 	bleq	e83a18 <startup-0x1f17c5e8>
 208:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 20c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 210:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 214:	11000019 	tstne	r0, r9, lsl r0
 218:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 21c:	0b3a0e03 	bleq	e83a30 <startup-0x1f17c5d0>
 220:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 224:	06120111 			; <UNDEFINED> instruction: 0x06120111
 228:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 22c:	12000019 	andne	r0, r0, #25
 230:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 234:	0b3a0e03 	bleq	e83a48 <startup-0x1f17c5b8>
 238:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 23c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 240:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 244:	00130119 	andseq	r0, r3, r9, lsl r1
 248:	00051300 	andeq	r1, r5, r0, lsl #6
 24c:	0b3a0e03 	bleq	e83a60 <startup-0x1f17c5a0>
 250:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 254:	00001802 	andeq	r1, r0, r2, lsl #16
 258:	3f012e14 	svccc	0x00012e14
 25c:	3a0e0319 	bcc	380ec8 <startup-0x1fc7f138>
 260:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 264:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 268:	96184006 	ldrls	r4, [r8], -r6
 26c:	13011942 	movwne	r1, #6466	; 0x1942
 270:	01000000 	mrseq	r0, (UNDEF: 0)
 274:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 278:	0e030b13 	vmoveq.32	d3[0], r0
 27c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 280:	00001710 	andeq	r1, r0, r0, lsl r7
 284:	0b011302 	bleq	44e94 <startup-0x1ffbb16c>
 288:	3b0b3a0b 	blcc	2ceabc <startup-0x1fd31544>
 28c:	0013010b 	andseq	r0, r3, fp, lsl #2
 290:	000d0300 	andeq	r0, sp, r0, lsl #6
 294:	0b3a0e03 	bleq	e83aa8 <startup-0x1f17c558>
 298:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 29c:	00000b38 	andeq	r0, r0, r8, lsr fp
 2a0:	0b002404 	bleq	92b8 <startup-0x1fff6d48>
 2a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2a8:	0500000e 	streq	r0, [r0, #-14]
 2ac:	0b0b0117 	bleq	2c0710 <startup-0x1fd3f8f0>
 2b0:	0b3b0b3a 	bleq	ec2fa0 <startup-0x1f13d060>
 2b4:	00001301 	andeq	r1, r0, r1, lsl #6
 2b8:	03000d06 	movweq	r0, #3334	; 0xd06
 2bc:	3b0b3a08 	blcc	2ceae4 <startup-0x1fd3151c>
 2c0:	0013490b 	andseq	r4, r3, fp, lsl #18
 2c4:	000d0700 	andeq	r0, sp, r0, lsl #14
 2c8:	00001349 	andeq	r1, r0, r9, asr #6
 2cc:	03011308 	movweq	r1, #4872	; 0x1308
 2d0:	3a0b0b0e 	bcc	2c2f10 <startup-0x1fd3d0f0>
 2d4:	010b3b0b 	tsteq	fp, fp, lsl #22
 2d8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 2dc:	1349000d 	movtne	r0, #36877	; 0x900d
 2e0:	00000b38 	andeq	r0, r0, r8, lsr fp
 2e4:	0300160a 	movweq	r1, #1546	; 0x60a
 2e8:	3b0b3a0e 	blcc	2ceb28 <startup-0x1fd314d8>
 2ec:	0013490b 	andseq	r4, r3, fp, lsl #18
 2f0:	000d0b00 	andeq	r0, sp, r0, lsl #22
 2f4:	0b3a0803 	bleq	e82308 <startup-0x1f17dcf8>
 2f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2fc:	00000b38 	andeq	r0, r0, r8, lsr fp
 300:	0301130c 	movweq	r1, #4876	; 0x130c
 304:	3a050b0e 	bcc	142f44 <startup-0x1febd0bc>
 308:	010b3b0b 	tsteq	fp, fp, lsl #22
 30c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 310:	0b0b0024 	bleq	2c03a8 <startup-0x1fd3fc58>
 314:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 318:	010e0000 	mrseq	r0, (UNDEF: 14)
 31c:	01134901 	tsteq	r3, r1, lsl #18
 320:	0f000013 	svceq	0x00000013
 324:	13490021 	movtne	r0, #36897	; 0x9021
 328:	00000b2f 	andeq	r0, r0, pc, lsr #22
 32c:	0b000f10 	bleq	3f74 <startup-0x1fffc08c>
 330:	0013490b 	andseq	r4, r3, fp, lsl #18
 334:	01151100 	tsteq	r5, r0, lsl #2
 338:	13011927 	movwne	r1, #6439	; 0x1927
 33c:	05120000 	ldreq	r0, [r2, #-0]
 340:	00134900 	andseq	r4, r3, r0, lsl #18
 344:	002e1300 	eoreq	r1, lr, r0, lsl #6
 348:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 34c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 350:	01111927 	tsteq	r1, r7, lsr #18
 354:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 358:	00194297 	mulseq	r9, r7, r2
 35c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 360:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 364:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 368:	01111927 	tsteq	r1, r7, lsr #18
 36c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 370:	01194297 			; <UNDEFINED> instruction: 0x01194297
 374:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 378:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 37c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 380:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 384:	05160000 	ldreq	r0, [r6, #-0]
 388:	3a080300 	bcc	200f90 <startup-0x1fdff070>
 38c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 390:	00180213 	andseq	r0, r8, r3, lsl r2
 394:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 398:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 39c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3a0:	01111927 	tsteq	r1, r7, lsr #18
 3a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3a8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 3ac:	18000013 	stmdane	r0, {r0, r1, r4}
 3b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3b4:	0b3a0e03 	bleq	e83bc8 <startup-0x1f17c438>
 3b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3c4:	00130119 	andseq	r0, r3, r9, lsl r1
 3c8:	00051900 	andeq	r1, r5, r0, lsl #18
 3cc:	0b3a0e03 	bleq	e83be0 <startup-0x1f17c420>
 3d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3d4:	00001802 	andeq	r1, r0, r2, lsl #16
 3d8:	11010b1a 	tstne	r1, sl, lsl fp
 3dc:	00061201 	andeq	r1, r6, r1, lsl #4
 3e0:	00341b00 	eorseq	r1, r4, r0, lsl #22
 3e4:	0b3a0803 	bleq	e823f8 <startup-0x1f17dc08>
 3e8:	1349053b 	movtne	r0, #38203	; 0x953b
 3ec:	00001802 	andeq	r1, r0, r2, lsl #16
 3f0:	0300341c 	movweq	r3, #1052	; 0x41c
 3f4:	3b0b3a08 	blcc	2cec1c <startup-0x1fd313e4>
 3f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3fc:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 400:	08030005 	stmdaeq	r3, {r0, r2}
 404:	0b3b0b3a 	bleq	ec30f4 <startup-0x1f13cf0c>
 408:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 40c:	341e0000 	ldrcc	r0, [lr], #-0
 410:	3a0e0300 	bcc	381018 <startup-0x1fc7efe8>
 414:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 418:	00180213 	andseq	r0, r8, r3, lsl r2
 41c:	002e1f00 	eoreq	r1, lr, r0, lsl #30
 420:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 424:	0b3b0b3a 	bleq	ec3114 <startup-0x1f13ceec>
 428:	01111927 	tsteq	r1, r7, lsr #18
 42c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 430:	00194296 	mulseq	r9, r6, r2
 434:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 438:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 43c:	0b3b0b3a 	bleq	ec312c <startup-0x1f13ced4>
 440:	13491927 	movtne	r1, #39207	; 0x9927
 444:	06120111 			; <UNDEFINED> instruction: 0x06120111
 448:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 44c:	00130119 	andseq	r0, r3, r9, lsl r1
 450:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
 454:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 458:	0b3b0b3a 	bleq	ec3148 <startup-0x1f13ceb8>
 45c:	01111927 	tsteq	r1, r7, lsr #18
 460:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 464:	01194297 			; <UNDEFINED> instruction: 0x01194297
 468:	22000013 	andcs	r0, r0, #19
 46c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 470:	0b3a0e03 	bleq	e83c84 <startup-0x1f17c37c>
 474:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 478:	06120111 			; <UNDEFINED> instruction: 0x06120111
 47c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 480:	00000019 	andeq	r0, r0, r9, lsl r0
 484:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 488:	030b130e 	movweq	r1, #45838	; 0xb30e
 48c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 490:	00171006 	andseq	r1, r7, r6
 494:	01130200 	tsteq	r3, r0, lsl #4
 498:	0b3a0b0b 	bleq	e830cc <startup-0x1f17cf34>
 49c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 4a0:	0d030000 	stceq	0, cr0, [r3, #-0]
 4a4:	3a0e0300 	bcc	3810ac <startup-0x1fc7ef54>
 4a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4ac:	000b3813 	andeq	r3, fp, r3, lsl r8
 4b0:	00240400 	eoreq	r0, r4, r0, lsl #8
 4b4:	0b3e0b0b 	bleq	f830e8 <startup-0x1f07cf18>
 4b8:	00000e03 	andeq	r0, r0, r3, lsl #28
 4bc:	0b011705 	bleq	460d8 <startup-0x1ffb9f28>
 4c0:	3b0b3a0b 	blcc	2cecf4 <startup-0x1fd3130c>
 4c4:	0013010b 	andseq	r0, r3, fp, lsl #2
 4c8:	000d0600 	andeq	r0, sp, r0, lsl #12
 4cc:	0b3a0803 	bleq	e824e0 <startup-0x1f17db20>
 4d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4d4:	0d070000 	stceq	0, cr0, [r7, #-0]
 4d8:	00134900 	andseq	r4, r3, r0, lsl #18
 4dc:	01130800 	tsteq	r3, r0, lsl #16
 4e0:	0b0b0e03 	bleq	2c3cf4 <startup-0x1fd3c30c>
 4e4:	0b3b0b3a 	bleq	ec31d4 <startup-0x1f13ce2c>
 4e8:	00001301 	andeq	r1, r0, r1, lsl #6
 4ec:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 4f0:	000b3813 	andeq	r3, fp, r3, lsl r8
 4f4:	00160a00 	andseq	r0, r6, r0, lsl #20
 4f8:	0b3a0e03 	bleq	e83d0c <startup-0x1f17c2f4>
 4fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 500:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 504:	03193f01 	tsteq	r9, #1, 30
 508:	3b0b3a0e 	blcc	2ced48 <startup-0x1fd312b8>
 50c:	1119270b 	tstne	r9, fp, lsl #14
 510:	40061201 	andmi	r1, r6, r1, lsl #4
 514:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 518:	00001301 	andeq	r1, r0, r1, lsl #6
 51c:	0300050c 	movweq	r0, #1292	; 0x50c
 520:	3b0b3a08 	blcc	2ced48 <startup-0x1fd312b8>
 524:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 528:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 52c:	0b0b000f 	bleq	2c0570 <startup-0x1fd3fa90>
 530:	00001349 	andeq	r1, r0, r9, asr #6
 534:	0300050e 	movweq	r0, #1294	; 0x50e
 538:	3b0b3a0e 	blcc	2ced78 <startup-0x1fd31288>
 53c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 540:	0f000018 	svceq	0x00000018
 544:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 548:	0b3b0b3a 	bleq	ec3238 <startup-0x1f13cdc8>
 54c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 550:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 554:	03193f01 	tsteq	r9, #1, 30
 558:	3b0b3a0e 	blcc	2ced98 <startup-0x1fd31268>
 55c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 560:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 564:	96184006 	ldrls	r4, [r8], -r6
 568:	13011942 	movwne	r1, #6466	; 0x1942
 56c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 570:	03193f01 	tsteq	r9, #1, 30
 574:	3b0b3a0e 	blcc	2cedb4 <startup-0x1fd3124c>
 578:	1119270b 	tstne	r9, fp, lsl #14
 57c:	40061201 	andmi	r1, r6, r1, lsl #4
 580:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 584:	00001301 	andeq	r1, r0, r1, lsl #6
 588:	3f002e12 	svccc	0x00002e12
 58c:	3a0e0319 	bcc	3811f8 <startup-0x1fc7ee08>
 590:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 594:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 598:	96184006 	ldrls	r4, [r8], -r6
 59c:	00001942 	andeq	r1, r0, r2, asr #18
 5a0:	01110100 	tsteq	r1, r0, lsl #2
 5a4:	0b130e25 	bleq	4c3e40 <startup-0x1fb3c1c0>
 5a8:	01110e03 	tsteq	r1, r3, lsl #28
 5ac:	17100612 			; <UNDEFINED> instruction: 0x17100612
 5b0:	13020000 	movwne	r0, #8192	; 0x2000
 5b4:	3a0b0b01 	bcc	2c31c0 <startup-0x1fd3ce40>
 5b8:	010b3b0b 	tsteq	fp, fp, lsl #22
 5bc:	03000013 	movweq	r0, #19
 5c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5c4:	0b3b0b3a 	bleq	ec32b4 <startup-0x1f13cd4c>
 5c8:	0b381349 	bleq	e052f4 <startup-0x1f1fad0c>
 5cc:	24040000 	strcs	r0, [r4], #-0
 5d0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 5d4:	000e030b 	andeq	r0, lr, fp, lsl #6
 5d8:	01170500 	tsteq	r7, r0, lsl #10
 5dc:	0b3a0b0b 	bleq	e83210 <startup-0x1f17cdf0>
 5e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 5e4:	0d060000 	stceq	0, cr0, [r6, #-0]
 5e8:	3a080300 	bcc	2011f0 <startup-0x1fdfee10>
 5ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5f0:	07000013 	smladeq	r0, r3, r0, r0
 5f4:	1349000d 	movtne	r0, #36877	; 0x900d
 5f8:	13080000 	movwne	r0, #32768	; 0x8000
 5fc:	0b0e0301 	bleq	381208 <startup-0x1fc7edf8>
 600:	3b0b3a0b 	blcc	2cee34 <startup-0x1fd311cc>
 604:	0013010b 	andseq	r0, r3, fp, lsl #2
 608:	000d0900 	andeq	r0, sp, r0, lsl #18
 60c:	0b381349 	bleq	e05338 <startup-0x1f1facc8>
 610:	160a0000 	strne	r0, [sl], -r0
 614:	3a0e0300 	bcc	38121c <startup-0x1fc7ede4>
 618:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 61c:	0b000013 	bleq	670 <startup-0x1ffff990>
 620:	13490101 	movtne	r0, #37121	; 0x9101
 624:	00001301 	andeq	r1, r0, r1, lsl #6
 628:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 62c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 630:	00340d00 	eorseq	r0, r4, r0, lsl #26
 634:	0b3a0803 	bleq	e82648 <startup-0x1f17d9b8>
 638:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 63c:	00001802 	andeq	r1, r0, r2, lsl #16
 640:	3f012e0e 	svccc	0x00012e0e
 644:	3a0e0319 	bcc	3812b0 <startup-0x1fc7ed50>
 648:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 64c:	11134919 	tstne	r3, r9, lsl r9
 650:	40061201 	andmi	r1, r6, r1, lsl #4
 654:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 658:	00001301 	andeq	r1, r0, r1, lsl #6
 65c:	0b00240f 	bleq	96a0 <startup-0x1fff6960>
 660:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 664:	10000008 	andne	r0, r0, r8
 668:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 66c:	0b3a0e03 	bleq	e83e80 <startup-0x1f17c180>
 670:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 674:	06120111 			; <UNDEFINED> instruction: 0x06120111
 678:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 67c:	00130119 	andseq	r0, r3, r9, lsl r1
 680:	00051100 	andeq	r1, r5, r0, lsl #2
 684:	0b3a0803 	bleq	e82698 <startup-0x1f17d968>
 688:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 68c:	00001802 	andeq	r1, r0, r2, lsl #16
 690:	3f012e12 	svccc	0x00012e12
 694:	3a0e0319 	bcc	381300 <startup-0x1fc7ed00>
 698:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 69c:	11134919 	tstne	r3, r9, lsl r9
 6a0:	40061201 	andmi	r1, r6, r1, lsl #4
 6a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 6a8:	00001301 	andeq	r1, r0, r1, lsl #6
 6ac:	03003413 	movweq	r3, #1043	; 0x413
 6b0:	3b0b3a08 	blcc	2ceed8 <startup-0x1fd31128>
 6b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 6b8:	00341400 	eorseq	r1, r4, r0, lsl #8
 6bc:	0b3a0e03 	bleq	e83ed0 <startup-0x1f17c130>
 6c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6c4:	00001802 	andeq	r1, r0, r2, lsl #16
 6c8:	11010b15 	tstne	r1, r5, lsl fp
 6cc:	00061201 	andeq	r1, r6, r1, lsl #4
 6d0:	002e1600 	eoreq	r1, lr, r0, lsl #12
 6d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6d8:	0b3b0b3a 	bleq	ec33c8 <startup-0x1f13cc38>
 6dc:	01111927 	tsteq	r1, r7, lsr #18
 6e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6e4:	00194297 	mulseq	r9, r7, r2
 6e8:	11010000 	mrsne	r0, (UNDEF: 1)
 6ec:	130e2501 	movwne	r2, #58625	; 0xe501
 6f0:	110e030b 	tstne	lr, fp, lsl #6
 6f4:	10061201 	andne	r1, r6, r1, lsl #4
 6f8:	02000017 	andeq	r0, r0, #23
 6fc:	0b0b0024 	bleq	2c0794 <startup-0x1fd3f86c>
 700:	0e030b3e 	vmoveq.16	d3[0], r0
 704:	16030000 	strne	r0, [r3], -r0
 708:	3a0e0300 	bcc	381310 <startup-0x1fc7ecf0>
 70c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 710:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 714:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 718:	0b3a0b0b 	bleq	e8334c <startup-0x1f17ccb4>
 71c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 720:	0d050000 	stceq	0, cr0, [r5, #-0]
 724:	3a080300 	bcc	20132c <startup-0x1fdfecd4>
 728:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 72c:	000b3813 	andeq	r3, fp, r3, lsl r8
 730:	01130600 	tsteq	r3, r0, lsl #12
 734:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 738:	0b3b0b3a 	bleq	ec3428 <startup-0x1f13cbd8>
 73c:	00001301 	andeq	r1, r0, r1, lsl #6
 740:	03000d07 	movweq	r0, #3335	; 0xd07
 744:	3b0b3a0e 	blcc	2cef84 <startup-0x1fd3107c>
 748:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 74c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 750:	0b0b0024 	bleq	2c07e8 <startup-0x1fd3f818>
 754:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 758:	01090000 	mrseq	r0, (UNDEF: 9)
 75c:	01134901 	tsteq	r3, r1, lsl #18
 760:	0a000013 	beq	7b4 <startup-0x1ffff84c>
 764:	13490021 	movtne	r0, #36897	; 0x9021
 768:	00000b2f 	andeq	r0, r0, pc, lsr #22
 76c:	0b000f0b 	bleq	43a0 <startup-0x1fffbc60>
 770:	0013490b 	andseq	r4, r3, fp, lsl #18
 774:	01150c00 	tsteq	r5, r0, lsl #24
 778:	13011927 	movwne	r1, #6439	; 0x1927
 77c:	050d0000 	streq	r0, [sp, #-0]
 780:	00134900 	andseq	r4, r3, r0, lsl #18
 784:	00340e00 	eorseq	r0, r4, r0, lsl #28
 788:	0b3a0e03 	bleq	e83f9c <startup-0x1f17c064>
 78c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 790:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 794:	340f0000 	strcc	r0, [pc], #-0	; 79c <startup-0x1ffff864>
 798:	3a0e0300 	bcc	3813a0 <startup-0x1fc7ec60>
 79c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7a0:	00180213 	andseq	r0, r8, r3, lsl r2
 7a4:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 7a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7ac:	0b3b0b3a 	bleq	ec349c <startup-0x1f13cb64>
 7b0:	01111927 	tsteq	r1, r7, lsr #18
 7b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7b8:	00194296 	mulseq	r9, r6, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000b2 	strheq	r0, [r0], -r2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02f70002 	rscseq	r0, r7, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000c4 	andcs	r0, r0, r4, asr #1
  3c:	00000178 	andeq	r0, r0, r8, ror r1
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04dd0002 	ldrbeq	r0, [sp], #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000023c 	andcs	r0, r0, ip, lsr r2
  5c:	00000728 	andeq	r0, r0, r8, lsr #14
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0a8b0002 	beq	fe2c007c <end_portal_bits+0xde2bee44>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000964 	andcs	r0, r0, r4, ror #18
  7c:	0000033a 	andeq	r0, r0, sl, lsr r3
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0db10002 	ldceq	0, cr0, [r1, #8]!
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000ca0 	andcs	r0, r0, r0, lsr #25
  9c:	00000168 	andeq	r0, r0, r8, ror #2
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0f840002 	svceq	0x00840002
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000e08 	andcs	r0, r0, r8, lsl #28
  bc:	0000021c 	andeq	r0, r0, ip, lsl r2
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000c2 	andcs	r0, r0, r2, asr #1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000ca 	andeq	r0, r0, sl, asr #1
   4:	008a0002 	addeq	r0, sl, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
  20:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; fffffe88 <end_portal_bits+0xdfffec50>
  24:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  28:	2f373130 	svccs	0x00373130
  2c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
  30:	30544144 	subscc	r4, r4, r4, asr #2
  34:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff78 <end_portal_bits+0xdfffed40>
  38:	20736261 	rsbscs	r6, r3, r1, ror #4
  3c:	20646e61 	rsbcs	r6, r4, r1, ror #28
  40:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
  44:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
  48:	70732f73 	rsbsvc	r2, r3, r3, ror pc
  4c:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  50:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  54:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
  58:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
  5c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
  60:	00657275 	rsbeq	r7, r5, r5, ror r2
  64:	61747300 	cmnvs	r4, r0, lsl #6
  68:	70757472 	rsbsvc	r7, r5, r2, ror r4
  6c:	0100632e 	tsteq	r0, lr, lsr #6
  70:	72670000 	rsbvc	r0, r7, #0
  74:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  78:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  7c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  80:	0100682e 	tsteq	r0, lr, lsr #16
  84:	70730000 	rsbsvc	r0, r3, r0
  88:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  8c:	00682e73 	rsbeq	r2, r8, r3, ror lr
  90:	00000001 	andeq	r0, r0, r1
  94:	00020500 	andeq	r0, r2, r0, lsl #10
  98:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  9c:	5e13010c 	mufpls	f0, f3, #4.0
  a0:	01000302 	tsteq	r0, r2, lsl #6
  a4:	02050001 	andeq	r0, r5, #1
  a8:	20000010 	andcs	r0, r0, r0, lsl r0
  ac:	3d011503 	cfstr32cc	mvfx1, [r1, #-12]
  b0:	5932322f 	ldmdbpl	r2!, {r0, r1, r2, r3, r5, r9, ip, sp}
  b4:	c9594b4b 	ldmdbgt	r9, {r0, r1, r3, r6, r8, r9, fp, lr}^
  b8:	76838375 			; <UNDEFINED> instruction: 0x76838375
  bc:	033c7503 	teqeq	ip, #12582912	; 0xc00000
  c0:	09033c10 	stmdbeq	r3, {r4, sl, fp, ip, sp}
  c4:	2f2f2f2e 	svccs	0x002f2f2e
  c8:	00030230 	andeq	r0, r3, r0, lsr r2
  cc:	00c50101 	sbceq	r0, r5, r1, lsl #2
  d0:	00020000 	andeq	r0, r2, r0
  d4:	0000007e 	andeq	r0, r0, lr, ror r0
  d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  dc:	0101000d 	tsteq	r1, sp
  e0:	00000101 	andeq	r0, r0, r1, lsl #2
  e4:	00000100 	andeq	r0, r0, r0, lsl #2
  e8:	2f3a4301 	svccs	0x003a4301
  ec:	6f686353 	svcvs	0x00686353
  f0:	442f6c6f 	strtmi	r6, [pc], #-3183	; f8 <startup-0x1fffff08>
  f4:	31305441 	teqcc	r0, r1, asr #8
  f8:	6f4d2f37 	svcvs	0x004d2f37
  fc:	41442d70 	hvcmi	17104	; 0x42d0
 100:	37313054 			; <UNDEFINED> instruction: 0x37313054
 104:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 108:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 10c:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 110:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 114:	2f736573 	svccs	0x00736573
 118:	6f6f7073 	svcvs	0x006f7073
 11c:	5f737970 	svcpl	0x00737970
 120:	617a6962 	cmnvs	sl, r2, ror #18
 124:	5f657272 	svcpl	0x00657272
 128:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 12c:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 130:	64000065 	strvs	r0, [r0], #-101	; 0xffffff9b
 134:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 138:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 13c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 140:	632e7470 			; <UNDEFINED> instruction: 0x632e7470
 144:	00000100 	andeq	r0, r0, r0, lsl #2
 148:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 14c:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
 150:	00010068 	andeq	r0, r1, r8, rrx
 154:	05000000 	streq	r0, [r0, #-0]
 158:	0000c402 	andeq	ip, r0, r2, lsl #8
 15c:	2f2f1820 	svccs	0x002f1820
 160:	3d3d2f3e 	ldccc	15, cr2, [sp, #-248]!	; 0xffffff08
 164:	3d3d2f5a 	ldccc	15, cr2, [sp, #-360]!	; 0xfffffe98
 168:	3e3d2f68 	cdpcc	15, 3, cr2, cr13, cr8, {3}
 16c:	4b684e30 	blmi	1a13a34 <startup-0x1e5ec5cc>
 170:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 174:	4ba02538 	blmi	fe80965c <end_portal_bits+0xde808424>
 178:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 17c:	4ba02538 	blmi	fe809664 <end_portal_bits+0xde80842c>
 180:	3d3d4b3d 	fldmdbxcc	sp!, {d4-d33}	;@ Deprecated
 184:	763d2f76 	shsub16vc	r2, sp, r6
 188:	4b593d2f 	blmi	164f64c <startup-0x1e9b09b4>
 18c:	331b354b 	tstcc	fp, #314572800	; 0x12c00000
 190:	0b023e1e 	bleq	8fa10 <startup-0x1ff705f0>
 194:	c3010100 	movwgt	r0, #4352	; 0x1100
 198:	02000001 	andeq	r0, r0, #1
 19c:	00008e00 	andeq	r8, r0, r0, lsl #28
 1a0:	fb010200 	blx	409aa <startup-0x1ffbf656>
 1a4:	01000d0e 	tsteq	r0, lr, lsl #26
 1a8:	00010101 	andeq	r0, r1, r1, lsl #2
 1ac:	00010000 	andeq	r0, r1, r0
 1b0:	3a430100 	bcc	10c05b8 <startup-0x1ef3fa48>
 1b4:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 1b8:	2f6c6f6f 	svccs	0x006c6f6f
 1bc:	30544144 	subscc	r4, r4, r4, asr #2
 1c0:	4d2f3731 	stcmi	7, cr3, [pc, #-196]!	; 104 <startup-0x1ffffefc>
 1c4:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 1c8:	31305441 	teqcc	r0, r1, asr #8
 1cc:	614c2f37 	cmpvs	ip, r7, lsr pc
 1d0:	61207362 			; <UNDEFINED> instruction: 0x61207362
 1d4:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 1d8:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 1dc:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 1e0:	6f70732f 	svcvs	0x0070732f
 1e4:	7379706f 	cmnvc	r9, #111	; 0x6f
 1e8:	7a69625f 	bvc	1a58b6c <startup-0x1e5a7494>
 1ec:	65727261 	ldrbvs	r7, [r2, #-609]!	; 0xfffffd9f
 1f0:	7664615f 			; <UNDEFINED> instruction: 0x7664615f
 1f4:	75746e65 	ldrbvc	r6, [r4, #-3685]!	; 0xfffff19b
 1f8:	00006572 	andeq	r6, r0, r2, ror r5
 1fc:	70617267 	rsbvc	r7, r1, r7, ror #4
 200:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 204:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 208:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 20c:	00000100 	andeq	r0, r0, r0, lsl #2
 210:	6f697067 	svcvs	0x00697067
 214:	0100682e 	tsteq	r0, lr, lsr #16
 218:	72670000 	rsbvc	r0, r7, #0
 21c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 220:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 224:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 228:	0100682e 	tsteq	r0, lr, lsr #16
 22c:	00000000 	andeq	r0, r0, r0
 230:	023c0205 	eorseq	r0, ip, #1342177280	; 0x50000000
 234:	67142000 	ldrvs	r2, [r4, -r0]
 238:	59839159 	stmibpl	r3, {r0, r3, r4, r6, r8, ip, pc}
 23c:	d7596776 			; <UNDEFINED> instruction: 0xd7596776
 240:	67685983 	strbvs	r5, [r8, -r3, lsl #19]!
 244:	03741003 	cmneq	r4, #3
 248:	10032070 	andne	r2, r3, r0, ror r0
 24c:	2072034a 	rsbscs	r0, r2, sl, asr #6
 250:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 254:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 258:	3f4c223d 	svccc	0x004c223d
 25c:	3d3d3f3e 	ldccc	15, cr3, [sp, #-248]!	; 0xffffff08
 260:	4b303d32 	blmi	c0f730 <startup-0x1f3f08d0>
 264:	0367313d 	cmneq	r7, #1073741839	; 0x4000000f
 268:	0a034a77 	beq	d2c4c <startup-0x1ff2d3b4>
 26c:	3d3e2520 	cfldr32cc	mvfx2, [lr, #-128]!	; 0xffffff80
 270:	3e3f68a0 	cdpcc	8, 3, cr6, cr15, cr0, {5}
 274:	3d30593e 			; <UNDEFINED> instruction: 0x3d30593e
 278:	3e3f5a31 			; <UNDEFINED> instruction: 0x3e3f5a31
 27c:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 280:	2e0b033d 	mcrcs	3, 0, r0, cr11, cr13, {1}
 284:	4b92ae3d 	blmi	fe4abb80 <end_portal_bits+0xde4aa948>
 288:	2f3d3059 	svccs	0x003d3059
 28c:	303d593f 	eorscc	r5, sp, pc, lsr r9
 290:	3d323d59 	ldccc	13, cr3, [r2, #-356]!	; 0xfffffe9c
 294:	91763d3f 	cmnls	r6, pc, lsr sp
 298:	833d593d 	teqhi	sp, #999424	; 0xf4000
 29c:	593d914c 	ldmdbpl	sp!, {r2, r3, r6, r8, ip, pc}
 2a0:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
 2a4:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 2a8:	3e3e3e2f 	cdpcc	14, 3, cr3, cr14, cr15, {1}
 2ac:	4b3e3e3d 	blmi	f8fba8 <startup-0x1f070458>
 2b0:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 2b4:	4b3d3e3d 	blmi	f4fbb0 <startup-0x1f0b0450>
 2b8:	02004c9f 	andeq	r4, r0, #40704	; 0x9f00
 2bc:	004b0304 	subeq	r0, fp, r4, lsl #6
 2c0:	49030402 	stmdbmi	r3, {r1, sl}
 2c4:	01040200 	mrseq	r0, R12_usr
 2c8:	02005806 	andeq	r5, r0, #393216	; 0x60000
 2cc:	46060204 	strmi	r0, [r6], -r4, lsl #4
 2d0:	01040200 	mrseq	r0, R12_usr
 2d4:	52065806 	andpl	r5, r6, #393216	; 0x60000
 2d8:	0200e64c 	andeq	lr, r0, #76, 12	; 0x4c00000
 2dc:	58060104 	stmdapl	r6, {r2, r8}
 2e0:	02005b06 	andeq	r5, r0, #6144	; 0x1800
 2e4:	58060104 	stmdapl	r6, {r2, r8}
 2e8:	02005b06 	andeq	r5, r0, #6144	; 0x1800
 2ec:	4a060104 	bmi	180704 <startup-0x1fe7f8fc>
 2f0:	4bae5c06 	blmi	feb97310 <end_portal_bits+0xdeb960d8>
 2f4:	20080d03 	andcs	r0, r8, r3, lsl #26
 2f8:	4b4b7a4b 	blmi	12dec2c <startup-0x1ed213d4>
 2fc:	c9694b76 	stmdbgt	r9!, {r1, r2, r4, r5, r6, r8, r9, fp, lr}^
 300:	4bc99fd7 	blmi	ff268264 <end_portal_bits+0xdf26702c>
 304:	039fa0ae 	orrseq	sl, pc, #174	; 0xae
 308:	31313c4e 	teqcc	r1, lr, asr #24
 30c:	5a202d03 	bpl	80b720 <startup-0x1f7f48e0>
 310:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 314:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 318:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 31c:	01040200 	mrseq	r0, R12_usr
 320:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
 324:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 328:	003d0304 	eorseq	r0, sp, r4, lsl #6
 32c:	08030402 	stmdaeq	r3, {r1, sl}
 330:	040200c7 	streq	r0, [r2], #-199	; 0xffffff39
 334:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 338:	4b4b4c69 	blmi	12d34e4 <startup-0x1ed2cb1c>
 33c:	02007775 	andeq	r7, r0, #30670848	; 0x1d40000
 340:	4a060104 	bmi	180758 <startup-0x1fe7f8a8>
 344:	005a8306 	subseq	r8, sl, r6, lsl #6
 348:	06010402 	streq	r0, [r1], -r2, lsl #8
 34c:	5b83064a 	blpl	fe0c1c7c <end_portal_bits+0xde0c0a44>
 350:	3d674c4b 	stclcc	12, cr4, [r7, #-300]!	; 0xfffffed4
 354:	3d304c3d 	ldccc	12, cr4, [r0, #-244]!	; 0xffffff0c
 358:	0008023d 	andeq	r0, r8, sp, lsr r2
 35c:	01020101 	tsteq	r2, r1, lsl #2
 360:	00020000 	andeq	r0, r2, r0
 364:	00000078 	andeq	r0, r0, r8, ror r0
 368:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 36c:	0101000d 	tsteq	r1, sp
 370:	00000101 	andeq	r0, r0, r1, lsl #2
 374:	00000100 	andeq	r0, r0, r0, lsl #2
 378:	2f3a4301 	svccs	0x003a4301
 37c:	6f686353 	svcvs	0x00686353
 380:	442f6c6f 	strtmi	r6, [pc], #-3183	; 388 <startup-0x1ffffc78>
 384:	31305441 	teqcc	r0, r1, asr #8
 388:	6f4d2f37 	svcvs	0x004d2f37
 38c:	41442d70 	hvcmi	17104	; 0x42d0
 390:	37313054 			; <UNDEFINED> instruction: 0x37313054
 394:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 398:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 39c:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 3a0:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 3a4:	2f736573 	svccs	0x00736573
 3a8:	6f6f7073 	svcvs	0x006f7073
 3ac:	5f737970 	svcpl	0x00737970
 3b0:	617a6962 	cmnvs	sl, r2, ror #18
 3b4:	5f657272 	svcpl	0x00657272
 3b8:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 3bc:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 3c0:	61000065 	tstvs	r0, r5, rrx
 3c4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3c8:	70736964 	rsbsvc	r6, r3, r4, ror #18
 3cc:	2e79616c 	rpwcsez	f6, f1, #4.0
 3d0:	00010063 	andeq	r0, r1, r3, rrx
 3d4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 3d8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
 3e4:	14200009 	strtne	r0, [r0], #-9
 3e8:	5a5a4030 	bpl	16904b0 <startup-0x1e96fb50>
 3ec:	6876595a 	ldmdavs	r6!, {r1, r3, r4, r6, r8, fp, ip, lr}^
 3f0:	68839159 	stmvs	r3, {r0, r3, r4, r6, r8, ip, pc}
 3f4:	84ad5968 	strthi	r5, [sp], #2408	; 0x968
 3f8:	3f3d6868 	svccc	0x003d6868
 3fc:	3d684c59 	stclcc	12, cr4, [r8, #-356]!	; 0xfffffe9c
 400:	3f4c593f 	svccc	0x004c593f
 404:	5b3e3d69 	blpl	f8f9b0 <startup-0x1f070650>
 408:	3f842f68 	svccc	0x00842f68
 40c:	5b3f3d69 	blpl	fcf9b8 <startup-0x1f030648>
 410:	68842f68 	stmvs	r4, {r3, r5, r6, r8, r9, sl, fp, sp}
 414:	3d314d3f 	ldccc	13, cr4, [r1, #-252]!	; 0xffffff04
 418:	313f4068 	teqcc	pc, r8, rrx
 41c:	762f3e4d 	strtvc	r3, [pc], -sp, asr #28
 420:	040200ae 	streq	r0, [r2], #-174	; 0xffffff52
 424:	06200601 	strteq	r0, [r0], -r1, lsl #12
 428:	4b5b3f67 	blmi	16d01cc <startup-0x1e92fe34>
 42c:	4c4c1e4e 	mcrrmi	14, 4, r1, ip, cr14
 430:	003f3d68 	eorseq	r3, pc, r8, ror #26
 434:	06010402 	streq	r0, [r1], -r2, lsl #8
 438:	3f670620 	svccc	0x00670620
 43c:	5a4c3d5b 	bpl	130f9b0 <startup-0x1ecf0650>
 440:	01040200 	mrseq	r0, R12_usr
 444:	40063c06 	andmi	r3, r6, r6, lsl #24
 448:	01040200 	mrseq	r0, R12_usr
 44c:	41063c06 	tstmi	r6, r6, lsl #24
 450:	03783d67 	cmneq	r8, #6592	; 0x19c0
 454:	0332c872 	teqeq	r2, #7471104	; 0x720000
 458:	4c3e200b 	ldcmi	0, cr2, [lr], #-44	; 0xffffffd4
 45c:	024d7321 	subeq	r7, sp, #-2080374784	; 0x84000000
 460:	01010004 	tsteq	r1, r4
 464:	000000de 	ldrdeq	r0, [r0], -lr
 468:	007e0002 	rsbseq	r0, lr, r2
 46c:	01020000 	mrseq	r0, (UNDEF: 2)
 470:	000d0efb 	strdeq	r0, [sp], -fp
 474:	01010101 	tsteq	r1, r1, lsl #2
 478:	01000000 	mrseq	r0, (UNDEF: 0)
 47c:	43010000 	movwmi	r0, #4096	; 0x1000
 480:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
 484:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 2ec <startup-0x1ffffd14>
 488:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 48c:	2f373130 	svccs	0x00373130
 490:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 494:	30544144 	subscc	r4, r4, r4, asr #2
 498:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; 3dc <startup-0x1ffffc24>
 49c:	20736261 	rsbscs	r6, r3, r1, ror #4
 4a0:	20646e61 	rsbcs	r6, r4, r1, ror #28
 4a4:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 4a8:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 4ac:	70732f73 	rsbsvc	r2, r3, r3, ror pc
 4b0:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 4b4:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 4b8:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
 4bc:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
 4c0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
 4c4:	00657275 	rsbeq	r7, r5, r5, ror r2
 4c8:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 4cc:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 4d0:	00010063 	andeq	r0, r1, r3, rrx
 4d4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 4d8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 4dc:	6b000001 	blvs	4e8 <startup-0x1ffffb18>
 4e0:	61707965 	cmnvs	r0, r5, ror #18
 4e4:	00682e64 	rsbeq	r2, r8, r4, ror #28
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	a0020500 	andge	r0, r2, r0, lsl #10
 4f0:	1420000c 	strtne	r0, [r0], #-12
 4f4:	4b673d2f 	blmi	19cf9b8 <startup-0x1e630648>
 4f8:	76597567 	ldrbvc	r7, [r9], -r7, ror #10
 4fc:	59594c3f 	ldmdbpl	r9, {r0, r1, r2, r3, r4, r5, sl, fp, lr}^
 500:	02003d4b 	andeq	r3, r0, #4800	; 0x12c0
 504:	7a030204 	bvc	c0d1c <startup-0x1ff3f2e4>
 508:	040200ac 	streq	r0, [r2], #-172	; 0xffffff54
 50c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 510:	3d4a0a03 	vstrcc	s1, [sl, #-12]
 514:	91676821 	cmnls	r7, r1, lsr #16
 518:	4b4b4b4b 	blmi	12d324c <startup-0x1ed2cdb4>
 51c:	4b3f924c 	blmi	fe4e54 <startup-0x1f01b1ac>
 520:	01040200 	mrseq	r0, R12_usr
 524:	2f065806 	svccs	0x00065806
 528:	01040200 	mrseq	r0, R12_usr
 52c:	2f065806 	svccs	0x00065806
 530:	01040200 	mrseq	r0, R12_usr
 534:	2f065806 	svccs	0x00065806
 538:	01040200 	mrseq	r0, R12_usr
 53c:	2f065806 	svccs	0x00065806
 540:	00060221 	andeq	r0, r6, r1, lsr #4
 544:	00ae0101 	adceq	r0, lr, r1, lsl #2
 548:	00020000 	andeq	r0, r2, r0
 54c:	0000008a 	andeq	r0, r0, sl, lsl #1
 550:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 554:	0101000d 	tsteq	r1, sp
 558:	00000101 	andeq	r0, r0, r1, lsl #2
 55c:	00000100 	andeq	r0, r0, r0, lsl #2
 560:	2f3a4301 	svccs	0x003a4301
 564:	6f686353 	svcvs	0x00686353
 568:	442f6c6f 	strtmi	r6, [pc], #-3183	; 570 <startup-0x1ffffa90>
 56c:	31305441 	teqcc	r0, r1, asr #8
 570:	6f4d2f37 	svcvs	0x004d2f37
 574:	41442d70 	hvcmi	17104	; 0x42d0
 578:	37313054 			; <UNDEFINED> instruction: 0x37313054
 57c:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 580:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 584:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 588:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 58c:	2f736573 	svccs	0x00736573
 590:	6f6f7073 	svcvs	0x006f7073
 594:	5f737970 	svcpl	0x00737970
 598:	617a6962 	cmnvs	sl, r2, ror #18
 59c:	5f657272 	svcpl	0x00657272
 5a0:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 5a4:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 5a8:	73000065 	movwvc	r0, #101	; 0x65
 5ac:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 5b0:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 5b4:	00000100 	andeq	r0, r0, r0, lsl #2
 5b8:	70617267 	rsbvc	r7, r1, r7, ror #4
 5bc:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 5c0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 5c4:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 5c8:	00000100 	andeq	r0, r0, r0, lsl #2
 5cc:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 5d0:	2e736574 	mrccs	5, 3, r6, cr3, cr4, {3}
 5d4:	00010068 	andeq	r0, r1, r8, rrx
 5d8:	05000000 	streq	r0, [r0, #-0]
 5dc:	000e0802 	andeq	r0, lr, r2, lsl #16
 5e0:	024b1420 	subeq	r1, fp, #32, 8	; 0x20000000
 5e4:	0a03192e 	beq	c6aa4 <startup-0x1ff3955c>
 5e8:	02014a02 	andeq	r4, r1, #8192	; 0x2000
 5ec:	0903182e 	stmdbeq	r3, {r1, r2, r3, r5, fp, ip}
 5f0:	02014902 	andeq	r4, r1, #32768	; 0x8000
 5f4:	0101001b 	tsteq	r1, fp, lsl r0

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f646e65 	svcpl	0x00646e65
   4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
   8:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
   c:	00737469 	rsbseq	r7, r3, r9, ror #8
  10:	6f6f7073 	svcvs	0x006f7073
  14:	625f7970 	subsvs	r7, pc, #112, 18	; 0x1c0000
  18:	5f6b6361 	svcpl	0x006b6361
  1c:	73746962 	cmnvc	r4, #1605632	; 0x188000
  20:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  24:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  28:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  2c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  30:	30373130 	eorscc	r3, r7, r0, lsr r1
  34:	20353132 	eorscs	r3, r5, r2, lsr r1
  38:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  3c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  40:	415b2029 	cmpmi	fp, r9, lsr #32
  44:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fa <end_portal_bits+0xdfffe0c2>
  48:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  4c:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  50:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
  54:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  58:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  5c:	6f697369 	svcvs	0x00697369
  60:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
  64:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
  68:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  6c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  70:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  74:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  78:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  7c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  80:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  84:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  88:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  8c:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  90:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  94:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  98:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  9c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  a0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  a4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  a8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  ac:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  b0:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  b4:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  b8:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
  bc:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  c0:	73007972 	movwvc	r7, #2418	; 0x972
  c4:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
  c8:	00657079 	rsbeq	r7, r5, r9, ror r0
  cc:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  d0:	7300785f 	movwvc	r7, #2143	; 0x85f
  d4:	5f657a69 	svcpl	0x00657a69
  d8:	74730079 	ldrbtvc	r0, [r3], #-121	; 0xffffff87
  dc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  e0:	616d0070 	smcvs	53248	; 0xd000
  e4:	6b006e69 	blvs	1ba90 <startup-0x1ffe4570>
  e8:	6f627965 	svcvs	0x00627965
  ec:	5f647261 	svcpl	0x00647261
  f0:	006c6176 	rsbeq	r6, ip, r6, ror r1
  f4:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
  f8:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
  fc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 100:	47500074 			; <UNDEFINED> instruction: 0x47500074
 104:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 108:	00595254 	subseq	r5, r9, r4, asr r2
 10c:	6f6f7073 	svcvs	0x006f7073
 110:	75007970 	strvc	r7, [r0, #-2416]	; 0xfffff690
 114:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 118:	5000745f 	andpl	r7, r0, pc, asr r4
 11c:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 120:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 124:	656b0065 	strbvs	r0, [fp, #-101]!	; 0xffffff9b
 128:	61006279 	tstvs	r0, r9, ror r2
 12c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 130:	70736964 	rsbsvc	r6, r3, r4, ror #18
 134:	5f79616c 	svcpl	0x0079616c
 138:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 13c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 140:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 144:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
 148:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 14c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 150:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 154:	6f507400 	svcvs	0x00507400
 158:	00746e69 	rsbseq	r6, r4, r9, ror #28
 15c:	6f6f7073 	svcvs	0x006f7073
 160:	725f7970 	subsvc	r7, pc, #112, 18	; 0x1c0000
 164:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 168:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 16c:	70730073 	rsbsvc	r0, r3, r3, ror r0
 170:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 174:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 178:	3a430073 	bcc	10c034c <startup-0x1ef3fcb4>
 17c:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 180:	2f6c6f6f 	svccs	0x006c6f6f
 184:	30544144 	subscc	r4, r4, r4, asr #2
 188:	4d2f3731 	stcmi	7, cr3, [pc, #-196]!	; cc <startup-0x1fffff34>
 18c:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 190:	31305441 	teqcc	r0, r1, asr #8
 194:	614c2f37 	cmpvs	ip, r7, lsr pc
 198:	61207362 			; <UNDEFINED> instruction: 0x61207362
 19c:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 1a0:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 1a4:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 1a8:	6f70732f 	svcvs	0x0070732f
 1ac:	7379706f 	cmnvc	r9, #111	; 0x6f
 1b0:	7a69625f 	bvc	1a58b34 <startup-0x1e5a74cc>
 1b4:	65727261 	ldrbvs	r7, [r2, #-609]!	; 0xfffffd9f
 1b8:	7664615f 			; <UNDEFINED> instruction: 0x7664615f
 1bc:	75746e65 	ldrbvc	r6, [r4, #-3685]!	; 0xfffff19b
 1c0:	732f6572 			; <UNDEFINED> instruction: 0x732f6572
 1c4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 1c8:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 1cc:	6f687300 	svcvs	0x00687300
 1d0:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 1d4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 1d8:	2064656e 	rsbcs	r6, r4, lr, ror #10
 1dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1e0:	5f736f70 	svcpl	0x00736f70
 1e4:	6f700078 	svcvs	0x00700078
 1e8:	00795f73 	rsbseq	r5, r9, r3, ror pc
 1ec:	6a624f74 	bvs	1893fc4 <startup-0x1e76c03c>
 1f0:	656e6500 	strbvs	r6, [lr, #-1280]!	; 0xfffffb00
 1f4:	625f796d 	subsvs	r7, pc, #1785856	; 0x1b4000
 1f8:	00737469 	rsbseq	r7, r3, r9, ror #8
 1fc:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 200:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 204:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 208:	61006465 	tstvs	r0, r5, ror #8
 20c:	695f7070 	ldmdbvs	pc, {r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 210:	0074696e 	rsbseq	r6, r4, lr, ror #18
 214:	6f6f7073 	svcvs	0x006f7073
 218:	6c5f7970 	mrrcvs	9, 7, r7, pc, cr0	; <UNPREDICTABLE>
 21c:	5f746665 	svcpl	0x00746665
 220:	73746962 	cmnvc	r4, #1605632	; 0x188000
 224:	726f7000 	rsbvc	r7, pc, #0
 228:	006c6174 	rsbeq	r6, ip, r4, ror r1
 22c:	4a424f50 	bmi	1093f74 <startup-0x1ef6c08c>
 230:	00544345 	subseq	r4, r4, r5, asr #6
 234:	5f726964 	svcpl	0x00726964
 238:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
 23c:	00795f72 	rsbseq	r5, r9, r2, ror pc
 240:	616c6564 	cmnvs	ip, r4, ror #10
 244:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 248:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 24c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 250:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
 254:	6b636974 	blvs	18da82c <startup-0x1e7257d4>
 258:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 25c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 260:	685f7470 	ldmdavs	pc, {r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 264:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 268:	63007265 	movwvs	r7, #613	; 0x265
 26c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 270:	53595300 	cmppl	r9, #0, 6
 274:	4b434954 	blmi	10d27cc <startup-0x1ef2d834>
 278:	5254535f 	subspl	r5, r4, #2080374785	; 0x7c000001
 27c:	00544355 	subseq	r4, r4, r5, asr r3
 280:	616c6564 	cmnvs	ip, r4, ror #10
 284:	6e695f79 	mcrvs	15, 3, r5, cr9, cr9, {3}
 288:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 28c:	5f747075 	svcpl	0x00747075
 290:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 294:	72746300 	rsbsvc	r6, r4, #0, 6
 298:	7473006c 	ldrbtvc	r0, [r3], #-108	; 0xffffff94
 29c:	5f747261 	svcpl	0x00747261
 2a0:	616c6564 	cmnvs	ip, r4, ror #10
 2a4:	3a430079 	bcc	10c0490 <startup-0x1ef3fb70>
 2a8:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 2ac:	2f6c6f6f 	svccs	0x006c6f6f
 2b0:	30544144 	subscc	r4, r4, r4, asr #2
 2b4:	4d2f3731 	stcmi	7, cr3, [pc, #-196]!	; 1f8 <startup-0x1ffffe08>
 2b8:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 2bc:	31305441 	teqcc	r0, r1, asr #8
 2c0:	614c2f37 	cmpvs	ip, r7, lsr pc
 2c4:	61207362 			; <UNDEFINED> instruction: 0x61207362
 2c8:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 2cc:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 2d0:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 2d4:	6f70732f 	svcvs	0x0070732f
 2d8:	7379706f 	cmnvc	r9, #111	; 0x6f
 2dc:	7a69625f 	bvc	1a58c60 <startup-0x1e5a73a0>
 2e0:	65727261 	ldrbvs	r7, [r2, #-609]!	; 0xfffffd9f
 2e4:	7664615f 			; <UNDEFINED> instruction: 0x7664615f
 2e8:	75746e65 	ldrbvc	r6, [r4, #-3685]!	; 0xfffff19b
 2ec:	642f6572 	strtvs	r6, [pc], #-1394	; 2f4 <startup-0x1ffffd0c>
 2f0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2f4:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 2f8:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 2fc:	632e7470 			; <UNDEFINED> instruction: 0x632e7470
 300:	616f6c00 	cmnvs	pc, r0, lsl #24
 304:	65640064 	strbvs	r0, [r4, #-100]!	; 0xffffff9c
 308:	5f79616c 	svcpl	0x0079616c
 30c:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 310:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 314:	5f79616c 	svcpl	0x0079616c
 318:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 31c:	74630073 	strbtvc	r0, [r3], #-115	; 0xffffff8d
 320:	68546c72 	ldmdavs	r4, {r1, r4, r5, r6, sl, fp, sp, lr}^
 324:	42647269 	rsbmi	r7, r4, #-1879048186	; 0x90000006
 328:	00657479 	rsbeq	r7, r5, r9, ror r4
 32c:	616c6564 	cmnvs	ip, r4, ror #10
 330:	6f635f79 	svcvs	0x00635f79
 334:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
 338:	74630072 	strbtvc	r0, [r3], #-114	; 0xffffff8e
 33c:	69466c72 	stmdbvs	r6, {r1, r4, r5, r6, sl, fp, sp, lr}^
 340:	42747372 	rsbsmi	r7, r4, #-939524095	; 0xc8000001
 344:	00657479 	rsbeq	r7, r5, r9, ror r4
 348:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
 34c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 350:	65720031 	ldrbvs	r0, [r2, #-49]!	; 0xffffffcf
 354:	76726573 			; <UNDEFINED> instruction: 0x76726573
 358:	00326465 	eorseq	r6, r2, r5, ror #8
 35c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
 360:	6b636974 	blvs	18da938 <startup-0x1e7256c8>
 364:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 368:	315f7961 	cmpcc	pc, r1, ror #18
 36c:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 370:	75700069 	ldrbvc	r0, [r0, #-105]!	; 0xffffff97
 374:	7365736c 	cmnvc	r5, #108, 6	; 0xb0000001
 378:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 37c:	315f7961 	cmpcc	pc, r1, ror #18
 380:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 384:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
 388:	5f79616c 	svcpl	0x0079616c
 38c:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 390:	6163006f 	cmnvs	r3, pc, rrx
 394:	0062696c 	rsbeq	r6, r2, ip, ror #18
 398:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 39c:	5f6b6369 	svcpl	0x006b6369
 3a0:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 3a4:	70675f00 	rsbvc	r5, r7, r0, lsl #30
 3a8:	67006f69 	strvs	r6, [r0, -r9, ror #30]
 3ac:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3b0:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 3b4:	5f6c7274 	svcpl	0x006c7274
 3b8:	5f746962 	svcpl	0x00746962
 3bc:	00746573 	rsbseq	r6, r4, r3, ror r5
 3c0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 3c4:	6a626f5f 	bvs	189c148 <startup-0x1e763eb8>
 3c8:	00746365 	rsbseq	r6, r4, r5, ror #6
 3cc:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 3d0:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 3d4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 3d8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 3dc:	746f0072 	strbtvc	r0, [pc], #-114	; 3e4 <startup-0x1ffffc1c>
 3e0:	72657079 	rsbvc	r7, r5, #121	; 0x79
 3e4:	61726700 	cmnvs	r2, r0, lsl #14
 3e8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3ec:	6165725f 	cmnvs	r5, pc, asr r2
 3f0:	61645f64 	cmnvs	r4, r4, ror #30
 3f4:	70006174 	andvc	r6, r0, r4, ror r1
 3f8:	00656761 	rsbeq	r6, r5, r1, ror #14
 3fc:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 400:	646f006c 	strbtvs	r0, [pc], #-108	; 408 <startup-0x1ffffbf8>
 404:	67694872 			; <UNDEFINED> instruction: 0x67694872
 408:	5f780068 	svcpl	0x00780068
 40c:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 410:	67006c61 	strvs	r6, [r0, -r1, ror #24]
 414:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 418:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 41c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 420:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 424:	50470070 	subpl	r0, r7, r0, ror r0
 428:	67004f49 	strvs	r4, [r0, -r9, asr #30]
 42c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 430:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 434:	5f6c7274 	svcpl	0x006c7274
 438:	5f746962 	svcpl	0x00746962
 43c:	61656c63 	cmnvs	r5, r3, ror #24
 440:	6f630072 	svcvs	0x00630072
 444:	6f72746e 	svcvs	0x0072746e
 448:	65725f6c 	ldrbvs	r5, [r2, #-3948]!	; 0xfffff094
 44c:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
 450:	67007265 	strvs	r7, [r0, -r5, ror #4]
 454:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 458:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 45c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 460:	7a696c61 	bvc	1a5b5ec <startup-0x1e5a4a14>
 464:	75700065 	ldrbvc	r0, [r0, #-101]!	; 0xffffff9b
 468:	00726470 	rsbseq	r6, r2, r0, ror r4
 46c:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 470:	6f6f6863 	svcvs	0x006f6863
 474:	41442f6c 	cmpmi	r4, ip, ror #30
 478:	37313054 			; <UNDEFINED> instruction: 0x37313054
 47c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 480:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 484:	2f373130 	svccs	0x00373130
 488:	7362614c 	cmnvc	r2, #76, 2
 48c:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 490:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 494:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 498:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 49c:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 4a0:	625f7379 	subsvs	r7, pc, #-469762047	; 0xe4000001
 4a4:	72617a69 	rsbvc	r7, r1, #430080	; 0x69000
 4a8:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
 4ac:	6e657664 	cdpvs	6, 6, cr7, cr5, cr4, {3}
 4b0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 4b4:	6172672f 	cmnvs	r2, pc, lsr #14
 4b8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 4bc:	70736964 	rsbsvc	r6, r3, r4, ror #18
 4c0:	2e79616c 	rpwcsez	f6, f1, #4.0
 4c4:	72670063 	rsbvc	r0, r7, #99	; 0x63
 4c8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4cc:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 4d0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 4d4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 4d8:	646f0074 	strbtvs	r0, [pc], #-116	; 4e0 <startup-0x1ffffb20>
 4dc:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 4e0:	73696400 	cmnvc	r9, #0, 8
 4e4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 4e8:	7375625f 	cmnvc	r5, #-268435451	; 0xf0000005
 4ec:	74735f79 	ldrbtvc	r5, [r3], #-3961	; 0xfffff087
 4f0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 4f4:	72646900 	rsbvc	r6, r4, #0, 18
 4f8:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 4fc:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 500:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 504:	73616d00 	cmnvc	r1, #0, 26
 508:	6469006b 	strbtvs	r0, [r9], #-107	; 0xffffff95
 50c:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 510:	61726700 	cmnvs	r2, r0, lsl #14
 514:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 518:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 51c:	645f6574 	ldrbvs	r6, [pc], #-1396	; 524 <startup-0x1ffffadc>
 520:	00617461 	rsbeq	r7, r1, r1, ror #8
 524:	5f746573 	svcpl	0x00746573
 528:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 52c:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 530:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 534:	61726700 	cmnvs	r2, r0, lsl #14
 538:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 53c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 540:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 544:	00796461 	rsbseq	r6, r9, r1, ror #8
 548:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 54c:	6c630078 	stclvs	0, cr0, [r3], #-480	; 0xfffffe20
 550:	5f726165 	svcpl	0x00726165
 554:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 558:	6d007463 	cfstrsvs	mvf7, [r0, #-396]	; 0xfffffe74
 55c:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 560:	61726700 	cmnvs	r2, r0, lsl #14
 564:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 568:	6165725f 	cmnvs	r5, pc, asr r2
 56c:	6f6d0064 	svcvs	0x006d0064
 570:	6f5f6576 	svcvs	0x005f6576
 574:	63656a62 	cmnvs	r5, #401408	; 0x62000
 578:	72670074 	rsbvc	r0, r7, #116	; 0x74
 57c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 580:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 584:	5f657469 	svcpl	0x00657469
 588:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 58c:	00646e61 	rsbeq	r6, r4, r1, ror #28
 590:	70617267 	rsbvc	r7, r1, r7, ror #4
 594:	5f636968 	svcpl	0x00636968
 598:	61656c63 	cmnvs	r5, r3, ror #24
 59c:	63735f72 	cmnvs	r3, #456	; 0x1c8
 5a0:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 5a4:	63736100 	cmnvs	r3, #0, 2
 5a8:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 5ac:	5f646165 	svcpl	0x00646165
 5b0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 5b4:	63007375 	movwvs	r7, #885	; 0x375
 5b8:	61726168 	cmnvs	r2, r8, ror #2
 5bc:	72657463 	rsbvc	r7, r5, #1660944384	; 0x63000000
 5c0:	746f6700 	strbtvc	r6, [pc], #-1792	; 5c8 <startup-0x1ffffa38>
 5c4:	0079786f 	rsbseq	r7, r9, pc, ror #16
 5c8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 5cc:	63736100 	cmnvs	r3, #0, 2
 5d0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 5d4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 5d8:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 5dc:	00676e69 	rsbeq	r6, r7, r9, ror #28
 5e0:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 5e4:	765f6e72 			; <UNDEFINED> instruction: 0x765f6e72
 5e8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 5ec:	2f3a4300 	svccs	0x003a4300
 5f0:	6f686353 	svcvs	0x00686353
 5f4:	442f6c6f 	strtmi	r6, [pc], #-3183	; 5fc <startup-0x1ffffa04>
 5f8:	31305441 	teqcc	r0, r1, asr #8
 5fc:	6f4d2f37 	svcvs	0x004d2f37
 600:	41442d70 	hvcmi	17104	; 0x42d0
 604:	37313054 			; <UNDEFINED> instruction: 0x37313054
 608:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 60c:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 610:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 614:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 618:	2f736573 	svccs	0x00736573
 61c:	6f6f7073 	svcvs	0x006f7073
 620:	5f737970 	svcpl	0x00737970
 624:	617a6962 	cmnvs	sl, r2, ror #18
 628:	5f657272 	svcpl	0x00657272
 62c:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 630:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 634:	73612f65 	cmnvc	r1, #404	; 0x194
 638:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 63c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 640:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 644:	736f7000 	cmnvc	pc, #0
 648:	6f635f74 	svcvs	0x00635f74
 64c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 650:	65645f64 	strbvs	r5, [r4, #-3940]!	; 0xfffff09c
 654:	0079616c 	rsbseq	r6, r9, ip, ror #2
 658:	756c6f63 	strbvc	r6, [ip, #-3939]!	; 0xfffff09d
 65c:	61006e6d 	tstvs	r0, sp, ror #28
 660:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 664:	6165725f 	cmnvs	r5, pc, asr r2
 668:	6f635f64 	svcvs	0x00635f64
 66c:	6f72746e 	svcvs	0x0072746e
 670:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 674:	63736100 	cmnvs	r3, #0, 2
 678:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 67c:	5f6c7274 	svcpl	0x006c7274
 680:	5f746962 	svcpl	0x00746962
 684:	00746573 	rsbseq	r6, r4, r3, ror r5
 688:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 68c:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 690:	63736100 	cmnvs	r3, #0, 2
 694:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 698:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 69c:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 6a0:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 6a4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 6a8:	63736100 	cmnvs	r3, #0, 2
 6ac:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 6b0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 6b4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 6b8:	73610061 	cmnvc	r1, #97	; 0x61
 6bc:	5f696963 	svcpl	0x00696963
 6c0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 6c4:	00646e61 	rsbeq	r6, r4, r1, ror #28
 6c8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 6cc:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 6d0:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 6d4:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 6d8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 6dc:	63736100 	cmnvs	r3, #0, 2
 6e0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 6e4:	5f646165 	svcpl	0x00646165
 6e8:	61746164 	cmnvs	r4, r4, ror #2
 6ec:	63736100 	cmnvs	r3, #0, 2
 6f0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 6f4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 6f8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 6fc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 534 <startup-0x1ffffacc>
 700:	0072656c 	rsbseq	r6, r2, ip, ror #10
 704:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 708:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 70c:	5f657469 	svcpl	0x00657469
 710:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 714:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
 718:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 71c:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 720:	2f3a4300 	svccs	0x003a4300
 724:	6f686353 	svcvs	0x00686353
 728:	442f6c6f 	strtmi	r6, [pc], #-3183	; 730 <startup-0x1ffff8d0>
 72c:	31305441 	teqcc	r0, r1, asr #8
 730:	6f4d2f37 	svcvs	0x004d2f37
 734:	41442d70 	hvcmi	17104	; 0x42d0
 738:	37313054 			; <UNDEFINED> instruction: 0x37313054
 73c:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 740:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 744:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 748:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 74c:	2f736573 	svccs	0x00736573
 750:	6f6f7073 	svcvs	0x006f7073
 754:	5f737970 	svcpl	0x00737970
 758:	617a6962 	cmnvs	sl, r2, ror #18
 75c:	5f657272 	svcpl	0x00657272
 760:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 764:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 768:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xfffff09b
 76c:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 770:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
 774:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 778:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 77c:	3a43006e 	bcc	10c093c <startup-0x1ef3f6c4>
 780:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 784:	2f6c6f6f 	svccs	0x006c6f6f
 788:	30544144 	subscc	r4, r4, r4, asr #2
 78c:	4d2f3731 	stcmi	7, cr3, [pc, #-196]!	; 6d0 <startup-0x1ffff930>
 790:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 794:	31305441 	teqcc	r0, r1, asr #8
 798:	614c2f37 	cmpvs	ip, r7, lsr pc
 79c:	61207362 			; <UNDEFINED> instruction: 0x61207362
 7a0:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 7a4:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 7a8:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 7ac:	6f70732f 	svcvs	0x0070732f
 7b0:	7379706f 	cmnvc	r9, #111	; 0x6f
 7b4:	7a69625f 	bvc	1a59138 <startup-0x1e5a6ec8>
 7b8:	65727261 	ldrbvs	r7, [r2, #-609]!	; 0xfffffd9f
 7bc:	7664615f 			; <UNDEFINED> instruction: 0x7664615f
 7c0:	75746e65 	ldrbvc	r6, [r4, #-3685]!	; 0xfffff19b
 7c4:	732f6572 			; <UNDEFINED> instruction: 0x732f6572
 7c8:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 7cc:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 7d0:	72707300 	rsbsvc	r7, r0, #0, 6
 7d4:	73657469 	cmnvc	r5, #1761607680	; 0x69000000
 7d8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 7dc:	70730074 	rsbsvc	r0, r3, r4, ror r0
 7e0:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 7e4:	6f65675f 	svcvs	0x0065675f
 7e8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 7ec:	6f700079 	svcvs	0x00700079
 7f0:	6c617472 	cfstrdvs	mvd7, [r1], #-456	; 0xfffffe38
 7f4:	6f65675f 	svcvs	0x0065675f
 7f8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 7fc:	Address 0x000007fc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000098 	muleq	r0, r8, r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	100e4101 	andne	r4, lr, r1, lsl #2
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	200000a8 	andcs	r0, r0, r8, lsr #1
  4c:	0000001a 	andeq	r0, r0, sl, lsl r0
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	200000c4 	andcs	r0, r0, r4, asr #1
  78:	0000000e 	andeq	r0, r0, lr
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  88:	00000018 	andeq	r0, r0, r8, lsl r0
  8c:	0000005c 	andeq	r0, r0, ip, asr r0
  90:	200000d2 	ldrdcs	r0, [r0], -r2
  94:	0000001a 	andeq	r0, r0, sl, lsl r0
  98:	40080e41 	andmi	r0, r8, r1, asr #28
  9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  a4:	00000018 	andeq	r0, r0, r8, lsl r0
  a8:	0000005c 	andeq	r0, r0, ip, asr r0
  ac:	200000ec 	andcs	r0, r0, ip, ror #1
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	40080e41 	andmi	r0, r8, r1, asr #28
  b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  c0:	00000018 	andeq	r0, r0, r8, lsl r0
  c4:	0000005c 	andeq	r0, r0, ip, asr r0
  c8:	20000108 	andcs	r0, r0, r8, lsl #2
  cc:	00000010 	andeq	r0, r0, r0, lsl r0
  d0:	40080e41 	andmi	r0, r8, r1, asr #28
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  dc:	00000018 	andeq	r0, r0, r8, lsl r0
  e0:	0000005c 	andeq	r0, r0, ip, asr r0
  e4:	20000118 	andcs	r0, r0, r8, lsl r1
  e8:	00000018 	andeq	r0, r0, r8, lsl r0
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	0000005c 	andeq	r0, r0, ip, asr r0
 100:	20000130 	andcs	r0, r0, r0, lsr r1
 104:	0000003c 	andeq	r0, r0, ip, lsr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	0000005c 	andeq	r0, r0, ip, asr r0
 120:	2000016c 	andcs	r0, r0, ip, ror #2
 124:	0000003c 	andeq	r0, r0, ip, lsr r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	0000005c 	andeq	r0, r0, ip, asr r0
 140:	200001a8 	andcs	r0, r0, r8, lsr #3
 144:	00000030 	andeq	r0, r0, r0, lsr r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	00000018 	andeq	r0, r0, r8, lsl r0
 15c:	0000005c 	andeq	r0, r0, ip, asr r0
 160:	200001d8 	ldrdcs	r0, [r0], -r8
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 174:	00000018 	andeq	r0, r0, r8, lsl r0
 178:	0000005c 	andeq	r0, r0, ip, asr r0
 17c:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 180:	0000004c 	andeq	r0, r0, ip, asr #32
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 190:	0000000c 	andeq	r0, r0, ip
 194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 198:	7c020001 	stcvc	0, cr0, [r2], {1}
 19c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000190 	muleq	r0, r0, r1
 1a8:	2000023c 	andcs	r0, r0, ip, lsr r2
 1ac:	00000050 	andeq	r0, r0, r0, asr r0
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	00000190 	muleq	r0, r0, r1
 1c8:	2000028c 	andcs	r0, r0, ip, lsl #5
 1cc:	00000058 	andeq	r0, r0, r8, asr r0
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1dc:	00070d41 	andeq	r0, r7, r1, asr #26
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	00000190 	muleq	r0, r0, r1
 1e8:	200002e4 	andcs	r0, r0, r4, ror #5
 1ec:	0000005a 	andeq	r0, r0, sl, asr r0
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	100e4101 	andne	r4, lr, r1, lsl #2
 1fc:	00070d41 	andeq	r0, r7, r1, asr #26
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	00000190 	muleq	r0, r0, r1
 208:	2000033e 	andcs	r0, r0, lr, lsr r3
 20c:	00000076 	andeq	r0, r0, r6, ror r0
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	100e4101 	andne	r4, lr, r1, lsl #2
 21c:	00070d41 	andeq	r0, r7, r1, asr #26
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	00000190 	muleq	r0, r0, r1
 228:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
 22c:	00000090 	muleq	r0, r0, r0
 230:	40080e41 	andmi	r0, r8, r1, asr #28
 234:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 238:	180e4101 	stmdane	lr, {r0, r8, lr}
 23c:	00070d41 	andeq	r0, r7, r1, asr #26
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	00000190 	muleq	r0, r0, r1
 248:	20000444 	andcs	r0, r0, r4, asr #8
 24c:	00000080 	andeq	r0, r0, r0, lsl #1
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	100e4101 	andne	r4, lr, r1, lsl #2
 25c:	00070d41 	andeq	r0, r7, r1, asr #26
 260:	0000001c 	andeq	r0, r0, ip, lsl r0
 264:	00000190 	muleq	r0, r0, r1
 268:	200004c4 	andcs	r0, r0, r4, asr #9
 26c:	00000040 	andeq	r0, r0, r0, asr #32
 270:	40080e41 	andmi	r0, r8, r1, asr #28
 274:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 278:	100e4101 	andne	r4, lr, r1, lsl #2
 27c:	00070d41 	andeq	r0, r7, r1, asr #26
 280:	0000001c 	andeq	r0, r0, ip, lsl r0
 284:	00000190 	muleq	r0, r0, r1
 288:	20000504 	andcs	r0, r0, r4, lsl #10
 28c:	00000046 	andeq	r0, r0, r6, asr #32
 290:	40080e41 	andmi	r0, r8, r1, asr #28
 294:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 298:	100e4101 	andne	r4, lr, r1, lsl #2
 29c:	00070d41 	andeq	r0, r7, r1, asr #26
 2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a4:	00000190 	muleq	r0, r0, r1
 2a8:	2000054a 	andcs	r0, r0, sl, asr #10
 2ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 2b0:	40080e41 	andmi	r0, r8, r1, asr #28
 2b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b8:	100e4101 	andne	r4, lr, r1, lsl #2
 2bc:	00070d41 	andeq	r0, r7, r1, asr #26
 2c0:	00000018 	andeq	r0, r0, r8, lsl r0
 2c4:	00000190 	muleq	r0, r0, r1
 2c8:	20000574 	andcs	r0, r0, r4, ror r5
 2cc:	0000005c 	andeq	r0, r0, ip, asr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	00000190 	muleq	r0, r0, r1
 2e4:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2e8:	00000066 	andeq	r0, r0, r6, rrx
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	100e4101 	andne	r4, lr, r1, lsl #2
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	00000020 	andeq	r0, r0, r0, lsr #32
 300:	00000190 	muleq	r0, r0, r1
 304:	20000636 	andcs	r0, r0, r6, lsr r6
 308:	000001a6 	andeq	r0, r0, r6, lsr #3
 30c:	400c0e41 	andmi	r0, ip, r1, asr #28
 310:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 314:	018e4002 	orreq	r4, lr, r2
 318:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 31c:	0000070d 	andeq	r0, r0, sp, lsl #14
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	00000190 	muleq	r0, r0, r1
 328:	200007dc 	ldrdcs	r0, [r0], -ip
 32c:	00000064 	andeq	r0, r0, r4, rrx
 330:	40080e41 	andmi	r0, r8, r1, asr #28
 334:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 338:	180e4101 	stmdane	lr, {r0, r8, lr}
 33c:	00070d41 	andeq	r0, r7, r1, asr #26
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	00000190 	muleq	r0, r0, r1
 348:	20000840 	andcs	r0, r0, r0, asr #16
 34c:	00000064 	andeq	r0, r0, r4, rrx
 350:	40080e41 	andmi	r0, r8, r1, asr #28
 354:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 358:	180e4101 	stmdane	lr, {r0, r8, lr}
 35c:	00070d41 	andeq	r0, r7, r1, asr #26
 360:	0000001c 	andeq	r0, r0, ip, lsl r0
 364:	00000190 	muleq	r0, r0, r1
 368:	200008a4 	andcs	r0, r0, r4, lsr #17
 36c:	00000080 	andeq	r0, r0, r0, lsl #1
 370:	40080e41 	andmi	r0, r8, r1, asr #28
 374:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 378:	100e4101 	andne	r4, lr, r1, lsl #2
 37c:	00070d41 	andeq	r0, r7, r1, asr #26
 380:	0000001c 	andeq	r0, r0, ip, lsl r0
 384:	00000190 	muleq	r0, r0, r1
 388:	20000924 	andcs	r0, r0, r4, lsr #18
 38c:	00000020 	andeq	r0, r0, r0, lsr #32
 390:	40080e41 	andmi	r0, r8, r1, asr #28
 394:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 398:	180e4101 	stmdane	lr, {r0, r8, lr}
 39c:	00070d41 	andeq	r0, r7, r1, asr #26
 3a0:	00000018 	andeq	r0, r0, r8, lsl r0
 3a4:	00000190 	muleq	r0, r0, r1
 3a8:	20000944 	andcs	r0, r0, r4, asr #18
 3ac:	00000020 	andeq	r0, r0, r0, lsr #32
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3bc:	0000000c 	andeq	r0, r0, ip
 3c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3c4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3cc:	00000018 	andeq	r0, r0, r8, lsl r0
 3d0:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 3d4:	20000964 	andcs	r0, r0, r4, ror #18
 3d8:	00000040 	andeq	r0, r0, r0, asr #32
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 3f0:	200009a4 	andcs	r0, r0, r4, lsr #19
 3f4:	00000044 	andeq	r0, r0, r4, asr #32
 3f8:	40080e41 	andmi	r0, r8, r1, asr #28
 3fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 400:	180e4101 	stmdane	lr, {r0, r8, lr}
 404:	00070d41 	andeq	r0, r7, r1, asr #26
 408:	0000001c 	andeq	r0, r0, ip, lsl r0
 40c:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 410:	200009e8 	andcs	r0, r0, r8, ror #19
 414:	00000048 	andeq	r0, r0, r8, asr #32
 418:	40080e41 	andmi	r0, r8, r1, asr #28
 41c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 420:	180e4101 	stmdane	lr, {r0, r8, lr}
 424:	00070d41 	andeq	r0, r7, r1, asr #26
 428:	0000001c 	andeq	r0, r0, ip, lsl r0
 42c:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 430:	20000a30 	andcs	r0, r0, r0, lsr sl
 434:	0000002a 	andeq	r0, r0, sl, lsr #32
 438:	40080e41 	andmi	r0, r8, r1, asr #28
 43c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 440:	100e4101 	andne	r4, lr, r1, lsl #2
 444:	00070d41 	andeq	r0, r7, r1, asr #26
 448:	0000001c 	andeq	r0, r0, ip, lsl r0
 44c:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 450:	20000a5a 	andcs	r0, r0, sl, asr sl
 454:	0000002a 	andeq	r0, r0, sl, lsr #32
 458:	40080e41 	andmi	r0, r8, r1, asr #28
 45c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 460:	100e4101 	andne	r4, lr, r1, lsl #2
 464:	00070d41 	andeq	r0, r7, r1, asr #26
 468:	00000020 	andeq	r0, r0, r0, lsr #32
 46c:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 470:	20000a84 	andcs	r0, r0, r4, lsl #21
 474:	00000048 	andeq	r0, r0, r8, asr #32
 478:	400c0e41 	andmi	r0, ip, r1, asr #28
 47c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 480:	018e4002 	orreq	r4, lr, r2
 484:	41180e41 	tstmi	r8, r1, asr #28
 488:	0000070d 	andeq	r0, r0, sp, lsl #14
 48c:	00000020 	andeq	r0, r0, r0, lsr #32
 490:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 494:	20000acc 	andcs	r0, r0, ip, asr #21
 498:	00000048 	andeq	r0, r0, r8, asr #32
 49c:	400c0e41 	andmi	r0, ip, r1, asr #28
 4a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4a4:	018e4002 	orreq	r4, lr, r2
 4a8:	41180e41 	tstmi	r8, r1, asr #28
 4ac:	0000070d 	andeq	r0, r0, sp, lsl #14
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b4:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 4b8:	20000b14 	andcs	r0, r0, r4, lsl fp
 4bc:	00000030 	andeq	r0, r0, r0, lsr r0
 4c0:	40080e41 	andmi	r0, r8, r1, asr #28
 4c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c8:	100e4101 	andne	r4, lr, r1, lsl #2
 4cc:	00070d41 	andeq	r0, r7, r1, asr #26
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d4:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 4d8:	20000b44 	andcs	r0, r0, r4, asr #22
 4dc:	00000030 	andeq	r0, r0, r0, lsr r0
 4e0:	40080e41 	andmi	r0, r8, r1, asr #28
 4e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e8:	100e4101 	andne	r4, lr, r1, lsl #2
 4ec:	00070d41 	andeq	r0, r7, r1, asr #26
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 4f8:	20000b74 	andcs	r0, r0, r4, ror fp
 4fc:	00000056 	andeq	r0, r0, r6, asr r0
 500:	40080e41 	andmi	r0, r8, r1, asr #28
 504:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 508:	100e4101 	andne	r4, lr, r1, lsl #2
 50c:	00070d41 	andeq	r0, r7, r1, asr #26
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 518:	20000bca 	andcs	r0, r0, sl, asr #23
 51c:	00000044 	andeq	r0, r0, r4, asr #32
 520:	40080e41 	andmi	r0, r8, r1, asr #28
 524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 528:	100e4101 	andne	r4, lr, r1, lsl #2
 52c:	00070d41 	andeq	r0, r7, r1, asr #26
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 538:	20000c0e 	andcs	r0, r0, lr, lsl #24
 53c:	00000068 	andeq	r0, r0, r8, rrx
 540:	40080e41 	andmi	r0, r8, r1, asr #28
 544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 548:	180e4101 	stmdane	lr, {r0, r8, lr}
 54c:	00070d41 	andeq	r0, r7, r1, asr #26
 550:	0000001c 	andeq	r0, r0, ip, lsl r0
 554:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 558:	20000c76 	andcs	r0, r0, r6, ror ip
 55c:	00000028 	andeq	r0, r0, r8, lsr #32
 560:	40080e41 	andmi	r0, r8, r1, asr #28
 564:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 568:	100e4101 	andne	r4, lr, r1, lsl #2
 56c:	00070d41 	andeq	r0, r7, r1, asr #26
 570:	0000000c 	andeq	r0, r0, ip
 574:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 578:	7c020001 	stcvc	0, cr0, [r2], {1}
 57c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 580:	00000018 	andeq	r0, r0, r8, lsl r0
 584:	00000570 	andeq	r0, r0, r0, ror r5
 588:	20000ca0 	andcs	r0, r0, r0, lsr #25
 58c:	00000050 	andeq	r0, r0, r0, asr r0
 590:	40080e41 	andmi	r0, r8, r1, asr #28
 594:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 598:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 59c:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a0:	00000570 	andeq	r0, r0, r0, ror r5
 5a4:	20000cf0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 5a8:	0000006c 	andeq	r0, r0, ip, rrx
 5ac:	40080e41 	andmi	r0, r8, r1, asr #28
 5b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b4:	100e4101 	andne	r4, lr, r1, lsl #2
 5b8:	00070d41 	andeq	r0, r7, r1, asr #26
 5bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c0:	00000570 	andeq	r0, r0, r0, ror r5
 5c4:	20000d5c 	andcs	r0, r0, ip, asr sp
 5c8:	00000058 	andeq	r0, r0, r8, asr r0
 5cc:	40080e41 	andmi	r0, r8, r1, asr #28
 5d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5d4:	100e4101 	andne	r4, lr, r1, lsl #2
 5d8:	00070d41 	andeq	r0, r7, r1, asr #26
 5dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e0:	00000570 	andeq	r0, r0, r0, ror r5
 5e4:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
 5e8:	00000054 	andeq	r0, r0, r4, asr r0
 5ec:	40080e41 	andmi	r0, r8, r1, asr #28
 5f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5f4:	100e4101 	andne	r4, lr, r1, lsl #2
 5f8:	00070d41 	andeq	r0, r7, r1, asr #26
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 604:	7c020001 	stcvc	0, cr0, [r2], {1}
 608:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	000005fc 	strdeq	r0, [r0], -ip
 614:	20000e08 	andcs	r0, r0, r8, lsl #28
 618:	0000021c 	andeq	r0, r0, ip, lsl r2
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	e80e4201 	stmda	lr, {r0, r9, lr}
 628:	070d4108 	streq	r4, [sp, -r8, lsl #2]
 62c:	0000000c 	andeq	r0, r0, ip
 630:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 634:	7c020001 	stcvc	0, cr0, [r2], {1}
 638:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 63c:	0000000c 	andeq	r0, r0, ip
 640:	0000062c 	andeq	r0, r0, ip, lsr #12
 644:	20001024 	andcs	r1, r0, r4, lsr #32
 648:	00000010 	andeq	r0, r0, r0, lsl r0
