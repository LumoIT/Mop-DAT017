
./Debug/spoopys_bizarre_adventure.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

unsigned char victory_message1[] = "Congratulations!";
unsigned char victory_message2[] = "You win!";

void startup(void){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:

void main(void){
20000010:	b580      	push	{r7, lr}
20000012:	b0a4      	sub	sp, #144	; 0x90
20000014:	af00      	add	r7, sp, #0
    app_init();
20000016:	f000 f9f5 	bl	20000404 <app_init>
		set_sprite_object_speed
	};
	POBJECT p = &spoopy;*/
    
    // Initiate objects
    PSPRITE_OBJECT spoopy_pointer = init_spoopy();
2000001a:	f001 fa01 	bl	20001420 <init_spoopy>
2000001e:	0003      	movs	r3, r0
20000020:	2284      	movs	r2, #132	; 0x84
20000022:	18ba      	adds	r2, r7, r2
20000024:	6013      	str	r3, [r2, #0]
    PSPRITE_OBJECT exit_pointer = init_exit();
20000026:	f001 fa83 	bl	20001530 <init_exit>
2000002a:	0003      	movs	r3, r0
2000002c:	2280      	movs	r2, #128	; 0x80
2000002e:	18ba      	adds	r2, r7, r2
20000030:	6013      	str	r3, [r2, #0]
    PSPRITE_OBJECT wall_pointers[WALL_AMOUNT];
    for(int i = 0; i < WALL_AMOUNT; i++){
20000032:	2300      	movs	r3, #0
20000034:	228c      	movs	r2, #140	; 0x8c
20000036:	18ba      	adds	r2, r7, r2
20000038:	6013      	str	r3, [r2, #0]
2000003a:	e00f      	b.n	2000005c <main+0x4c>
        wall_pointers[i] = init_wall();
2000003c:	f001 fa34 	bl	200014a8 <init_wall>
20000040:	0001      	movs	r1, r0
20000042:	003b      	movs	r3, r7
20000044:	228c      	movs	r2, #140	; 0x8c
20000046:	18ba      	adds	r2, r7, r2
20000048:	6812      	ldr	r2, [r2, #0]
2000004a:	0092      	lsls	r2, r2, #2
2000004c:	50d1      	str	r1, [r2, r3]
    for(int i = 0; i < WALL_AMOUNT; i++){
2000004e:	238c      	movs	r3, #140	; 0x8c
20000050:	18fb      	adds	r3, r7, r3
20000052:	681b      	ldr	r3, [r3, #0]
20000054:	3301      	adds	r3, #1
20000056:	228c      	movs	r2, #140	; 0x8c
20000058:	18ba      	adds	r2, r7, r2
2000005a:	6013      	str	r3, [r2, #0]
2000005c:	238c      	movs	r3, #140	; 0x8c
2000005e:	18fb      	adds	r3, r7, r3
20000060:	681b      	ldr	r3, [r3, #0]
20000062:	2b1f      	cmp	r3, #31
20000064:	ddea      	ble.n	2000003c <main+0x2c>
    }
    
    init_map_grid(spoopy_pointer, exit_pointer, wall_pointers);
20000066:	003a      	movs	r2, r7
20000068:	2380      	movs	r3, #128	; 0x80
2000006a:	18fb      	adds	r3, r7, r3
2000006c:	6819      	ldr	r1, [r3, #0]
2000006e:	2384      	movs	r3, #132	; 0x84
20000070:	18fb      	adds	r3, r7, r3
20000072:	681b      	ldr	r3, [r3, #0]
20000074:	0018      	movs	r0, r3
20000076:	f000 f92d 	bl	200002d4 <init_map_grid>
	
    // Draw pointers
    spoopy_pointer->draw(spoopy_pointer);
2000007a:	2384      	movs	r3, #132	; 0x84
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	681b      	ldr	r3, [r3, #0]
20000080:	695b      	ldr	r3, [r3, #20]
20000082:	2284      	movs	r2, #132	; 0x84
20000084:	18ba      	adds	r2, r7, r2
20000086:	6812      	ldr	r2, [r2, #0]
20000088:	0010      	movs	r0, r2
2000008a:	4798      	blx	r3
    exit_pointer->draw(exit_pointer);
2000008c:	2380      	movs	r3, #128	; 0x80
2000008e:	18fb      	adds	r3, r7, r3
20000090:	681b      	ldr	r3, [r3, #0]
20000092:	695b      	ldr	r3, [r3, #20]
20000094:	2280      	movs	r2, #128	; 0x80
20000096:	18ba      	adds	r2, r7, r2
20000098:	6812      	ldr	r2, [r2, #0]
2000009a:	0010      	movs	r0, r2
2000009c:	4798      	blx	r3
    for(int i = 0; i < WALL_AMOUNT; i++){
2000009e:	2300      	movs	r3, #0
200000a0:	2288      	movs	r2, #136	; 0x88
200000a2:	18ba      	adds	r2, r7, r2
200000a4:	6013      	str	r3, [r2, #0]
200000a6:	e015      	b.n	200000d4 <main+0xc4>
        wall_pointers[i]->draw(wall_pointers[i]);
200000a8:	003b      	movs	r3, r7
200000aa:	2288      	movs	r2, #136	; 0x88
200000ac:	18ba      	adds	r2, r7, r2
200000ae:	6812      	ldr	r2, [r2, #0]
200000b0:	0092      	lsls	r2, r2, #2
200000b2:	58d3      	ldr	r3, [r2, r3]
200000b4:	695b      	ldr	r3, [r3, #20]
200000b6:	003a      	movs	r2, r7
200000b8:	2188      	movs	r1, #136	; 0x88
200000ba:	1879      	adds	r1, r7, r1
200000bc:	6809      	ldr	r1, [r1, #0]
200000be:	0089      	lsls	r1, r1, #2
200000c0:	588a      	ldr	r2, [r1, r2]
200000c2:	0010      	movs	r0, r2
200000c4:	4798      	blx	r3
    for(int i = 0; i < WALL_AMOUNT; i++){
200000c6:	2388      	movs	r3, #136	; 0x88
200000c8:	18fb      	adds	r3, r7, r3
200000ca:	681b      	ldr	r3, [r3, #0]
200000cc:	3301      	adds	r3, #1
200000ce:	2288      	movs	r2, #136	; 0x88
200000d0:	18ba      	adds	r2, r7, r2
200000d2:	6013      	str	r3, [r2, #0]
200000d4:	2388      	movs	r3, #136	; 0x88
200000d6:	18fb      	adds	r3, r7, r3
200000d8:	681b      	ldr	r3, [r3, #0]
200000da:	2b1f      	cmp	r3, #31
200000dc:	dde4      	ble.n	200000a8 <main+0x98>
    }
    
    gotoxy(1, 1);
200000de:	2101      	movs	r1, #1
200000e0:	2001      	movs	r0, #1
200000e2:	f000 ff82 	bl	20000fea <gotoxy>
    ascii_write_string(start_message1);
200000e6:	4b41      	ldr	r3, [pc, #260]	; (200001ec <main+0x1dc>)
200000e8:	0018      	movs	r0, r3
200000ea:	f000 ffb2 	bl	20001052 <ascii_write_string>
    gotoxy(1, 2);
200000ee:	2102      	movs	r1, #2
200000f0:	2001      	movs	r0, #1
200000f2:	f000 ff7a 	bl	20000fea <gotoxy>
    ascii_write_string(start_message2);
200000f6:	4b3e      	ldr	r3, [pc, #248]	; (200001f0 <main+0x1e0>)
200000f8:	0018      	movs	r0, r3
200000fa:	f000 ffaa 	bl	20001052 <ascii_write_string>
    
	while(1){
		//keyboard_val = keyb();
		switch (keyboard_val){
200000fe:	4b3d      	ldr	r3, [pc, #244]	; (200001f4 <main+0x1e4>)
20000100:	781b      	ldrb	r3, [r3, #0]
20000102:	2b04      	cmp	r3, #4
20000104:	d013      	beq.n	2000012e <main+0x11e>
20000106:	dc02      	bgt.n	2000010e <main+0xfe>
20000108:	2b02      	cmp	r3, #2
2000010a:	d01c      	beq.n	20000146 <main+0x136>
2000010c:	e032      	b.n	20000174 <main+0x164>
2000010e:	2b06      	cmp	r3, #6
20000110:	d002      	beq.n	20000118 <main+0x108>
20000112:	2b08      	cmp	r3, #8
20000114:	d023      	beq.n	2000015e <main+0x14e>
20000116:	e02d      	b.n	20000174 <main+0x164>
			case 6: spoopy_pointer->set_speed(spoopy_pointer, 1, 0); break;
20000118:	2384      	movs	r3, #132	; 0x84
2000011a:	18fb      	adds	r3, r7, r3
2000011c:	681b      	ldr	r3, [r3, #0]
2000011e:	6a1b      	ldr	r3, [r3, #32]
20000120:	2284      	movs	r2, #132	; 0x84
20000122:	18ba      	adds	r2, r7, r2
20000124:	6810      	ldr	r0, [r2, #0]
20000126:	2200      	movs	r2, #0
20000128:	2101      	movs	r1, #1
2000012a:	4798      	blx	r3
2000012c:	e02d      	b.n	2000018a <main+0x17a>
			case 4: spoopy_pointer->set_speed(spoopy_pointer, -1, 0); break;
2000012e:	2384      	movs	r3, #132	; 0x84
20000130:	18fb      	adds	r3, r7, r3
20000132:	681b      	ldr	r3, [r3, #0]
20000134:	6a1b      	ldr	r3, [r3, #32]
20000136:	2201      	movs	r2, #1
20000138:	4251      	negs	r1, r2
2000013a:	2284      	movs	r2, #132	; 0x84
2000013c:	18ba      	adds	r2, r7, r2
2000013e:	6810      	ldr	r0, [r2, #0]
20000140:	2200      	movs	r2, #0
20000142:	4798      	blx	r3
20000144:	e021      	b.n	2000018a <main+0x17a>
			case 2: spoopy_pointer->set_speed(spoopy_pointer, 0, -1); break;
20000146:	2384      	movs	r3, #132	; 0x84
20000148:	18fb      	adds	r3, r7, r3
2000014a:	681b      	ldr	r3, [r3, #0]
2000014c:	6a1b      	ldr	r3, [r3, #32]
2000014e:	2201      	movs	r2, #1
20000150:	4252      	negs	r2, r2
20000152:	2184      	movs	r1, #132	; 0x84
20000154:	1879      	adds	r1, r7, r1
20000156:	6808      	ldr	r0, [r1, #0]
20000158:	2100      	movs	r1, #0
2000015a:	4798      	blx	r3
2000015c:	e015      	b.n	2000018a <main+0x17a>
			case 8: spoopy_pointer->set_speed(spoopy_pointer, 0, 1); break;
2000015e:	2384      	movs	r3, #132	; 0x84
20000160:	18fb      	adds	r3, r7, r3
20000162:	681b      	ldr	r3, [r3, #0]
20000164:	6a1b      	ldr	r3, [r3, #32]
20000166:	2284      	movs	r2, #132	; 0x84
20000168:	18ba      	adds	r2, r7, r2
2000016a:	6810      	ldr	r0, [r2, #0]
2000016c:	2201      	movs	r2, #1
2000016e:	2100      	movs	r1, #0
20000170:	4798      	blx	r3
20000172:	e00a      	b.n	2000018a <main+0x17a>
            default: spoopy_pointer->set_speed(spoopy_pointer, 0, 0); break;
20000174:	2384      	movs	r3, #132	; 0x84
20000176:	18fb      	adds	r3, r7, r3
20000178:	681b      	ldr	r3, [r3, #0]
2000017a:	6a1b      	ldr	r3, [r3, #32]
2000017c:	2284      	movs	r2, #132	; 0x84
2000017e:	18ba      	adds	r2, r7, r2
20000180:	6810      	ldr	r0, [r2, #0]
20000182:	2200      	movs	r2, #0
20000184:	2100      	movs	r1, #0
20000186:	4798      	blx	r3
20000188:	46c0      	nop			; (mov r8, r8)
		}
        position_checking(spoopy_pointer);
2000018a:	2384      	movs	r3, #132	; 0x84
2000018c:	18fb      	adds	r3, r7, r3
2000018e:	681b      	ldr	r3, [r3, #0]
20000190:	0018      	movs	r0, r3
20000192:	f000 f85d 	bl	20000250 <position_checking>
        update_sprite_object(spoopy_pointer);
20000196:	2384      	movs	r3, #132	; 0x84
20000198:	18fb      	adds	r3, r7, r3
2000019a:	681b      	ldr	r3, [r3, #0]
2000019c:	0018      	movs	r0, r3
2000019e:	f001 fa0b 	bl	200015b8 <update_sprite_object>
		graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200001a2:	2118      	movs	r1, #24
200001a4:	203f      	movs	r0, #63	; 0x3f
200001a6:	f000 fb73 	bl	20000890 <graphic_write_command>
		graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200001aa:	2118      	movs	r1, #24
200001ac:	20c0      	movs	r0, #192	; 0xc0
200001ae:	f000 fb6f 	bl	20000890 <graphic_write_command>
		delay_milli(250);
200001b2:	20fa      	movs	r0, #250	; 0xfa
200001b4:	f000 f9c0 	bl	20000538 <delay_milli>
        if(win_state){
200001b8:	4b0f      	ldr	r3, [pc, #60]	; (200001f8 <main+0x1e8>)
200001ba:	781b      	ldrb	r3, [r3, #0]
200001bc:	2b00      	cmp	r3, #0
200001be:	d100      	bne.n	200001c2 <main+0x1b2>
		switch (keyboard_val){
200001c0:	e79d      	b.n	200000fe <main+0xee>
            break;
200001c2:	46c0      	nop			; (mov r8, r8)
        }
	}
    
    gotoxy(1, 1);
200001c4:	2101      	movs	r1, #1
200001c6:	2001      	movs	r0, #1
200001c8:	f000 ff0f 	bl	20000fea <gotoxy>
    ascii_write_string(victory_message1);
200001cc:	4b0b      	ldr	r3, [pc, #44]	; (200001fc <main+0x1ec>)
200001ce:	0018      	movs	r0, r3
200001d0:	f000 ff3f 	bl	20001052 <ascii_write_string>
    gotoxy(1, 2);
200001d4:	2102      	movs	r1, #2
200001d6:	2001      	movs	r0, #1
200001d8:	f000 ff07 	bl	20000fea <gotoxy>
    ascii_write_string(victory_message2);
200001dc:	4b08      	ldr	r3, [pc, #32]	; (20000200 <main+0x1f0>)
200001de:	0018      	movs	r0, r3
200001e0:	f000 ff37 	bl	20001052 <ascii_write_string>
}
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	46bd      	mov	sp, r7
200001e8:	b024      	add	sp, #144	; 0x90
200001ea:	bd80      	pop	{r7, pc}
200001ec:	20001674 	andcs	r1, r0, r4, ror r6
200001f0:	20001680 	andcs	r1, r0, r0, lsl #13
200001f4:	200015e8 	andcs	r1, r0, r8, ror #11
200001f8:	200015e9 	andcs	r1, r0, r9, ror #11
200001fc:	20001694 	mulcs	r0, r4, r6
20000200:	200016a8 	andcs	r1, r0, r8, lsr #13

20000204 <keyboard_interrupt_handler>:

void keyboard_interrupt_handler(void){
20000204:	b580      	push	{r7, lr}
20000206:	af00      	add	r7, sp, #0
    if(EXTI.pr & 0x0F00){
20000208:	4b0e      	ldr	r3, [pc, #56]	; (20000244 <keyboard_interrupt_handler+0x40>)
2000020a:	695a      	ldr	r2, [r3, #20]
2000020c:	23f0      	movs	r3, #240	; 0xf0
2000020e:	011b      	lsls	r3, r3, #4
20000210:	4013      	ands	r3, r2
20000212:	d013      	beq.n	2000023c <keyboard_interrupt_handler+0x38>
        keyboard_val = keyb();
20000214:	f000 ff62 	bl	200010dc <keyb>
20000218:	0003      	movs	r3, r0
2000021a:	b2da      	uxtb	r2, r3
2000021c:	4b0a      	ldr	r3, [pc, #40]	; (20000248 <keyboard_interrupt_handler+0x44>)
2000021e:	701a      	strb	r2, [r3, #0]
        GPIO_D.odrHigh = 0xF0;
20000220:	4b0a      	ldr	r3, [pc, #40]	; (2000024c <keyboard_interrupt_handler+0x48>)
20000222:	22f0      	movs	r2, #240	; 0xf0
20000224:	755a      	strb	r2, [r3, #21]
        
        EXTI.pr |= (EXTI.pr & 0x0F00);
20000226:	4b07      	ldr	r3, [pc, #28]	; (20000244 <keyboard_interrupt_handler+0x40>)
20000228:	695a      	ldr	r2, [r3, #20]
2000022a:	23f0      	movs	r3, #240	; 0xf0
2000022c:	011b      	lsls	r3, r3, #4
2000022e:	401a      	ands	r2, r3
20000230:	0011      	movs	r1, r2
20000232:	4b04      	ldr	r3, [pc, #16]	; (20000244 <keyboard_interrupt_handler+0x40>)
20000234:	4a03      	ldr	r2, [pc, #12]	; (20000244 <keyboard_interrupt_handler+0x40>)
20000236:	6952      	ldr	r2, [r2, #20]
20000238:	430a      	orrs	r2, r1
2000023a:	615a      	str	r2, [r3, #20]
    }
}
2000023c:	46c0      	nop			; (mov r8, r8)
2000023e:	46bd      	mov	sp, r7
20000240:	bd80      	pop	{r7, pc}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	40013c00 	andmi	r3, r1, r0, lsl #24
20000248:	200015e8 	andcs	r1, r0, r8, ror #11
2000024c:	40020c00 	andmi	r0, r2, r0, lsl #24

20000250 <position_checking>:

void position_checking(PSPRITE_OBJECT spoopy_pointer){
20000250:	b590      	push	{r4, r7, lr}
20000252:	b087      	sub	sp, #28
20000254:	af00      	add	r7, sp, #0
20000256:	6078      	str	r0, [r7, #4]
    int spoopy_current_x = spoopy_pointer->pos_x / GRID_WIDTH;
20000258:	687b      	ldr	r3, [r7, #4]
2000025a:	68db      	ldr	r3, [r3, #12]
2000025c:	2b00      	cmp	r3, #0
2000025e:	da00      	bge.n	20000262 <position_checking+0x12>
20000260:	330f      	adds	r3, #15
20000262:	111b      	asrs	r3, r3, #4
20000264:	617b      	str	r3, [r7, #20]
    int spoopy_current_y = spoopy_pointer->pos_y / GRID_HEIGHT;
20000266:	687b      	ldr	r3, [r7, #4]
20000268:	691b      	ldr	r3, [r3, #16]
2000026a:	2b00      	cmp	r3, #0
2000026c:	da00      	bge.n	20000270 <position_checking+0x20>
2000026e:	330f      	adds	r3, #15
20000270:	111b      	asrs	r3, r3, #4
20000272:	613b      	str	r3, [r7, #16]
    
    int next_space = map_grid[spoopy_current_x + spoopy_pointer->dir_x][spoopy_current_y + spoopy_pointer->dir_y];
20000274:	687b      	ldr	r3, [r7, #4]
20000276:	685a      	ldr	r2, [r3, #4]
20000278:	697b      	ldr	r3, [r7, #20]
2000027a:	18d2      	adds	r2, r2, r3
2000027c:	687b      	ldr	r3, [r7, #4]
2000027e:	6899      	ldr	r1, [r3, #8]
20000280:	693b      	ldr	r3, [r7, #16]
20000282:	18cb      	adds	r3, r1, r3
20000284:	4911      	ldr	r1, [pc, #68]	; (200002cc <position_checking+0x7c>)
20000286:	0092      	lsls	r2, r2, #2
20000288:	188a      	adds	r2, r1, r2
2000028a:	5cd3      	ldrb	r3, [r2, r3]
2000028c:	60fb      	str	r3, [r7, #12]
    
    // Set velocity to 0 if Spoopy is about to mave into a wall, otherwise multiply it by an apropriate amount
    switch(next_space){
2000028e:	68fb      	ldr	r3, [r7, #12]
20000290:	2b02      	cmp	r3, #2
20000292:	d008      	beq.n	200002a6 <position_checking+0x56>
20000294:	2b03      	cmp	r3, #3
20000296:	d109      	bne.n	200002ac <position_checking+0x5c>
        case WALL_SPACE: spoopy_pointer->set_speed(spoopy_pointer, 0, 0); break;
20000298:	687b      	ldr	r3, [r7, #4]
2000029a:	6a1b      	ldr	r3, [r3, #32]
2000029c:	6878      	ldr	r0, [r7, #4]
2000029e:	2200      	movs	r2, #0
200002a0:	2100      	movs	r1, #0
200002a2:	4798      	blx	r3
200002a4:	e00e      	b.n	200002c4 <position_checking+0x74>
        case EXIT_SPACE: win_state = 1;
200002a6:	4b0a      	ldr	r3, [pc, #40]	; (200002d0 <position_checking+0x80>)
200002a8:	2201      	movs	r2, #1
200002aa:	701a      	strb	r2, [r3, #0]
        default: spoopy_pointer->set_speed(spoopy_pointer, spoopy_pointer->dir_x * GRID_WIDTH, spoopy_pointer->dir_y * GRID_HEIGHT); break;
200002ac:	687b      	ldr	r3, [r7, #4]
200002ae:	6a1c      	ldr	r4, [r3, #32]
200002b0:	687b      	ldr	r3, [r7, #4]
200002b2:	685b      	ldr	r3, [r3, #4]
200002b4:	0119      	lsls	r1, r3, #4
200002b6:	687b      	ldr	r3, [r7, #4]
200002b8:	689b      	ldr	r3, [r3, #8]
200002ba:	011a      	lsls	r2, r3, #4
200002bc:	687b      	ldr	r3, [r7, #4]
200002be:	0018      	movs	r0, r3
200002c0:	47a0      	blx	r4
200002c2:	46c0      	nop			; (mov r8, r8)
    }
}
200002c4:	46c0      	nop			; (mov r8, r8)
200002c6:	46bd      	mov	sp, r7
200002c8:	b007      	add	sp, #28
200002ca:	bd90      	pop	{r4, r7, pc}
200002cc:	200015f4 	strdcs	r1, [r0], -r4
200002d0:	200015e9 	andcs	r1, r0, r9, ror #11

200002d4 <init_map_grid>:

void init_map_grid(PSPRITE_OBJECT spoopy, PSPRITE_OBJECT exit, PSPRITE_OBJECT walls[]){
200002d4:	b590      	push	{r4, r7, lr}
200002d6:	b0a1      	sub	sp, #132	; 0x84
200002d8:	af00      	add	r7, sp, #0
200002da:	60f8      	str	r0, [r7, #12]
200002dc:	60b9      	str	r1, [r7, #8]
200002de:	607a      	str	r2, [r7, #4]
    for(int x = 0; x < MAP_WIDTH; x++){
200002e0:	2300      	movs	r3, #0
200002e2:	67fb      	str	r3, [r7, #124]	; 0x7c
200002e4:	e013      	b.n	2000030e <init_map_grid+0x3a>
        for(int y = 0; y < MAP_HEIGHT; y++){
200002e6:	2300      	movs	r3, #0
200002e8:	67bb      	str	r3, [r7, #120]	; 0x78
200002ea:	e00a      	b.n	20000302 <init_map_grid+0x2e>
            map_grid[x][y] = EMPTY_SPACE;
200002ec:	4a42      	ldr	r2, [pc, #264]	; (200003f8 <init_map_grid+0x124>)
200002ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
200002f0:	009b      	lsls	r3, r3, #2
200002f2:	18d2      	adds	r2, r2, r3
200002f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
200002f6:	18d3      	adds	r3, r2, r3
200002f8:	2200      	movs	r2, #0
200002fa:	701a      	strb	r2, [r3, #0]
        for(int y = 0; y < MAP_HEIGHT; y++){
200002fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
200002fe:	3301      	adds	r3, #1
20000300:	67bb      	str	r3, [r7, #120]	; 0x78
20000302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
20000304:	2b03      	cmp	r3, #3
20000306:	ddf1      	ble.n	200002ec <init_map_grid+0x18>
    for(int x = 0; x < MAP_WIDTH; x++){
20000308:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
2000030a:	3301      	adds	r3, #1
2000030c:	67fb      	str	r3, [r7, #124]	; 0x7c
2000030e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
20000310:	2b07      	cmp	r3, #7
20000312:	dde8      	ble.n	200002e6 <init_map_grid+0x12>
        }
    }
    
    // Set Spoopy's starting position
    int spoopy_x = 0;
20000314:	2300      	movs	r3, #0
20000316:	673b      	str	r3, [r7, #112]	; 0x70
    int spoopy_y = 0;
20000318:	2300      	movs	r3, #0
2000031a:	66fb      	str	r3, [r7, #108]	; 0x6c
    map_grid[spoopy_x][spoopy_y] = SPOOPY_SPACE;
2000031c:	4a36      	ldr	r2, [pc, #216]	; (200003f8 <init_map_grid+0x124>)
2000031e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
20000320:	009b      	lsls	r3, r3, #2
20000322:	18d2      	adds	r2, r2, r3
20000324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
20000326:	18d3      	adds	r3, r2, r3
20000328:	2201      	movs	r2, #1
2000032a:	701a      	strb	r2, [r3, #0]
    spoopy->pos_x = spoopy_x * GRID_WIDTH;
2000032c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
2000032e:	011a      	lsls	r2, r3, #4
20000330:	68fb      	ldr	r3, [r7, #12]
20000332:	60da      	str	r2, [r3, #12]
    spoopy->pos_y = spoopy_y * GRID_HEIGHT;
20000334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
20000336:	011a      	lsls	r2, r3, #4
20000338:	68fb      	ldr	r3, [r7, #12]
2000033a:	611a      	str	r2, [r3, #16]
    
    // Set exit's starting position
    int exit_x = MAP_WIDTH - 1;
2000033c:	2307      	movs	r3, #7
2000033e:	66bb      	str	r3, [r7, #104]	; 0x68
    int exit_y = MAP_HEIGHT - 1;
20000340:	2303      	movs	r3, #3
20000342:	667b      	str	r3, [r7, #100]	; 0x64
    map_grid[exit_x][exit_y] = EXIT_SPACE;
20000344:	4a2c      	ldr	r2, [pc, #176]	; (200003f8 <init_map_grid+0x124>)
20000346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
20000348:	009b      	lsls	r3, r3, #2
2000034a:	18d2      	adds	r2, r2, r3
2000034c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
2000034e:	18d3      	adds	r3, r2, r3
20000350:	2202      	movs	r2, #2
20000352:	701a      	strb	r2, [r3, #0]
    exit->pos_x = exit_x * GRID_WIDTH;
20000354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
20000356:	011a      	lsls	r2, r3, #4
20000358:	68bb      	ldr	r3, [r7, #8]
2000035a:	60da      	str	r2, [r3, #12]
    exit->pos_y = exit_y * GRID_HEIGHT;
2000035c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
2000035e:	011a      	lsls	r2, r3, #4
20000360:	68bb      	ldr	r3, [r7, #8]
20000362:	611a      	str	r2, [r3, #16]
    
    // Set walls' starting positions
    int wall_x[] = {1, 1, 1, 3, 3, 3, 5, 5, 5, 6};
20000364:	233c      	movs	r3, #60	; 0x3c
20000366:	18fb      	adds	r3, r7, r3
20000368:	4a24      	ldr	r2, [pc, #144]	; (200003fc <init_map_grid+0x128>)
2000036a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000036c:	c313      	stmia	r3!, {r0, r1, r4}
2000036e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000370:	c313      	stmia	r3!, {r0, r1, r4}
20000372:	ca13      	ldmia	r2!, {r0, r1, r4}
20000374:	c313      	stmia	r3!, {r0, r1, r4}
20000376:	6812      	ldr	r2, [r2, #0]
20000378:	601a      	str	r2, [r3, #0]
    int wall_y[] = {0, 1, 2, 3, 2, 1, 0, 1, 2, 2};
2000037a:	2314      	movs	r3, #20
2000037c:	18fb      	adds	r3, r7, r3
2000037e:	4a20      	ldr	r2, [pc, #128]	; (20000400 <init_map_grid+0x12c>)
20000380:	ca13      	ldmia	r2!, {r0, r1, r4}
20000382:	c313      	stmia	r3!, {r0, r1, r4}
20000384:	ca13      	ldmia	r2!, {r0, r1, r4}
20000386:	c313      	stmia	r3!, {r0, r1, r4}
20000388:	ca13      	ldmia	r2!, {r0, r1, r4}
2000038a:	c313      	stmia	r3!, {r0, r1, r4}
2000038c:	6812      	ldr	r2, [r2, #0]
2000038e:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < sizeof(wall_x); i++){
20000390:	2300      	movs	r3, #0
20000392:	677b      	str	r3, [r7, #116]	; 0x74
20000394:	e029      	b.n	200003ea <init_map_grid+0x116>
        map_grid[wall_x[i]][wall_y[i]] = WALL_SPACE;
20000396:	233c      	movs	r3, #60	; 0x3c
20000398:	18fb      	adds	r3, r7, r3
2000039a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
2000039c:	0092      	lsls	r2, r2, #2
2000039e:	58d2      	ldr	r2, [r2, r3]
200003a0:	2314      	movs	r3, #20
200003a2:	18fb      	adds	r3, r7, r3
200003a4:	6f79      	ldr	r1, [r7, #116]	; 0x74
200003a6:	0089      	lsls	r1, r1, #2
200003a8:	58cb      	ldr	r3, [r1, r3]
200003aa:	4913      	ldr	r1, [pc, #76]	; (200003f8 <init_map_grid+0x124>)
200003ac:	0092      	lsls	r2, r2, #2
200003ae:	188a      	adds	r2, r1, r2
200003b0:	2103      	movs	r1, #3
200003b2:	54d1      	strb	r1, [r2, r3]
        walls[i]->pos_x = wall_x[i] * GRID_WIDTH;
200003b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
200003b6:	009b      	lsls	r3, r3, #2
200003b8:	687a      	ldr	r2, [r7, #4]
200003ba:	18d3      	adds	r3, r2, r3
200003bc:	681b      	ldr	r3, [r3, #0]
200003be:	223c      	movs	r2, #60	; 0x3c
200003c0:	18ba      	adds	r2, r7, r2
200003c2:	6f79      	ldr	r1, [r7, #116]	; 0x74
200003c4:	0089      	lsls	r1, r1, #2
200003c6:	588a      	ldr	r2, [r1, r2]
200003c8:	0112      	lsls	r2, r2, #4
200003ca:	60da      	str	r2, [r3, #12]
        walls[i]->pos_y = wall_y[i] * GRID_HEIGHT;
200003cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
200003ce:	009b      	lsls	r3, r3, #2
200003d0:	687a      	ldr	r2, [r7, #4]
200003d2:	18d3      	adds	r3, r2, r3
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	2214      	movs	r2, #20
200003d8:	18ba      	adds	r2, r7, r2
200003da:	6f79      	ldr	r1, [r7, #116]	; 0x74
200003dc:	0089      	lsls	r1, r1, #2
200003de:	588a      	ldr	r2, [r1, r2]
200003e0:	0112      	lsls	r2, r2, #4
200003e2:	611a      	str	r2, [r3, #16]
    for(int i = 0; i < sizeof(wall_x); i++){
200003e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
200003e6:	3301      	adds	r3, #1
200003e8:	677b      	str	r3, [r7, #116]	; 0x74
200003ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
200003ec:	2b27      	cmp	r3, #39	; 0x27
200003ee:	d9d2      	bls.n	20000396 <init_map_grid+0xc2>
    }
}
200003f0:	46c0      	nop			; (mov r8, r8)
200003f2:	46bd      	mov	sp, r7
200003f4:	b021      	add	sp, #132	; 0x84
200003f6:	bd90      	pop	{r4, r7, pc}
200003f8:	200015f4 	strdcs	r1, [r0], -r4
200003fc:	20001728 	andcs	r1, r0, r8, lsr #14
20000400:	20001750 	andcs	r1, r0, r0, asr r7

20000404 <app_init>:

void app_init(void){
20000404:	b580      	push	{r7, lr}
20000406:	af00      	add	r7, sp, #0
		" LDR R0, =0x08000209\n"
		" BLX R0\n"
		);
#endif

    asciidisplay_init();
20000408:	f000 fc92 	bl	20000d30 <asciidisplay_init>
    graphicdisplay_init();
2000040c:	f000 fc80 	bl	20000d10 <graphicdisplay_init>
    delay_interrupt_init();
20000410:	f000 f83e 	bl	20000490 <delay_interrupt_init>
    keyboard_init();
20000414:	f000 fe32 	bl	2000107c <keyboard_init>
    
    // *** Interrupt init ***
    // Set port D pin 8-11 as interrupts
    SYSCFG.exticr3 = 0x3333;
20000418:	4b15      	ldr	r3, [pc, #84]	; (20000470 <app_init+0x6c>)
2000041a:	4a16      	ldr	r2, [pc, #88]	; (20000474 <app_init+0x70>)
2000041c:	611a      	str	r2, [r3, #16]
    
    // Set pin 8-11 as interrupts on both flanks
    EXTI.imr = INTERRUPT_TARGET_PINS;
2000041e:	4b16      	ldr	r3, [pc, #88]	; (20000478 <app_init+0x74>)
20000420:	22f0      	movs	r2, #240	; 0xf0
20000422:	0512      	lsls	r2, r2, #20
20000424:	601a      	str	r2, [r3, #0]
    EXTI.ftsr |= INTERRUPT_TARGET_PINS;
20000426:	4b14      	ldr	r3, [pc, #80]	; (20000478 <app_init+0x74>)
20000428:	4a13      	ldr	r2, [pc, #76]	; (20000478 <app_init+0x74>)
2000042a:	68d2      	ldr	r2, [r2, #12]
2000042c:	21f0      	movs	r1, #240	; 0xf0
2000042e:	0509      	lsls	r1, r1, #20
20000430:	430a      	orrs	r2, r1
20000432:	60da      	str	r2, [r3, #12]
    EXTI.rtsr |= INTERRUPT_TARGET_PINS;
20000434:	4b10      	ldr	r3, [pc, #64]	; (20000478 <app_init+0x74>)
20000436:	4a10      	ldr	r2, [pc, #64]	; (20000478 <app_init+0x74>)
20000438:	6892      	ldr	r2, [r2, #8]
2000043a:	21f0      	movs	r1, #240	; 0xf0
2000043c:	0509      	lsls	r1, r1, #20
2000043e:	430a      	orrs	r2, r1
20000440:	609a      	str	r2, [r3, #8]
    
    // Set up interrupt vector
    *((void (**) (void))0x2001C09C) = keyboard_interrupt_handler;
20000442:	4b0e      	ldr	r3, [pc, #56]	; (2000047c <app_init+0x78>)
20000444:	4a0e      	ldr	r2, [pc, #56]	; (20000480 <app_init+0x7c>)
20000446:	601a      	str	r2, [r3, #0]
    *((void (**) (void))0x2001C0E0) = keyboard_interrupt_handler;
20000448:	4b0e      	ldr	r3, [pc, #56]	; (20000484 <app_init+0x80>)
2000044a:	4a0d      	ldr	r2, [pc, #52]	; (20000480 <app_init+0x7c>)
2000044c:	601a      	str	r2, [r3, #0]
    
    // Enable interrupt vectors
    NVIC_ISER0 |= (1 << 23);
2000044e:	4b0e      	ldr	r3, [pc, #56]	; (20000488 <app_init+0x84>)
20000450:	4a0d      	ldr	r2, [pc, #52]	; (20000488 <app_init+0x84>)
20000452:	6812      	ldr	r2, [r2, #0]
20000454:	2180      	movs	r1, #128	; 0x80
20000456:	0409      	lsls	r1, r1, #16
20000458:	430a      	orrs	r2, r1
2000045a:	601a      	str	r2, [r3, #0]
    NVIC_ISER1 |= (1 << (40 - 32));
2000045c:	4b0b      	ldr	r3, [pc, #44]	; (2000048c <app_init+0x88>)
2000045e:	4a0b      	ldr	r2, [pc, #44]	; (2000048c <app_init+0x88>)
20000460:	6812      	ldr	r2, [r2, #0]
20000462:	2180      	movs	r1, #128	; 0x80
20000464:	0049      	lsls	r1, r1, #1
20000466:	430a      	orrs	r2, r1
20000468:	601a      	str	r2, [r3, #0]
}
2000046a:	46c0      	nop			; (mov r8, r8)
2000046c:	46bd      	mov	sp, r7
2000046e:	bd80      	pop	{r7, pc}
20000470:	40013800 	andmi	r3, r1, r0, lsl #16
20000474:	00003333 	andeq	r3, r0, r3, lsr r3
20000478:	40013c00 	andmi	r3, r1, r0, lsl #24
2000047c:	2001c09c 	mulcs	r1, ip, r0
20000480:	20000205 	andcs	r0, r0, r5, lsl #4
20000484:	2001c0e0 	andcs	ip, r1, r0, ror #1
20000488:	e000e100 	and	lr, r0, r0, lsl #2
2000048c:	e000e104 	and	lr, r0, r4, lsl #2

20000490 <delay_interrupt_init>:

volatile int systick_flag = 1;
static volatile int delay_counter = 0;
static int mikro;

void delay_interrupt_init(void){
20000490:	b580      	push	{r7, lr}
20000492:	af00      	add	r7, sp, #0
    init_systick_interrupt_handler();
20000494:	f000 f886 	bl	200005a4 <init_systick_interrupt_handler>
}
20000498:	46c0      	nop			; (mov r8, r8)
2000049a:	46bd      	mov	sp, r7
2000049c:	bd80      	pop	{r7, pc}

2000049e <delay_250ns>:

void delay_250ns(void){
2000049e:	b580      	push	{r7, lr}
200004a0:	af00      	add	r7, sp, #0
    systick_flag = 0;
200004a2:	4b04      	ldr	r3, [pc, #16]	; (200004b4 <delay_250ns+0x16>)
200004a4:	2200      	movs	r2, #0
200004a6:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 4);   
200004a8:	202a      	movs	r0, #42	; 0x2a
200004aa:	f000 f863 	bl	20000574 <start_delay>
}
200004ae:	46c0      	nop			; (mov r8, r8)
200004b0:	46bd      	mov	sp, r7
200004b2:	bd80      	pop	{r7, pc}
200004b4:	200016b4 			; <UNDEFINED> instruction: 0x200016b4

200004b8 <delay_500ns>:

void delay_500ns(void){
200004b8:	b580      	push	{r7, lr}
200004ba:	af00      	add	r7, sp, #0
    systick_flag = 0;
200004bc:	4b04      	ldr	r3, [pc, #16]	; (200004d0 <delay_500ns+0x18>)
200004be:	2200      	movs	r2, #0
200004c0:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 2);   
200004c2:	2054      	movs	r0, #84	; 0x54
200004c4:	f000 f856 	bl	20000574 <start_delay>
}
200004c8:	46c0      	nop			; (mov r8, r8)
200004ca:	46bd      	mov	sp, r7
200004cc:	bd80      	pop	{r7, pc}
200004ce:	46c0      	nop			; (mov r8, r8)
200004d0:	200016b4 			; <UNDEFINED> instruction: 0x200016b4

200004d4 <delay_1mikro>:

void delay_1mikro(void){
200004d4:	b580      	push	{r7, lr}
200004d6:	af00      	add	r7, sp, #0
    start_delay(MIKRO_SECOND_PULSES);
200004d8:	20a8      	movs	r0, #168	; 0xa8
200004da:	f000 f84b 	bl	20000574 <start_delay>
}
200004de:	46c0      	nop			; (mov r8, r8)
200004e0:	46bd      	mov	sp, r7
200004e2:	bd80      	pop	{r7, pc}

200004e4 <delay_1milli>:

void delay_1milli(void){
200004e4:	b580      	push	{r7, lr}
200004e6:	af00      	add	r7, sp, #0
#ifndef SIMULATOR
    start_delay(MIKRO_SECOND_PULSES * 1000);
200004e8:	4b03      	ldr	r3, [pc, #12]	; (200004f8 <delay_1milli+0x14>)
200004ea:	0018      	movs	r0, r3
200004ec:	f000 f842 	bl	20000574 <start_delay>
#else
    start_delay(MIKRO_SECOND_PULSES);
#endif
}
200004f0:	46c0      	nop			; (mov r8, r8)
200004f2:	46bd      	mov	sp, r7
200004f4:	bd80      	pop	{r7, pc}
200004f6:	46c0      	nop			; (mov r8, r8)
200004f8:	00029040 	andeq	r9, r2, r0, asr #32

200004fc <delay_mikro>:

void delay_mikro(unsigned int count){
200004fc:	b580      	push	{r7, lr}
200004fe:	b082      	sub	sp, #8
20000500:	af00      	add	r7, sp, #0
20000502:	6078      	str	r0, [r7, #4]
    if(count == 0)return;
20000504:	687b      	ldr	r3, [r7, #4]
20000506:	2b00      	cmp	r3, #0
20000508:	d00b      	beq.n	20000522 <delay_mikro+0x26>
    delay_counter = count;
2000050a:	687a      	ldr	r2, [r7, #4]
2000050c:	4b07      	ldr	r3, [pc, #28]	; (2000052c <delay_mikro+0x30>)
2000050e:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
20000510:	4b07      	ldr	r3, [pc, #28]	; (20000530 <delay_mikro+0x34>)
20000512:	2200      	movs	r2, #0
20000514:	601a      	str	r2, [r3, #0]
    mikro = 1;
20000516:	4b07      	ldr	r3, [pc, #28]	; (20000534 <delay_mikro+0x38>)
20000518:	2201      	movs	r2, #1
2000051a:	601a      	str	r2, [r3, #0]
    delay_1mikro();
2000051c:	f7ff ffda 	bl	200004d4 <delay_1mikro>
20000520:	e000      	b.n	20000524 <delay_mikro+0x28>
    if(count == 0)return;
20000522:	46c0      	nop			; (mov r8, r8)
}
20000524:	46bd      	mov	sp, r7
20000526:	b002      	add	sp, #8
20000528:	bd80      	pop	{r7, pc}
2000052a:	46c0      	nop			; (mov r8, r8)
2000052c:	200015ec 	andcs	r1, r0, ip, ror #11
20000530:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
20000534:	200015f0 	strdcs	r1, [r0], -r0

20000538 <delay_milli>:

void delay_milli(unsigned int count){
20000538:	b580      	push	{r7, lr}
2000053a:	b082      	sub	sp, #8
2000053c:	af00      	add	r7, sp, #0
2000053e:	6078      	str	r0, [r7, #4]
    if(count == 0) return;
20000540:	687b      	ldr	r3, [r7, #4]
20000542:	2b00      	cmp	r3, #0
20000544:	d00b      	beq.n	2000055e <delay_milli+0x26>
    delay_counter = count;
20000546:	687a      	ldr	r2, [r7, #4]
20000548:	4b07      	ldr	r3, [pc, #28]	; (20000568 <delay_milli+0x30>)
2000054a:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
2000054c:	4b07      	ldr	r3, [pc, #28]	; (2000056c <delay_milli+0x34>)
2000054e:	2200      	movs	r2, #0
20000550:	601a      	str	r2, [r3, #0]
    mikro = 0;
20000552:	4b07      	ldr	r3, [pc, #28]	; (20000570 <delay_milli+0x38>)
20000554:	2200      	movs	r2, #0
20000556:	601a      	str	r2, [r3, #0]
    delay_1milli();
20000558:	f7ff ffc4 	bl	200004e4 <delay_1milli>
2000055c:	e000      	b.n	20000560 <delay_milli+0x28>
    if(count == 0) return;
2000055e:	46c0      	nop			; (mov r8, r8)
}
20000560:	46bd      	mov	sp, r7
20000562:	b002      	add	sp, #8
20000564:	bd80      	pop	{r7, pc}
20000566:	46c0      	nop			; (mov r8, r8)
20000568:	200015ec 	andcs	r1, r0, ip, ror #11
2000056c:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
20000570:	200015f0 	strdcs	r1, [r0], -r0

20000574 <start_delay>:

void start_delay(unsigned int pulses){
20000574:	b580      	push	{r7, lr}
20000576:	b082      	sub	sp, #8
20000578:	af00      	add	r7, sp, #0
2000057a:	6078      	str	r0, [r7, #4]
    SYSTICK.ctrl = 0;
2000057c:	4b08      	ldr	r3, [pc, #32]	; (200005a0 <start_delay+0x2c>)
2000057e:	2200      	movs	r2, #0
20000580:	601a      	str	r2, [r3, #0]
    SYSTICK.load = pulses-1;
20000582:	4b07      	ldr	r3, [pc, #28]	; (200005a0 <start_delay+0x2c>)
20000584:	687a      	ldr	r2, [r7, #4]
20000586:	3a01      	subs	r2, #1
20000588:	605a      	str	r2, [r3, #4]
    SYSTICK.val = 0;
2000058a:	4b05      	ldr	r3, [pc, #20]	; (200005a0 <start_delay+0x2c>)
2000058c:	2200      	movs	r2, #0
2000058e:	609a      	str	r2, [r3, #8]
    SYSTICK.ctrlFirstByte = 7;
20000590:	4b03      	ldr	r3, [pc, #12]	; (200005a0 <start_delay+0x2c>)
20000592:	2207      	movs	r2, #7
20000594:	701a      	strb	r2, [r3, #0]
}
20000596:	46c0      	nop			; (mov r8, r8)
20000598:	46bd      	mov	sp, r7
2000059a:	b002      	add	sp, #8
2000059c:	bd80      	pop	{r7, pc}
2000059e:	46c0      	nop			; (mov r8, r8)
200005a0:	e000e010 	and	lr, r0, r0, lsl r0

200005a4 <init_systick_interrupt_handler>:

void init_systick_interrupt_handler(void){
200005a4:	b580      	push	{r7, lr}
200005a6:	af00      	add	r7, sp, #0
    *((void(**)(void))0x2001C03C) = systick_interrupt_handler;
200005a8:	4b02      	ldr	r3, [pc, #8]	; (200005b4 <init_systick_interrupt_handler+0x10>)
200005aa:	4a03      	ldr	r2, [pc, #12]	; (200005b8 <init_systick_interrupt_handler+0x14>)
200005ac:	601a      	str	r2, [r3, #0]
}
200005ae:	46c0      	nop			; (mov r8, r8)
200005b0:	46bd      	mov	sp, r7
200005b2:	bd80      	pop	{r7, pc}
200005b4:	2001c03c 	andcs	ip, r1, ip, lsr r0
200005b8:	200005bd 			; <UNDEFINED> instruction: 0x200005bd

200005bc <systick_interrupt_handler>:

void systick_interrupt_handler(void){
200005bc:	b580      	push	{r7, lr}
200005be:	af00      	add	r7, sp, #0
    SYSTICK.ctrl = 0;
200005c0:	4b0d      	ldr	r3, [pc, #52]	; (200005f8 <systick_interrupt_handler+0x3c>)
200005c2:	2200      	movs	r2, #0
200005c4:	601a      	str	r2, [r3, #0]
    delay_counter--;
200005c6:	4b0d      	ldr	r3, [pc, #52]	; (200005fc <systick_interrupt_handler+0x40>)
200005c8:	681b      	ldr	r3, [r3, #0]
200005ca:	1e5a      	subs	r2, r3, #1
200005cc:	4b0b      	ldr	r3, [pc, #44]	; (200005fc <systick_interrupt_handler+0x40>)
200005ce:	601a      	str	r2, [r3, #0]
    if(delay_counter > 0){
200005d0:	4b0a      	ldr	r3, [pc, #40]	; (200005fc <systick_interrupt_handler+0x40>)
200005d2:	681b      	ldr	r3, [r3, #0]
200005d4:	2b00      	cmp	r3, #0
200005d6:	dd09      	ble.n	200005ec <systick_interrupt_handler+0x30>
        if(mikro){
200005d8:	4b09      	ldr	r3, [pc, #36]	; (20000600 <systick_interrupt_handler+0x44>)
200005da:	681b      	ldr	r3, [r3, #0]
200005dc:	2b00      	cmp	r3, #0
200005de:	d002      	beq.n	200005e6 <systick_interrupt_handler+0x2a>
            delay_1mikro();
200005e0:	f7ff ff78 	bl	200004d4 <delay_1mikro>
            delay_1milli();
        }
    } else {
        systick_flag = 1;
    }
200005e4:	e005      	b.n	200005f2 <systick_interrupt_handler+0x36>
            delay_1milli();
200005e6:	f7ff ff7d 	bl	200004e4 <delay_1milli>
200005ea:	e002      	b.n	200005f2 <systick_interrupt_handler+0x36>
        systick_flag = 1;
200005ec:	4b05      	ldr	r3, [pc, #20]	; (20000604 <systick_interrupt_handler+0x48>)
200005ee:	2201      	movs	r2, #1
200005f0:	601a      	str	r2, [r3, #0]
200005f2:	46c0      	nop			; (mov r8, r8)
200005f4:	46bd      	mov	sp, r7
200005f6:	bd80      	pop	{r7, pc}
200005f8:	e000e010 	and	lr, r0, r0, lsl r0
200005fc:	200015ec 	andcs	r1, r0, ip, ror #11
20000600:	200015f0 	strdcs	r1, [r0], -r0
20000604:	200016b4 			; <UNDEFINED> instruction: 0x200016b4

20000608 <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"

void graphic_ctrl_bit_set(uint8_t x){
20000608:	b580      	push	{r7, lr}
2000060a:	b084      	sub	sp, #16
2000060c:	af00      	add	r7, sp, #0
2000060e:	0002      	movs	r2, r0
20000610:	1dfb      	adds	r3, r7, #7
20000612:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
20000614:	4a0f      	ldr	r2, [pc, #60]	; (20000654 <graphic_ctrl_bit_set+0x4c>)
20000616:	230f      	movs	r3, #15
20000618:	18fb      	adds	r3, r7, r3
2000061a:	7d12      	ldrb	r2, [r2, #20]
2000061c:	701a      	strb	r2, [r3, #0]
    control_register |= x;
2000061e:	230f      	movs	r3, #15
20000620:	18fb      	adds	r3, r7, r3
20000622:	220f      	movs	r2, #15
20000624:	18b9      	adds	r1, r7, r2
20000626:	1dfa      	adds	r2, r7, #7
20000628:	7809      	ldrb	r1, [r1, #0]
2000062a:	7812      	ldrb	r2, [r2, #0]
2000062c:	430a      	orrs	r2, r1
2000062e:	701a      	strb	r2, [r3, #0]
	control_register &= ~B_SELECT;
20000630:	230f      	movs	r3, #15
20000632:	18fb      	adds	r3, r7, r3
20000634:	220f      	movs	r2, #15
20000636:	18ba      	adds	r2, r7, r2
20000638:	7812      	ldrb	r2, [r2, #0]
2000063a:	2104      	movs	r1, #4
2000063c:	438a      	bics	r2, r1
2000063e:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
20000640:	4a04      	ldr	r2, [pc, #16]	; (20000654 <graphic_ctrl_bit_set+0x4c>)
20000642:	230f      	movs	r3, #15
20000644:	18fb      	adds	r3, r7, r3
20000646:	781b      	ldrb	r3, [r3, #0]
20000648:	7513      	strb	r3, [r2, #20]
}
2000064a:	46c0      	nop			; (mov r8, r8)
2000064c:	46bd      	mov	sp, r7
2000064e:	b004      	add	sp, #16
20000650:	bd80      	pop	{r7, pc}
20000652:	46c0      	nop			; (mov r8, r8)
20000654:	40021000 	andmi	r1, r2, r0

20000658 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000658:	b580      	push	{r7, lr}
2000065a:	b084      	sub	sp, #16
2000065c:	af00      	add	r7, sp, #0
2000065e:	0002      	movs	r2, r0
20000660:	1dfb      	adds	r3, r7, #7
20000662:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
20000664:	4a11      	ldr	r2, [pc, #68]	; (200006ac <graphic_ctrl_bit_clear+0x54>)
20000666:	230f      	movs	r3, #15
20000668:	18fb      	adds	r3, r7, r3
2000066a:	7d12      	ldrb	r2, [r2, #20]
2000066c:	701a      	strb	r2, [r3, #0]
    control_register &= (~x);
2000066e:	1dfb      	adds	r3, r7, #7
20000670:	781b      	ldrb	r3, [r3, #0]
20000672:	b25b      	sxtb	r3, r3
20000674:	43db      	mvns	r3, r3
20000676:	b25b      	sxtb	r3, r3
20000678:	220f      	movs	r2, #15
2000067a:	18ba      	adds	r2, r7, r2
2000067c:	7812      	ldrb	r2, [r2, #0]
2000067e:	b252      	sxtb	r2, r2
20000680:	4013      	ands	r3, r2
20000682:	b25a      	sxtb	r2, r3
20000684:	230f      	movs	r3, #15
20000686:	18fb      	adds	r3, r7, r3
20000688:	701a      	strb	r2, [r3, #0]
    control_register &= ~B_SELECT;
2000068a:	230f      	movs	r3, #15
2000068c:	18fb      	adds	r3, r7, r3
2000068e:	220f      	movs	r2, #15
20000690:	18ba      	adds	r2, r7, r2
20000692:	7812      	ldrb	r2, [r2, #0]
20000694:	2104      	movs	r1, #4
20000696:	438a      	bics	r2, r1
20000698:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
2000069a:	4a04      	ldr	r2, [pc, #16]	; (200006ac <graphic_ctrl_bit_clear+0x54>)
2000069c:	230f      	movs	r3, #15
2000069e:	18fb      	adds	r3, r7, r3
200006a0:	781b      	ldrb	r3, [r3, #0]
200006a2:	7513      	strb	r3, [r2, #20]
}
200006a4:	46c0      	nop			; (mov r8, r8)
200006a6:	46bd      	mov	sp, r7
200006a8:	b004      	add	sp, #16
200006aa:	bd80      	pop	{r7, pc}
200006ac:	40021000 	andmi	r1, r2, r0

200006b0 <select_controller>:

void select_controller(uint8_t controller){
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
    switch(controller){
200006bc:	1dfb      	adds	r3, r7, #7
200006be:	781b      	ldrb	r3, [r3, #0]
200006c0:	2b08      	cmp	r3, #8
200006c2:	d00c      	beq.n	200006de <select_controller+0x2e>
200006c4:	dc02      	bgt.n	200006cc <select_controller+0x1c>
200006c6:	2b00      	cmp	r3, #0
200006c8:	d005      	beq.n	200006d6 <select_controller+0x26>
            break;
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
    }
}
200006ca:	e01a      	b.n	20000702 <select_controller+0x52>
    switch(controller){
200006cc:	2b10      	cmp	r3, #16
200006ce:	d00d      	beq.n	200006ec <select_controller+0x3c>
200006d0:	2b18      	cmp	r3, #24
200006d2:	d012      	beq.n	200006fa <select_controller+0x4a>
}
200006d4:	e015      	b.n	20000702 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
200006d6:	2018      	movs	r0, #24
200006d8:	f7ff ffbe 	bl	20000658 <graphic_ctrl_bit_clear>
            break;
200006dc:	e011      	b.n	20000702 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS2);
200006de:	2010      	movs	r0, #16
200006e0:	f7ff ffba 	bl	20000658 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS1);
200006e4:	2008      	movs	r0, #8
200006e6:	f7ff ff8f 	bl	20000608 <graphic_ctrl_bit_set>
            break;
200006ea:	e00a      	b.n	20000702 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
200006ec:	2008      	movs	r0, #8
200006ee:	f7ff ffb3 	bl	20000658 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
200006f2:	2010      	movs	r0, #16
200006f4:	f7ff ff88 	bl	20000608 <graphic_ctrl_bit_set>
            break;
200006f8:	e003      	b.n	20000702 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
200006fa:	2018      	movs	r0, #24
200006fc:	f7ff ff84 	bl	20000608 <graphic_ctrl_bit_set>
            break;
20000700:	46c0      	nop			; (mov r8, r8)
}
20000702:	46c0      	nop			; (mov r8, r8)
20000704:	46bd      	mov	sp, r7
20000706:	b002      	add	sp, #8
20000708:	bd80      	pop	{r7, pc}

2000070a <graphic_wait_ready>:

void graphic_wait_ready(void){
2000070a:	b580      	push	{r7, lr}
2000070c:	b082      	sub	sp, #8
2000070e:	af00      	add	r7, sp, #0
    uint8_t display_busy_status;
    // Enable = 0
    graphic_ctrl_bit_clear(B_E);
20000710:	2040      	movs	r0, #64	; 0x40
20000712:	f7ff ffa1 	bl	20000658 <graphic_ctrl_bit_clear>
    // E: 15-8 = input, 7-0 = output
    GPIO_E.moder = 0x00005555;
20000716:	4b17      	ldr	r3, [pc, #92]	; (20000774 <graphic_wait_ready+0x6a>)
20000718:	4a17      	ldr	r2, [pc, #92]	; (20000778 <graphic_wait_ready+0x6e>)
2000071a:	601a      	str	r2, [r3, #0]
    
    // RS = 0, RW = 1
    graphic_ctrl_bit_clear(B_RS);
2000071c:	2001      	movs	r0, #1
2000071e:	f7ff ff9b 	bl	20000658 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000722:	2002      	movs	r0, #2
20000724:	f7ff ff70 	bl	20000608 <graphic_ctrl_bit_set>
    delay_500ns();
20000728:	f7ff fec6 	bl	200004b8 <delay_500ns>
    
    while(1){
        // Enable = 1
        graphic_ctrl_bit_set(B_E);
2000072c:	2040      	movs	r0, #64	; 0x40
2000072e:	f7ff ff6b 	bl	20000608 <graphic_ctrl_bit_set>
        delay_500ns();
20000732:	f7ff fec1 	bl	200004b8 <delay_500ns>
        // Enable = 0
		display_busy_status = GPIO_E.idrHigh;
20000736:	4a0f      	ldr	r2, [pc, #60]	; (20000774 <graphic_wait_ready+0x6a>)
20000738:	1dfb      	adds	r3, r7, #7
2000073a:	7c52      	ldrb	r2, [r2, #17]
2000073c:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
2000073e:	2040      	movs	r0, #64	; 0x40
20000740:	f7ff ff8a 	bl	20000658 <graphic_ctrl_bit_clear>
        delay_500ns();
20000744:	f7ff feb8 	bl	200004b8 <delay_500ns>
        // Exit loop if not busy
        
		display_busy_status &= LCD_BUSY;
20000748:	1dfb      	adds	r3, r7, #7
2000074a:	1dfa      	adds	r2, r7, #7
2000074c:	7812      	ldrb	r2, [r2, #0]
2000074e:	217f      	movs	r1, #127	; 0x7f
20000750:	438a      	bics	r2, r1
20000752:	701a      	strb	r2, [r3, #0]
        if(display_busy_status == 0){
20000754:	1dfb      	adds	r3, r7, #7
20000756:	781b      	ldrb	r3, [r3, #0]
20000758:	2b00      	cmp	r3, #0
2000075a:	d000      	beq.n	2000075e <graphic_wait_ready+0x54>
        graphic_ctrl_bit_set(B_E);
2000075c:	e7e6      	b.n	2000072c <graphic_wait_ready+0x22>
            break;
2000075e:	46c0      	nop			; (mov r8, r8)
        } 
    }
    
    // Enable = 1
    graphic_ctrl_bit_set(B_E); // Commented out to check if this works because it works for NaN
20000760:	2040      	movs	r0, #64	; 0x40
20000762:	f7ff ff51 	bl	20000608 <graphic_ctrl_bit_set>
    // E: 15-0 = output
    GPIO_E.moder = 0x55555555;
20000766:	4b03      	ldr	r3, [pc, #12]	; (20000774 <graphic_wait_ready+0x6a>)
20000768:	4a04      	ldr	r2, [pc, #16]	; (2000077c <graphic_wait_ready+0x72>)
2000076a:	601a      	str	r2, [r3, #0]
}
2000076c:	46c0      	nop			; (mov r8, r8)
2000076e:	46bd      	mov	sp, r7
20000770:	b002      	add	sp, #8
20000772:	bd80      	pop	{r7, pc}
20000774:	40021000 	andmi	r1, r2, r0
20000778:	00005555 	andeq	r5, r0, r5, asr r5
2000077c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000780 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000780:	b580      	push	{r7, lr}
20000782:	b084      	sub	sp, #16
20000784:	af00      	add	r7, sp, #0
20000786:	0002      	movs	r2, r0
20000788:	1dfb      	adds	r3, r7, #7
2000078a:	701a      	strb	r2, [r3, #0]
	//Set enable to 0
	graphic_ctrl_bit_clear(B_E);
2000078c:	2040      	movs	r0, #64	; 0x40
2000078e:	f7ff ff63 	bl	20000658 <graphic_ctrl_bit_clear>
	
	//set E to input high byte / output low byte
	GPIO_E.moder = 0x00005555;
20000792:	4b1c      	ldr	r3, [pc, #112]	; (20000804 <graphic_read+0x84>)
20000794:	4a1c      	ldr	r2, [pc, #112]	; (20000808 <graphic_read+0x88>)
20000796:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_RS | B_RW);
20000798:	2003      	movs	r0, #3
2000079a:	f7ff ff35 	bl	20000608 <graphic_ctrl_bit_set>
	
	select_controller(controller);
2000079e:	1dfb      	adds	r3, r7, #7
200007a0:	781b      	ldrb	r3, [r3, #0]
200007a2:	0018      	movs	r0, r3
200007a4:	f7ff ff84 	bl	200006b0 <select_controller>
	delay_500ns();
200007a8:	f7ff fe86 	bl	200004b8 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
200007ac:	2040      	movs	r0, #64	; 0x40
200007ae:	f7ff ff2b 	bl	20000608 <graphic_ctrl_bit_set>
	delay_500ns();
200007b2:	f7ff fe81 	bl	200004b8 <delay_500ns>
	
	// set return value to what is on the data register
	uint8_t RV = GPIO_E.idrHigh;
200007b6:	4a13      	ldr	r2, [pc, #76]	; (20000804 <graphic_read+0x84>)
200007b8:	230f      	movs	r3, #15
200007ba:	18fb      	adds	r3, r7, r3
200007bc:	7c52      	ldrb	r2, [r2, #17]
200007be:	701a      	strb	r2, [r3, #0]
	
	graphic_ctrl_bit_clear(B_E);
200007c0:	2040      	movs	r0, #64	; 0x40
200007c2:	f7ff ff49 	bl	20000658 <graphic_ctrl_bit_clear>
	
	//set E to output
	GPIO_E.moder = 0x55555555;
200007c6:	4b0f      	ldr	r3, [pc, #60]	; (20000804 <graphic_read+0x84>)
200007c8:	4a10      	ldr	r2, [pc, #64]	; (2000080c <graphic_read+0x8c>)
200007ca:	601a      	str	r2, [r3, #0]
	
	if((controller & B_CS1) != 0) {
200007cc:	1dfb      	adds	r3, r7, #7
200007ce:	781b      	ldrb	r3, [r3, #0]
200007d0:	2208      	movs	r2, #8
200007d2:	4013      	ands	r3, r2
200007d4:	d004      	beq.n	200007e0 <graphic_read+0x60>
		select_controller(B_CS1);
200007d6:	2008      	movs	r0, #8
200007d8:	f7ff ff6a 	bl	200006b0 <select_controller>
		graphic_wait_ready();
200007dc:	f7ff ff95 	bl	2000070a <graphic_wait_ready>
	}
	if((controller & B_CS2) != 0){
200007e0:	1dfb      	adds	r3, r7, #7
200007e2:	781b      	ldrb	r3, [r3, #0]
200007e4:	2210      	movs	r2, #16
200007e6:	4013      	ands	r3, r2
200007e8:	d004      	beq.n	200007f4 <graphic_read+0x74>
		select_controller(B_CS2);
200007ea:	2010      	movs	r0, #16
200007ec:	f7ff ff60 	bl	200006b0 <select_controller>
		graphic_wait_ready();
200007f0:	f7ff ff8b 	bl	2000070a <graphic_wait_ready>
		//case B_CS1 | B_CS2: select_controller(B_CS1 | B_CS2); break;
		//default: select_controller(0);
	}*/
	//graphic_wait_ready();
	
	return RV;
200007f4:	230f      	movs	r3, #15
200007f6:	18fb      	adds	r3, r7, r3
200007f8:	781b      	ldrb	r3, [r3, #0]
}
200007fa:	0018      	movs	r0, r3
200007fc:	46bd      	mov	sp, r7
200007fe:	b004      	add	sp, #16
20000800:	bd80      	pop	{r7, pc}
20000802:	46c0      	nop			; (mov r8, r8)
20000804:	40021000 	andmi	r1, r2, r0
20000808:	00005555 	andeq	r5, r0, r5, asr r5
2000080c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000810 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000810:	b580      	push	{r7, lr}
20000812:	b082      	sub	sp, #8
20000814:	af00      	add	r7, sp, #0
20000816:	0002      	movs	r2, r0
20000818:	1dfb      	adds	r3, r7, #7
2000081a:	701a      	strb	r2, [r3, #0]
2000081c:	1dbb      	adds	r3, r7, #6
2000081e:	1c0a      	adds	r2, r1, #0
20000820:	701a      	strb	r2, [r3, #0]
	//datareg to value
	GPIO_E.odrHigh = value;
20000822:	4a1a      	ldr	r2, [pc, #104]	; (2000088c <graphic_write+0x7c>)
20000824:	1dfb      	adds	r3, r7, #7
20000826:	781b      	ldrb	r3, [r3, #0]
20000828:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
2000082a:	1dbb      	adds	r3, r7, #6
2000082c:	781b      	ldrb	r3, [r3, #0]
2000082e:	0018      	movs	r0, r3
20000830:	f7ff ff3e 	bl	200006b0 <select_controller>
	delay_500ns();
20000834:	f7ff fe40 	bl	200004b8 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
20000838:	2040      	movs	r0, #64	; 0x40
2000083a:	f7ff fee5 	bl	20000608 <graphic_ctrl_bit_set>
	delay_500ns();
2000083e:	f7ff fe3b 	bl	200004b8 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000842:	2040      	movs	r0, #64	; 0x40
20000844:	f7ff ff08 	bl	20000658 <graphic_ctrl_bit_clear>
	
	//select actual controller, wait while we read
	if (controller & B_CS1){
20000848:	1dbb      	adds	r3, r7, #6
2000084a:	781b      	ldrb	r3, [r3, #0]
2000084c:	2208      	movs	r2, #8
2000084e:	4013      	ands	r3, r2
20000850:	d004      	beq.n	2000085c <graphic_write+0x4c>
		select_controller(B_CS1);
20000852:	2008      	movs	r0, #8
20000854:	f7ff ff2c 	bl	200006b0 <select_controller>
		graphic_wait_ready();
20000858:	f7ff ff57 	bl	2000070a <graphic_wait_ready>
	}
	if (controller & B_CS2){
2000085c:	1dbb      	adds	r3, r7, #6
2000085e:	781b      	ldrb	r3, [r3, #0]
20000860:	2210      	movs	r2, #16
20000862:	4013      	ands	r3, r2
20000864:	d004      	beq.n	20000870 <graphic_write+0x60>
		select_controller(B_CS2);
20000866:	2010      	movs	r0, #16
20000868:	f7ff ff22 	bl	200006b0 <select_controller>
		graphic_wait_ready();
2000086c:	f7ff ff4d 	bl	2000070a <graphic_wait_ready>
	}
	
	//datareg to 0
	GPIO_E.odrHigh = 0;
20000870:	4b06      	ldr	r3, [pc, #24]	; (2000088c <graphic_write+0x7c>)
20000872:	2200      	movs	r2, #0
20000874:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
20000876:	2040      	movs	r0, #64	; 0x40
20000878:	f7ff fec6 	bl	20000608 <graphic_ctrl_bit_set>
	
	//set controller to 0
	select_controller(0);
2000087c:	2000      	movs	r0, #0
2000087e:	f7ff ff17 	bl	200006b0 <select_controller>
}
20000882:	46c0      	nop			; (mov r8, r8)
20000884:	46bd      	mov	sp, r7
20000886:	b002      	add	sp, #8
20000888:	bd80      	pop	{r7, pc}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	40021000 	andmi	r1, r2, r0

20000890 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000890:	b580      	push	{r7, lr}
20000892:	b082      	sub	sp, #8
20000894:	af00      	add	r7, sp, #0
20000896:	0002      	movs	r2, r0
20000898:	1dfb      	adds	r3, r7, #7
2000089a:	701a      	strb	r2, [r3, #0]
2000089c:	1dbb      	adds	r3, r7, #6
2000089e:	1c0a      	adds	r2, r1, #0
200008a0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200008a2:	2040      	movs	r0, #64	; 0x40
200008a4:	f7ff fed8 	bl	20000658 <graphic_ctrl_bit_clear>
	select_controller(controller);
200008a8:	1dbb      	adds	r3, r7, #6
200008aa:	781b      	ldrb	r3, [r3, #0]
200008ac:	0018      	movs	r0, r3
200008ae:	f7ff feff 	bl	200006b0 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200008b2:	2003      	movs	r0, #3
200008b4:	f7ff fed0 	bl	20000658 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200008b8:	1dbb      	adds	r3, r7, #6
200008ba:	781a      	ldrb	r2, [r3, #0]
200008bc:	1dfb      	adds	r3, r7, #7
200008be:	781b      	ldrb	r3, [r3, #0]
200008c0:	0011      	movs	r1, r2
200008c2:	0018      	movs	r0, r3
200008c4:	f7ff ffa4 	bl	20000810 <graphic_write>
}
200008c8:	46c0      	nop			; (mov r8, r8)
200008ca:	46bd      	mov	sp, r7
200008cc:	b002      	add	sp, #8
200008ce:	bd80      	pop	{r7, pc}

200008d0 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200008d0:	b580      	push	{r7, lr}
200008d2:	b082      	sub	sp, #8
200008d4:	af00      	add	r7, sp, #0
200008d6:	0002      	movs	r2, r0
200008d8:	1dfb      	adds	r3, r7, #7
200008da:	701a      	strb	r2, [r3, #0]
200008dc:	1dbb      	adds	r3, r7, #6
200008de:	1c0a      	adds	r2, r1, #0
200008e0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200008e2:	2040      	movs	r0, #64	; 0x40
200008e4:	f7ff feb8 	bl	20000658 <graphic_ctrl_bit_clear>
	select_controller(controller);
200008e8:	1dbb      	adds	r3, r7, #6
200008ea:	781b      	ldrb	r3, [r3, #0]
200008ec:	0018      	movs	r0, r3
200008ee:	f7ff fedf 	bl	200006b0 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200008f2:	2001      	movs	r0, #1
200008f4:	f7ff fe88 	bl	20000608 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200008f8:	2002      	movs	r0, #2
200008fa:	f7ff fead 	bl	20000658 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200008fe:	1dbb      	adds	r3, r7, #6
20000900:	781a      	ldrb	r2, [r3, #0]
20000902:	1dfb      	adds	r3, r7, #7
20000904:	781b      	ldrb	r3, [r3, #0]
20000906:	0011      	movs	r1, r2
20000908:	0018      	movs	r0, r3
2000090a:	f7ff ff81 	bl	20000810 <graphic_write>
}
2000090e:	46c0      	nop			; (mov r8, r8)
20000910:	46bd      	mov	sp, r7
20000912:	b002      	add	sp, #8
20000914:	bd80      	pop	{r7, pc}

20000916 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000916:	b580      	push	{r7, lr}
20000918:	b082      	sub	sp, #8
2000091a:	af00      	add	r7, sp, #0
2000091c:	0002      	movs	r2, r0
2000091e:	1dfb      	adds	r3, r7, #7
20000920:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
20000922:	1dfb      	adds	r3, r7, #7
20000924:	781b      	ldrb	r3, [r3, #0]
20000926:	0018      	movs	r0, r3
20000928:	f7ff ff2a 	bl	20000780 <graphic_read>
	return graphic_read(controller);
2000092c:	1dfb      	adds	r3, r7, #7
2000092e:	781b      	ldrb	r3, [r3, #0]
20000930:	0018      	movs	r0, r3
20000932:	f7ff ff25 	bl	20000780 <graphic_read>
20000936:	0003      	movs	r3, r0
}
20000938:	0018      	movs	r0, r3
2000093a:	46bd      	mov	sp, r7
2000093c:	b002      	add	sp, #8
2000093e:	bd80      	pop	{r7, pc}

20000940 <graphic_initialize>:

void graphic_initialize(void){
20000940:	b580      	push	{r7, lr}
20000942:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000944:	2040      	movs	r0, #64	; 0x40
20000946:	f7ff fe5f 	bl	20000608 <graphic_ctrl_bit_set>
	
	delay_mikro(10);
2000094a:	200a      	movs	r0, #10
2000094c:	f7ff fdd6 	bl	200004fc <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000950:	2078      	movs	r0, #120	; 0x78
20000952:	f7ff fe81 	bl	20000658 <graphic_ctrl_bit_clear>
	
	delay_milli(30);
20000956:	201e      	movs	r0, #30
20000958:	f7ff fdee 	bl	20000538 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
2000095c:	2020      	movs	r0, #32
2000095e:	f7ff fe53 	bl	20000608 <graphic_ctrl_bit_set>
	
	delay_milli(100); // Added because NaN has it
20000962:	2064      	movs	r0, #100	; 0x64
20000964:	f7ff fde8 	bl	20000538 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000968:	2118      	movs	r1, #24
2000096a:	203e      	movs	r0, #62	; 0x3e
2000096c:	f7ff ff90 	bl	20000890 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000970:	2118      	movs	r1, #24
20000972:	203f      	movs	r0, #63	; 0x3f
20000974:	f7ff ff8c 	bl	20000890 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000978:	2118      	movs	r1, #24
2000097a:	20c0      	movs	r0, #192	; 0xc0
2000097c:	f7ff ff88 	bl	20000890 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000980:	2118      	movs	r1, #24
20000982:	2040      	movs	r0, #64	; 0x40
20000984:	f7ff ff84 	bl	20000890 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000988:	2118      	movs	r1, #24
2000098a:	20b8      	movs	r0, #184	; 0xb8
2000098c:	f7ff ff80 	bl	20000890 <graphic_write_command>
	
	select_controller(0);
20000990:	2000      	movs	r0, #0
20000992:	f7ff fe8d 	bl	200006b0 <select_controller>
}
20000996:	46c0      	nop			; (mov r8, r8)
20000998:	46bd      	mov	sp, r7
2000099a:	bd80      	pop	{r7, pc}

2000099c <graphic_clear_screen>:

void graphic_clear_screen(void){
2000099c:	b580      	push	{r7, lr}
2000099e:	b082      	sub	sp, #8
200009a0:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++){
200009a2:	1dfb      	adds	r3, r7, #7
200009a4:	2200      	movs	r2, #0
200009a6:	701a      	strb	r2, [r3, #0]
200009a8:	e023      	b.n	200009f2 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
200009aa:	1dfb      	adds	r3, r7, #7
200009ac:	781b      	ldrb	r3, [r3, #0]
200009ae:	2248      	movs	r2, #72	; 0x48
200009b0:	4252      	negs	r2, r2
200009b2:	4313      	orrs	r3, r2
200009b4:	b2db      	uxtb	r3, r3
200009b6:	2118      	movs	r1, #24
200009b8:	0018      	movs	r0, r3
200009ba:	f7ff ff69 	bl	20000890 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200009be:	2118      	movs	r1, #24
200009c0:	2040      	movs	r0, #64	; 0x40
200009c2:	f7ff ff65 	bl	20000890 <graphic_write_command>
		
		for(uint8_t add = 0; add < 64; add++){
200009c6:	1dbb      	adds	r3, r7, #6
200009c8:	2200      	movs	r2, #0
200009ca:	701a      	strb	r2, [r3, #0]
200009cc:	e008      	b.n	200009e0 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
200009ce:	2118      	movs	r1, #24
200009d0:	2000      	movs	r0, #0
200009d2:	f7ff ff7d 	bl	200008d0 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
200009d6:	1dbb      	adds	r3, r7, #6
200009d8:	781a      	ldrb	r2, [r3, #0]
200009da:	1dbb      	adds	r3, r7, #6
200009dc:	3201      	adds	r2, #1
200009de:	701a      	strb	r2, [r3, #0]
200009e0:	1dbb      	adds	r3, r7, #6
200009e2:	781b      	ldrb	r3, [r3, #0]
200009e4:	2b3f      	cmp	r3, #63	; 0x3f
200009e6:	d9f2      	bls.n	200009ce <graphic_clear_screen+0x32>
	for(uint8_t page = 0; page < 8; page++){
200009e8:	1dfb      	adds	r3, r7, #7
200009ea:	781a      	ldrb	r2, [r3, #0]
200009ec:	1dfb      	adds	r3, r7, #7
200009ee:	3201      	adds	r2, #1
200009f0:	701a      	strb	r2, [r3, #0]
200009f2:	1dfb      	adds	r3, r7, #7
200009f4:	781b      	ldrb	r3, [r3, #0]
200009f6:	2b07      	cmp	r3, #7
200009f8:	d9d7      	bls.n	200009aa <graphic_clear_screen+0xe>
		}
	}
}
200009fa:	46c0      	nop			; (mov r8, r8)
200009fc:	46bd      	mov	sp, r7
200009fe:	b002      	add	sp, #8
20000a00:	bd80      	pop	{r7, pc}

20000a02 <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
20000a02:	b590      	push	{r4, r7, lr}
20000a04:	b085      	sub	sp, #20
20000a06:	af00      	add	r7, sp, #0
20000a08:	0004      	movs	r4, r0
20000a0a:	0008      	movs	r0, r1
20000a0c:	0011      	movs	r1, r2
20000a0e:	1dfb      	adds	r3, r7, #7
20000a10:	1c22      	adds	r2, r4, #0
20000a12:	701a      	strb	r2, [r3, #0]
20000a14:	1dbb      	adds	r3, r7, #6
20000a16:	1c02      	adds	r2, r0, #0
20000a18:	701a      	strb	r2, [r3, #0]
20000a1a:	1d7b      	adds	r3, r7, #5
20000a1c:	1c0a      	adds	r2, r1, #0
20000a1e:	701a      	strb	r2, [r3, #0]
    // Validate values for input variables
    if(x < 1 || x > 128){
20000a20:	1dfb      	adds	r3, r7, #7
20000a22:	781b      	ldrb	r3, [r3, #0]
20000a24:	2b00      	cmp	r3, #0
20000a26:	d100      	bne.n	20000a2a <pixel+0x28>
20000a28:	e0b4      	b.n	20000b94 <pixel+0x192>
20000a2a:	1dfb      	adds	r3, r7, #7
20000a2c:	781b      	ldrb	r3, [r3, #0]
20000a2e:	2b80      	cmp	r3, #128	; 0x80
20000a30:	d900      	bls.n	20000a34 <pixel+0x32>
20000a32:	e0af      	b.n	20000b94 <pixel+0x192>
        return;
    }
    if(y < 1 || y > 64){
20000a34:	1dbb      	adds	r3, r7, #6
20000a36:	781b      	ldrb	r3, [r3, #0]
20000a38:	2b00      	cmp	r3, #0
20000a3a:	d100      	bne.n	20000a3e <pixel+0x3c>
20000a3c:	e0ac      	b.n	20000b98 <pixel+0x196>
20000a3e:	1dbb      	adds	r3, r7, #6
20000a40:	781b      	ldrb	r3, [r3, #0]
20000a42:	2b40      	cmp	r3, #64	; 0x40
20000a44:	d900      	bls.n	20000a48 <pixel+0x46>
20000a46:	e0a7      	b.n	20000b98 <pixel+0x196>
        return;
    }
    if(set != 1 && set != 0){
20000a48:	1d7b      	adds	r3, r7, #5
20000a4a:	781b      	ldrb	r3, [r3, #0]
20000a4c:	2b01      	cmp	r3, #1
20000a4e:	d004      	beq.n	20000a5a <pixel+0x58>
20000a50:	1d7b      	adds	r3, r7, #5
20000a52:	781b      	ldrb	r3, [r3, #0]
20000a54:	2b00      	cmp	r3, #0
20000a56:	d000      	beq.n	20000a5a <pixel+0x58>
20000a58:	e0a0      	b.n	20000b9c <pixel+0x19a>
        return;
    }
    
    uint8_t index = (y-1)/8;
20000a5a:	1dbb      	adds	r3, r7, #6
20000a5c:	781b      	ldrb	r3, [r3, #0]
20000a5e:	3b01      	subs	r3, #1
20000a60:	2b00      	cmp	r3, #0
20000a62:	da00      	bge.n	20000a66 <pixel+0x64>
20000a64:	3307      	adds	r3, #7
20000a66:	10db      	asrs	r3, r3, #3
20000a68:	001a      	movs	r2, r3
20000a6a:	230c      	movs	r3, #12
20000a6c:	18fb      	adds	r3, r7, r3
20000a6e:	701a      	strb	r2, [r3, #0]
    // Create mask for y, works as well as switch from book, but with less code
    uint8_t mask = 1;
20000a70:	230f      	movs	r3, #15
20000a72:	18fb      	adds	r3, r7, r3
20000a74:	2201      	movs	r2, #1
20000a76:	701a      	strb	r2, [r3, #0]
    mask = mask << ((y-1)%8);
20000a78:	230f      	movs	r3, #15
20000a7a:	18fb      	adds	r3, r7, r3
20000a7c:	781a      	ldrb	r2, [r3, #0]
20000a7e:	1dbb      	adds	r3, r7, #6
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	3b01      	subs	r3, #1
20000a84:	4947      	ldr	r1, [pc, #284]	; (20000ba4 <pixel+0x1a2>)
20000a86:	400b      	ands	r3, r1
20000a88:	d504      	bpl.n	20000a94 <pixel+0x92>
20000a8a:	3b01      	subs	r3, #1
20000a8c:	2108      	movs	r1, #8
20000a8e:	4249      	negs	r1, r1
20000a90:	430b      	orrs	r3, r1
20000a92:	3301      	adds	r3, #1
20000a94:	409a      	lsls	r2, r3
20000a96:	230f      	movs	r3, #15
20000a98:	18fb      	adds	r3, r7, r3
20000a9a:	701a      	strb	r2, [r3, #0]
		case 6: mask = 0x40; break;
		case 7: mask = 0x80; break;
	}*/
    
    // Invert mask if the bit is going to get cleared
    if(set == 0){
20000a9c:	1d7b      	adds	r3, r7, #5
20000a9e:	781b      	ldrb	r3, [r3, #0]
20000aa0:	2b00      	cmp	r3, #0
20000aa2:	d106      	bne.n	20000ab2 <pixel+0xb0>
        mask = ~mask;
20000aa4:	230f      	movs	r3, #15
20000aa6:	18fb      	adds	r3, r7, r3
20000aa8:	220f      	movs	r2, #15
20000aaa:	18ba      	adds	r2, r7, r2
20000aac:	7812      	ldrb	r2, [r2, #0]
20000aae:	43d2      	mvns	r2, r2
20000ab0:	701a      	strb	r2, [r3, #0]
    }
    
    uint8_t x_actual;
    uint8_t controller;
    // Select applicable chip (screen half), and store the actual value of x
    if(x > 64){
20000ab2:	1dfb      	adds	r3, r7, #7
20000ab4:	781b      	ldrb	r3, [r3, #0]
20000ab6:	2b40      	cmp	r3, #64	; 0x40
20000ab8:	d90a      	bls.n	20000ad0 <pixel+0xce>
        controller = B_CS2;
20000aba:	230d      	movs	r3, #13
20000abc:	18fb      	adds	r3, r7, r3
20000abe:	2210      	movs	r2, #16
20000ac0:	701a      	strb	r2, [r3, #0]
        x_actual = x - 65;
20000ac2:	230e      	movs	r3, #14
20000ac4:	18fb      	adds	r3, r7, r3
20000ac6:	1dfa      	adds	r2, r7, #7
20000ac8:	7812      	ldrb	r2, [r2, #0]
20000aca:	3a41      	subs	r2, #65	; 0x41
20000acc:	701a      	strb	r2, [r3, #0]
20000ace:	e009      	b.n	20000ae4 <pixel+0xe2>
    } else {
        controller = B_CS1;
20000ad0:	230d      	movs	r3, #13
20000ad2:	18fb      	adds	r3, r7, r3
20000ad4:	2208      	movs	r2, #8
20000ad6:	701a      	strb	r2, [r3, #0]
        x_actual = x - 1;
20000ad8:	230e      	movs	r3, #14
20000ada:	18fb      	adds	r3, r7, r3
20000adc:	1dfa      	adds	r2, r7, #7
20000ade:	7812      	ldrb	r2, [r2, #0]
20000ae0:	3a01      	subs	r2, #1
20000ae2:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000ae4:	230e      	movs	r3, #14
20000ae6:	18fb      	adds	r3, r7, r3
20000ae8:	781b      	ldrb	r3, [r3, #0]
20000aea:	2240      	movs	r2, #64	; 0x40
20000aec:	4313      	orrs	r3, r2
20000aee:	b2da      	uxtb	r2, r3
20000af0:	230d      	movs	r3, #13
20000af2:	18fb      	adds	r3, r7, r3
20000af4:	781b      	ldrb	r3, [r3, #0]
20000af6:	0019      	movs	r1, r3
20000af8:	0010      	movs	r0, r2
20000afa:	f7ff fec9 	bl	20000890 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
20000afe:	230c      	movs	r3, #12
20000b00:	18fb      	adds	r3, r7, r3
20000b02:	781b      	ldrb	r3, [r3, #0]
20000b04:	2248      	movs	r2, #72	; 0x48
20000b06:	4252      	negs	r2, r2
20000b08:	4313      	orrs	r3, r2
20000b0a:	b2da      	uxtb	r2, r3
20000b0c:	230d      	movs	r3, #13
20000b0e:	18fb      	adds	r3, r7, r3
20000b10:	781b      	ldrb	r3, [r3, #0]
20000b12:	0019      	movs	r1, r3
20000b14:	0010      	movs	r0, r2
20000b16:	f7ff febb 	bl	20000890 <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
20000b1a:	230b      	movs	r3, #11
20000b1c:	18fc      	adds	r4, r7, r3
20000b1e:	230d      	movs	r3, #13
20000b20:	18fb      	adds	r3, r7, r3
20000b22:	781b      	ldrb	r3, [r3, #0]
20000b24:	0018      	movs	r0, r3
20000b26:	f7ff fef6 	bl	20000916 <graphic_read_data>
20000b2a:	0003      	movs	r3, r0
20000b2c:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000b2e:	230e      	movs	r3, #14
20000b30:	18fb      	adds	r3, r7, r3
20000b32:	781b      	ldrb	r3, [r3, #0]
20000b34:	2240      	movs	r2, #64	; 0x40
20000b36:	4313      	orrs	r3, r2
20000b38:	b2da      	uxtb	r2, r3
20000b3a:	230d      	movs	r3, #13
20000b3c:	18fb      	adds	r3, r7, r3
20000b3e:	781b      	ldrb	r3, [r3, #0]
20000b40:	0019      	movs	r1, r3
20000b42:	0010      	movs	r0, r2
20000b44:	f7ff fea4 	bl	20000890 <graphic_write_command>
    if(set == 1){
20000b48:	1d7b      	adds	r3, r7, #5
20000b4a:	781b      	ldrb	r3, [r3, #0]
20000b4c:	2b01      	cmp	r3, #1
20000b4e:	d10a      	bne.n	20000b66 <pixel+0x164>
        mask |= temp;
20000b50:	230f      	movs	r3, #15
20000b52:	18fb      	adds	r3, r7, r3
20000b54:	220f      	movs	r2, #15
20000b56:	18b9      	adds	r1, r7, r2
20000b58:	220b      	movs	r2, #11
20000b5a:	18ba      	adds	r2, r7, r2
20000b5c:	7809      	ldrb	r1, [r1, #0]
20000b5e:	7812      	ldrb	r2, [r2, #0]
20000b60:	430a      	orrs	r2, r1
20000b62:	701a      	strb	r2, [r3, #0]
20000b64:	e009      	b.n	20000b7a <pixel+0x178>
    } else {
        mask &= temp;
20000b66:	230f      	movs	r3, #15
20000b68:	18fb      	adds	r3, r7, r3
20000b6a:	220f      	movs	r2, #15
20000b6c:	18ba      	adds	r2, r7, r2
20000b6e:	210b      	movs	r1, #11
20000b70:	1879      	adds	r1, r7, r1
20000b72:	7812      	ldrb	r2, [r2, #0]
20000b74:	7809      	ldrb	r1, [r1, #0]
20000b76:	400a      	ands	r2, r1
20000b78:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
20000b7a:	230d      	movs	r3, #13
20000b7c:	18fb      	adds	r3, r7, r3
20000b7e:	781a      	ldrb	r2, [r3, #0]
20000b80:	230f      	movs	r3, #15
20000b82:	18fb      	adds	r3, r7, r3
20000b84:	781b      	ldrb	r3, [r3, #0]
20000b86:	0011      	movs	r1, r2
20000b88:	0018      	movs	r0, r3
20000b8a:	f7ff fea1 	bl	200008d0 <graphic_write_data>
	delay_500ns();
20000b8e:	f7ff fc93 	bl	200004b8 <delay_500ns>
20000b92:	e004      	b.n	20000b9e <pixel+0x19c>
        return;
20000b94:	46c0      	nop			; (mov r8, r8)
20000b96:	e002      	b.n	20000b9e <pixel+0x19c>
        return;
20000b98:	46c0      	nop			; (mov r8, r8)
20000b9a:	e000      	b.n	20000b9e <pixel+0x19c>
        return;
20000b9c:	46c0      	nop			; (mov r8, r8)
}
20000b9e:	46bd      	mov	sp, r7
20000ba0:	b005      	add	sp, #20
20000ba2:	bd90      	pop	{r4, r7, pc}
20000ba4:	80000007 	andhi	r0, r0, r7

20000ba8 <draw_object>:

void draw_object(POBJECT object){
20000ba8:	b580      	push	{r7, lr}
20000baa:	b084      	sub	sp, #16
20000bac:	af00      	add	r7, sp, #0
20000bae:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
20000bb0:	2300      	movs	r3, #0
20000bb2:	60fb      	str	r3, [r7, #12]
20000bb4:	e020      	b.n	20000bf8 <draw_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 1);
20000bb6:	687b      	ldr	r3, [r7, #4]
20000bb8:	681a      	ldr	r2, [r3, #0]
20000bba:	68fb      	ldr	r3, [r7, #12]
20000bbc:	3304      	adds	r3, #4
20000bbe:	005b      	lsls	r3, r3, #1
20000bc0:	18d3      	adds	r3, r2, r3
20000bc2:	3304      	adds	r3, #4
20000bc4:	781a      	ldrb	r2, [r3, #0]
20000bc6:	687b      	ldr	r3, [r7, #4]
20000bc8:	68db      	ldr	r3, [r3, #12]
20000bca:	b2db      	uxtb	r3, r3
20000bcc:	18d3      	adds	r3, r2, r3
20000bce:	b2d8      	uxtb	r0, r3
20000bd0:	687b      	ldr	r3, [r7, #4]
20000bd2:	681a      	ldr	r2, [r3, #0]
20000bd4:	68fb      	ldr	r3, [r7, #12]
20000bd6:	3304      	adds	r3, #4
20000bd8:	005b      	lsls	r3, r3, #1
20000bda:	18d3      	adds	r3, r2, r3
20000bdc:	3305      	adds	r3, #5
20000bde:	781a      	ldrb	r2, [r3, #0]
20000be0:	687b      	ldr	r3, [r7, #4]
20000be2:	691b      	ldr	r3, [r3, #16]
20000be4:	b2db      	uxtb	r3, r3
20000be6:	18d3      	adds	r3, r2, r3
20000be8:	b2db      	uxtb	r3, r3
20000bea:	2201      	movs	r2, #1
20000bec:	0019      	movs	r1, r3
20000bee:	f7ff ff08 	bl	20000a02 <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
20000bf2:	68fb      	ldr	r3, [r7, #12]
20000bf4:	3301      	adds	r3, #1
20000bf6:	60fb      	str	r3, [r7, #12]
20000bf8:	687b      	ldr	r3, [r7, #4]
20000bfa:	681b      	ldr	r3, [r3, #0]
20000bfc:	681a      	ldr	r2, [r3, #0]
20000bfe:	68fb      	ldr	r3, [r7, #12]
20000c00:	429a      	cmp	r2, r3
20000c02:	dcd8      	bgt.n	20000bb6 <draw_object+0xe>
	}
}
20000c04:	46c0      	nop			; (mov r8, r8)
20000c06:	46bd      	mov	sp, r7
20000c08:	b004      	add	sp, #16
20000c0a:	bd80      	pop	{r7, pc}

20000c0c <clear_object>:

void clear_object(POBJECT object){
20000c0c:	b580      	push	{r7, lr}
20000c0e:	b084      	sub	sp, #16
20000c10:	af00      	add	r7, sp, #0
20000c12:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
20000c14:	2300      	movs	r3, #0
20000c16:	60fb      	str	r3, [r7, #12]
20000c18:	e020      	b.n	20000c5c <clear_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 0);
20000c1a:	687b      	ldr	r3, [r7, #4]
20000c1c:	681a      	ldr	r2, [r3, #0]
20000c1e:	68fb      	ldr	r3, [r7, #12]
20000c20:	3304      	adds	r3, #4
20000c22:	005b      	lsls	r3, r3, #1
20000c24:	18d3      	adds	r3, r2, r3
20000c26:	3304      	adds	r3, #4
20000c28:	781a      	ldrb	r2, [r3, #0]
20000c2a:	687b      	ldr	r3, [r7, #4]
20000c2c:	68db      	ldr	r3, [r3, #12]
20000c2e:	b2db      	uxtb	r3, r3
20000c30:	18d3      	adds	r3, r2, r3
20000c32:	b2d8      	uxtb	r0, r3
20000c34:	687b      	ldr	r3, [r7, #4]
20000c36:	681a      	ldr	r2, [r3, #0]
20000c38:	68fb      	ldr	r3, [r7, #12]
20000c3a:	3304      	adds	r3, #4
20000c3c:	005b      	lsls	r3, r3, #1
20000c3e:	18d3      	adds	r3, r2, r3
20000c40:	3305      	adds	r3, #5
20000c42:	781a      	ldrb	r2, [r3, #0]
20000c44:	687b      	ldr	r3, [r7, #4]
20000c46:	691b      	ldr	r3, [r3, #16]
20000c48:	b2db      	uxtb	r3, r3
20000c4a:	18d3      	adds	r3, r2, r3
20000c4c:	b2db      	uxtb	r3, r3
20000c4e:	2200      	movs	r2, #0
20000c50:	0019      	movs	r1, r3
20000c52:	f7ff fed6 	bl	20000a02 <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
20000c56:	68fb      	ldr	r3, [r7, #12]
20000c58:	3301      	adds	r3, #1
20000c5a:	60fb      	str	r3, [r7, #12]
20000c5c:	687b      	ldr	r3, [r7, #4]
20000c5e:	681b      	ldr	r3, [r3, #0]
20000c60:	681a      	ldr	r2, [r3, #0]
20000c62:	68fb      	ldr	r3, [r7, #12]
20000c64:	429a      	cmp	r2, r3
20000c66:	dcd8      	bgt.n	20000c1a <clear_object+0xe>
	}
}
20000c68:	46c0      	nop			; (mov r8, r8)
20000c6a:	46bd      	mov	sp, r7
20000c6c:	b004      	add	sp, #16
20000c6e:	bd80      	pop	{r7, pc}

20000c70 <move_object>:

void move_object(POBJECT object){
20000c70:	b580      	push	{r7, lr}
20000c72:	b082      	sub	sp, #8
20000c74:	af00      	add	r7, sp, #0
20000c76:	6078      	str	r0, [r7, #4]
	clear_object(object);
20000c78:	687b      	ldr	r3, [r7, #4]
20000c7a:	0018      	movs	r0, r3
20000c7c:	f7ff ffc6 	bl	20000c0c <clear_object>
	object->pos_x += object->dir_x;
20000c80:	687b      	ldr	r3, [r7, #4]
20000c82:	68da      	ldr	r2, [r3, #12]
20000c84:	687b      	ldr	r3, [r7, #4]
20000c86:	685b      	ldr	r3, [r3, #4]
20000c88:	18d2      	adds	r2, r2, r3
20000c8a:	687b      	ldr	r3, [r7, #4]
20000c8c:	60da      	str	r2, [r3, #12]
	object->pos_y += object->dir_y;
20000c8e:	687b      	ldr	r3, [r7, #4]
20000c90:	691a      	ldr	r2, [r3, #16]
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	689b      	ldr	r3, [r3, #8]
20000c96:	18d2      	adds	r2, r2, r3
20000c98:	687b      	ldr	r3, [r7, #4]
20000c9a:	611a      	str	r2, [r3, #16]
	
	//bounce if object reaches edges of screen
	if (object->pos_x < 1 || (object->pos_x + object->geo->size_x) > 128){
20000c9c:	687b      	ldr	r3, [r7, #4]
20000c9e:	68db      	ldr	r3, [r3, #12]
20000ca0:	2b00      	cmp	r3, #0
20000ca2:	dd07      	ble.n	20000cb4 <move_object+0x44>
20000ca4:	687b      	ldr	r3, [r7, #4]
20000ca6:	68da      	ldr	r2, [r3, #12]
20000ca8:	687b      	ldr	r3, [r7, #4]
20000caa:	681b      	ldr	r3, [r3, #0]
20000cac:	685b      	ldr	r3, [r3, #4]
20000cae:	18d3      	adds	r3, r2, r3
20000cb0:	2b80      	cmp	r3, #128	; 0x80
20000cb2:	dd04      	ble.n	20000cbe <move_object+0x4e>
		object->dir_x = -object->dir_x;
20000cb4:	687b      	ldr	r3, [r7, #4]
20000cb6:	685b      	ldr	r3, [r3, #4]
20000cb8:	425a      	negs	r2, r3
20000cba:	687b      	ldr	r3, [r7, #4]
20000cbc:	605a      	str	r2, [r3, #4]
	}
	if (object->pos_y < 1 || (object->pos_y + object->geo->size_y) > 64){
20000cbe:	687b      	ldr	r3, [r7, #4]
20000cc0:	691b      	ldr	r3, [r3, #16]
20000cc2:	2b00      	cmp	r3, #0
20000cc4:	dd07      	ble.n	20000cd6 <move_object+0x66>
20000cc6:	687b      	ldr	r3, [r7, #4]
20000cc8:	691a      	ldr	r2, [r3, #16]
20000cca:	687b      	ldr	r3, [r7, #4]
20000ccc:	681b      	ldr	r3, [r3, #0]
20000cce:	689b      	ldr	r3, [r3, #8]
20000cd0:	18d3      	adds	r3, r2, r3
20000cd2:	2b40      	cmp	r3, #64	; 0x40
20000cd4:	dd04      	ble.n	20000ce0 <move_object+0x70>
		object->dir_y = -object->dir_y;
20000cd6:	687b      	ldr	r3, [r7, #4]
20000cd8:	689b      	ldr	r3, [r3, #8]
20000cda:	425a      	negs	r2, r3
20000cdc:	687b      	ldr	r3, [r7, #4]
20000cde:	609a      	str	r2, [r3, #8]
	}
	
	draw_object(object);
20000ce0:	687b      	ldr	r3, [r7, #4]
20000ce2:	0018      	movs	r0, r3
20000ce4:	f7ff ff60 	bl	20000ba8 <draw_object>
}
20000ce8:	46c0      	nop			; (mov r8, r8)
20000cea:	46bd      	mov	sp, r7
20000cec:	b002      	add	sp, #8
20000cee:	bd80      	pop	{r7, pc}

20000cf0 <set_object_speed>:

void set_object_speed(POBJECT object, int x, int y){
20000cf0:	b580      	push	{r7, lr}
20000cf2:	b084      	sub	sp, #16
20000cf4:	af00      	add	r7, sp, #0
20000cf6:	60f8      	str	r0, [r7, #12]
20000cf8:	60b9      	str	r1, [r7, #8]
20000cfa:	607a      	str	r2, [r7, #4]
	object->dir_x = x;
20000cfc:	68fb      	ldr	r3, [r7, #12]
20000cfe:	68ba      	ldr	r2, [r7, #8]
20000d00:	605a      	str	r2, [r3, #4]
	object->dir_y = y;
20000d02:	68fb      	ldr	r3, [r7, #12]
20000d04:	687a      	ldr	r2, [r7, #4]
20000d06:	609a      	str	r2, [r3, #8]
}
20000d08:	46c0      	nop			; (mov r8, r8)
20000d0a:	46bd      	mov	sp, r7
20000d0c:	b004      	add	sp, #16
20000d0e:	bd80      	pop	{r7, pc}

20000d10 <graphicdisplay_init>:

void graphicdisplay_init(void){
20000d10:	b580      	push	{r7, lr}
20000d12:	af00      	add	r7, sp, #0
	//port E is output
	GPIO_E.moder = 0x55555555;
20000d14:	4b04      	ldr	r3, [pc, #16]	; (20000d28 <graphicdisplay_init+0x18>)
20000d16:	4a05      	ldr	r2, [pc, #20]	; (20000d2c <graphicdisplay_init+0x1c>)
20000d18:	601a      	str	r2, [r3, #0]
	GPIO_E.ospeedr = 0x55555555;
20000d1a:	4b03      	ldr	r3, [pc, #12]	; (20000d28 <graphicdisplay_init+0x18>)
20000d1c:	4a03      	ldr	r2, [pc, #12]	; (20000d2c <graphicdisplay_init+0x1c>)
20000d1e:	609a      	str	r2, [r3, #8]
20000d20:	46c0      	nop			; (mov r8, r8)
20000d22:	46bd      	mov	sp, r7
20000d24:	bd80      	pop	{r7, pc}
20000d26:	46c0      	nop			; (mov r8, r8)
20000d28:	40021000 	andmi	r1, r2, r0
20000d2c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d30 <asciidisplay_init>:
#include "asciidisplay.h"

void asciidisplay_init(void){    
20000d30:	b580      	push	{r7, lr}
20000d32:	af00      	add	r7, sp, #0
    // Port E -> output
    GPIO_E.moder = 0x55555555;
20000d34:	4b0e      	ldr	r3, [pc, #56]	; (20000d70 <asciidisplay_init+0x40>)
20000d36:	4a0f      	ldr	r2, [pc, #60]	; (20000d74 <asciidisplay_init+0x44>)
20000d38:	601a      	str	r2, [r3, #0]
    
    ascii_ctrl_bit_clear(B_E);
20000d3a:	2040      	movs	r0, #64	; 0x40
20000d3c:	f000 f83e 	bl	20000dbc <ascii_ctrl_bit_clear>
    
    // ***DISPLAY INIT***    
    // 2 rows, characters are 5x8 dots
    ascii_command(0x38, 39, 1);
20000d40:	2201      	movs	r2, #1
20000d42:	2127      	movs	r1, #39	; 0x27
20000d44:	2038      	movs	r0, #56	; 0x38
20000d46:	f000 f903 	bl	20000f50 <ascii_command>
    // Turn on display, turn on cursor, cursor not blinking
    ascii_command(0xE, 39, 1);
20000d4a:	2201      	movs	r2, #1
20000d4c:	2127      	movs	r1, #39	; 0x27
20000d4e:	200e      	movs	r0, #14
20000d50:	f000 f8fe 	bl	20000f50 <ascii_command>
    // Clear display
    ascii_command(0x1, 2, 0);
20000d54:	2200      	movs	r2, #0
20000d56:	2102      	movs	r1, #2
20000d58:	2001      	movs	r0, #1
20000d5a:	f000 f8f9 	bl	20000f50 <ascii_command>
    // Increment mode, no shift
    ascii_command(0x6, 39, 1);
20000d5e:	2201      	movs	r2, #1
20000d60:	2127      	movs	r1, #39	; 0x27
20000d62:	2006      	movs	r0, #6
20000d64:	f000 f8f4 	bl	20000f50 <ascii_command>
}
20000d68:	46c0      	nop			; (mov r8, r8)
20000d6a:	46bd      	mov	sp, r7
20000d6c:	bd80      	pop	{r7, pc}
20000d6e:	46c0      	nop			; (mov r8, r8)
20000d70:	40021000 	andmi	r1, r2, r0
20000d74:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d78 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x){
20000d78:	b580      	push	{r7, lr}
20000d7a:	b084      	sub	sp, #16
20000d7c:	af00      	add	r7, sp, #0
20000d7e:	0002      	movs	r2, r0
20000d80:	1dfb      	adds	r3, r7, #7
20000d82:	701a      	strb	r2, [r3, #0]
    // Set bits that are 1 in x to 1, leave rest be
    unsigned char port_val = GPIO_E.odrLow;
20000d84:	4a0c      	ldr	r2, [pc, #48]	; (20000db8 <ascii_ctrl_bit_set+0x40>)
20000d86:	230f      	movs	r3, #15
20000d88:	18fb      	adds	r3, r7, r3
20000d8a:	7d12      	ldrb	r2, [r2, #20]
20000d8c:	701a      	strb	r2, [r3, #0]
    port_val |= x;
20000d8e:	230f      	movs	r3, #15
20000d90:	18fb      	adds	r3, r7, r3
20000d92:	220f      	movs	r2, #15
20000d94:	18b9      	adds	r1, r7, r2
20000d96:	1dfa      	adds	r2, r7, #7
20000d98:	7809      	ldrb	r1, [r1, #0]
20000d9a:	7812      	ldrb	r2, [r2, #0]
20000d9c:	430a      	orrs	r2, r1
20000d9e:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = (port_val | B_SELECT);
20000da0:	4a05      	ldr	r2, [pc, #20]	; (20000db8 <ascii_ctrl_bit_set+0x40>)
20000da2:	230f      	movs	r3, #15
20000da4:	18fb      	adds	r3, r7, r3
20000da6:	781b      	ldrb	r3, [r3, #0]
20000da8:	2104      	movs	r1, #4
20000daa:	430b      	orrs	r3, r1
20000dac:	b2db      	uxtb	r3, r3
20000dae:	7513      	strb	r3, [r2, #20]
}
20000db0:	46c0      	nop			; (mov r8, r8)
20000db2:	46bd      	mov	sp, r7
20000db4:	b004      	add	sp, #16
20000db6:	bd80      	pop	{r7, pc}
20000db8:	40021000 	andmi	r1, r2, r0

20000dbc <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000dbc:	b580      	push	{r7, lr}
20000dbe:	b084      	sub	sp, #16
20000dc0:	af00      	add	r7, sp, #0
20000dc2:	0002      	movs	r2, r0
20000dc4:	1dfb      	adds	r3, r7, #7
20000dc6:	701a      	strb	r2, [r3, #0]
    // Set any bits that are 0 in x to 0, leave rest as they were
    unsigned char port_val = GPIO_E.odrLow;
20000dc8:	4a0f      	ldr	r2, [pc, #60]	; (20000e08 <ascii_ctrl_bit_clear+0x4c>)
20000dca:	230f      	movs	r3, #15
20000dcc:	18fb      	adds	r3, r7, r3
20000dce:	7d12      	ldrb	r2, [r2, #20]
20000dd0:	701a      	strb	r2, [r3, #0]
    port_val &= (~x);
20000dd2:	1dfb      	adds	r3, r7, #7
20000dd4:	781b      	ldrb	r3, [r3, #0]
20000dd6:	b25b      	sxtb	r3, r3
20000dd8:	43db      	mvns	r3, r3
20000dda:	b25b      	sxtb	r3, r3
20000ddc:	220f      	movs	r2, #15
20000dde:	18ba      	adds	r2, r7, r2
20000de0:	7812      	ldrb	r2, [r2, #0]
20000de2:	b252      	sxtb	r2, r2
20000de4:	4013      	ands	r3, r2
20000de6:	b25a      	sxtb	r2, r3
20000de8:	230f      	movs	r3, #15
20000dea:	18fb      	adds	r3, r7, r3
20000dec:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = (port_val | B_SELECT);
20000dee:	4a06      	ldr	r2, [pc, #24]	; (20000e08 <ascii_ctrl_bit_clear+0x4c>)
20000df0:	230f      	movs	r3, #15
20000df2:	18fb      	adds	r3, r7, r3
20000df4:	781b      	ldrb	r3, [r3, #0]
20000df6:	2104      	movs	r1, #4
20000df8:	430b      	orrs	r3, r1
20000dfa:	b2db      	uxtb	r3, r3
20000dfc:	7513      	strb	r3, [r2, #20]
    //delay_250ns();
}
20000dfe:	46c0      	nop			; (mov r8, r8)
20000e00:	46bd      	mov	sp, r7
20000e02:	b004      	add	sp, #16
20000e04:	bd80      	pop	{r7, pc}
20000e06:	46c0      	nop			; (mov r8, r8)
20000e08:	40021000 	andmi	r1, r2, r0

20000e0c <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000e0c:	b580      	push	{r7, lr}
20000e0e:	b082      	sub	sp, #8
20000e10:	af00      	add	r7, sp, #0
20000e12:	0002      	movs	r2, r0
20000e14:	1dfb      	adds	r3, r7, #7
20000e16:	701a      	strb	r2, [r3, #0]
    // Prepare display for sending command
    ascii_ctrl_bit_clear(B_RS);
20000e18:	2001      	movs	r0, #1
20000e1a:	f7ff ffcf 	bl	20000dbc <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear( B_RW);
20000e1e:	2002      	movs	r0, #2
20000e20:	f7ff ffcc 	bl	20000dbc <ascii_ctrl_bit_clear>
    
    // Write command
    ascii_write_controller(command);
20000e24:	1dfb      	adds	r3, r7, #7
20000e26:	781b      	ldrb	r3, [r3, #0]
20000e28:	0018      	movs	r0, r3
20000e2a:	f000 f861 	bl	20000ef0 <ascii_write_controller>
}
20000e2e:	46c0      	nop			; (mov r8, r8)
20000e30:	46bd      	mov	sp, r7
20000e32:	b002      	add	sp, #8
20000e34:	bd80      	pop	{r7, pc}

20000e36 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000e36:	b580      	push	{r7, lr}
20000e38:	b082      	sub	sp, #8
20000e3a:	af00      	add	r7, sp, #0
20000e3c:	0002      	movs	r2, r0
20000e3e:	1dfb      	adds	r3, r7, #7
20000e40:	701a      	strb	r2, [r3, #0]
    // Prepare display for writing data
    ascii_ctrl_bit_set(B_RS);
20000e42:	2001      	movs	r0, #1
20000e44:	f7ff ff98 	bl	20000d78 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
20000e48:	2002      	movs	r0, #2
20000e4a:	f7ff ffb7 	bl	20000dbc <ascii_ctrl_bit_clear>
    
    // Write data
    ascii_write_controller(data);
20000e4e:	1dfb      	adds	r3, r7, #7
20000e50:	781b      	ldrb	r3, [r3, #0]
20000e52:	0018      	movs	r0, r3
20000e54:	f000 f84c 	bl	20000ef0 <ascii_write_controller>
}
20000e58:	46c0      	nop			; (mov r8, r8)
20000e5a:	46bd      	mov	sp, r7
20000e5c:	b002      	add	sp, #8
20000e5e:	bd80      	pop	{r7, pc}

20000e60 <ascii_read_data>:

unsigned char ascii_read_data(void){
20000e60:	b590      	push	{r4, r7, lr}
20000e62:	b083      	sub	sp, #12
20000e64:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    GPIO_E.moder &= 0x0000FFFF;
20000e66:	4b0e      	ldr	r3, [pc, #56]	; (20000ea0 <ascii_read_data+0x40>)
20000e68:	4a0d      	ldr	r2, [pc, #52]	; (20000ea0 <ascii_read_data+0x40>)
20000e6a:	6812      	ldr	r2, [r2, #0]
20000e6c:	0412      	lsls	r2, r2, #16
20000e6e:	0c12      	lsrs	r2, r2, #16
20000e70:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading data
    ascii_ctrl_bit_set(B_RW);
20000e72:	2002      	movs	r0, #2
20000e74:	f7ff ff80 	bl	20000d78 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RS);
20000e78:	2001      	movs	r0, #1
20000e7a:	f7ff ff7d 	bl	20000d78 <ascii_ctrl_bit_set>
    
    return_value = ascii_read_controller();
20000e7e:	1dfc      	adds	r4, r7, #7
20000e80:	f000 f84e 	bl	20000f20 <ascii_read_controller>
20000e84:	0003      	movs	r3, r0
20000e86:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    GPIO_E.moder |= 0x55550000;
20000e88:	4b05      	ldr	r3, [pc, #20]	; (20000ea0 <ascii_read_data+0x40>)
20000e8a:	4a05      	ldr	r2, [pc, #20]	; (20000ea0 <ascii_read_data+0x40>)
20000e8c:	6812      	ldr	r2, [r2, #0]
20000e8e:	4905      	ldr	r1, [pc, #20]	; (20000ea4 <ascii_read_data+0x44>)
20000e90:	430a      	orrs	r2, r1
20000e92:	601a      	str	r2, [r3, #0]
    
    return return_value;
20000e94:	1dfb      	adds	r3, r7, #7
20000e96:	781b      	ldrb	r3, [r3, #0]
}
20000e98:	0018      	movs	r0, r3
20000e9a:	46bd      	mov	sp, r7
20000e9c:	b003      	add	sp, #12
20000e9e:	bd90      	pop	{r4, r7, pc}
20000ea0:	40021000 	andmi	r1, r2, r0
20000ea4:	55550000 	ldrbpl	r0, [r5, #-0]

20000ea8 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000ea8:	b590      	push	{r4, r7, lr}
20000eaa:	b083      	sub	sp, #12
20000eac:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    GPIO_E.moder &= 0x0000FFFF;
20000eae:	4b0e      	ldr	r3, [pc, #56]	; (20000ee8 <ascii_read_status+0x40>)
20000eb0:	4a0d      	ldr	r2, [pc, #52]	; (20000ee8 <ascii_read_status+0x40>)
20000eb2:	6812      	ldr	r2, [r2, #0]
20000eb4:	0412      	lsls	r2, r2, #16
20000eb6:	0c12      	lsrs	r2, r2, #16
20000eb8:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading status and address
    ascii_ctrl_bit_clear(B_RS);
20000eba:	2001      	movs	r0, #1
20000ebc:	f7ff ff7e 	bl	20000dbc <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000ec0:	2002      	movs	r0, #2
20000ec2:	f7ff ff59 	bl	20000d78 <ascii_ctrl_bit_set>
    
    // Read values from display
    return_value = ascii_read_controller();
20000ec6:	1dfc      	adds	r4, r7, #7
20000ec8:	f000 f82a 	bl	20000f20 <ascii_read_controller>
20000ecc:	0003      	movs	r3, r0
20000ece:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    GPIO_E.moder |= 0x55550000;
20000ed0:	4b05      	ldr	r3, [pc, #20]	; (20000ee8 <ascii_read_status+0x40>)
20000ed2:	4a05      	ldr	r2, [pc, #20]	; (20000ee8 <ascii_read_status+0x40>)
20000ed4:	6812      	ldr	r2, [r2, #0]
20000ed6:	4905      	ldr	r1, [pc, #20]	; (20000eec <ascii_read_status+0x44>)
20000ed8:	430a      	orrs	r2, r1
20000eda:	601a      	str	r2, [r3, #0]
    
    return return_value;
20000edc:	1dfb      	adds	r3, r7, #7
20000ede:	781b      	ldrb	r3, [r3, #0]
}
20000ee0:	0018      	movs	r0, r3
20000ee2:	46bd      	mov	sp, r7
20000ee4:	b003      	add	sp, #12
20000ee6:	bd90      	pop	{r4, r7, pc}
20000ee8:	40021000 	andmi	r1, r2, r0
20000eec:	55550000 	ldrbpl	r0, [r5, #-0]

20000ef0 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
20000ef0:	b580      	push	{r7, lr}
20000ef2:	b082      	sub	sp, #8
20000ef4:	af00      	add	r7, sp, #0
20000ef6:	0002      	movs	r2, r0
20000ef8:	1dfb      	adds	r3, r7, #7
20000efa:	701a      	strb	r2, [r3, #0]
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
20000efc:	2040      	movs	r0, #64	; 0x40
20000efe:	f7ff ff3b 	bl	20000d78 <ascii_ctrl_bit_set>
    
    // Set data register values
    GPIO_E.odrHigh = byte;
20000f02:	4a06      	ldr	r2, [pc, #24]	; (20000f1c <ascii_write_controller+0x2c>)
20000f04:	1dfb      	adds	r3, r7, #7
20000f06:	781b      	ldrb	r3, [r3, #0]
20000f08:	7553      	strb	r3, [r2, #21]
    
    // Wait for 230ns (here at least 250, hope this should still work)
    delay_250ns();
20000f0a:	f7ff fac8 	bl	2000049e <delay_250ns>
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
20000f0e:	2040      	movs	r0, #64	; 0x40
20000f10:	f7ff ff54 	bl	20000dbc <ascii_ctrl_bit_clear>
}
20000f14:	46c0      	nop			; (mov r8, r8)
20000f16:	46bd      	mov	sp, r7
20000f18:	b002      	add	sp, #8
20000f1a:	bd80      	pop	{r7, pc}
20000f1c:	40021000 	andmi	r1, r2, r0

20000f20 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20000f20:	b580      	push	{r7, lr}
20000f22:	b082      	sub	sp, #8
20000f24:	af00      	add	r7, sp, #0
    unsigned char return_value;
    
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
20000f26:	2040      	movs	r0, #64	; 0x40
20000f28:	f7ff ff26 	bl	20000d78 <ascii_ctrl_bit_set>
    
    // Wait for at least 360ns, here at least 500
    delay_500ns();
20000f2c:	f7ff fac4 	bl	200004b8 <delay_500ns>
    
    // Read data register
    return_value = GPIO_E.idrHigh;
20000f30:	4a06      	ldr	r2, [pc, #24]	; (20000f4c <ascii_read_controller+0x2c>)
20000f32:	1dfb      	adds	r3, r7, #7
20000f34:	7c52      	ldrb	r2, [r2, #17]
20000f36:	701a      	strb	r2, [r3, #0]
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
20000f38:	2040      	movs	r0, #64	; 0x40
20000f3a:	f7ff ff3f 	bl	20000dbc <ascii_ctrl_bit_clear>
    
    return return_value;
20000f3e:	1dfb      	adds	r3, r7, #7
20000f40:	781b      	ldrb	r3, [r3, #0]
}
20000f42:	0018      	movs	r0, r3
20000f44:	46bd      	mov	sp, r7
20000f46:	b002      	add	sp, #8
20000f48:	bd80      	pop	{r7, pc}
20000f4a:	46c0      	nop			; (mov r8, r8)
20000f4c:	40021000 	andmi	r1, r2, r0

20000f50 <ascii_command>:

void ascii_command(unsigned char command, unsigned int post_command_delay, unsigned short us){    
20000f50:	b580      	push	{r7, lr}
20000f52:	b082      	sub	sp, #8
20000f54:	af00      	add	r7, sp, #0
20000f56:	6039      	str	r1, [r7, #0]
20000f58:	0011      	movs	r1, r2
20000f5a:	1dfb      	adds	r3, r7, #7
20000f5c:	1c02      	adds	r2, r0, #0
20000f5e:	701a      	strb	r2, [r3, #0]
20000f60:	1d3b      	adds	r3, r7, #4
20000f62:	1c0a      	adds	r2, r1, #0
20000f64:	801a      	strh	r2, [r3, #0]
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while((ascii_read_status() & 0x80) != 0);
20000f66:	46c0      	nop			; (mov r8, r8)
20000f68:	f7ff ff9e 	bl	20000ea8 <ascii_read_status>
20000f6c:	0003      	movs	r3, r0
20000f6e:	b25b      	sxtb	r3, r3
20000f70:	2b00      	cmp	r3, #0
20000f72:	dbf9      	blt.n	20000f68 <ascii_command+0x18>
    delay_mikro(8);
20000f74:	2008      	movs	r0, #8
20000f76:	f7ff fac1 	bl	200004fc <delay_mikro>
    
    // Send command
    ascii_write_cmd(command);
20000f7a:	1dfb      	adds	r3, r7, #7
20000f7c:	781b      	ldrb	r3, [r3, #0]
20000f7e:	0018      	movs	r0, r3
20000f80:	f7ff ff44 	bl	20000e0c <ascii_write_cmd>
    
    // Wait for the entered amount of time
    if(us == 1){
20000f84:	1d3b      	adds	r3, r7, #4
20000f86:	881b      	ldrh	r3, [r3, #0]
20000f88:	2b01      	cmp	r3, #1
20000f8a:	d104      	bne.n	20000f96 <ascii_command+0x46>
        delay_mikro(post_command_delay);
20000f8c:	683b      	ldr	r3, [r7, #0]
20000f8e:	0018      	movs	r0, r3
20000f90:	f7ff fab4 	bl	200004fc <delay_mikro>
    } else {
        delay_milli(post_command_delay);
    }
}
20000f94:	e003      	b.n	20000f9e <ascii_command+0x4e>
        delay_milli(post_command_delay);
20000f96:	683b      	ldr	r3, [r7, #0]
20000f98:	0018      	movs	r0, r3
20000f9a:	f7ff facd 	bl	20000538 <delay_milli>
}
20000f9e:	46c0      	nop			; (mov r8, r8)
20000fa0:	46bd      	mov	sp, r7
20000fa2:	b002      	add	sp, #8
20000fa4:	bd80      	pop	{r7, pc}

20000fa6 <ascii_write_char>:

void ascii_write_char(unsigned char character){
20000fa6:	b580      	push	{r7, lr}
20000fa8:	b082      	sub	sp, #8
20000faa:	af00      	add	r7, sp, #0
20000fac:	0002      	movs	r2, r0
20000fae:	1dfb      	adds	r3, r7, #7
20000fb0:	701a      	strb	r2, [r3, #0]
    // Prepare to check if display ready
    ascii_ctrl_bit_set(B_RW);
20000fb2:	2002      	movs	r0, #2
20000fb4:	f7ff fee0 	bl	20000d78 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RS);
20000fb8:	2001      	movs	r0, #1
20000fba:	f7ff feff 	bl	20000dbc <ascii_ctrl_bit_clear>
    
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while((ascii_read_status() & 0x80) != 0);
20000fbe:	46c0      	nop			; (mov r8, r8)
20000fc0:	f7ff ff72 	bl	20000ea8 <ascii_read_status>
20000fc4:	0003      	movs	r3, r0
20000fc6:	b25b      	sxtb	r3, r3
20000fc8:	2b00      	cmp	r3, #0
20000fca:	dbf9      	blt.n	20000fc0 <ascii_write_char+0x1a>
    delay_mikro(8);
20000fcc:	2008      	movs	r0, #8
20000fce:	f7ff fa95 	bl	200004fc <delay_mikro>
    
    // Write character do display
    ascii_write_data(character);
20000fd2:	1dfb      	adds	r3, r7, #7
20000fd4:	781b      	ldrb	r3, [r3, #0]
20000fd6:	0018      	movs	r0, r3
20000fd8:	f7ff ff2d 	bl	20000e36 <ascii_write_data>
    
    // Delay for 43us
    delay_mikro(43);
20000fdc:	202b      	movs	r0, #43	; 0x2b
20000fde:	f7ff fa8d 	bl	200004fc <delay_mikro>
}
20000fe2:	46c0      	nop			; (mov r8, r8)
20000fe4:	46bd      	mov	sp, r7
20000fe6:	b002      	add	sp, #8
20000fe8:	bd80      	pop	{r7, pc}

20000fea <gotoxy>:

void gotoxy(unsigned int row, unsigned int column){
20000fea:	b580      	push	{r7, lr}
20000fec:	b084      	sub	sp, #16
20000fee:	af00      	add	r7, sp, #0
20000ff0:	6078      	str	r0, [r7, #4]
20000ff2:	6039      	str	r1, [r7, #0]
    // Make sure row not out of bounds
    if(row < 1 || row > 20){
20000ff4:	687b      	ldr	r3, [r7, #4]
20000ff6:	2b00      	cmp	r3, #0
20000ff8:	d025      	beq.n	20001046 <gotoxy+0x5c>
20000ffa:	687b      	ldr	r3, [r7, #4]
20000ffc:	2b14      	cmp	r3, #20
20000ffe:	d822      	bhi.n	20001046 <gotoxy+0x5c>
        return;
    }
    // Make sure column not out of bounds
    if(column < 1 || column > 2){
20001000:	683b      	ldr	r3, [r7, #0]
20001002:	2b00      	cmp	r3, #0
20001004:	d021      	beq.n	2000104a <gotoxy+0x60>
20001006:	683b      	ldr	r3, [r7, #0]
20001008:	2b02      	cmp	r3, #2
2000100a:	d81e      	bhi.n	2000104a <gotoxy+0x60>
        return;
    }
    
    // Set address to the correct location
    unsigned char address = row - 1;
2000100c:	687b      	ldr	r3, [r7, #4]
2000100e:	b2da      	uxtb	r2, r3
20001010:	230f      	movs	r3, #15
20001012:	18fb      	adds	r3, r7, r3
20001014:	3a01      	subs	r2, #1
20001016:	701a      	strb	r2, [r3, #0]
    if(column == 2){
20001018:	683b      	ldr	r3, [r7, #0]
2000101a:	2b02      	cmp	r3, #2
2000101c:	d106      	bne.n	2000102c <gotoxy+0x42>
        address += 0x40;
2000101e:	230f      	movs	r3, #15
20001020:	18fb      	adds	r3, r7, r3
20001022:	220f      	movs	r2, #15
20001024:	18ba      	adds	r2, r7, r2
20001026:	7812      	ldrb	r2, [r2, #0]
20001028:	3240      	adds	r2, #64	; 0x40
2000102a:	701a      	strb	r2, [r3, #0]
    }
    
    // Send command to mark correct spot
    ascii_command(0x80 | address, 39, 1);
2000102c:	230f      	movs	r3, #15
2000102e:	18fb      	adds	r3, r7, r3
20001030:	781b      	ldrb	r3, [r3, #0]
20001032:	2280      	movs	r2, #128	; 0x80
20001034:	4252      	negs	r2, r2
20001036:	4313      	orrs	r3, r2
20001038:	b2db      	uxtb	r3, r3
2000103a:	2201      	movs	r2, #1
2000103c:	2127      	movs	r1, #39	; 0x27
2000103e:	0018      	movs	r0, r3
20001040:	f7ff ff86 	bl	20000f50 <ascii_command>
20001044:	e002      	b.n	2000104c <gotoxy+0x62>
        return;
20001046:	46c0      	nop			; (mov r8, r8)
20001048:	e000      	b.n	2000104c <gotoxy+0x62>
        return;
2000104a:	46c0      	nop			; (mov r8, r8)
}
2000104c:	46bd      	mov	sp, r7
2000104e:	b004      	add	sp, #16
20001050:	bd80      	pop	{r7, pc}

20001052 <ascii_write_string>:

void ascii_write_string(char *s){
20001052:	b580      	push	{r7, lr}
20001054:	b082      	sub	sp, #8
20001056:	af00      	add	r7, sp, #0
20001058:	6078      	str	r0, [r7, #4]
    // Write each character onto the display until the finishing character is reached
    while(*s != 0){
2000105a:	e006      	b.n	2000106a <ascii_write_string+0x18>
        ascii_write_char(*s++);
2000105c:	687b      	ldr	r3, [r7, #4]
2000105e:	1c5a      	adds	r2, r3, #1
20001060:	607a      	str	r2, [r7, #4]
20001062:	781b      	ldrb	r3, [r3, #0]
20001064:	0018      	movs	r0, r3
20001066:	f7ff ff9e 	bl	20000fa6 <ascii_write_char>
    while(*s != 0){
2000106a:	687b      	ldr	r3, [r7, #4]
2000106c:	781b      	ldrb	r3, [r3, #0]
2000106e:	2b00      	cmp	r3, #0
20001070:	d1f4      	bne.n	2000105c <ascii_write_string+0xa>
    }
}
20001072:	46c0      	nop			; (mov r8, r8)
20001074:	46bd      	mov	sp, r7
20001076:	b002      	add	sp, #8
20001078:	bd80      	pop	{r7, pc}
2000107a:	46c0      	nop			; (mov r8, r8)

2000107c <keyboard_init>:
#include "keypad.h"

void keyboard_init (void) {
2000107c:	b580      	push	{r7, lr}
2000107e:	af00      	add	r7, sp, #0
    GPIO_D.moder &= 0x0000FFFF;
20001080:	4b15      	ldr	r3, [pc, #84]	; (200010d8 <keyboard_init+0x5c>)
20001082:	4a15      	ldr	r2, [pc, #84]	; (200010d8 <keyboard_init+0x5c>)
20001084:	6812      	ldr	r2, [r2, #0]
20001086:	0412      	lsls	r2, r2, #16
20001088:	0c12      	lsrs	r2, r2, #16
2000108a:	601a      	str	r2, [r3, #0]
	GPIO_D.moder |= 0x55000000;
2000108c:	4b12      	ldr	r3, [pc, #72]	; (200010d8 <keyboard_init+0x5c>)
2000108e:	4a12      	ldr	r2, [pc, #72]	; (200010d8 <keyboard_init+0x5c>)
20001090:	6812      	ldr	r2, [r2, #0]
20001092:	21aa      	movs	r1, #170	; 0xaa
20001094:	05c9      	lsls	r1, r1, #23
20001096:	430a      	orrs	r2, r1
20001098:	601a      	str	r2, [r3, #0]
	GPIO_D.otyper &= 0x00FF;
2000109a:	4b0f      	ldr	r3, [pc, #60]	; (200010d8 <keyboard_init+0x5c>)
2000109c:	4a0e      	ldr	r2, [pc, #56]	; (200010d8 <keyboard_init+0x5c>)
2000109e:	6852      	ldr	r2, [r2, #4]
200010a0:	21ff      	movs	r1, #255	; 0xff
200010a2:	400a      	ands	r2, r1
200010a4:	605a      	str	r2, [r3, #4]
	GPIO_D.otyper |= 0x0000;
200010a6:	4b0c      	ldr	r3, [pc, #48]	; (200010d8 <keyboard_init+0x5c>)
200010a8:	4a0b      	ldr	r2, [pc, #44]	; (200010d8 <keyboard_init+0x5c>)
200010aa:	6852      	ldr	r2, [r2, #4]
200010ac:	605a      	str	r2, [r3, #4]
	GPIO_D.pupdr &= 0x0000FFFF;
200010ae:	4b0a      	ldr	r3, [pc, #40]	; (200010d8 <keyboard_init+0x5c>)
200010b0:	4a09      	ldr	r2, [pc, #36]	; (200010d8 <keyboard_init+0x5c>)
200010b2:	68d2      	ldr	r2, [r2, #12]
200010b4:	0412      	lsls	r2, r2, #16
200010b6:	0c12      	lsrs	r2, r2, #16
200010b8:	60da      	str	r2, [r3, #12]
	GPIO_D.pupdr |= 0x00AA0000;
200010ba:	4b07      	ldr	r3, [pc, #28]	; (200010d8 <keyboard_init+0x5c>)
200010bc:	4a06      	ldr	r2, [pc, #24]	; (200010d8 <keyboard_init+0x5c>)
200010be:	68d2      	ldr	r2, [r2, #12]
200010c0:	21aa      	movs	r1, #170	; 0xaa
200010c2:	0409      	lsls	r1, r1, #16
200010c4:	430a      	orrs	r2, r1
200010c6:	60da      	str	r2, [r3, #12]
	GPIO_D.odrHigh &= 0x00FF;
200010c8:	4b03      	ldr	r3, [pc, #12]	; (200010d8 <keyboard_init+0x5c>)
200010ca:	4a03      	ldr	r2, [pc, #12]	; (200010d8 <keyboard_init+0x5c>)
200010cc:	7d52      	ldrb	r2, [r2, #21]
200010ce:	b2d2      	uxtb	r2, r2
200010d0:	755a      	strb	r2, [r3, #21]
}
200010d2:	46c0      	nop			; (mov r8, r8)
200010d4:	46bd      	mov	sp, r7
200010d6:	bd80      	pop	{r7, pc}
200010d8:	40020c00 	andmi	r0, r2, r0, lsl #24

200010dc <keyb>:

unsigned char keyb(void){
200010dc:	b580      	push	{r7, lr}
200010de:	b082      	sub	sp, #8
200010e0:	af00      	add	r7, sp, #0
	unsigned char row, column;
	
	for (unsigned char row = 1; row <= 4; row++) {
200010e2:	1dfb      	adds	r3, r7, #7
200010e4:	2201      	movs	r2, #1
200010e6:	701a      	strb	r2, [r3, #0]
200010e8:	e020      	b.n	2000112c <keyb+0x50>
		// mind the one indexing of rows and columns, to simplify resetting of values
		ActivateRow(row);
200010ea:	1dfb      	adds	r3, r7, #7
200010ec:	781b      	ldrb	r3, [r3, #0]
200010ee:	0018      	movs	r0, r3
200010f0:	f000 f82a 	bl	20001148 <ActivateRow>
		column = ReadColumn();
200010f4:	f000 f854 	bl	200011a0 <ReadColumn>
200010f8:	0002      	movs	r2, r0
200010fa:	1dbb      	adds	r3, r7, #6
200010fc:	701a      	strb	r2, [r3, #0]
		if (column > 0){
200010fe:	1dbb      	adds	r3, r7, #6
20001100:	781b      	ldrb	r3, [r3, #0]
20001102:	2b00      	cmp	r3, #0
20001104:	d00d      	beq.n	20001122 <keyb+0x46>
			ActivateRow(0);
20001106:	2000      	movs	r0, #0
20001108:	f000 f81e 	bl	20001148 <ActivateRow>
			return key[row - 1][column - 1];
2000110c:	1dfb      	adds	r3, r7, #7
2000110e:	781b      	ldrb	r3, [r3, #0]
20001110:	1e5a      	subs	r2, r3, #1
20001112:	1dbb      	adds	r3, r7, #6
20001114:	781b      	ldrb	r3, [r3, #0]
20001116:	3b01      	subs	r3, #1
20001118:	490a      	ldr	r1, [pc, #40]	; (20001144 <keyb+0x68>)
2000111a:	0092      	lsls	r2, r2, #2
2000111c:	188a      	adds	r2, r1, r2
2000111e:	5cd3      	ldrb	r3, [r2, r3]
20001120:	e00c      	b.n	2000113c <keyb+0x60>
	for (unsigned char row = 1; row <= 4; row++) {
20001122:	1dfb      	adds	r3, r7, #7
20001124:	781a      	ldrb	r2, [r3, #0]
20001126:	1dfb      	adds	r3, r7, #7
20001128:	3201      	adds	r2, #1
2000112a:	701a      	strb	r2, [r3, #0]
2000112c:	1dfb      	adds	r3, r7, #7
2000112e:	781b      	ldrb	r3, [r3, #0]
20001130:	2b04      	cmp	r3, #4
20001132:	d9da      	bls.n	200010ea <keyb+0xe>
			//return decode7segMatrix[row - 1][column - 1];
		}
	}
	ActivateRow(0);
20001134:	2000      	movs	r0, #0
20001136:	f000 f807 	bl	20001148 <ActivateRow>
	return 0xFF;
2000113a:	23ff      	movs	r3, #255	; 0xff
}
2000113c:	0018      	movs	r0, r3
2000113e:	46bd      	mov	sp, r7
20001140:	b002      	add	sp, #8
20001142:	bd80      	pop	{r7, pc}
20001144:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

20001148 <ActivateRow>:

void ActivateRow(unsigned char row) {
20001148:	b580      	push	{r7, lr}
2000114a:	b082      	sub	sp, #8
2000114c:	af00      	add	r7, sp, #0
2000114e:	0002      	movs	r2, r0
20001150:	1dfb      	adds	r3, r7, #7
20001152:	701a      	strb	r2, [r3, #0]
	switch(row){
20001154:	1dfb      	adds	r3, r7, #7
20001156:	781b      	ldrb	r3, [r3, #0]
20001158:	2b04      	cmp	r3, #4
2000115a:	d818      	bhi.n	2000118e <ActivateRow+0x46>
2000115c:	009a      	lsls	r2, r3, #2
2000115e:	4b0e      	ldr	r3, [pc, #56]	; (20001198 <ActivateRow+0x50>)
20001160:	18d3      	adds	r3, r2, r3
20001162:	681b      	ldr	r3, [r3, #0]
20001164:	469f      	mov	pc, r3
		case 0: GPIO_D.odrHigh = 0x0; break; //0 to reset
20001166:	4b0d      	ldr	r3, [pc, #52]	; (2000119c <ActivateRow+0x54>)
20001168:	2200      	movs	r2, #0
2000116a:	755a      	strb	r2, [r3, #21]
2000116c:	e00f      	b.n	2000118e <ActivateRow+0x46>
		case 1: GPIO_D.odrHigh = 0x10; break;
2000116e:	4b0b      	ldr	r3, [pc, #44]	; (2000119c <ActivateRow+0x54>)
20001170:	2210      	movs	r2, #16
20001172:	755a      	strb	r2, [r3, #21]
20001174:	e00b      	b.n	2000118e <ActivateRow+0x46>
		case 2: GPIO_D.odrHigh = 0x20; break;
20001176:	4b09      	ldr	r3, [pc, #36]	; (2000119c <ActivateRow+0x54>)
20001178:	2220      	movs	r2, #32
2000117a:	755a      	strb	r2, [r3, #21]
2000117c:	e007      	b.n	2000118e <ActivateRow+0x46>
		case 3: GPIO_D.odrHigh = 0x40; break;
2000117e:	4b07      	ldr	r3, [pc, #28]	; (2000119c <ActivateRow+0x54>)
20001180:	2240      	movs	r2, #64	; 0x40
20001182:	755a      	strb	r2, [r3, #21]
20001184:	e003      	b.n	2000118e <ActivateRow+0x46>
		case 4: GPIO_D.odrHigh = 0x80; break;
20001186:	4b05      	ldr	r3, [pc, #20]	; (2000119c <ActivateRow+0x54>)
20001188:	2280      	movs	r2, #128	; 0x80
2000118a:	755a      	strb	r2, [r3, #21]
2000118c:	46c0      	nop			; (mov r8, r8)
	}
}
2000118e:	46c0      	nop			; (mov r8, r8)
20001190:	46bd      	mov	sp, r7
20001192:	b002      	add	sp, #8
20001194:	bd80      	pop	{r7, pc}
20001196:	46c0      	nop			; (mov r8, r8)
20001198:	20001778 	andcs	r1, r0, r8, ror r7
2000119c:	40020c00 	andmi	r0, r2, r0, lsl #24

200011a0 <ReadColumn>:

int ReadColumn(void) {
200011a0:	b580      	push	{r7, lr}
200011a2:	b082      	sub	sp, #8
200011a4:	af00      	add	r7, sp, #0
	// Returns column number of pressed key, observe that the columns of the keyboard are read from right to left!
	unsigned char c;
	c = GPIO_D.idrHigh;
200011a6:	4a12      	ldr	r2, [pc, #72]	; (200011f0 <ReadColumn+0x50>)
200011a8:	1dfb      	adds	r3, r7, #7
200011aa:	7c52      	ldrb	r2, [r2, #17]
200011ac:	701a      	strb	r2, [r3, #0]
	if (c & 0x8){return 4;}
200011ae:	1dfb      	adds	r3, r7, #7
200011b0:	781b      	ldrb	r3, [r3, #0]
200011b2:	2208      	movs	r2, #8
200011b4:	4013      	ands	r3, r2
200011b6:	d001      	beq.n	200011bc <ReadColumn+0x1c>
200011b8:	2304      	movs	r3, #4
200011ba:	e015      	b.n	200011e8 <ReadColumn+0x48>
	if (c & 0x4){return 3;}
200011bc:	1dfb      	adds	r3, r7, #7
200011be:	781b      	ldrb	r3, [r3, #0]
200011c0:	2204      	movs	r2, #4
200011c2:	4013      	ands	r3, r2
200011c4:	d001      	beq.n	200011ca <ReadColumn+0x2a>
200011c6:	2303      	movs	r3, #3
200011c8:	e00e      	b.n	200011e8 <ReadColumn+0x48>
	if (c & 0x2){return 2;}
200011ca:	1dfb      	adds	r3, r7, #7
200011cc:	781b      	ldrb	r3, [r3, #0]
200011ce:	2202      	movs	r2, #2
200011d0:	4013      	ands	r3, r2
200011d2:	d001      	beq.n	200011d8 <ReadColumn+0x38>
200011d4:	2302      	movs	r3, #2
200011d6:	e007      	b.n	200011e8 <ReadColumn+0x48>
	if (c & 0x1){return 1;}
200011d8:	1dfb      	adds	r3, r7, #7
200011da:	781b      	ldrb	r3, [r3, #0]
200011dc:	2201      	movs	r2, #1
200011de:	4013      	ands	r3, r2
200011e0:	d001      	beq.n	200011e6 <ReadColumn+0x46>
200011e2:	2301      	movs	r3, #1
200011e4:	e000      	b.n	200011e8 <ReadColumn+0x48>
	return 0;
200011e6:	2300      	movs	r3, #0
200011e8:	0018      	movs	r0, r3
200011ea:	46bd      	mov	sp, r7
200011ec:	b002      	add	sp, #8
200011ee:	bd80      	pop	{r7, pc}
200011f0:	40020c00 	andmi	r0, r2, r0, lsl #24

200011f4 <load_sprite>:
#include "sprites.h"

void load_sprite(SPRITE* s, unsigned char* data, int width, int height){
200011f4:	b580      	push	{r7, lr}
200011f6:	b084      	sub	sp, #16
200011f8:	af00      	add	r7, sp, #0
200011fa:	60f8      	str	r0, [r7, #12]
200011fc:	60b9      	str	r1, [r7, #8]
200011fe:	607a      	str	r2, [r7, #4]
20001200:	603b      	str	r3, [r7, #0]
    s->width = width;
20001202:	687b      	ldr	r3, [r7, #4]
20001204:	b2da      	uxtb	r2, r3
20001206:	68fb      	ldr	r3, [r7, #12]
20001208:	701a      	strb	r2, [r3, #0]
    s->height = height;
2000120a:	683b      	ldr	r3, [r7, #0]
2000120c:	b2da      	uxtb	r2, r3
2000120e:	68fb      	ldr	r3, [r7, #12]
20001210:	705a      	strb	r2, [r3, #1]
    s->data = data;
20001212:	68fb      	ldr	r3, [r7, #12]
20001214:	68ba      	ldr	r2, [r7, #8]
20001216:	605a      	str	r2, [r3, #4]
}
20001218:	46c0      	nop			; (mov r8, r8)
2000121a:	46bd      	mov	sp, r7
2000121c:	b004      	add	sp, #16
2000121e:	bd80      	pop	{r7, pc}

20001220 <draw_sprite>:

void draw_sprite(SPRITE* s, int x, int y, int set){
20001220:	b580      	push	{r7, lr}
20001222:	b08a      	sub	sp, #40	; 0x28
20001224:	af00      	add	r7, sp, #0
20001226:	60f8      	str	r0, [r7, #12]
20001228:	60b9      	str	r1, [r7, #8]
2000122a:	607a      	str	r2, [r7, #4]
2000122c:	603b      	str	r3, [r7, #0]
    int width_in_bytes;
    
    if(s->width % 8 == 0){
2000122e:	68fb      	ldr	r3, [r7, #12]
20001230:	781b      	ldrb	r3, [r3, #0]
20001232:	2207      	movs	r2, #7
20001234:	4013      	ands	r3, r2
20001236:	b2db      	uxtb	r3, r3
20001238:	2b00      	cmp	r3, #0
2000123a:	d105      	bne.n	20001248 <draw_sprite+0x28>
        width_in_bytes = s->width / 8;
2000123c:	68fb      	ldr	r3, [r7, #12]
2000123e:	781b      	ldrb	r3, [r3, #0]
20001240:	08db      	lsrs	r3, r3, #3
20001242:	b2db      	uxtb	r3, r3
20001244:	627b      	str	r3, [r7, #36]	; 0x24
20001246:	e005      	b.n	20001254 <draw_sprite+0x34>
    } else {
        width_in_bytes = s->width / 8 + 1;
20001248:	68fb      	ldr	r3, [r7, #12]
2000124a:	781b      	ldrb	r3, [r3, #0]
2000124c:	08db      	lsrs	r3, r3, #3
2000124e:	b2db      	uxtb	r3, r3
20001250:	3301      	adds	r3, #1
20001252:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    for(int i = 0; i < s->height; i++){
20001254:	2300      	movs	r3, #0
20001256:	623b      	str	r3, [r7, #32]
20001258:	e045      	b.n	200012e6 <draw_sprite+0xc6>
        for(int j = 0; j < width_in_bytes; j++){
2000125a:	2300      	movs	r3, #0
2000125c:	61fb      	str	r3, [r7, #28]
2000125e:	e03b      	b.n	200012d8 <draw_sprite+0xb8>
            unsigned char byte = s->data[i * width_in_bytes + j];
20001260:	68fb      	ldr	r3, [r7, #12]
20001262:	685b      	ldr	r3, [r3, #4]
20001264:	6a3a      	ldr	r2, [r7, #32]
20001266:	6a79      	ldr	r1, [r7, #36]	; 0x24
20001268:	4351      	muls	r1, r2
2000126a:	69fa      	ldr	r2, [r7, #28]
2000126c:	188a      	adds	r2, r1, r2
2000126e:	189a      	adds	r2, r3, r2
20001270:	2317      	movs	r3, #23
20001272:	18fb      	adds	r3, r7, r3
20001274:	7812      	ldrb	r2, [r2, #0]
20001276:	701a      	strb	r2, [r3, #0]
            for(int k = 0; k < 8; k++){
20001278:	2300      	movs	r3, #0
2000127a:	61bb      	str	r3, [r7, #24]
2000127c:	e026      	b.n	200012cc <draw_sprite+0xac>
                if(byte & (1 << k)){
2000127e:	2317      	movs	r3, #23
20001280:	18fb      	adds	r3, r7, r3
20001282:	781a      	ldrb	r2, [r3, #0]
20001284:	69bb      	ldr	r3, [r7, #24]
20001286:	411a      	asrs	r2, r3
20001288:	0013      	movs	r3, r2
2000128a:	2201      	movs	r2, #1
2000128c:	4013      	ands	r3, r2
2000128e:	d01a      	beq.n	200012c6 <draw_sprite+0xa6>
                    pixel(8 * j + k + x + 1, i + y + 1, set);
20001290:	69fb      	ldr	r3, [r7, #28]
20001292:	b2db      	uxtb	r3, r3
20001294:	00db      	lsls	r3, r3, #3
20001296:	b2da      	uxtb	r2, r3
20001298:	69bb      	ldr	r3, [r7, #24]
2000129a:	b2db      	uxtb	r3, r3
2000129c:	18d3      	adds	r3, r2, r3
2000129e:	b2da      	uxtb	r2, r3
200012a0:	68bb      	ldr	r3, [r7, #8]
200012a2:	b2db      	uxtb	r3, r3
200012a4:	18d3      	adds	r3, r2, r3
200012a6:	b2db      	uxtb	r3, r3
200012a8:	3301      	adds	r3, #1
200012aa:	b2d8      	uxtb	r0, r3
200012ac:	6a3b      	ldr	r3, [r7, #32]
200012ae:	b2da      	uxtb	r2, r3
200012b0:	687b      	ldr	r3, [r7, #4]
200012b2:	b2db      	uxtb	r3, r3
200012b4:	18d3      	adds	r3, r2, r3
200012b6:	b2db      	uxtb	r3, r3
200012b8:	3301      	adds	r3, #1
200012ba:	b2db      	uxtb	r3, r3
200012bc:	683a      	ldr	r2, [r7, #0]
200012be:	b2d2      	uxtb	r2, r2
200012c0:	0019      	movs	r1, r3
200012c2:	f7ff fb9e 	bl	20000a02 <pixel>
            for(int k = 0; k < 8; k++){
200012c6:	69bb      	ldr	r3, [r7, #24]
200012c8:	3301      	adds	r3, #1
200012ca:	61bb      	str	r3, [r7, #24]
200012cc:	69bb      	ldr	r3, [r7, #24]
200012ce:	2b07      	cmp	r3, #7
200012d0:	ddd5      	ble.n	2000127e <draw_sprite+0x5e>
        for(int j = 0; j < width_in_bytes; j++){
200012d2:	69fb      	ldr	r3, [r7, #28]
200012d4:	3301      	adds	r3, #1
200012d6:	61fb      	str	r3, [r7, #28]
200012d8:	69fa      	ldr	r2, [r7, #28]
200012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200012dc:	429a      	cmp	r2, r3
200012de:	dbbf      	blt.n	20001260 <draw_sprite+0x40>
    for(int i = 0; i < s->height; i++){
200012e0:	6a3b      	ldr	r3, [r7, #32]
200012e2:	3301      	adds	r3, #1
200012e4:	623b      	str	r3, [r7, #32]
200012e6:	68fb      	ldr	r3, [r7, #12]
200012e8:	785b      	ldrb	r3, [r3, #1]
200012ea:	001a      	movs	r2, r3
200012ec:	6a3b      	ldr	r3, [r7, #32]
200012ee:	429a      	cmp	r2, r3
200012f0:	dcb3      	bgt.n	2000125a <draw_sprite+0x3a>
                }
            }
        }
    }
}
200012f2:	46c0      	nop			; (mov r8, r8)
200012f4:	46bd      	mov	sp, r7
200012f6:	b00a      	add	sp, #40	; 0x28
200012f8:	bd80      	pop	{r7, pc}

200012fa <draw_sprite_object>:

void draw_sprite_object(PSPRITE_OBJECT p){
200012fa:	b580      	push	{r7, lr}
200012fc:	b082      	sub	sp, #8
200012fe:	af00      	add	r7, sp, #0
20001300:	6078      	str	r0, [r7, #4]
    draw_sprite(p->sprt, p->pos_x, p->pos_y, 1);
20001302:	687b      	ldr	r3, [r7, #4]
20001304:	6818      	ldr	r0, [r3, #0]
20001306:	687b      	ldr	r3, [r7, #4]
20001308:	68d9      	ldr	r1, [r3, #12]
2000130a:	687b      	ldr	r3, [r7, #4]
2000130c:	691a      	ldr	r2, [r3, #16]
2000130e:	2301      	movs	r3, #1
20001310:	f7ff ff86 	bl	20001220 <draw_sprite>
}
20001314:	46c0      	nop			; (mov r8, r8)
20001316:	46bd      	mov	sp, r7
20001318:	b002      	add	sp, #8
2000131a:	bd80      	pop	{r7, pc}

2000131c <clear_sprite_object>:

void clear_sprite_object(PSPRITE_OBJECT p){
2000131c:	b580      	push	{r7, lr}
2000131e:	b082      	sub	sp, #8
20001320:	af00      	add	r7, sp, #0
20001322:	6078      	str	r0, [r7, #4]
    draw_sprite(p->sprt, p->pos_x, p->pos_y, 0);
20001324:	687b      	ldr	r3, [r7, #4]
20001326:	6818      	ldr	r0, [r3, #0]
20001328:	687b      	ldr	r3, [r7, #4]
2000132a:	68d9      	ldr	r1, [r3, #12]
2000132c:	687b      	ldr	r3, [r7, #4]
2000132e:	691a      	ldr	r2, [r3, #16]
20001330:	2300      	movs	r3, #0
20001332:	f7ff ff75 	bl	20001220 <draw_sprite>
}
20001336:	46c0      	nop			; (mov r8, r8)
20001338:	46bd      	mov	sp, r7
2000133a:	b002      	add	sp, #8
2000133c:	bd80      	pop	{r7, pc}

2000133e <move_sprite_object>:

void move_sprite_object(PSPRITE_OBJECT p){
2000133e:	b580      	push	{r7, lr}
20001340:	b082      	sub	sp, #8
20001342:	af00      	add	r7, sp, #0
20001344:	6078      	str	r0, [r7, #4]
    p->clear(p);
20001346:	687b      	ldr	r3, [r7, #4]
20001348:	699b      	ldr	r3, [r3, #24]
2000134a:	687a      	ldr	r2, [r7, #4]
2000134c:	0010      	movs	r0, r2
2000134e:	4798      	blx	r3
    p->pos_x += p->dir_x;
20001350:	687b      	ldr	r3, [r7, #4]
20001352:	68da      	ldr	r2, [r3, #12]
20001354:	687b      	ldr	r3, [r7, #4]
20001356:	685b      	ldr	r3, [r3, #4]
20001358:	18d2      	adds	r2, r2, r3
2000135a:	687b      	ldr	r3, [r7, #4]
2000135c:	60da      	str	r2, [r3, #12]
    p->pos_y += p->dir_y;
2000135e:	687b      	ldr	r3, [r7, #4]
20001360:	691a      	ldr	r2, [r3, #16]
20001362:	687b      	ldr	r3, [r7, #4]
20001364:	689b      	ldr	r3, [r3, #8]
20001366:	18d2      	adds	r2, r2, r3
20001368:	687b      	ldr	r3, [r7, #4]
2000136a:	611a      	str	r2, [r3, #16]
    
    if(p->pos_x < 0){
2000136c:	687b      	ldr	r3, [r7, #4]
2000136e:	68db      	ldr	r3, [r3, #12]
20001370:	2b00      	cmp	r3, #0
20001372:	da05      	bge.n	20001380 <move_sprite_object+0x42>
        p->pos_x = 0;
20001374:	687b      	ldr	r3, [r7, #4]
20001376:	2200      	movs	r2, #0
20001378:	60da      	str	r2, [r3, #12]
        p->dir_x = 0;
2000137a:	687b      	ldr	r3, [r7, #4]
2000137c:	2200      	movs	r2, #0
2000137e:	605a      	str	r2, [r3, #4]
    }
    if(p->pos_x + p->sprt->width > 127){
20001380:	687b      	ldr	r3, [r7, #4]
20001382:	68da      	ldr	r2, [r3, #12]
20001384:	687b      	ldr	r3, [r7, #4]
20001386:	681b      	ldr	r3, [r3, #0]
20001388:	781b      	ldrb	r3, [r3, #0]
2000138a:	18d3      	adds	r3, r2, r3
2000138c:	2b7f      	cmp	r3, #127	; 0x7f
2000138e:	dd07      	ble.n	200013a0 <move_sprite_object+0x62>
        p->pos_x = 127 - p->sprt->width;
20001390:	687b      	ldr	r3, [r7, #4]
20001392:	681b      	ldr	r3, [r3, #0]
20001394:	781b      	ldrb	r3, [r3, #0]
20001396:	001a      	movs	r2, r3
20001398:	237f      	movs	r3, #127	; 0x7f
2000139a:	1a9a      	subs	r2, r3, r2
2000139c:	687b      	ldr	r3, [r7, #4]
2000139e:	60da      	str	r2, [r3, #12]
    }
    
    if(p->pos_y < 0){
200013a0:	687b      	ldr	r3, [r7, #4]
200013a2:	691b      	ldr	r3, [r3, #16]
200013a4:	2b00      	cmp	r3, #0
200013a6:	da05      	bge.n	200013b4 <move_sprite_object+0x76>
        p->pos_y = 0;
200013a8:	687b      	ldr	r3, [r7, #4]
200013aa:	2200      	movs	r2, #0
200013ac:	611a      	str	r2, [r3, #16]
        p->dir_y = 0;
200013ae:	687b      	ldr	r3, [r7, #4]
200013b0:	2200      	movs	r2, #0
200013b2:	609a      	str	r2, [r3, #8]
    }
    if(p->pos_y + p->sprt->height > 63){
200013b4:	687b      	ldr	r3, [r7, #4]
200013b6:	691a      	ldr	r2, [r3, #16]
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	681b      	ldr	r3, [r3, #0]
200013bc:	785b      	ldrb	r3, [r3, #1]
200013be:	18d3      	adds	r3, r2, r3
200013c0:	2b3f      	cmp	r3, #63	; 0x3f
200013c2:	dd07      	ble.n	200013d4 <move_sprite_object+0x96>
        p->pos_y = 63 -p->sprt->height;
200013c4:	687b      	ldr	r3, [r7, #4]
200013c6:	681b      	ldr	r3, [r3, #0]
200013c8:	785b      	ldrb	r3, [r3, #1]
200013ca:	001a      	movs	r2, r3
200013cc:	233f      	movs	r3, #63	; 0x3f
200013ce:	1a9a      	subs	r2, r3, r2
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	611a      	str	r2, [r3, #16]
    }
}
200013d4:	46c0      	nop			; (mov r8, r8)
200013d6:	46bd      	mov	sp, r7
200013d8:	b002      	add	sp, #8
200013da:	bd80      	pop	{r7, pc}

200013dc <set_sprite_object_speed>:

void set_sprite_object_speed(PSPRITE_OBJECT p, int x, int y){
200013dc:	b580      	push	{r7, lr}
200013de:	b084      	sub	sp, #16
200013e0:	af00      	add	r7, sp, #0
200013e2:	60f8      	str	r0, [r7, #12]
200013e4:	60b9      	str	r1, [r7, #8]
200013e6:	607a      	str	r2, [r7, #4]
    p->dir_x = x;
200013e8:	68fb      	ldr	r3, [r7, #12]
200013ea:	68ba      	ldr	r2, [r7, #8]
200013ec:	605a      	str	r2, [r3, #4]
    p->dir_y = y;
200013ee:	68fb      	ldr	r3, [r7, #12]
200013f0:	687a      	ldr	r2, [r7, #4]
200013f2:	609a      	str	r2, [r3, #8]
}
200013f4:	46c0      	nop			; (mov r8, r8)
200013f6:	46bd      	mov	sp, r7
200013f8:	b004      	add	sp, #16
200013fa:	bd80      	pop	{r7, pc}

200013fc <dummy_function1>:

void dummy_function1(PSPRITE_OBJECT p){
200013fc:	b580      	push	{r7, lr}
200013fe:	b082      	sub	sp, #8
20001400:	af00      	add	r7, sp, #0
20001402:	6078      	str	r0, [r7, #4]
    return;
20001404:	46c0      	nop			; (mov r8, r8)
}
20001406:	46bd      	mov	sp, r7
20001408:	b002      	add	sp, #8
2000140a:	bd80      	pop	{r7, pc}

2000140c <dummy_function2>:

void dummy_function2(PSPRITE_OBJECT p, int x, int y){
2000140c:	b580      	push	{r7, lr}
2000140e:	b084      	sub	sp, #16
20001410:	af00      	add	r7, sp, #0
20001412:	60f8      	str	r0, [r7, #12]
20001414:	60b9      	str	r1, [r7, #8]
20001416:	607a      	str	r2, [r7, #4]
    return;
20001418:	46c0      	nop			; (mov r8, r8)
}
2000141a:	46bd      	mov	sp, r7
2000141c:	b004      	add	sp, #16
2000141e:	bd80      	pop	{r7, pc}

20001420 <init_spoopy>:

PSPRITE_OBJECT init_spoopy(void){
20001420:	b580      	push	{r7, lr}
20001422:	b08c      	sub	sp, #48	; 0x30
20001424:	af00      	add	r7, sp, #0
    SPRITE spoopy_sprite = {
20001426:	2324      	movs	r3, #36	; 0x24
20001428:	18fb      	adds	r3, r7, r3
2000142a:	2200      	movs	r2, #0
2000142c:	701a      	strb	r2, [r3, #0]
2000142e:	2324      	movs	r3, #36	; 0x24
20001430:	18fb      	adds	r3, r7, r3
20001432:	2200      	movs	r2, #0
20001434:	705a      	strb	r2, [r3, #1]
20001436:	2324      	movs	r3, #36	; 0x24
20001438:	18fb      	adds	r3, r7, r3
2000143a:	2200      	movs	r2, #0
2000143c:	605a      	str	r2, [r3, #4]
        0, // Init values, disregard these as these will be set later
        0,
        {0}
    };
    
    PSPRITE spoopy_sprite_pointer = &spoopy_sprite;
2000143e:	2324      	movs	r3, #36	; 0x24
20001440:	18fb      	adds	r3, r7, r3
20001442:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    // Load default sprite for Spoopy
    load_sprite(spoopy_sprite_pointer, spoop_bits, spoop_width, spoop_height);
20001444:	4913      	ldr	r1, [pc, #76]	; (20001494 <init_spoopy+0x74>)
20001446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001448:	2310      	movs	r3, #16
2000144a:	2210      	movs	r2, #16
2000144c:	f7ff fed2 	bl	200011f4 <load_sprite>
    
    // Initiate Spoopy
    SPRITE_OBJECT spoopy = {
20001450:	003b      	movs	r3, r7
20001452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001454:	601a      	str	r2, [r3, #0]
20001456:	003b      	movs	r3, r7
20001458:	2200      	movs	r2, #0
2000145a:	605a      	str	r2, [r3, #4]
2000145c:	003b      	movs	r3, r7
2000145e:	2200      	movs	r2, #0
20001460:	609a      	str	r2, [r3, #8]
20001462:	003b      	movs	r3, r7
20001464:	22fa      	movs	r2, #250	; 0xfa
20001466:	0052      	lsls	r2, r2, #1
20001468:	60da      	str	r2, [r3, #12]
2000146a:	003b      	movs	r3, r7
2000146c:	22fa      	movs	r2, #250	; 0xfa
2000146e:	0052      	lsls	r2, r2, #1
20001470:	611a      	str	r2, [r3, #16]
20001472:	003b      	movs	r3, r7
20001474:	4a08      	ldr	r2, [pc, #32]	; (20001498 <init_spoopy+0x78>)
20001476:	615a      	str	r2, [r3, #20]
20001478:	003b      	movs	r3, r7
2000147a:	4a08      	ldr	r2, [pc, #32]	; (2000149c <init_spoopy+0x7c>)
2000147c:	619a      	str	r2, [r3, #24]
2000147e:	003b      	movs	r3, r7
20001480:	4a07      	ldr	r2, [pc, #28]	; (200014a0 <init_spoopy+0x80>)
20001482:	61da      	str	r2, [r3, #28]
20001484:	003b      	movs	r3, r7
20001486:	4a07      	ldr	r2, [pc, #28]	; (200014a4 <init_spoopy+0x84>)
20001488:	621a      	str	r2, [r3, #32]
        clear_sprite_object,
        move_sprite_object,
        set_sprite_object_speed,
    };
    
    return &spoopy;
2000148a:	2300      	movs	r3, #0
}
2000148c:	0018      	movs	r0, r3
2000148e:	46bd      	mov	sp, r7
20001490:	b00c      	add	sp, #48	; 0x30
20001492:	bd80      	pop	{r7, pc}
20001494:	200016c8 	andcs	r1, r0, r8, asr #13
20001498:	200012fb 	strdcs	r1, [r0], -fp
2000149c:	2000131d 	andcs	r1, r0, sp, lsl r3
200014a0:	2000133f 	andcs	r1, r0, pc, lsr r3
200014a4:	200013dd 	ldrdcs	r1, [r0], -sp

200014a8 <init_wall>:

PSPRITE_OBJECT init_wall(void){
200014a8:	b580      	push	{r7, lr}
200014aa:	b08c      	sub	sp, #48	; 0x30
200014ac:	af00      	add	r7, sp, #0
    SPRITE wall_sprite = {
200014ae:	2324      	movs	r3, #36	; 0x24
200014b0:	18fb      	adds	r3, r7, r3
200014b2:	2200      	movs	r2, #0
200014b4:	701a      	strb	r2, [r3, #0]
200014b6:	2324      	movs	r3, #36	; 0x24
200014b8:	18fb      	adds	r3, r7, r3
200014ba:	2200      	movs	r2, #0
200014bc:	705a      	strb	r2, [r3, #1]
200014be:	2324      	movs	r3, #36	; 0x24
200014c0:	18fb      	adds	r3, r7, r3
200014c2:	2200      	movs	r2, #0
200014c4:	605a      	str	r2, [r3, #4]
        0,
        0,
        {0}
    };
    
    PSPRITE wall_sprite_pointer = &wall_sprite;
200014c6:	2324      	movs	r3, #36	; 0x24
200014c8:	18fb      	adds	r3, r7, r3
200014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    load_sprite(wall_sprite_pointer, wall_bits, wall_width, wall_height);
200014cc:	4913      	ldr	r1, [pc, #76]	; (2000151c <init_wall+0x74>)
200014ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200014d0:	2310      	movs	r3, #16
200014d2:	2210      	movs	r2, #16
200014d4:	f7ff fe8e 	bl	200011f4 <load_sprite>
    
    SPRITE_OBJECT wall = {
200014d8:	003b      	movs	r3, r7
200014da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200014dc:	601a      	str	r2, [r3, #0]
200014de:	003b      	movs	r3, r7
200014e0:	2200      	movs	r2, #0
200014e2:	605a      	str	r2, [r3, #4]
200014e4:	003b      	movs	r3, r7
200014e6:	2200      	movs	r2, #0
200014e8:	609a      	str	r2, [r3, #8]
200014ea:	003b      	movs	r3, r7
200014ec:	22fa      	movs	r2, #250	; 0xfa
200014ee:	0052      	lsls	r2, r2, #1
200014f0:	60da      	str	r2, [r3, #12]
200014f2:	003b      	movs	r3, r7
200014f4:	22fa      	movs	r2, #250	; 0xfa
200014f6:	0052      	lsls	r2, r2, #1
200014f8:	611a      	str	r2, [r3, #16]
200014fa:	003b      	movs	r3, r7
200014fc:	4a08      	ldr	r2, [pc, #32]	; (20001520 <init_wall+0x78>)
200014fe:	615a      	str	r2, [r3, #20]
20001500:	003b      	movs	r3, r7
20001502:	4a08      	ldr	r2, [pc, #32]	; (20001524 <init_wall+0x7c>)
20001504:	619a      	str	r2, [r3, #24]
20001506:	003b      	movs	r3, r7
20001508:	4a07      	ldr	r2, [pc, #28]	; (20001528 <init_wall+0x80>)
2000150a:	61da      	str	r2, [r3, #28]
2000150c:	003b      	movs	r3, r7
2000150e:	4a07      	ldr	r2, [pc, #28]	; (2000152c <init_wall+0x84>)
20001510:	621a      	str	r2, [r3, #32]
        clear_sprite_object,
        dummy_function1,
        dummy_function2
    };
    
    return &wall;
20001512:	2300      	movs	r3, #0
}
20001514:	0018      	movs	r0, r3
20001516:	46bd      	mov	sp, r7
20001518:	b00c      	add	sp, #48	; 0x30
2000151a:	bd80      	pop	{r7, pc}
2000151c:	200016e8 	andcs	r1, r0, r8, ror #13
20001520:	200012fb 	strdcs	r1, [r0], -fp
20001524:	2000131d 	andcs	r1, r0, sp, lsl r3
20001528:	200013fd 	strdcs	r1, [r0], -sp
2000152c:	2000140d 	andcs	r1, r0, sp, lsl #8

20001530 <init_exit>:

PSPRITE_OBJECT init_exit(void){
20001530:	b580      	push	{r7, lr}
20001532:	b08c      	sub	sp, #48	; 0x30
20001534:	af00      	add	r7, sp, #0
    SPRITE exit_sprite = {
20001536:	2324      	movs	r3, #36	; 0x24
20001538:	18fb      	adds	r3, r7, r3
2000153a:	2200      	movs	r2, #0
2000153c:	701a      	strb	r2, [r3, #0]
2000153e:	2324      	movs	r3, #36	; 0x24
20001540:	18fb      	adds	r3, r7, r3
20001542:	2200      	movs	r2, #0
20001544:	705a      	strb	r2, [r3, #1]
20001546:	2324      	movs	r3, #36	; 0x24
20001548:	18fb      	adds	r3, r7, r3
2000154a:	2200      	movs	r2, #0
2000154c:	605a      	str	r2, [r3, #4]
        0,
        0,
        {0}
    };
    
    PSPRITE exit_sprite_pointer = &exit_sprite;
2000154e:	2324      	movs	r3, #36	; 0x24
20001550:	18fb      	adds	r3, r7, r3
20001552:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    load_sprite(exit_sprite_pointer, exit_bits, exit_width, exit_height);
20001554:	4913      	ldr	r1, [pc, #76]	; (200015a4 <init_exit+0x74>)
20001556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001558:	2310      	movs	r3, #16
2000155a:	2210      	movs	r2, #16
2000155c:	f7ff fe4a 	bl	200011f4 <load_sprite>
    
    SPRITE_OBJECT exit = {
20001560:	003b      	movs	r3, r7
20001562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001564:	601a      	str	r2, [r3, #0]
20001566:	003b      	movs	r3, r7
20001568:	2200      	movs	r2, #0
2000156a:	605a      	str	r2, [r3, #4]
2000156c:	003b      	movs	r3, r7
2000156e:	2200      	movs	r2, #0
20001570:	609a      	str	r2, [r3, #8]
20001572:	003b      	movs	r3, r7
20001574:	22fa      	movs	r2, #250	; 0xfa
20001576:	0052      	lsls	r2, r2, #1
20001578:	60da      	str	r2, [r3, #12]
2000157a:	003b      	movs	r3, r7
2000157c:	22fa      	movs	r2, #250	; 0xfa
2000157e:	0052      	lsls	r2, r2, #1
20001580:	611a      	str	r2, [r3, #16]
20001582:	003b      	movs	r3, r7
20001584:	4a08      	ldr	r2, [pc, #32]	; (200015a8 <init_exit+0x78>)
20001586:	615a      	str	r2, [r3, #20]
20001588:	003b      	movs	r3, r7
2000158a:	4a08      	ldr	r2, [pc, #32]	; (200015ac <init_exit+0x7c>)
2000158c:	619a      	str	r2, [r3, #24]
2000158e:	003b      	movs	r3, r7
20001590:	4a07      	ldr	r2, [pc, #28]	; (200015b0 <init_exit+0x80>)
20001592:	61da      	str	r2, [r3, #28]
20001594:	003b      	movs	r3, r7
20001596:	4a07      	ldr	r2, [pc, #28]	; (200015b4 <init_exit+0x84>)
20001598:	621a      	str	r2, [r3, #32]
        clear_sprite_object,
        dummy_function1,
        dummy_function2
    };
    
    return &exit;
2000159a:	2300      	movs	r3, #0
}
2000159c:	0018      	movs	r0, r3
2000159e:	46bd      	mov	sp, r7
200015a0:	b00c      	add	sp, #48	; 0x30
200015a2:	bd80      	pop	{r7, pc}
200015a4:	20001708 	andcs	r1, r0, r8, lsl #14
200015a8:	200012fb 	strdcs	r1, [r0], -fp
200015ac:	2000131d 	andcs	r1, r0, sp, lsl r3
200015b0:	200013fd 	strdcs	r1, [r0], -sp
200015b4:	2000140d 	andcs	r1, r0, sp, lsl #8

200015b8 <update_sprite_object>:

void update_sprite_object(PSPRITE_OBJECT obj){
200015b8:	b580      	push	{r7, lr}
200015ba:	b082      	sub	sp, #8
200015bc:	af00      	add	r7, sp, #0
200015be:	6078      	str	r0, [r7, #4]
    obj->clear(obj);
200015c0:	687b      	ldr	r3, [r7, #4]
200015c2:	699b      	ldr	r3, [r3, #24]
200015c4:	687a      	ldr	r2, [r7, #4]
200015c6:	0010      	movs	r0, r2
200015c8:	4798      	blx	r3
    obj->move(obj);
200015ca:	687b      	ldr	r3, [r7, #4]
200015cc:	69db      	ldr	r3, [r3, #28]
200015ce:	687a      	ldr	r2, [r7, #4]
200015d0:	0010      	movs	r0, r2
200015d2:	4798      	blx	r3
    obj->draw(obj);
200015d4:	687b      	ldr	r3, [r7, #4]
200015d6:	695b      	ldr	r3, [r3, #20]
200015d8:	687a      	ldr	r2, [r7, #4]
200015da:	0010      	movs	r0, r2
200015dc:	4798      	blx	r3
}
200015de:	46c0      	nop			; (mov r8, r8)
200015e0:	46bd      	mov	sp, r7
200015e2:	b002      	add	sp, #8
200015e4:	bd80      	pop	{r7, pc}
200015e6:	46c0      	nop			; (mov r8, r8)

200015e8 <keyboard_val>:
	...

200015e9 <win_state>:
200015e9:	00000000 	andeq	r0, r0, r0

200015ec <delay_counter>:
200015ec:	00000000 	andeq	r0, r0, r0

200015f0 <mikro>:
200015f0:	00000000 	andeq	r0, r0, r0

200015f4 <map_grid>:
	...

20001614 <spoop_bits>:
20001614:	c2433c3c 	subgt	r3, r3, #60, 24	; 0x3c00
20001618:	d00fb99d 	mulle	pc, sp, r9	; <UNPREDICTABLE>
2000161c:	524a2e74 	subpl	r2, sl, #116, 28	; 0x740
20001620:	5e7a566a 	cdppl	6, 7, cr5, cr10, cr10, {3}
20001624:	1ff82184 	svcne	0x00f82184
20001628:	100c0c30 	andne	r0, ip, r0, lsr ip
2000162c:	38162412 	ldmdacc	r6, {r1, r4, sl, sp}
20001630:	1e7811c8 	rpwne<illegal precision>m	f1, f0, #0.0

20001634 <wall_bits>:
20001634:	a005ffff 	strdge	pc, [r5], -pc	; <UNPREDICTABLE>
20001638:	a815ffff 	ldmdage	r5, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
2000163c:	aa55b42d 	bge	2156e6f8 <exit_bits+0x156cff0>
20001640:	a245a5a5 	subge	sl, r5, #692060160	; 0x29400000
20001644:	a5a5a245 	strge	sl, [r5, #581]!	; 0x245
20001648:	b42daa55 	strtlt	sl, [sp], #-2645	; 0xfffff5ab
2000164c:	ffffa815 			; <UNDEFINED> instruction: 0xffffa815
20001650:	ffffa005 			; <UNDEFINED> instruction: 0xffffa005

20001654 <exit_bits>:
20001654:	8181ffff 	strdhi	pc, [r1, pc]
20001658:	a5a5bdbd 	strge	fp, [r5, #3517]!	; 0xdbd
2000165c:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
20001660:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
20001664:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
20001668:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
2000166c:	bdbda5a5 	cfldr32lt	mvfx10, [sp, #660]!	; 0x294
20001670:	ffff8181 			; <UNDEFINED> instruction: 0xffff8181

20001674 <start_message1>:
20001674:	6f6f7053 	svcvs	0x006f7053
20001678:	73277970 			; <UNDEFINED> instruction: 0x73277970
2000167c:	00000000 	andeq	r0, r0, r0

20001680 <start_message2>:
20001680:	617a6962 	cmnvs	sl, r2, ror #18
20001684:	20657272 	rsbcs	r7, r5, r2, ror r2
20001688:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
2000168c:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
20001690:	00000065 	andeq	r0, r0, r5, rrx

20001694 <victory_message1>:
20001694:	676e6f43 	strbvs	r6, [lr, -r3, asr #30]!
20001698:	75746172 	ldrbvc	r6, [r4, #-370]!	; 0xfffffe8e
2000169c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
200016a0:	21736e6f 	cmncs	r3, pc, ror #28
200016a4:	00000000 	andeq	r0, r0, r0

200016a8 <victory_message2>:
200016a8:	20756f59 	rsbscs	r6, r5, r9, asr pc
200016ac:	216e6977 	smccs	59031	; 0xe697
200016b0:	00000000 	andeq	r0, r0, r0

200016b4 <systick_flag>:
200016b4:	00000001 	andeq	r0, r0, r1

200016b8 <key>:
200016b8:	0a030201 	beq	200c1ec4 <exit_bits+0xc07bc>
200016bc:	0b060504 	bleq	20182ad4 <exit_bits+0x1813cc>
200016c0:	0c090807 	stceq	8, cr0, [r9], {7}
200016c4:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001694 <victory_message1>

200016c8 <spoop_bits>:
200016c8:	c2433c3c 	subgt	r3, r3, #60, 24	; 0x3c00
200016cc:	d00fb99d 	mulle	pc, sp, r9	; <UNPREDICTABLE>
200016d0:	524a2e74 	subpl	r2, sl, #116, 28	; 0x740
200016d4:	5e7a566a 	cdppl	6, 7, cr5, cr10, cr10, {3}
200016d8:	1ff82184 	svcne	0x00f82184
200016dc:	100c0c30 	andne	r0, ip, r0, lsr ip
200016e0:	38162412 	ldmdacc	r6, {r1, r4, sl, sp}
200016e4:	1e7811c8 	rpwne<illegal precision>m	f1, f0, #0.0

200016e8 <wall_bits>:
200016e8:	a005ffff 	strdge	pc, [r5], -pc	; <UNPREDICTABLE>
200016ec:	a815ffff 	ldmdage	r5, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
200016f0:	aa55b42d 	bge	2156e7ac <exit_bits+0x156d0a4>
200016f4:	a245a5a5 	subge	sl, r5, #692060160	; 0x29400000
200016f8:	a5a5a245 	strge	sl, [r5, #581]!	; 0x245
200016fc:	b42daa55 	strtlt	sl, [sp], #-2645	; 0xfffff5ab
20001700:	ffffa815 			; <UNDEFINED> instruction: 0xffffa815
20001704:	ffffa005 			; <UNDEFINED> instruction: 0xffffa005

20001708 <exit_bits>:
20001708:	8181ffff 	strdhi	pc, [r1, pc]
2000170c:	a5a5bdbd 	strge	fp, [r5, #3517]!	; 0xdbd
20001710:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
20001714:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
20001718:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
2000171c:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
20001720:	bdbda5a5 	cfldr32lt	mvfx10, [sp, #660]!	; 0x294
20001724:	ffff8181 			; <UNDEFINED> instruction: 0xffff8181
20001728:	00000001 	andeq	r0, r0, r1
2000172c:	00000001 	andeq	r0, r0, r1
20001730:	00000001 	andeq	r0, r0, r1
20001734:	00000003 	andeq	r0, r0, r3
20001738:	00000003 	andeq	r0, r0, r3
2000173c:	00000003 	andeq	r0, r0, r3
20001740:	00000005 	andeq	r0, r0, r5
20001744:	00000005 	andeq	r0, r0, r5
20001748:	00000005 	andeq	r0, r0, r5
2000174c:	00000006 	andeq	r0, r0, r6
20001750:	00000000 	andeq	r0, r0, r0
20001754:	00000001 	andeq	r0, r0, r1
20001758:	00000002 	andeq	r0, r0, r2
2000175c:	00000003 	andeq	r0, r0, r3
20001760:	00000002 	andeq	r0, r0, r2
20001764:	00000001 	andeq	r0, r0, r1
20001768:	00000000 	andeq	r0, r0, r0
2000176c:	00000001 	andeq	r0, r0, r1
20001770:	00000002 	andeq	r0, r0, r2
20001774:	00000002 	andeq	r0, r0, r2
20001778:	20001166 	andcs	r1, r0, r6, ror #2
2000177c:	2000116e 	andcs	r1, r0, lr, ror #2
20001780:	20001176 	andcs	r1, r0, r6, ror r1
20001784:	2000117e 	andcs	r1, r0, lr, ror r1
20001788:	20001186 	andcs	r1, r0, r6, lsl #3

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000007be 			; <UNDEFINED> instruction: 0x000007be
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000071 	andeq	r0, r0, r1, ror r0
      10:	0002d50c 	andeq	sp, r2, ip, lsl #10
	...
      20:	02020200 	andeq	r0, r2, #0, 4
      24:	0000420c 	andeq	r4, r0, ip, lsl #4
      28:	00000300 	andeq	r0, r0, r0, lsl #6
      2c:	0d020000 	stceq	0, cr0, [r2, #-0]
      30:	00000042 	andeq	r0, r0, r2, asr #32
      34:	036b0300 	cmneq	fp, #0, 6
      38:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
      3c:	00000042 	andeq	r0, r0, r2, asr #32
      40:	01040001 	tsteq	r4, r1
      44:	00022408 	andeq	r2, r2, r8, lsl #8
      48:	02040500 	andeq	r0, r4, #0, 10
      4c:	0000620a 	andeq	r6, r0, sl, lsl #4
      50:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
      54:	0b020072 	bleq	80224 <startup-0x1ff7fddc>
      58:	00000062 	andeq	r0, r0, r2, rrx
      5c:	00002107 	andeq	r2, r0, r7, lsl #2
      60:	04040000 	streq	r0, [r4], #-0
      64:	00033f07 	andeq	r3, r3, r7, lsl #30
      68:	02020200 	andeq	r0, r2, #0, 4
      6c:	00008a13 	andeq	r8, r0, r3, lsl sl
      70:	042c0300 	strteq	r0, [ip], #-768	; 0xfffffd00
      74:	14020000 	strne	r0, [r2], #-0
      78:	00000042 	andeq	r0, r0, r2, asr #32
      7c:	00690300 	rsbeq	r0, r9, r0, lsl #6
      80:	15020000 	strne	r0, [r2, #-0]
      84:	00000042 	andeq	r0, r0, r2, asr #32
      88:	04050001 	streq	r0, [r5], #-1
      8c:	00a31102 	adceq	r1, r3, r2, lsl #2
      90:	6f060000 	svcvs	0x00060000
      94:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
      98:	00006212 	andeq	r6, r0, r2, lsl r2
      9c:	00690700 	rsbeq	r0, r9, r0, lsl #14
      a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      a4:	0000029c 	muleq	r0, ip, r2
      a8:	ec040218 	sfm	f0, 4, [r4], {24}
      ac:	03000000 	movweq	r0, #0
      b0:	000003cc 	andeq	r0, r0, ip, asr #7
      b4:	00620502 	rsbeq	r0, r2, r2, lsl #10
      b8:	03000000 	movweq	r0, #0
      bc:	00000151 	andeq	r0, r0, r1, asr r1
      c0:	00620602 	rsbeq	r0, r2, r2, lsl #12
      c4:	03040000 	movweq	r0, #16384	; 0x4000
      c8:	000001cf 	andeq	r0, r0, pc, asr #3
      cc:	00620702 	rsbeq	r0, r2, r2, lsl #14
      d0:	03080000 	movweq	r0, #32768	; 0x8000
      d4:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
      d8:	00620802 	rsbeq	r0, r2, r2, lsl #16
      dc:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
      e0:	00000049 	andeq	r0, r0, r9, asr #32
      e4:	008a0910 	addeq	r0, sl, r0, lsl r9
      e8:	00140000 	andseq	r0, r4, r0
      ec:	00034c0a 	andeq	r4, r3, sl, lsl #24
      f0:	a3180200 	tstge	r8, #0, 4
      f4:	02000000 	andeq	r0, r0, #0
      f8:	18070302 	stmdane	r7, {r1, r8, r9}
      fc:	03000001 	movweq	r0, #1
     100:	0000012a 	andeq	r0, r0, sl, lsr #2
     104:	00420803 	subeq	r0, r2, r3, lsl #16
     108:	03000000 	movweq	r0, #0
     10c:	000001ea 	andeq	r0, r0, sl, ror #3
     110:	00420903 	subeq	r0, r2, r3, lsl #18
     114:	00010000 	andeq	r0, r1, r0
     118:	05030405 	streq	r0, [r3, #-1029]	; 0xfffffbfb
     11c:	00000131 	andeq	r0, r0, r1, lsr r1
     120:	0002ce0b 	andeq	ip, r2, fp, lsl #28
     124:	62060300 	andvs	r0, r6, #0, 6
     128:	07000000 	streq	r0, [r0, -r0]
     12c:	000000f7 	strdeq	r0, [r0], -r7
     130:	03040200 	movweq	r0, #16896	; 0x4200
     134:	0001520e 	andeq	r5, r1, lr, lsl #4
     138:	00070300 	andeq	r0, r7, r0, lsl #6
     13c:	0f030000 	svceq	0x00030000
     140:	00000152 	andeq	r0, r0, r2, asr r1
     144:	03d20300 	bicseq	r0, r2, #0, 6
     148:	10030000 	andne	r0, r3, r0
     14c:	00000042 	andeq	r0, r0, r2, asr #32
     150:	02040002 	andeq	r0, r4, #2
     154:	00033907 	andeq	r3, r3, r7, lsl #18
     158:	03040500 	movweq	r0, #17664	; 0x4500
     15c:	0001720c 	andeq	r7, r1, ip, lsl #4
     160:	6d700600 	ldclvs	6, cr0, [r0, #-0]
     164:	0d030063 	stceq	0, cr0, [r3, #-396]	; 0xfffffe74
     168:	00000062 	andeq	r0, r0, r2, rrx
     16c:	00013107 	andeq	r3, r1, r7, lsl #2
     170:	02020000 	andeq	r0, r2, #0
     174:	01931803 	orrseq	r1, r3, r3, lsl #16
     178:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
     17c:	03000003 	movweq	r0, #3
     180:	00004219 	andeq	r4, r0, r9, lsl r2
     184:	57030000 	strpl	r0, [r3, -r0]
     188:	03000003 	movweq	r0, #3
     18c:	0000421a 	andeq	r4, r0, sl, lsl r2
     190:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     194:	ac160304 	ldcge	3, cr0, [r6], {4}
     198:	0b000001 	bleq	1a4 <startup-0x1ffffe5c>
     19c:	0000003f 	andeq	r0, r0, pc, lsr r0
     1a0:	00621703 	rsbeq	r1, r2, r3, lsl #14
     1a4:	72070000 	andvc	r0, r7, #0
     1a8:	00000001 	andeq	r0, r0, r1
     1ac:	1f030202 	svcne	0x00030202
     1b0:	000001cd 	andeq	r0, r0, sp, asr #3
     1b4:	00001303 	andeq	r1, r0, r3, lsl #6
     1b8:	42200300 	eormi	r0, r0, #0, 6
     1bc:	00000000 	andeq	r0, r0, r0
     1c0:	0003a703 	andeq	sl, r3, r3, lsl #14
     1c4:	42210300 	eormi	r0, r1, #0, 6
     1c8:	01000000 	mrseq	r0, (UNDEF: 0)
     1cc:	03040500 	movweq	r0, #17664	; 0x4500
     1d0:	0001e61d 	andeq	lr, r1, sp, lsl r6
     1d4:	00470b00 	subeq	r0, r7, r0, lsl #22
     1d8:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
     1dc:	00000062 	andeq	r0, r0, r2, rrx
     1e0:	0001ac07 	andeq	sl, r1, r7, lsl #24
     1e4:	02020000 	andeq	r0, r2, #0
     1e8:	02072603 	andeq	r2, r7, #3145728	; 0x300000
     1ec:	5f030000 	svcpl	0x00030000
     1f0:	03000001 	movweq	r0, #1
     1f4:	00004227 	andeq	r4, r0, r7, lsr #4
     1f8:	c2030000 	andgt	r0, r3, #0
     1fc:	03000002 	movweq	r0, #2
     200:	00004228 	andeq	r4, r0, r8, lsr #4
     204:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     208:	20240304 	eorcs	r0, r4, r4, lsl #6
     20c:	0b000002 	bleq	21c <startup-0x1ffffde4>
     210:	0000004f 	andeq	r0, r0, pc, asr #32
     214:	00622503 	rsbeq	r2, r2, r3, lsl #10
     218:	e6070000 	str	r0, [r7], -r0
     21c:	00000001 	andeq	r0, r0, r1
     220:	2d030202 	sfmcs	f0, 4, [r3, #-8]
     224:	00000241 	andeq	r0, r0, r1, asr #4
     228:	00027f03 	andeq	r7, r2, r3, lsl #30
     22c:	422e0300 	eormi	r0, lr, #0, 6
     230:	00000000 	andeq	r0, r0, r0
     234:	0003f603 	andeq	pc, r3, r3, lsl #12
     238:	422f0300 	eormi	r0, pc, #0, 6
     23c:	01000000 	mrseq	r0, (UNDEF: 0)
     240:	03040500 	movweq	r0, #17664	; 0x4500
     244:	00025a2b 	andeq	r5, r2, fp, lsr #20
     248:	00570b00 	subseq	r0, r7, r0, lsl #22
     24c:	2c030000 	stccs	0, cr0, [r3], {-0}
     250:	00000062 	andeq	r0, r0, r2, rrx
     254:	00022007 	andeq	r2, r2, r7
     258:	10020000 	andne	r0, r2, r0
     25c:	027b1503 	rsbseq	r1, fp, #12582912	; 0xc00000
     260:	93090000 	movwls	r0, #36864	; 0x9000
     264:	00000001 	andeq	r0, r0, r1
     268:	0001cd09 	andeq	ip, r1, r9, lsl #26
     26c:	07090400 	streq	r0, [r9, -r0, lsl #8]
     270:	08000002 	stmdaeq	r0, {r1}
     274:	00024109 	andeq	r4, r2, r9, lsl #2
     278:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
     27c:	94130310 	ldrls	r0, [r3], #-784	; 0xfffffcf0
     280:	0b000002 	bleq	290 <startup-0x1ffffd70>
     284:	00000238 	andeq	r0, r0, r8, lsr r2
     288:	00621403 	rsbeq	r1, r2, r3, lsl #8
     28c:	5a070000 	bpl	1c0294 <startup-0x1fe3fd6c>
     290:	00000002 	andeq	r0, r0, r2
     294:	36030202 	strcc	r0, [r3], -r2, lsl #4
     298:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     29c:	00011c03 	andeq	r1, r1, r3, lsl #24
     2a0:	42370300 	eorsmi	r0, r7, #0, 6
     2a4:	00000000 	andeq	r0, r0, r0
     2a8:	00011203 	andeq	r1, r1, r3, lsl #4
     2ac:	42380300 	eorsmi	r0, r8, #0, 6
     2b0:	01000000 	mrseq	r0, (UNDEF: 0)
     2b4:	03040500 	movweq	r0, #17664	; 0x4500
     2b8:	0002ce34 	andeq	ip, r2, r4, lsr lr
     2bc:	02320b00 	eorseq	r0, r2, #0, 22
     2c0:	35030000 	strcc	r0, [r3, #-0]
     2c4:	00000062 	andeq	r0, r0, r2, rrx
     2c8:	00029407 	andeq	r9, r2, r7, lsl #8
     2cc:	63080000 	movwvs	r0, #32768	; 0x8000
     2d0:	1c000003 	stcne	0, cr0, [r0], {3}
     2d4:	02f30403 	rscseq	r0, r3, #50331648	; 0x3000000
     2d8:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
     2dc:	00000001 	andeq	r0, r0, r1
     2e0:	00015909 	andeq	r5, r1, r9, lsl #18
     2e4:	7b090400 	blvc	2412ec <startup-0x1fdbed14>
     2e8:	08000002 	stmdaeq	r0, {r1}
     2ec:	0002b509 	andeq	fp, r2, r9, lsl #10
     2f0:	0a001800 	beq	62f8 <startup-0x1fff9d08>
     2f4:	00000217 	andeq	r0, r0, r7, lsl r2
     2f8:	02ce3b03 	sbceq	r3, lr, #3072	; 0xc00
     2fc:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
     300:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     304:	03520404 	cmpeq	r2, #4, 8	; 0x4000000
     308:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
     30c:	0400726d 	streq	r7, [r0], #-621	; 0xfffffd93
     310:	00006205 	andeq	r6, r0, r5, lsl #4
     314:	650c0000 	strvs	r0, [ip, #-0]
     318:	0400726d 	streq	r7, [r0], #-621	; 0xfffffd93
     31c:	00006206 	andeq	r6, r0, r6, lsl #4
     320:	1f030400 	svcne	0x00030400
     324:	04000002 	streq	r0, [r0], #-2
     328:	00006207 	andeq	r6, r0, r7, lsl #4
     32c:	b9030800 	stmdblt	r3, {fp}
     330:	04000003 	streq	r0, [r0], #-3
     334:	00006208 	andeq	r6, r0, r8, lsl #4
     338:	33030c00 	movwcc	r0, #15360	; 0x3c00
     33c:	04000004 	streq	r0, [r0], #-4
     340:	00006209 	andeq	r6, r0, r9, lsl #4
     344:	700c1000 	andvc	r1, ip, r0
     348:	0a040072 	beq	100518 <startup-0x1feffae8>
     34c:	00000062 	andeq	r0, r0, r2, rrx
     350:	980a0014 	stmdals	sl, {r2, r4}
     354:	04000003 	streq	r0, [r0], #-3
     358:	0002fe0b 	andeq	pc, r2, fp, lsl #28
     35c:	05040d00 	streq	r0, [r4, #-3328]	; 0xfffff300
     360:	00746e69 	rsbseq	r6, r4, r9, ror #28
     364:	09070404 	stmdbeq	r7, {r2, sl}
     368:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     36c:	00000042 	andeq	r0, r0, r2, asr #32
     370:	0000037b 	andeq	r0, r0, fp, ror r3
     374:	0003640f 	andeq	r6, r3, pc, lsl #8
     378:	10001f00 	andne	r1, r0, r0, lsl #30
     37c:	0000028a 	andeq	r0, r0, sl, lsl #5
     380:	036b0305 	cmneq	fp, #335544320	; 0x14000000
     384:	03050000 	movweq	r0, #20480	; 0x5000
     388:	20001614 	andcs	r1, r0, r4, lsl r6
     38c:	00005f10 	andeq	r5, r0, r0, lsl pc
     390:	6b030600 	blvs	c1b98 <startup-0x1ff3e468>
     394:	05000003 	streq	r0, [r0, #-3]
     398:	00163403 	andseq	r3, r6, r3, lsl #8
     39c:	01341020 	teqeq	r4, r0, lsr #32
     3a0:	03070000 	movweq	r0, #28672	; 0x7000
     3a4:	0000036b 	andeq	r0, r0, fp, ror #6
     3a8:	16540305 	ldrbne	r0, [r4], -r5, lsl #6
     3ac:	fd082000 	stc2	0, cr2, [r8, #-0]
     3b0:	08000001 	stmdaeq	r0, {r0}
     3b4:	03df0908 	bicseq	r0, pc, #8, 18	; 0x20000
     3b8:	8a030000 	bhi	c03c0 <startup-0x1ff3fc40>
     3bc:	08000001 	stmdaeq	r0, {r0}
     3c0:	0000420a 	andeq	r4, r0, sl, lsl #4
     3c4:	95030000 	strls	r0, [r3, #-0]
     3c8:	08000002 	stmdaeq	r0, {r1}
     3cc:	0000420b 	andeq	r4, r0, fp, lsl #4
     3d0:	08030100 	stmdaeq	r3, {r8}
     3d4:	08000006 	stmdaeq	r0, {r1, r2}
     3d8:	0003df0c 	andeq	sp, r3, ip, lsl #30
     3dc:	11000400 	tstne	r0, r0, lsl #8
     3e0:	00004204 	andeq	r4, r0, r4, lsl #4
     3e4:	01f50a00 	mvnseq	r0, r0, lsl #20
     3e8:	0d080000 	stceq	0, cr0, [r8, #-0]
     3ec:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3f0:	03ae0411 			; <UNDEFINED> instruction: 0x03ae0411
     3f4:	73080000 	movwvc	r0, #32768	; 0x8000
     3f8:	24000003 	strcs	r0, [r0], #-3
     3fc:	046f0f08 	strbteq	r0, [pc], #-3848	; 404 <startup-0x1ffffbfc>
     400:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
     404:	08000003 	stmdaeq	r0, {r0, r1}
     408:	0003e510 	andeq	lr, r3, r0, lsl r5
     40c:	20030000 	andcs	r0, r3, r0
     410:	08000004 	stmdaeq	r0, {r2}
     414:	00035d11 	andeq	r5, r3, r1, lsl sp
     418:	26030400 	strcs	r0, [r3], -r0, lsl #8
     41c:	08000004 	stmdaeq	r0, {r2}
     420:	00035d11 	andeq	r5, r3, r1, lsl sp
     424:	79030800 	stmdbvc	r3, {fp}
     428:	08000002 	stmdaeq	r0, {r1}
     42c:	00035d12 	andeq	r5, r3, r2, lsl sp
     430:	51030c00 	tstpl	r3, r0, lsl #24
     434:	08000003 	stmdaeq	r0, {r0, r1}
     438:	00035d12 	andeq	r5, r3, r2, lsl sp
     43c:	89031000 	stmdbhi	r3, {ip}
     440:	08000003 	stmdaeq	r0, {r0, r1}
     444:	00048013 	andeq	r8, r4, r3, lsl r0
     448:	52031400 	andpl	r1, r3, #0, 8
     44c:	08000006 	stmdaeq	r0, {r1, r2}
     450:	00048014 	andeq	r8, r4, r4, lsl r0
     454:	a3031800 	movwge	r1, #14336	; 0x3800
     458:	08000001 	stmdaeq	r0, {r0}
     45c:	00048015 	andeq	r8, r4, r5, lsl r0
     460:	8e031c00 	cdphi	12, 0, cr1, cr3, cr0, {0}
     464:	08000003 	stmdaeq	r0, {r0, r1}
     468:	00049b16 	andeq	r9, r4, r6, lsl fp
     46c:	12002000 	andne	r2, r0, #0
     470:	0000047a 	andeq	r0, r0, sl, ror r4
     474:	00047a13 	andeq	r7, r4, r3, lsl sl
     478:	04110000 	ldreq	r0, [r1], #-0
     47c:	000003f6 	strdeq	r0, [r0], -r6
     480:	046f0411 	strbteq	r0, [pc], #-1041	; 488 <startup-0x1ffffb78>
     484:	9b120000 	blls	48048c <startup-0x1fb7fb74>
     488:	13000004 	movwne	r0, #4
     48c:	0000047a 	andeq	r0, r0, sl, ror r4
     490:	00035d13 	andeq	r5, r3, r3, lsl sp
     494:	035d1300 	cmpeq	sp, #0, 6
     498:	11000000 	mrsne	r0, (UNDEF: 0)
     49c:	00048604 	andeq	r8, r4, r4, lsl #12
     4a0:	026a0a00 	rsbeq	r0, sl, #0, 20
     4a4:	17080000 	strne	r0, [r8, -r0]
     4a8:	0000047a 	andeq	r0, r0, sl, ror r4
     4ac:	00013e14 	andeq	r3, r1, r4, lsl lr
     4b0:	42230100 	eormi	r0, r3, #0, 2
     4b4:	05000000 	streq	r0, [r0, #-0]
     4b8:	0015e803 	andseq	lr, r5, r3, lsl #16
     4bc:	00420e20 	subeq	r0, r2, r0, lsr #28
     4c0:	04d30000 	ldrbeq	r0, [r3], #0
     4c4:	640f0000 	strvs	r0, [pc], #-0	; 4cc <startup-0x1ffffb34>
     4c8:	07000003 	streq	r0, [r0, -r3]
     4cc:	0003640f 	andeq	r6, r3, pc, lsl #8
     4d0:	14000300 	strne	r0, [r0], #-768	; 0xfffffd00
     4d4:	000003c3 	andeq	r0, r0, r3, asr #7
     4d8:	04bd2401 	ldrteq	r2, [sp], #1025	; 0x401
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	200015f4 	strdcs	r1, [r0], -r4
     4e4:	00016a14 	andeq	r6, r1, r4, lsl sl
     4e8:	42260100 	eormi	r0, r6, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	0015e903 	andseq	lr, r5, r3, lsl #18
     4f4:	00420e20 	subeq	r0, r2, r0, lsr #28
     4f8:	05050000 	streq	r0, [r5, #-0]
     4fc:	640f0000 	strvs	r0, [pc], #-0	; 504 <startup-0x1ffffafc>
     500:	08000003 	stmdaeq	r0, {r0, r1}
     504:	02a21400 	adceq	r1, r2, #0, 8
     508:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     50c:	000004f5 	strdeq	r0, [r0], -r5
     510:	16740305 	ldrbtne	r0, [r4], -r5, lsl #6
     514:	420e2000 	andmi	r2, lr, #0
     518:	26000000 	strcs	r0, [r0], -r0
     51c:	0f000005 	svceq	0x00000005
     520:	00000364 	andeq	r0, r0, r4, ror #6
     524:	74140011 	ldrvc	r0, [r4], #-17	; 0xffffffef
     528:	01000001 	tsteq	r0, r1
     52c:	00051629 	andeq	r1, r5, r9, lsr #12
     530:	80030500 	andhi	r0, r3, r0, lsl #10
     534:	0e200016 	miaeq	acc0, r6, r0
     538:	00000042 	andeq	r0, r0, r2, asr #32
     53c:	00000547 	andeq	r0, r0, r7, asr #10
     540:	0003640f 	andeq	r6, r3, pc, lsl #8
     544:	14001000 	strne	r1, [r0], #-0
     548:	00000328 	andeq	r0, r0, r8, lsr #6
     54c:	05372b01 	ldreq	r2, [r7, #-2817]!	; 0xfffff4ff
     550:	03050000 	movweq	r0, #20480	; 0x5000
     554:	20001694 	mulcs	r0, r4, r6
     558:	00023f14 	andeq	r3, r2, r4, lsl pc
     55c:	f52c0100 			; <UNDEFINED> instruction: 0xf52c0100
     560:	05000004 	streq	r0, [r0, #-4]
     564:	0016a803 	andseq	sl, r6, r3, lsl #16
     568:	039e1520 	orrseq	r1, lr, #32, 10	; 0x8000000
     56c:	c4010000 	strgt	r0, [r1], #-0
     570:	20000404 	andcs	r0, r0, r4, lsl #8
     574:	0000008c 	andeq	r0, r0, ip, lsl #1
     578:	059d9c01 	ldreq	r9, [sp, #3073]	; 0xc01
     57c:	05160000 	ldreq	r0, [r6, #-0]
     580:	01000002 	tsteq	r0, r2
     584:	00035dcd 	andeq	r5, r3, sp, asr #27
     588:	00058f00 	andeq	r8, r5, r0, lsl #30
     58c:	18001700 	stmdane	r0, {r8, r9, sl, ip}
     590:	000003db 	ldrdeq	r0, [r0], -fp
     594:	035dd001 	cmpeq	sp, #1
     598:	00170000 	andseq	r0, r7, r0
     59c:	03be1900 			; <UNDEFINED> instruction: 0x03be1900
     5a0:	a5010000 	strge	r0, [r1, #-0]
     5a4:	200002d4 	ldrdcs	r0, [r0], -r4
     5a8:	00000130 	andeq	r0, r0, r0, lsr r1
     5ac:	067c9c01 	ldrbteq	r9, [ip], -r1, lsl #24
     5b0:	011a0000 	tsteq	sl, r0
     5b4:	0100000a 	tsteq	r0, sl
     5b8:	0004a1a5 	andeq	sl, r4, r5, lsr #3
     5bc:	fc910300 	ldc2	3, cr0, [r1], {0}
     5c0:	098e1a7e 	stmibeq	lr, {r1, r2, r3, r4, r5, r6, r9, fp, ip}
     5c4:	a5010000 	strge	r0, [r1, #-0]
     5c8:	000004a1 	andeq	r0, r0, r1, lsr #9
     5cc:	7ef89103 	nrmvce	f1, f3
     5d0:	00014b1a 	andeq	r4, r1, sl, lsl fp
     5d4:	7ca50100 	stfvcs	f0, [r5]
     5d8:	03000006 	movweq	r0, #6
     5dc:	107ef491 			; <UNDEFINED> instruction: 0x107ef491
     5e0:	00000439 	andeq	r0, r0, r9, lsr r4
     5e4:	035dad01 	cmpeq	sp, #1, 26	; 0x40
     5e8:	91020000 	mrsls	r0, (UNDEF: 2)
     5ec:	04421060 	strbeq	r1, [r2], #-96	; 0xffffffa0
     5f0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     5f4:	0000035d 	andeq	r0, r0, sp, asr r3
     5f8:	105c9102 	subsne	r9, ip, r2, lsl #2
     5fc:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     600:	035db401 	cmpeq	sp, #16777216	; 0x1000000
     604:	91020000 	mrsls	r0, (UNDEF: 2)
     608:	01c11058 	biceq	r1, r1, r8, asr r0
     60c:	b5010000 	strlt	r0, [r1, #-0]
     610:	0000035d 	andeq	r0, r0, sp, asr r3
     614:	10549102 	subsne	r9, r4, r2, lsl #2
     618:	000001c8 	andeq	r0, r0, r8, asr #3
     61c:	0682bb01 	streq	fp, [r2], r1, lsl #22
     620:	91030000 	mrsls	r0, (UNDEF: 3)
     624:	83107fac 	tsthi	r0, #172, 30	; 0x2b0
     628:	01000001 	tsteq	r0, r1
     62c:	000682bc 			; <UNDEFINED> instruction: 0x000682bc
     630:	84910300 	ldrhi	r0, [r1], #768	; 0x300
     634:	02e01b7f 	rsceq	r1, r0, #130048	; 0x1fc00
     638:	00342000 	eorseq	r2, r4, r0
     63c:	06650000 	strbteq	r0, [r5], -r0
     640:	781c0000 	ldmdavc	ip, {}	; <UNPREDICTABLE>
     644:	5da60100 	stfpls	f0, [r6]
     648:	02000003 	andeq	r0, r0, #3
     64c:	e61d6c91 			; <UNDEFINED> instruction: 0xe61d6c91
     650:	22200002 	eorcs	r0, r0, #2
     654:	1c000000 	stcne	0, cr0, [r0], {-0}
     658:	a7010079 	smlsdxge	r1, r9, r0, r0
     65c:	0000035d 	andeq	r0, r0, sp, asr r3
     660:	00689102 	rsbeq	r9, r8, r2, lsl #2
     664:	03901d00 	orrseq	r1, r0, #0, 26
     668:	00602000 	rsbeq	r2, r0, r0
     66c:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
     670:	5dbd0100 	ldfpls	f0, [sp]
     674:	02000003 	andeq	r0, r0, #3
     678:	00006491 	muleq	r0, r1, r4
     67c:	04a10411 	strteq	r0, [r1], #1041	; 0x411
     680:	5d0e0000 	stcpl	0, cr0, [lr, #-0]
     684:	92000003 	andls	r0, r0, #3
     688:	0f000006 	svceq	0x00000006
     68c:	00000364 	andeq	r0, r0, r4, ror #6
     690:	a8150009 	ldmdage	r5, {r0, r3}
     694:	01000001 	tsteq	r0, r1
     698:	00025097 	muleq	r2, r7, r0
     69c:	00008420 	andeq	r8, r0, r0, lsr #8
     6a0:	e09c0100 	adds	r0, ip, r0, lsl #2
     6a4:	1a000006 	bne	6c4 <startup-0x1ffff93c>
     6a8:	00000250 	andeq	r0, r0, r0, asr r2
     6ac:	04a19701 	strteq	r9, [r1], #1793	; 0x701
     6b0:	91020000 	mrsls	r0, (UNDEF: 2)
     6b4:	02b1105c 	adcseq	r1, r1, #92	; 0x5c
     6b8:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
     6bc:	0000035d 	andeq	r0, r0, sp, asr r3
     6c0:	106c9102 	rsbne	r9, ip, r2, lsl #2
     6c4:	00000402 	andeq	r0, r0, r2, lsl #8
     6c8:	035d9901 	cmpeq	sp, #16384	; 0x4000
     6cc:	91020000 	mrsls	r0, (UNDEF: 2)
     6d0:	025f1068 	subseq	r1, pc, #104	; 0x68
     6d4:	9b010000 	blls	406dc <startup-0x1ffbf924>
     6d8:	0000035d 	andeq	r0, r0, sp, asr r3
     6dc:	00649102 	rsbeq	r9, r4, r2, lsl #2
     6e0:	00002415 	andeq	r2, r0, r5, lsl r4
     6e4:	048e0100 	streq	r0, [lr], #256	; 0x100
     6e8:	4c200002 	stcmi	0, cr0, [r0], #-8
     6ec:	01000000 	mrseq	r0, (UNDEF: 0)
     6f0:	00070d9c 	muleq	r7, ip, sp
     6f4:	02141d00 	andseq	r1, r4, #0, 26
     6f8:	00282000 	eoreq	r2, r8, r0
     6fc:	e5180000 	ldr	r0, [r8, #-0]
     700:	01000001 	tsteq	r0, r1
     704:	00035d90 	muleq	r3, r0, sp
     708:	00001700 	andeq	r1, r0, r0, lsl #14
     70c:	01251500 			; <UNDEFINED> instruction: 0x01251500
     710:	37010000 	strcc	r0, [r1, -r0]
     714:	20000010 	andcs	r0, r0, r0, lsl r0
     718:	000001f4 	strdeq	r0, [r0], -r4
     71c:	07a09c01 	streq	r9, [r0, r1, lsl #24]!
     720:	50100000 	andspl	r0, r0, r0
     724:	01000002 	tsteq	r0, r2
     728:	0004a160 	andeq	sl, r4, r0, ror #2
     72c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     730:	00041310 	andeq	r1, r4, r0, lsl r3
     734:	a1610100 	cmnge	r1, r0, lsl #2
     738:	02000004 	andeq	r0, r0, #4
     73c:	d7106891 			; <UNDEFINED> instruction: 0xd7106891
     740:	01000001 	tsteq	r0, r1
     744:	0007a062 	andeq	sl, r7, r2, rrx
     748:	e8910300 	ldm	r1, {r8, r9}
     74c:	0158167e 	cmpeq	r8, lr, ror r6
     750:	70010000 	andvc	r0, r1, r0
     754:	0000035d 	andeq	r0, r0, sp, asr r3
     758:	0000075e 	andeq	r0, r0, lr, asr r7
     75c:	90160017 	andsls	r0, r6, r7, lsl r0
     760:	01000001 	tsteq	r0, r1
     764:	00035d71 	andeq	r5, r3, r1, ror sp
     768:	00076f00 	andeq	r6, r7, r0, lsl #30
     76c:	1b001700 	blne	6374 <startup-0x1fff9c8c>
     770:	20000032 	andcs	r0, r0, r2, lsr r0
     774:	00000034 	andeq	r0, r0, r4, lsr r0
     778:	00000789 	andeq	r0, r0, r9, lsl #15
     77c:	0100691c 	tsteq	r0, ip, lsl r9
     780:	00035d63 	andeq	r5, r3, r3, ror #26
     784:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     788:	009e1d00 	addseq	r1, lr, r0, lsl #26
     78c:	00402000 	subeq	r2, r0, r0
     790:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
     794:	5d6c0100 	stfple	f0, [ip, #-0]
     798:	02000003 	andeq	r0, r0, #3
     79c:	00007091 	muleq	r0, r1, r0
     7a0:	0004a10e 	andeq	sl, r4, lr, lsl #2
     7a4:	0007b000 	andeq	fp, r7, r0
     7a8:	03640f00 	cmneq	r4, #0, 30
     7ac:	001f0000 	andseq	r0, pc, r0
     7b0:	0003ee1e 	andeq	lr, r3, lr, lsl lr
     7b4:	002e0100 	eoreq	r0, lr, r0, lsl #2
     7b8:	0c200000 	stceq	0, cr0, [r0], #-0
     7bc:	01000000 	mrseq	r0, (UNDEF: 0)
     7c0:	01e2009c 			; <UNDEFINED> instruction: 0x01e2009c
     7c4:	00040000 	andeq	r0, r4, r0
     7c8:	00000198 	muleq	r0, r8, r1
     7cc:	00710104 	rsbseq	r0, r1, r4, lsl #2
     7d0:	b10c0000 	mrslt	r0, (UNDEF: 12)
     7d4:	90000004 	andls	r0, r0, r4
     7d8:	78200004 	stmdavc	r0!, {r2}
     7dc:	95000001 	strls	r0, [r0, #-1]
     7e0:	02000001 	andeq	r0, r0, #1
     7e4:	02240801 	eoreq	r0, r4, #65536	; 0x10000
     7e8:	04020000 	streq	r0, [r2], #-0
     7ec:	00033f07 	andeq	r3, r3, r7, lsl #30
     7f0:	02040300 	andeq	r0, r4, #0, 6
     7f4:	00006807 	andeq	r6, r0, r7, lsl #16
     7f8:	05450400 	strbeq	r0, [r5, #-1024]	; 0xfffffc00
     7fc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     800:	00000021 	andeq	r0, r0, r1, lsr #32
     804:	05530400 	ldrbeq	r0, [r3, #-1024]	; 0xfffffc00
     808:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     80c:	00000021 	andeq	r0, r0, r1, lsr #32
     810:	05290401 	streq	r0, [r9, #-1025]!	; 0xfffffbff
     814:	0a020000 	beq	8081c <startup-0x1ff7f7e4>
     818:	00000021 	andeq	r0, r0, r1, lsr #32
     81c:	055d0402 	ldrbeq	r0, [sp, #-1026]	; 0xfffffbfe
     820:	0b020000 	bleq	80828 <startup-0x1ff7f7d8>
     824:	00000021 	andeq	r0, r0, r1, lsr #32
     828:	04050003 	streq	r0, [r5], #-3
     82c:	00810502 	addeq	r0, r1, r2, lsl #10
     830:	a0060000 	andge	r0, r6, r0
     834:	02000004 	andeq	r0, r0, #4
     838:	00002806 	andeq	r2, r0, r6, lsl #16
     83c:	002f0700 	eoreq	r0, pc, r0, lsl #14
     840:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     844:	00000567 	andeq	r0, r0, r7, ror #10
     848:	b8040210 	stmdalt	r4, {r4, r9}
     84c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     850:	00000068 	andeq	r0, r0, r8, rrx
     854:	050c0400 	streq	r0, [ip, #-1024]	; 0xfffffc00
     858:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     85c:	00000028 	andeq	r0, r0, r8, lsr #32
     860:	61760a04 	cmnvs	r6, r4, lsl #20
     864:	0f02006c 	svceq	0x0002006c
     868:	00000028 	andeq	r0, r0, r8, lsr #32
     86c:	059d0408 	ldreq	r0, [sp, #1032]	; 0x408
     870:	10020000 	andne	r0, r2, r0
     874:	00000028 	andeq	r0, r0, r8, lsr #32
     878:	7c0b000c 	stcvc	0, cr0, [fp], {12}
     87c:	02000004 	andeq	r0, r0, #4
     880:	00008111 	andeq	r8, r0, r1, lsl r1
     884:	05a30c00 	streq	r0, [r3, #3072]!	; 0xc00
     888:	03010000 	movweq	r0, #4096	; 0x1000
     88c:	000000db 	ldrdeq	r0, [r0], -fp
     890:	16b40305 	ldrtne	r0, [r4], r5, lsl #6
     894:	040d2000 	streq	r2, [sp], #-0
     898:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     89c:	00d40e00 	sbcseq	r0, r4, r0, lsl #28
     8a0:	370f0000 	strcc	r0, [pc, -r0]
     8a4:	01000005 	tsteq	r0, r5
     8a8:	0000db04 	andeq	sp, r0, r4, lsl #22
     8ac:	ec030500 	cfstr32	mvfx0, [r3], {-0}
     8b0:	0f200015 	svceq	0x00200015
     8b4:	0000058b 	andeq	r0, r0, fp, lsl #11
     8b8:	00d40501 	sbcseq	r0, r4, r1, lsl #10
     8bc:	03050000 	movweq	r0, #20480	; 0x5000
     8c0:	200015f0 	strdcs	r1, [r0], -r0
     8c4:	00045c10 	andeq	r5, r4, r0, lsl ip
     8c8:	bc3c0100 	ldflts	f0, [ip], #-0
     8cc:	4c200005 	stcmi	0, cr0, [r0], #-20	; 0xffffffec
     8d0:	01000000 	mrseq	r0, (UNDEF: 0)
     8d4:	0457119c 	ldrbeq	r1, [r7], #-412	; 0xfffffe64
     8d8:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
     8dc:	200005a4 	andcs	r0, r0, r4, lsr #11
     8e0:	00000018 	andeq	r0, r0, r8, lsl r0
     8e4:	a5129c01 	ldrge	r9, [r2, #-3073]	; 0xfffff3ff
     8e8:	01000004 	tsteq	r0, r4
     8ec:	00057431 	andeq	r7, r5, r1, lsr r4
     8f0:	00003020 	andeq	r3, r0, r0, lsr #32
     8f4:	489c0100 	ldmmi	ip, {r8}
     8f8:	13000001 	movwne	r0, #1
     8fc:	0000057d 	andeq	r0, r0, sp, ror r5
     900:	00283101 	eoreq	r3, r8, r1, lsl #2
     904:	91020000 	mrsls	r0, (UNDEF: 2)
     908:	4b140074 	blmi	500ae0 <startup-0x1faff520>
     90c:	01000004 	tsteq	r0, r4
     910:	00053829 	andeq	r3, r5, r9, lsr #16
     914:	00003c20 	andeq	r3, r0, r0, lsr #24
     918:	6c9c0100 	ldfvss	f0, [ip], {0}
     91c:	13000001 	movwne	r0, #1
     920:	00000476 	andeq	r0, r0, r6, ror r4
     924:	00282901 	eoreq	r2, r8, r1, lsl #18
     928:	91020000 	mrsls	r0, (UNDEF: 2)
     92c:	91140074 	tstls	r4, r4, ror r0
     930:	01000005 	tsteq	r0, r5
     934:	0004fc21 	andeq	pc, r4, r1, lsr #24
     938:	00003c20 	andeq	r3, r0, r0, lsr #24
     93c:	909c0100 	addsls	r0, ip, r0, lsl #2
     940:	13000001 	movwne	r0, #1
     944:	00000476 	andeq	r0, r0, r6, ror r4
     948:	00282101 	eoreq	r2, r8, r1, lsl #2
     94c:	91020000 	mrsls	r0, (UNDEF: 2)
     950:	70100074 	andsvc	r0, r0, r4, ror r0
     954:	01000005 	tsteq	r0, r5
     958:	0004e419 	andeq	lr, r4, r9, lsl r4
     95c:	00001820 	andeq	r1, r0, r0, lsr #16
     960:	109c0100 	addsne	r0, ip, r0, lsl #2
     964:	00000584 	andeq	r0, r0, r4, lsl #11
     968:	04d41501 	ldrbeq	r1, [r4], #1281	; 0x501
     96c:	00102000 	andseq	r2, r0, r0
     970:	9c010000 	stcls	0, cr0, [r1], {-0}
     974:	00051d10 	andeq	r1, r5, r0, lsl sp
     978:	b8100100 	ldmdalt	r0, {r8}
     97c:	1c200004 	stcne	0, cr0, [r0], #-16
     980:	01000000 	mrseq	r0, (UNDEF: 0)
     984:	0511109c 	ldreq	r1, [r1, #-156]	; 0xffffff64
     988:	0b010000 	bleq	40990 <startup-0x1ffbf670>
     98c:	2000049e 	mulcs	r0, lr, r4
     990:	0000001a 	andeq	r0, r0, sl, lsl r0
     994:	8b109c01 	blhi	4279a0 <startup-0x1fbd8660>
     998:	01000004 	tsteq	r0, r4
     99c:	00049007 	andeq	r9, r4, r7
     9a0:	00000e20 	andeq	r0, r0, r0, lsr #28
     9a4:	009c0100 	addseq	r0, ip, r0, lsl #2
     9a8:	000005aa 	andeq	r0, r0, sl, lsr #11
     9ac:	02cb0004 	sbceq	r0, fp, #4
     9b0:	01040000 	mrseq	r0, (UNDEF: 4)
     9b4:	00000071 	andeq	r0, r0, r1, ror r0
     9b8:	00067c0c 	andeq	r7, r6, ip, lsl #24
     9bc:	00060800 	andeq	r0, r6, r0, lsl #16
     9c0:	00072820 	andeq	r2, r7, r0, lsr #16
     9c4:	00025e00 	andeq	r5, r2, r0, lsl #28
     9c8:	02020200 	andeq	r0, r2, #0, 4
     9cc:	0000420c 	andeq	r4, r0, ip, lsl #4
     9d0:	00000300 	andeq	r0, r0, r0, lsl #6
     9d4:	0d020000 	stceq	0, cr0, [r2, #-0]
     9d8:	00000042 	andeq	r0, r0, r2, asr #32
     9dc:	036b0300 	cmneq	fp, #0, 6
     9e0:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     9e4:	00000042 	andeq	r0, r0, r2, asr #32
     9e8:	01040001 	tsteq	r4, r1
     9ec:	00022408 	andeq	r2, r2, r8, lsl #8
     9f0:	02040500 	andeq	r0, r4, #0, 10
     9f4:	0000620a 	andeq	r6, r0, sl, lsl #4
     9f8:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
     9fc:	0b020072 	bleq	80bcc <startup-0x1ff7f434>
     a00:	00000062 	andeq	r0, r0, r2, rrx
     a04:	00002107 	andeq	r2, r0, r7, lsl #2
     a08:	04040000 	streq	r0, [r4], #-0
     a0c:	00033f07 	andeq	r3, r3, r7, lsl #30
     a10:	02020200 	andeq	r0, r2, #0, 4
     a14:	00008a13 	andeq	r8, r0, r3, lsl sl
     a18:	042c0300 	strteq	r0, [ip], #-768	; 0xfffffd00
     a1c:	14020000 	strne	r0, [r2], #-0
     a20:	00000042 	andeq	r0, r0, r2, asr #32
     a24:	00690300 	rsbeq	r0, r9, r0, lsl #6
     a28:	15020000 	strne	r0, [r2, #-0]
     a2c:	00000042 	andeq	r0, r0, r2, asr #32
     a30:	04050001 	streq	r0, [r5], #-1
     a34:	00a31102 	adceq	r1, r3, r2, lsl #2
     a38:	6f060000 	svcvs	0x00060000
     a3c:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
     a40:	00006212 	andeq	r6, r0, r2, lsl r2
     a44:	00690700 	rsbeq	r0, r9, r0, lsl #14
     a48:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     a4c:	0000029c 	muleq	r0, ip, r2
     a50:	ec040218 	sfm	f0, 4, [r4], {24}
     a54:	03000000 	movweq	r0, #0
     a58:	000003cc 	andeq	r0, r0, ip, asr #7
     a5c:	00620502 	rsbeq	r0, r2, r2, lsl #10
     a60:	03000000 	movweq	r0, #0
     a64:	00000151 	andeq	r0, r0, r1, asr r1
     a68:	00620602 	rsbeq	r0, r2, r2, lsl #12
     a6c:	03040000 	movweq	r0, #16384	; 0x4000
     a70:	000001cf 	andeq	r0, r0, pc, asr #3
     a74:	00620702 	rsbeq	r0, r2, r2, lsl #14
     a78:	03080000 	movweq	r0, #32768	; 0x8000
     a7c:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
     a80:	00620802 	rsbeq	r0, r2, r2, lsl #16
     a84:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     a88:	00000049 	andeq	r0, r0, r9, asr #32
     a8c:	008a0910 	addeq	r0, sl, r0, lsl r9
     a90:	00140000 	andseq	r0, r4, r0
     a94:	00034c0a 	andeq	r4, r3, sl, lsl #24
     a98:	a3180200 	tstge	r8, #0, 4
     a9c:	0a000000 	beq	aa4 <startup-0x1ffff55c>
     aa0:	000006e0 	andeq	r0, r0, r0, ror #13
     aa4:	00421803 	subeq	r1, r2, r3, lsl #16
     aa8:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
     aac:	02000006 	andeq	r0, r0, #6
     ab0:	01231a03 			; <UNDEFINED> instruction: 0x01231a03
     ab4:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
     ab8:	f71b0300 			; <UNDEFINED> instruction: 0xf71b0300
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	0300790b 	movweq	r7, #2315	; 0x90b
     ac4:	0000f71c 	andeq	pc, r0, ip, lsl r7	; <UNPREDICTABLE>
     ac8:	0a000100 	beq	ed0 <startup-0x1ffff130>
     acc:	0000061f 	andeq	r0, r0, pc, lsl r6
     ad0:	01021d03 	tsteq	r2, r3, lsl #26
     ad4:	d60c0000 	strle	r0, [ip], -r0
     ad8:	0c000006 	stceq	0, cr0, [r0], {6}
     adc:	6b1f0302 	blvs	7c16ec <startup-0x1f83e914>
     ae0:	03000001 	movweq	r0, #1
     ae4:	00000771 	andeq	r0, r0, r1, ror r7
     ae8:	016b2003 	cmneq	fp, r3
     aec:	03000000 	movweq	r0, #0
     af0:	000005cf 	andeq	r0, r0, pc, asr #11
     af4:	016b2103 	cmneq	fp, r3, lsl #2
     af8:	03040000 	movweq	r0, #16384	; 0x4000
     afc:	000005d6 	ldrdeq	r0, [r0], -r6
     b00:	016b2203 	cmneq	fp, r3, lsl #4
     b04:	0b080000 	bleq	200b0c <startup-0x1fdff4f4>
     b08:	03007870 	movweq	r7, #2160	; 0x870
     b0c:	00017223 	andeq	r7, r1, r3, lsr #4
     b10:	0d000c00 	stceq	12, cr0, [r0, #-0]
     b14:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     b18:	230e0074 	movwcs	r0, #57460	; 0xe074
     b1c:	82000001 	andhi	r0, r0, #1
     b20:	0f000001 	svceq	0x00000001
     b24:	00000182 	andeq	r0, r0, r2, lsl #3
     b28:	040400ff 	streq	r0, [r4], #-255	; 0xffffff01
     b2c:	00010907 	andeq	r0, r1, r7, lsl #18
     b30:	05b00a00 	ldreq	r0, [r0, #2560]!	; 0xa00
     b34:	24030000 	strcs	r0, [r3], #-0
     b38:	00000194 	muleq	r0, r4, r1
     b3c:	012e0410 			; <UNDEFINED> instruction: 0x012e0410
     b40:	5f080000 	svcpl	0x00080000
     b44:	24000007 	strcs	r0, [r0], #-7
     b48:	02132603 	andseq	r2, r3, #3145728	; 0x300000
     b4c:	670b0000 	strvs	r0, [fp, -r0]
     b50:	03006f65 	movweq	r6, #3941	; 0xf65
     b54:	00018927 	andeq	r8, r1, r7, lsr #18
     b58:	20030000 	andcs	r0, r3, r0
     b5c:	03000004 	movweq	r0, #4
     b60:	00016b28 	andeq	r6, r1, r8, lsr #22
     b64:	26030400 	strcs	r0, [r3], -r0, lsl #8
     b68:	03000004 	movweq	r0, #4
     b6c:	00016b28 	andeq	r6, r1, r8, lsr #22
     b70:	79030800 	stmdbvc	r3, {fp}
     b74:	03000002 	movweq	r0, #2
     b78:	00016b29 	andeq	r6, r1, r9, lsr #22
     b7c:	51030c00 	tstpl	r3, r0, lsl #24
     b80:	03000003 	movweq	r0, #3
     b84:	00016b29 	andeq	r6, r1, r9, lsr #22
     b88:	89031000 	stmdbhi	r3, {ip}
     b8c:	03000003 	movweq	r0, #3
     b90:	0002242a 	andeq	r2, r2, sl, lsr #8
     b94:	52031400 	andpl	r1, r3, #0, 8
     b98:	03000006 	movweq	r0, #6
     b9c:	0002242b 	andeq	r2, r2, fp, lsr #8
     ba0:	a3031800 	movwge	r1, #14336	; 0x3800
     ba4:	03000001 	movweq	r0, #1
     ba8:	0002242c 	andeq	r2, r2, ip, lsr #8
     bac:	8e031c00 	cdphi	12, 0, cr1, cr3, cr0, {0}
     bb0:	03000003 	movweq	r0, #3
     bb4:	00023f2d 	andeq	r3, r2, sp, lsr #30
     bb8:	11002000 	mrsne	r2, (UNDEF: 0)
     bbc:	0000021e 	andeq	r0, r0, lr, lsl r2
     bc0:	00021e12 	andeq	r1, r2, r2, lsl lr
     bc4:	04100000 	ldreq	r0, [r0], #-0
     bc8:	0000019a 	muleq	r0, sl, r1
     bcc:	02130410 	andseq	r0, r3, #16, 8	; 0x10000000
     bd0:	3f110000 	svccc	0x00110000
     bd4:	12000002 	andne	r0, r0, #2
     bd8:	0000021e 	andeq	r0, r0, lr, lsl r2
     bdc:	00016b12 	andeq	r6, r1, r2, lsl fp
     be0:	016b1200 	cmneq	fp, r0, lsl #4
     be4:	10000000 	andne	r0, r0, r0
     be8:	00022a04 	andeq	r2, r2, r4, lsl #20
     bec:	079d0a00 	ldreq	r0, [sp, r0, lsl #20]
     bf0:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
     bf4:	0000021e 	andeq	r0, r0, lr, lsl r2
     bf8:	0006e813 	andeq	lr, r6, r3, lsl r8
     bfc:	011a0100 	tsteq	sl, r0, lsl #2
     c00:	20000d10 	andcs	r0, r0, r0, lsl sp
     c04:	00000020 	andeq	r0, r0, r0, lsr #32
     c08:	28149c01 	ldmdacs	r4, {r0, sl, fp, ip, pc}
     c0c:	01000007 	tsteq	r0, r7
     c10:	0cf00115 	ldfeqe	f0, [r0], #84	; 0x54
     c14:	00202000 	eoreq	r2, r0, r0
     c18:	9c010000 	stcls	0, cr0, [r1], {-0}
     c1c:	000002a2 	andeq	r0, r0, r2, lsr #5
     c20:	000a5f15 	andeq	r5, sl, r5, lsl pc
     c24:	01150100 	tsteq	r5, r0, lsl #2
     c28:	00000245 	andeq	r0, r0, r5, asr #4
     c2c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     c30:	15010078 	strne	r0, [r1, #-120]	; 0xffffff88
     c34:	00016b01 	andeq	r6, r1, r1, lsl #22
     c38:	70910200 	addsvc	r0, r1, r0, lsl #4
     c3c:	01007916 	tsteq	r0, r6, lsl r9
     c40:	016b0115 	cmneq	fp, r5, lsl r1
     c44:	91020000 	mrsls	r0, (UNDEF: 2)
     c48:	7b17006c 	blvc	5c0e00 <startup-0x1fa3f200>
     c4c:	01000007 	tsteq	r0, r7
     c50:	0c700105 	ldfeqe	f0, [r0], #-20	; 0xffffffec
     c54:	00802000 	addeq	r2, r0, r0
     c58:	9c010000 	stcls	0, cr0, [r1], {-0}
     c5c:	000002c8 	andeq	r0, r0, r8, asr #5
     c60:	000a5f15 	andeq	r5, sl, r5, lsl pc
     c64:	01050100 	mrseq	r0, (UNDEF: 21)
     c68:	00000245 	andeq	r0, r0, r5, asr #4
     c6c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     c70:	00075218 	andeq	r5, r7, r8, lsl r2
     c74:	0cff0100 	ldfeqe	f0, [pc]	; c7c <startup-0x1ffff384>
     c78:	6420000c 	strtvs	r0, [r0], #-12
     c7c:	01000000 	mrseq	r0, (UNDEF: 0)
     c80:	0003039c 	muleq	r3, ip, r3
     c84:	0a5f1900 	beq	17c708c <startup-0x1e838f74>
     c88:	ff010000 			; <UNDEFINED> instruction: 0xff010000
     c8c:	00000245 	andeq	r0, r0, r5, asr #4
     c90:	1a6c9102 	bne	1b250a0 <startup-0x1e4daf60>
     c94:	20000c14 	andcs	r0, r0, r4, lsl ip
     c98:	00000054 	andeq	r0, r0, r4, asr r0
     c9c:	0100691b 	tsteq	r0, fp, lsl r9
     ca0:	016b0100 	cmneq	fp, r0, lsl #2
     ca4:	91020000 	mrsls	r0, (UNDEF: 2)
     ca8:	18000074 	stmdane	r0, {r2, r4, r5, r6}
     cac:	000005dd 	ldrdeq	r0, [r0], -sp
     cb0:	0ba8f901 	bleq	fea3f0bc <exit_bits+0xdea3d9b4>
     cb4:	00642000 	rsbeq	r2, r4, r0
     cb8:	9c010000 	stcls	0, cr0, [r1], {-0}
     cbc:	0000033d 	andeq	r0, r0, sp, lsr r3
     cc0:	000a5f19 	andeq	r5, sl, r9, lsl pc
     cc4:	45f90100 	ldrbmi	r0, [r9, #256]!	; 0x100
     cc8:	02000002 	andeq	r0, r0, #2
     ccc:	b01a6c91 	mulslt	sl, r1, ip
     cd0:	5420000b 	strtpl	r0, [r0], #-11
     cd4:	1c000000 	stcne	0, cr0, [r0], {-0}
     cd8:	fa010069 	blx	40e84 <startup-0x1ffbf17c>
     cdc:	0000016b 	andeq	r0, r0, fp, ror #2
     ce0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     ce4:	06121800 	ldreq	r1, [r2], -r0, lsl #16
     ce8:	c1010000 	mrsgt	r0, (UNDEF: 1)
     cec:	20000a02 	andcs	r0, r0, r2, lsl #20
     cf0:	000001a6 	andeq	r0, r0, r6, lsr #3
     cf4:	03bf9c01 			; <UNDEFINED> instruction: 0x03bf9c01
     cf8:	781d0000 	ldmdavc	sp, {}	; <UNPREDICTABLE>
     cfc:	f7c10100 			; <UNDEFINED> instruction: 0xf7c10100
     d00:	02000000 	andeq	r0, r0, #0
     d04:	791d6791 	ldmdbvc	sp, {r0, r4, r7, r8, r9, sl, sp, lr}
     d08:	f7c10100 			; <UNDEFINED> instruction: 0xf7c10100
     d0c:	02000000 	andeq	r0, r0, #0
     d10:	731d6691 	tstvc	sp, #152043520	; 0x9100000
     d14:	01007465 	tsteq	r0, r5, ror #8
     d18:	0000f7c1 	andeq	pc, r0, r1, asr #15
     d1c:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
     d20:	00074c1e 	andeq	r4, r7, lr, lsl ip
     d24:	f7cd0100 			; <UNDEFINED> instruction: 0xf7cd0100
     d28:	02000000 	andeq	r0, r0, #0
     d2c:	101e6c91 	mulsne	lr, r1, ip
     d30:	01000007 	tsteq	r0, r7
     d34:	0000f7cf 	andeq	pc, r0, pc, asr #15
     d38:	6f910200 	svcvs	0x00910200
     d3c:	0006251e 	andeq	r2, r6, lr, lsl r5
     d40:	f7e10100 			; <UNDEFINED> instruction: 0xf7e10100
     d44:	02000000 	andeq	r0, r0, #0
     d48:	651e6e91 	ldrvs	r6, [lr, #-3729]	; 0xfffff16f
     d4c:	01000008 	tsteq	r0, r8
     d50:	0000f7e2 	andeq	pc, r0, r2, ror #15
     d54:	6d910200 	lfmvs	f0, 4, [r1]
     d58:	00063c1e 	andeq	r3, r6, lr, lsl ip
     d5c:	f7ee0100 			; <UNDEFINED> instruction: 0xf7ee0100
     d60:	02000000 	andeq	r0, r0, #0
     d64:	18006b91 	stmdane	r0, {r0, r4, r7, r8, r9, fp, sp, lr}
     d68:	000007a5 	andeq	r0, r0, r5, lsr #15
     d6c:	099cb601 	ldmibeq	ip, {r0, r9, sl, ip, sp, pc}
     d70:	00662000 	rsbeq	r2, r6, r0
     d74:	9c010000 	stcls	0, cr0, [r1], {-0}
     d78:	00000405 	andeq	r0, r0, r5, lsl #8
     d7c:	0009a21a 	andeq	sl, r9, sl, lsl r2
     d80:	00005820 	andeq	r5, r0, r0, lsr #16
     d84:	060d1e00 	streq	r1, [sp], -r0, lsl #28
     d88:	b7010000 	strlt	r0, [r1, -r0]
     d8c:	000000f7 	strdeq	r0, [r0], -r7
     d90:	1a779102 	bne	1de51a0 <startup-0x1e21ae60>
     d94:	200009c6 	andcs	r0, r0, r6, asr #19
     d98:	00000022 	andeq	r0, r0, r2, lsr #32
     d9c:	6464611c 	strbtvs	r6, [r4], #-284	; 0xfffffee4
     da0:	f7bb0100 			; <UNDEFINED> instruction: 0xf7bb0100
     da4:	02000000 	andeq	r0, r0, #0
     da8:	00007691 	muleq	r0, r1, r6
     dac:	06691f00 	strbteq	r1, [r9], -r0, lsl #30
     db0:	a1010000 	mrsge	r0, (UNDEF: 1)
     db4:	20000940 	andcs	r0, r0, r0, asr #18
     db8:	0000005c 	andeq	r0, r0, ip, asr r0
     dbc:	fb209c01 	blx	827dca <startup-0x1f7d8236>
     dc0:	01000005 	tsteq	r0, r5
     dc4:	0000f79c 	muleq	r0, ip, r7
     dc8:	00091600 	andeq	r1, r9, r0, lsl #12
     dcc:	00002a20 	andeq	r2, r0, r0, lsr #20
     dd0:	3e9c0100 	fmlcce	f0, f4, f0
     dd4:	19000004 	stmdbne	r0, {r2}
     dd8:	00000865 	andeq	r0, r0, r5, ror #16
     ddc:	00f79c01 	rscseq	r9, r7, r1, lsl #24
     de0:	91020000 	mrsls	r0, (UNDEF: 2)
     de4:	15180077 	ldrne	r0, [r8, #-119]	; 0xffffff89
     de8:	01000007 	tsteq	r0, r7
     dec:	0008d094 	muleq	r8, r4, r0
     df0:	00004620 	andeq	r4, r0, r0, lsr #12
     df4:	709c0100 	addsvc	r0, ip, r0, lsl #2
     df8:	19000004 	stmdbne	r0, {r2}
     dfc:	00000608 	andeq	r0, r0, r8, lsl #12
     e00:	00f79401 	rscseq	r9, r7, r1, lsl #8
     e04:	91020000 	mrsls	r0, (UNDEF: 2)
     e08:	08651977 	stmdaeq	r5!, {r0, r1, r2, r4, r5, r6, r8, fp, ip}^
     e0c:	94010000 	strls	r0, [r1], #-0
     e10:	000000f7 	strdeq	r0, [r0], -r7
     e14:	00769102 	rsbseq	r9, r6, r2, lsl #2
     e18:	00078718 	andeq	r8, r7, r8, lsl r7
     e1c:	908d0100 	addls	r0, sp, r0, lsl #2
     e20:	40200008 	eormi	r0, r0, r8
     e24:	01000000 	mrseq	r0, (UNDEF: 0)
     e28:	0004a29c 	muleq	r4, ip, r2
     e2c:	07951900 	ldreq	r1, [r5, r0, lsl #18]
     e30:	8d010000 	stchi	0, cr0, [r1, #-0]
     e34:	000000f7 	strdeq	r0, [r0], -r7
     e38:	19779102 	ldmdbne	r7!, {r1, r8, ip, pc}^
     e3c:	00000865 	andeq	r0, r0, r5, ror #16
     e40:	00f78d01 	rscseq	r8, r7, r1, lsl #26
     e44:	91020000 	mrsls	r0, (UNDEF: 2)
     e48:	2e180076 	mrccs	0, 0, r0, cr8, cr6, {3}
     e4c:	01000006 	tsteq	r0, r6
     e50:	00081071 	andeq	r1, r8, r1, ror r0
     e54:	00008020 	andeq	r8, r0, r0, lsr #32
     e58:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
     e5c:	19000004 	stmdbne	r0, {r2}
     e60:	000007e2 	andeq	r0, r0, r2, ror #15
     e64:	00f77101 	rscseq	r7, r7, r1, lsl #2
     e68:	91020000 	mrsls	r0, (UNDEF: 2)
     e6c:	08651977 	stmdaeq	r5!, {r0, r1, r2, r4, r5, r6, r8, fp, ip}^
     e70:	71010000 	mrsvc	r0, (UNDEF: 1)
     e74:	000000f7 	strdeq	r0, [r0], -r7
     e78:	00769102 	rsbseq	r9, r6, r2, lsl #2
     e7c:	00076420 	andeq	r6, r7, r0, lsr #8
     e80:	f7460100 			; <UNDEFINED> instruction: 0xf7460100
     e84:	80000000 	andhi	r0, r0, r0
     e88:	90200007 	eorls	r0, r0, r7
     e8c:	01000000 	mrseq	r0, (UNDEF: 0)
     e90:	0005099c 	muleq	r5, ip, r9
     e94:	08651900 	stmdaeq	r5!, {r8, fp, ip}^
     e98:	46010000 	strmi	r0, [r1], -r0
     e9c:	000000f7 	strdeq	r0, [r0], -r7
     ea0:	1c6f9102 	stfnep	f1, [pc], #-8	; ea0 <startup-0x1ffff160>
     ea4:	01005652 	tsteq	r0, r2, asr r6
     ea8:	0000f756 	andeq	pc, r0, r6, asr r7	; <UNPREDICTABLE>
     eac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     eb0:	07391800 	ldreq	r1, [r9, -r0, lsl #16]!
     eb4:	24010000 	strcs	r0, [r1], #-0
     eb8:	2000070a 	andcs	r0, r0, sl, lsl #14
     ebc:	00000076 	andeq	r0, r0, r6, ror r0
     ec0:	052d9c01 	streq	r9, [sp, #-3073]!	; 0xfffff3ff
     ec4:	fc1e0000 	ldc2	0, cr0, [lr], {-0}
     ec8:	01000006 	tsteq	r0, r6
     ecc:	0000f725 	andeq	pc, r0, r5, lsr #14
     ed0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ed4:	05e91800 	strbeq	r1, [r9, #2048]!	; 0x800
     ed8:	11010000 	mrsne	r0, (UNDEF: 1)
     edc:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
     ee0:	0000005a 	andeq	r0, r0, sl, asr r0
     ee4:	05519c01 	ldrbeq	r9, [r1, #-3073]	; 0xfffff3ff
     ee8:	65190000 	ldrvs	r0, [r9, #-0]
     eec:	01000008 	tsteq	r0, r8
     ef0:	0000f711 	andeq	pc, r0, r1, lsl r7	; <UNPREDICTABLE>
     ef4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ef8:	06412100 	strbeq	r2, [r1], -r0, lsl #2
     efc:	0a010000 	beq	40f04 <startup-0x1ffbf0fc>
     f00:	20000658 	andcs	r0, r0, r8, asr r6
     f04:	00000058 	andeq	r0, r0, r8, asr r0
     f08:	05819c01 	streq	r9, [r1, #3073]	; 0xc01
     f0c:	781d0000 	ldmdavc	sp, {}	; <UNPREDICTABLE>
     f10:	f70a0100 			; <UNDEFINED> instruction: 0xf70a0100
     f14:	02000000 	andeq	r0, r0, #0
     f18:	581e6f91 	ldmdapl	lr, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
     f1c:	01000006 	tsteq	r0, r6
     f20:	0000f70b 	andeq	pc, r0, fp, lsl #14
     f24:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f28:	05ba2200 	ldreq	r2, [sl, #512]!	; 0x200
     f2c:	03010000 	movweq	r0, #4096	; 0x1000
     f30:	20000608 	andcs	r0, r0, r8, lsl #12
     f34:	00000050 	andeq	r0, r0, r0, asr r0
     f38:	781d9c01 	ldmdavc	sp, {r0, sl, fp, ip, pc}
     f3c:	f7030100 			; <UNDEFINED> instruction: 0xf7030100
     f40:	02000000 	andeq	r0, r0, #0
     f44:	581e6f91 	ldmdapl	lr, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
     f48:	01000006 	tsteq	r0, r6
     f4c:	0000f704 	andeq	pc, r0, r4, lsl #14
     f50:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f54:	03220000 			; <UNDEFINED> instruction: 0x03220000
     f58:	00040000 	andeq	r0, r4, r0
     f5c:	000004dc 	ldrdeq	r0, [r0], -ip
     f60:	00710104 	rsbseq	r0, r1, r4, lsl #2
     f64:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
     f68:	30000007 	andcc	r0, r0, r7
     f6c:	4a20000d 	bmi	800fa8 <startup-0x1f7ff058>
     f70:	25000003 	strcs	r0, [r0, #-3]
     f74:	02000004 	andeq	r0, r0, #4
     f78:	420c0202 	andmi	r0, ip, #536870912	; 0x20000000
     f7c:	03000000 	movweq	r0, #0
     f80:	00000000 	andeq	r0, r0, r0
     f84:	00420d02 	subeq	r0, r2, r2, lsl #26
     f88:	03000000 	movweq	r0, #0
     f8c:	0000036b 	andeq	r0, r0, fp, ror #6
     f90:	00420e02 	subeq	r0, r2, r2, lsl #28
     f94:	00010000 	andeq	r0, r1, r0
     f98:	24080104 	strcs	r0, [r8], #-260	; 0xfffffefc
     f9c:	05000002 	streq	r0, [r0, #-2]
     fa0:	620a0204 	andvs	r0, sl, #4, 4	; 0x40000000
     fa4:	06000000 	streq	r0, [r0], -r0
     fa8:	00726469 	rsbseq	r6, r2, r9, ror #8
     fac:	00620b02 	rsbeq	r0, r2, r2, lsl #22
     fb0:	21070000 	mrscs	r0, (UNDEF: 7)
     fb4:	00000000 	andeq	r0, r0, r0
     fb8:	3f070404 	svccc	0x00070404
     fbc:	02000003 	andeq	r0, r0, #3
     fc0:	8a130202 	bhi	4c17d0 <startup-0x1fb3e830>
     fc4:	03000000 	movweq	r0, #0
     fc8:	0000042c 	andeq	r0, r0, ip, lsr #8
     fcc:	00421402 	subeq	r1, r2, r2, lsl #8
     fd0:	03000000 	movweq	r0, #0
     fd4:	00000069 	andeq	r0, r0, r9, rrx
     fd8:	00421502 	subeq	r1, r2, r2, lsl #10
     fdc:	00010000 	andeq	r0, r1, r0
     fe0:	11020405 	tstne	r2, r5, lsl #8
     fe4:	000000a3 	andeq	r0, r0, r3, lsr #1
     fe8:	72646f06 	rsbvc	r6, r4, #6, 30
     fec:	62120200 	andsvs	r0, r2, #0, 4
     ff0:	07000000 	streq	r0, [r0, -r0]
     ff4:	00000069 	andeq	r0, r0, r9, rrx
     ff8:	029c0800 	addseq	r0, ip, #0, 16
     ffc:	02180000 	andseq	r0, r8, #0
    1000:	0000ec04 	andeq	lr, r0, r4, lsl #24
    1004:	03cc0300 	biceq	r0, ip, #0, 6
    1008:	05020000 	streq	r0, [r2, #-0]
    100c:	00000062 	andeq	r0, r0, r2, rrx
    1010:	01510300 	cmpeq	r1, r0, lsl #6
    1014:	06020000 	streq	r0, [r2], -r0
    1018:	00000062 	andeq	r0, r0, r2, rrx
    101c:	01cf0304 	biceq	r0, pc, r4, lsl #6
    1020:	07020000 	streq	r0, [r2, -r0]
    1024:	00000062 	andeq	r0, r0, r2, rrx
    1028:	03b30308 			; <UNDEFINED> instruction: 0x03b30308
    102c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1030:	00000062 	andeq	r0, r0, r2, rrx
    1034:	0049090c 	subeq	r0, r9, ip, lsl #18
    1038:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    103c:	0000008a 	andeq	r0, r0, sl, lsl #1
    1040:	4c0a0014 	stcmi	0, cr0, [sl], {20}
    1044:	02000003 	andeq	r0, r0, #3
    1048:	0000a318 	andeq	sl, r0, r8, lsl r3
    104c:	01900b00 	orrseq	r0, r0, r0, lsl #22
    1050:	ac010000 	stcge	0, cr0, [r1], {-0}
    1054:	20001052 	andcs	r1, r0, r2, asr r0
    1058:	00000028 	andeq	r0, r0, r8, lsr #32
    105c:	01199c01 	tsteq	r9, r1, lsl #24
    1060:	730c0000 	movwvc	r0, #49152	; 0xc000
    1064:	19ac0100 	stmibne	ip!, {r8}
    1068:	02000001 	andeq	r0, r0, #1
    106c:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
    1070:	00011f04 	andeq	r1, r1, r4, lsl #30
    1074:	08010400 	stmdaeq	r1, {sl}
    1078:	0000022d 	andeq	r0, r0, sp, lsr #4
    107c:	0001580b 	andeq	r5, r1, fp, lsl #16
    1080:	ea980100 	b	fe601488 <exit_bits+0xde5ffd80>
    1084:	6820000f 	stmdavs	r0!, {r0, r1, r2, r3}
    1088:	01000000 	mrseq	r0, (UNDEF: 0)
    108c:	0001669c 	muleq	r1, ip, r6
    1090:	6f720c00 	svcvs	0x00720c00
    1094:	98010077 	stmdals	r1, {r0, r1, r2, r4, r5, r6}
    1098:	00000062 	andeq	r0, r0, r2, rrx
    109c:	0e6c9102 	lgneqe	f1, f2
    10a0:	00000853 	andeq	r0, r0, r3, asr r8
    10a4:	00629801 	rsbeq	r9, r2, r1, lsl #16
    10a8:	91020000 	mrsls	r0, (UNDEF: 2)
    10ac:	089c0f68 	ldmeq	ip, {r3, r5, r6, r8, r9, sl, fp}
    10b0:	a3010000 	movwge	r0, #4096	; 0x1000
    10b4:	00000042 	andeq	r0, r0, r2, asr #32
    10b8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    10bc:	0008ff0b 	andeq	pc, r8, fp, lsl #30
    10c0:	a6880100 	strge	r0, [r8], r0, lsl #2
    10c4:	4420000f 	strtmi	r0, [r0], #-15
    10c8:	01000000 	mrseq	r0, (UNDEF: 0)
    10cc:	00018a9c 	muleq	r1, ip, sl
    10d0:	07cc0e00 	strbeq	r0, [ip, r0, lsl #28]
    10d4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    10d8:	00000042 	andeq	r0, r0, r2, asr #32
    10dc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    10e0:	0008b50b 	andeq	fp, r8, fp, lsl #10
    10e4:	50780100 	rsbspl	r0, r8, r0, lsl #2
    10e8:	5620000f 	strtpl	r0, [r0], -pc
    10ec:	01000000 	mrseq	r0, (UNDEF: 0)
    10f0:	0001c99c 	muleq	r1, ip, r9
    10f4:	07950e00 	ldreq	r0, [r5, r0, lsl #28]
    10f8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    10fc:	00000042 	andeq	r0, r0, r2, asr #32
    1100:	0e779102 	expeqs	f1, f2
    1104:	00000840 	andeq	r0, r0, r0, asr #16
    1108:	00627801 	rsbeq	r7, r2, r1, lsl #16
    110c:	91020000 	mrsls	r0, (UNDEF: 2)
    1110:	73750c70 	cmnvc	r5, #112, 24	; 0x7000
    1114:	c9780100 	ldmdbgt	r8!, {r8}^
    1118:	02000001 	andeq	r0, r0, #1
    111c:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
    1120:	03390702 	teqeq	r9, #524288	; 0x80000
    1124:	5a100000 	bpl	40112c <startup-0x1fbfeed4>
    1128:	01000008 	tsteq	r0, r8
    112c:	00004266 	andeq	r4, r0, r6, ror #4
    1130:	000f2000 	andeq	r2, pc, r0
    1134:	00003020 	andeq	r3, r0, r0, lsr #32
    1138:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
    113c:	0f000001 	svceq	0x00000001
    1140:	000007db 	ldrdeq	r0, [r0], -fp
    1144:	00426701 	subeq	r6, r2, r1, lsl #14
    1148:	91020000 	mrsls	r0, (UNDEF: 2)
    114c:	e80b0077 	stmda	fp, {r0, r1, r2, r4, r5, r6}
    1150:	01000008 	tsteq	r0, r8
    1154:	000ef058 	andeq	pc, lr, r8, asr r0	; <UNPREDICTABLE>
    1158:	00003020 	andeq	r3, r0, r0, lsr #32
    115c:	1c9c0100 	ldfnes	f0, [ip], {0}
    1160:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1164:	000007d6 	ldrdeq	r0, [r0], -r6
    1168:	00425801 	subeq	r5, r2, r1, lsl #16
    116c:	91020000 	mrsls	r0, (UNDEF: 2)
    1170:	ba100077 	blt	401354 <startup-0x1fbfecac>
    1174:	01000007 	tsteq	r0, r7
    1178:	00004246 	andeq	r4, r0, r6, asr #4
    117c:	000ea800 	andeq	sl, lr, r0, lsl #16
    1180:	00004820 	andeq	r4, r0, r0, lsr #16
    1184:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    1188:	0f000002 	svceq	0x00000002
    118c:	000007db 	ldrdeq	r0, [r0], -fp
    1190:	00424701 	subeq	r4, r2, r1, lsl #14
    1194:	91020000 	mrsls	r0, (UNDEF: 2)
    1198:	d810006f 	ldmdale	r0, {r0, r1, r2, r3, r5, r6}
    119c:	01000008 	tsteq	r0, r8
    11a0:	00004235 	andeq	r4, r0, r5, lsr r2
    11a4:	000e6000 	andeq	r6, lr, r0
    11a8:	00004820 	andeq	r4, r0, r0, lsr #16
    11ac:	6c9c0100 	ldfvss	f0, [ip], {0}
    11b0:	0f000002 	svceq	0x00000002
    11b4:	000007db 	ldrdeq	r0, [r0], -fp
    11b8:	00423601 	subeq	r3, r2, r1, lsl #12
    11bc:	91020000 	mrsls	r0, (UNDEF: 2)
    11c0:	a40b006f 	strge	r0, [fp], #-111	; 0xffffff91
    11c4:	01000008 	tsteq	r0, r8
    11c8:	000e362c 	andeq	r3, lr, ip, lsr #12
    11cc:	00002a20 	andeq	r2, r0, r0, lsr #20
    11d0:	909c0100 	addsls	r0, ip, r0, lsl #2
    11d4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    11d8:	00000608 	andeq	r0, r0, r8, lsl #12
    11dc:	00422c01 	subeq	r2, r2, r1, lsl #24
    11e0:	91020000 	mrsls	r0, (UNDEF: 2)
    11e4:	8c0b0077 	stchi	0, cr0, [fp], {119}	; 0x77
    11e8:	01000008 	tsteq	r0, r8
    11ec:	000e0c23 	andeq	r0, lr, r3, lsr #24
    11f0:	00002a20 	andeq	r2, r0, r0, lsr #20
    11f4:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    11f8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    11fc:	00000795 	muleq	r0, r5, r7
    1200:	00422301 	subeq	r2, r2, r1, lsl #6
    1204:	91020000 	mrsls	r0, (UNDEF: 2)
    1208:	c3110077 	tstgt	r1, #119	; 0x77
    120c:	01000008 	tsteq	r0, r8
    1210:	000dbc1b 	andeq	fp, sp, fp, lsl ip
    1214:	00005020 	andeq	r5, r0, r0, lsr #32
    1218:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    121c:	0c000002 	stceq	0, cr0, [r0], {2}
    1220:	1b010078 	blne	41408 <startup-0x1ffbebf8>
    1224:	00000042 	andeq	r0, r0, r2, asr #32
    1228:	0f6f9102 	svceq	0x006f9102
    122c:	00000883 	andeq	r0, r0, r3, lsl #17
    1230:	00421d01 	subeq	r1, r2, r1, lsl #26
    1234:	91020000 	mrsls	r0, (UNDEF: 2)
    1238:	70110077 	andsvc	r0, r1, r7, ror r0
    123c:	01000008 	tsteq	r0, r8
    1240:	000d7814 	andeq	r7, sp, r4, lsl r8
    1244:	00004420 	andeq	r4, r0, r0, lsr #8
    1248:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    124c:	0c000003 	stceq	0, cr0, [r0], {3}
    1250:	14010078 	strne	r0, [r1], #-120	; 0xffffff88
    1254:	00000042 	andeq	r0, r0, r2, asr #32
    1258:	0f6f9102 	svceq	0x006f9102
    125c:	00000883 	andeq	r0, r0, r3, lsl #17
    1260:	00421601 	subeq	r1, r2, r1, lsl #12
    1264:	91020000 	mrsls	r0, (UNDEF: 2)
    1268:	05120077 	ldreq	r0, [r2, #-119]	; 0xffffff89
    126c:	01000002 	tsteq	r0, r2
    1270:	000d3003 	andeq	r3, sp, r3
    1274:	00004820 	andeq	r4, r0, r0, lsr #16
    1278:	009c0100 	addseq	r0, ip, r0, lsl #2
    127c:	000001cf 	andeq	r0, r0, pc, asr #3
    1280:	05f90004 	ldrbeq	r0, [r9, #4]!
    1284:	01040000 	mrseq	r0, (UNDEF: 4)
    1288:	00000071 	andeq	r0, r0, r1, ror r0
    128c:	00091c0c 	andeq	r1, r9, ip, lsl #24
    1290:	00107c00 	andseq	r7, r0, r0, lsl #24
    1294:	00017820 	andeq	r7, r1, r0, lsr #16
    1298:	00052c00 	andeq	r2, r5, r0, lsl #24
    129c:	02020200 	andeq	r0, r2, #0, 4
    12a0:	0000420c 	andeq	r4, r0, ip, lsl #4
    12a4:	00000300 	andeq	r0, r0, r0, lsl #6
    12a8:	0d020000 	stceq	0, cr0, [r2, #-0]
    12ac:	00000042 	andeq	r0, r0, r2, asr #32
    12b0:	036b0300 	cmneq	fp, #0, 6
    12b4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    12b8:	00000042 	andeq	r0, r0, r2, asr #32
    12bc:	01040001 	tsteq	r4, r1
    12c0:	00022408 	andeq	r2, r2, r8, lsl #8
    12c4:	02040500 	andeq	r0, r4, #0, 10
    12c8:	0000620a 	andeq	r6, r0, sl, lsl #4
    12cc:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
    12d0:	0b020072 	bleq	814a0 <startup-0x1ff7eb60>
    12d4:	00000062 	andeq	r0, r0, r2, rrx
    12d8:	00002107 	andeq	r2, r0, r7, lsl #2
    12dc:	04040000 	streq	r0, [r4], #-0
    12e0:	00033f07 	andeq	r3, r3, r7, lsl #30
    12e4:	02020200 	andeq	r0, r2, #0, 4
    12e8:	00008a13 	andeq	r8, r0, r3, lsl sl
    12ec:	042c0300 	strteq	r0, [ip], #-768	; 0xfffffd00
    12f0:	14020000 	strne	r0, [r2], #-0
    12f4:	00000042 	andeq	r0, r0, r2, asr #32
    12f8:	00690300 	rsbeq	r0, r9, r0, lsl #6
    12fc:	15020000 	strne	r0, [r2, #-0]
    1300:	00000042 	andeq	r0, r0, r2, asr #32
    1304:	04050001 	streq	r0, [r5], #-1
    1308:	00a31102 	adceq	r1, r3, r2, lsl #2
    130c:	6f060000 	svcvs	0x00060000
    1310:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
    1314:	00006212 	andeq	r6, r0, r2, lsl r2
    1318:	00690700 	rsbeq	r0, r9, r0, lsl #14
    131c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1320:	0000029c 	muleq	r0, ip, r2
    1324:	ec040218 	sfm	f0, 4, [r4], {24}
    1328:	03000000 	movweq	r0, #0
    132c:	000003cc 	andeq	r0, r0, ip, asr #7
    1330:	00620502 	rsbeq	r0, r2, r2, lsl #10
    1334:	03000000 	movweq	r0, #0
    1338:	00000151 	andeq	r0, r0, r1, asr r1
    133c:	00620602 	rsbeq	r0, r2, r2, lsl #12
    1340:	03040000 	movweq	r0, #16384	; 0x4000
    1344:	000001cf 	andeq	r0, r0, pc, asr #3
    1348:	00620702 	rsbeq	r0, r2, r2, lsl #14
    134c:	03080000 	movweq	r0, #32768	; 0x8000
    1350:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
    1354:	00620802 	rsbeq	r0, r2, r2, lsl #16
    1358:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    135c:	00000049 	andeq	r0, r0, r9, asr #32
    1360:	008a0910 	addeq	r0, sl, r0, lsl r9
    1364:	00140000 	andseq	r0, r4, r0
    1368:	00034c0a 	andeq	r4, r3, sl, lsl #24
    136c:	a3180200 	tstge	r8, #0, 4
    1370:	0b000000 	bleq	1378 <startup-0x1fffec88>
    1374:	00000042 	andeq	r0, r0, r2, asr #32
    1378:	0000010d 	andeq	r0, r0, sp, lsl #2
    137c:	00010d0c 	andeq	r0, r1, ip, lsl #26
    1380:	0d0c0300 	stceq	3, cr0, [ip, #-0]
    1384:	03000001 	movweq	r0, #1
    1388:	07040400 	streq	r0, [r4, -r0, lsl #8]
    138c:	00000109 	andeq	r0, r0, r9, lsl #2
    1390:	79656b0d 	stmdbvc	r5!, {r0, r2, r3, r8, r9, fp, sp, lr}^
    1394:	f7060300 			; <UNDEFINED> instruction: 0xf7060300
    1398:	05000000 	streq	r0, [r0, #-0]
    139c:	0016b803 	andseq	fp, r6, r3, lsl #16
    13a0:	096e0e20 	stmdbeq	lr!, {r5, r9, sl, fp}^
    13a4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    13a8:	0000014b 	andeq	r0, r0, fp, asr #2
    13ac:	200011a0 	andcs	r1, r0, r0, lsr #3
    13b0:	00000054 	andeq	r0, r0, r4, asr r0
    13b4:	014b9c01 	cmpeq	fp, r1, lsl #24
    13b8:	630d0000 	movwvs	r0, #53248	; 0xd000
    13bc:	422a0100 	eormi	r0, sl, #0, 2
    13c0:	02000000 	andeq	r0, r0, #0
    13c4:	0f007791 	svceq	0x00007791
    13c8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    13cc:	10100074 	andsne	r0, r0, r4, ror r0
    13d0:	01000009 	tsteq	r0, r9
    13d4:	0011481e 	andseq	r4, r1, lr, lsl r8
    13d8:	00005820 	andeq	r5, r0, r0, lsr #16
    13dc:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    13e0:	11000001 	tstne	r0, r1
    13e4:	00776f72 	rsbseq	r6, r7, r2, ror pc
    13e8:	00421e01 	subeq	r1, r2, r1, lsl #28
    13ec:	91020000 	mrsls	r0, (UNDEF: 2)
    13f0:	e5120077 	ldr	r0, [r2, #-119]	; 0xffffff89
    13f4:	01000001 	tsteq	r0, r1
    13f8:	0000420d 	andeq	r4, r0, sp, lsl #4
    13fc:	0010dc00 	andseq	sp, r0, r0, lsl #24
    1400:	00006c20 	andeq	r6, r0, r0, lsr #24
    1404:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    1408:	13000001 	movwne	r0, #1
    140c:	00776f72 	rsbseq	r6, r7, r2, ror pc
    1410:	00420e01 	subeq	r0, r2, r1, lsl #28
    1414:	53140000 	tstpl	r4, #0
    1418:	01000008 	tsteq	r0, r8
    141c:	0000420e 	andeq	r4, r0, lr, lsl #4
    1420:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1424:	0010e215 	andseq	lr, r0, r5, lsl r2
    1428:	00005220 	andeq	r5, r0, r0, lsr #4
    142c:	6f720d00 	svcvs	0x00720d00
    1430:	10010077 	andne	r0, r1, r7, ror r0
    1434:	00000042 	andeq	r0, r0, r2, asr #32
    1438:	00779102 	rsbseq	r9, r7, r2, lsl #2
    143c:	03db1600 	bicseq	r1, fp, #0, 12
    1440:	03010000 	movweq	r0, #4096	; 0x1000
    1444:	2000107c 	andcs	r1, r0, ip, ror r0
    1448:	00000060 	andeq	r0, r0, r0, rrx
    144c:	7b009c01 	blvc	28458 <startup-0x1ffd7ba8>
    1450:	04000004 	streq	r0, [r0], #-4
    1454:	00074200 	andeq	r4, r7, r0, lsl #4
    1458:	71010400 	tstvc	r1, r0, lsl #8
    145c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1460:	000009a9 	andeq	r0, r0, r9, lsr #19
    1464:	200011f4 	strdcs	r1, [r0], -r4
    1468:	000003f2 	strdeq	r0, [r0], -r2
    146c:	0000060f 	andeq	r0, r0, pc, lsl #12
    1470:	24080102 	strcs	r0, [r8], #-258	; 0xfffffefe
    1474:	02000002 	andeq	r0, r0, #2
    1478:	033f0704 	teqeq	pc, #4, 14	; 0x100000
    147c:	04030000 	streq	r0, [r3], #-0
    1480:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1484:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1488:	00000109 	andeq	r0, r0, r9, lsl #2
    148c:	00002104 	andeq	r2, r0, r4, lsl #2
    1490:	00004d00 	andeq	r4, r0, r0, lsl #26
    1494:	00360500 	eorseq	r0, r6, r0, lsl #10
    1498:	001f0000 	andseq	r0, pc, r0
    149c:	00028a06 	andeq	r8, r2, r6, lsl #20
    14a0:	3d030200 	sfmcc	f0, 4, [r3, #-0]
    14a4:	05000000 	streq	r0, [r0, #-0]
    14a8:	0016c803 	andseq	ip, r6, r3, lsl #16
    14ac:	005f0620 	subseq	r0, pc, r0, lsr #12
    14b0:	03030000 	movweq	r0, #12288	; 0x3000
    14b4:	0000003d 	andeq	r0, r0, sp, lsr r0
    14b8:	16e80305 	strbtne	r0, [r8], r5, lsl #6
    14bc:	34062000 	strcc	r2, [r6], #-0
    14c0:	04000001 	streq	r0, [r0], #-1
    14c4:	00003d03 	andeq	r3, r0, r3, lsl #26
    14c8:	08030500 	stmdaeq	r3, {r8, sl}
    14cc:	07200017 			; <UNDEFINED> instruction: 0x07200017
    14d0:	000001fd 	strdeq	r0, [r0], -sp
    14d4:	b1090508 	tstlt	r9, r8, lsl #10
    14d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    14dc:	0000018a 	andeq	r0, r0, sl, lsl #3
    14e0:	00210a05 	eoreq	r0, r1, r5, lsl #20
    14e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    14e8:	00000295 	muleq	r0, r5, r2
    14ec:	00210b05 	eoreq	r0, r1, r5, lsl #22
    14f0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    14f4:	00000608 	andeq	r0, r0, r8, lsl #12
    14f8:	00b10c05 	adcseq	r0, r1, r5, lsl #24
    14fc:	00040000 	andeq	r0, r4, r0
    1500:	00210409 	eoreq	r0, r1, r9, lsl #8
    1504:	f60a0000 			; <UNDEFINED> instruction: 0xf60a0000
    1508:	05000001 	streq	r0, [r0, #-1]
    150c:	0000800d 	andeq	r8, r0, sp
    1510:	01f50a00 	mvnseq	r0, r0, lsl #20
    1514:	0d050000 	stceq	0, cr0, [r5, #-0]
    1518:	000000cd 	andeq	r0, r0, sp, asr #1
    151c:	00800409 	addeq	r0, r0, r9, lsl #8
    1520:	73070000 	movwvc	r0, #28672	; 0x7000
    1524:	24000003 	strcs	r0, [r0], #-3
    1528:	014c0f05 	cmpeq	ip, r5, lsl #30
    152c:	e9080000 	stmdb	r8, {}	; <UNPREDICTABLE>
    1530:	05000003 	streq	r0, [r0, #-3]
    1534:	0000c210 	andeq	ip, r0, r0, lsl r2
    1538:	20080000 	andcs	r0, r8, r0
    153c:	05000004 	streq	r0, [r0, #-4]
    1540:	00002f11 	andeq	r2, r0, r1, lsl pc
    1544:	26080400 	strcs	r0, [r8], -r0, lsl #8
    1548:	05000004 	streq	r0, [r0, #-4]
    154c:	00002f11 	andeq	r2, r0, r1, lsl pc
    1550:	79080800 	stmdbvc	r8, {fp}
    1554:	05000002 	streq	r0, [r0, #-2]
    1558:	00002f12 	andeq	r2, r0, r2, lsl pc
    155c:	51080c00 	tstpl	r8, r0, lsl #24
    1560:	05000003 	streq	r0, [r0, #-3]
    1564:	00002f12 	andeq	r2, r0, r2, lsl pc
    1568:	89081000 	stmdbhi	r8, {ip}
    156c:	05000003 	streq	r0, [r0, #-3]
    1570:	00015d13 	andeq	r5, r1, r3, lsl sp
    1574:	52081400 	andpl	r1, r8, #0, 8
    1578:	05000006 	streq	r0, [r0, #-6]
    157c:	00015d14 	andeq	r5, r1, r4, lsl sp
    1580:	a3081800 	movwge	r1, #34816	; 0x8800
    1584:	05000001 	streq	r0, [r0, #-1]
    1588:	00015d15 	andeq	r5, r1, r5, lsl sp
    158c:	8e081c00 	cdphi	12, 0, cr1, cr8, cr0, {0}
    1590:	05000003 	streq	r0, [r0, #-3]
    1594:	00017816 	andeq	r7, r1, r6, lsl r8
    1598:	0b002000 	bleq	95a0 <startup-0x1fff6a60>
    159c:	00000157 	andeq	r0, r0, r7, asr r1
    15a0:	0001570c 	andeq	r5, r1, ip, lsl #14
    15a4:	04090000 	streq	r0, [r9], #-0
    15a8:	000000d3 	ldrdeq	r0, [r0], -r3
    15ac:	014c0409 	cmpeq	ip, r9, lsl #8
    15b0:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    15b4:	0c000001 	stceq	0, cr0, [r0], {1}
    15b8:	00000157 	andeq	r0, r0, r7, asr r1
    15bc:	00002f0c 	andeq	r2, r0, ip, lsl #30
    15c0:	002f0c00 	eoreq	r0, pc, r0, lsl #24
    15c4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    15c8:	00016304 	andeq	r6, r1, r4, lsl #6
    15cc:	026b0a00 	rsbeq	r0, fp, #0, 20
    15d0:	17050000 	strne	r0, [r5, -r0]
    15d4:	000000d3 	ldrdeq	r0, [r0], -r3
    15d8:	00026a0a 	andeq	r6, r2, sl, lsl #20
    15dc:	57170500 	ldrpl	r0, [r7, -r0, lsl #10]
    15e0:	0d000001 	stceq	0, cr0, [r0, #-4]
    15e4:	00000a51 	andeq	r0, r0, r1, asr sl
    15e8:	15b89301 	ldrne	r9, [r8, #769]!	; 0x301
    15ec:	002e2000 	eoreq	r2, lr, r0
    15f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    15f4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    15f8:	6a626f0e 	bvs	189d238 <startup-0x1e762dc8>
    15fc:	89930100 	ldmibhi	r3, {r8}
    1600:	02000001 	andeq	r0, r0, #1
    1604:	0f007491 	svceq	0x00007491
    1608:	00000989 	andeq	r0, r0, r9, lsl #19
    160c:	01897b01 	orreq	r7, r9, r1, lsl #22
    1610:	15300000 	ldrne	r0, [r0, #-0]!
    1614:	00882000 	addeq	r2, r8, r0
    1618:	9c010000 	stcls	0, cr0, [r1], {-0}
    161c:	000001fc 	strdeq	r0, [r0], -ip
    1620:	000aaf06 	andeq	sl, sl, r6, lsl #30
    1624:	b77c0100 	ldrblt	r0, [ip, -r0, lsl #2]!
    1628:	02000000 	andeq	r0, r0, #0
    162c:	9b066c91 	blls	19c878 <startup-0x1fe63788>
    1630:	0100000a 	tsteq	r0, sl
    1634:	0000c282 	andeq	ip, r0, r2, lsl #5
    1638:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    163c:	00098e06 	andeq	r8, r9, r6, lsl #28
    1640:	7e860100 	rmfvcs	f0, f6, f0
    1644:	02000001 	andeq	r0, r0, #1
    1648:	0f004891 	svceq	0x00004891
    164c:	00000a1c 	andeq	r0, r0, ip, lsl sl
    1650:	01896301 	orreq	r6, r9, r1, lsl #6
    1654:	14a80000 	strtne	r0, [r8], #0
    1658:	00882000 	addeq	r2, r8, r0
    165c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1660:	00000240 	andeq	r0, r0, r0, asr #4
    1664:	000a6606 	andeq	r6, sl, r6, lsl #12
    1668:	b7640100 	strblt	r0, [r4, -r0, lsl #2]!
    166c:	02000000 	andeq	r0, r0, #0
    1670:	08066c91 	stmdaeq	r6, {r0, r4, r7, sl, fp, sp, lr}
    1674:	0100000a 	tsteq	r0, sl
    1678:	0000c26a 	andeq	ip, r0, sl, ror #4
    167c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1680:	000a2106 	andeq	r2, sl, r6, lsl #2
    1684:	7e6e0100 	powvce	f0, f6, f0
    1688:	02000001 	andeq	r0, r0, #1
    168c:	0f004891 	svceq	0x00004891
    1690:	000009fc 	strdeq	r0, [r0], -ip
    1694:	01894901 	orreq	r4, r9, r1, lsl #18
    1698:	14200000 	strtne	r0, [r0], #-0
    169c:	00882000 	addeq	r2, r8, r0
    16a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    16a4:	00000284 	andeq	r0, r0, r4, lsl #5
    16a8:	000a7e06 	andeq	r7, sl, r6, lsl #28
    16ac:	b74a0100 	strblt	r0, [sl, -r0, lsl #2]
    16b0:	02000000 	andeq	r0, r0, #0
    16b4:	93066c91 	movwls	r6, #27793	; 0x6c91
    16b8:	01000009 	tsteq	r0, r9
    16bc:	0000c250 	andeq	ip, r0, r0, asr r2
    16c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    16c4:	000a0106 	andeq	r0, sl, r6, lsl #2
    16c8:	7e560100 	rdfvcs	f0, f6, f0
    16cc:	02000001 	andeq	r0, r0, #1
    16d0:	10004891 	mulne	r0, r1, r8
    16d4:	00000979 	andeq	r0, r0, r9, ror r9
    16d8:	140c4501 	strne	r4, [ip], #-1281	; 0xfffffaff
    16dc:	00142000 	andseq	r2, r4, r0
    16e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    16e4:	000002be 			; <UNDEFINED> instruction: 0x000002be
    16e8:	0100700e 	tsteq	r0, lr
    16ec:	00018945 	andeq	r8, r1, r5, asr #18
    16f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    16f4:	0100780e 	tsteq	r0, lr, lsl #16
    16f8:	00002f45 	andeq	r2, r0, r5, asr #30
    16fc:	70910200 	addsvc	r0, r1, r0, lsl #4
    1700:	0100790e 	tsteq	r0, lr, lsl #18
    1704:	00002f45 	andeq	r2, r0, r5, asr #30
    1708:	6c910200 	lfmvs	f0, 4, [r1], {0}
    170c:	0aee1000 	beq	ffb85714 <exit_bits+0xdfb8400c>
    1710:	41010000 	mrsmi	r0, (UNDEF: 1)
    1714:	200013fc 	strdcs	r1, [r0], -ip
    1718:	00000010 	andeq	r0, r0, r0, lsl r0
    171c:	02e09c01 	rsceq	r9, r0, #256	; 0x100
    1720:	700e0000 	andvc	r0, lr, r0
    1724:	89410100 	stmdbhi	r1, {r8}^
    1728:	02000001 	andeq	r0, r0, #1
    172c:	10007491 	mulne	r0, r1, r4
    1730:	00000a26 	andeq	r0, r0, r6, lsr #20
    1734:	13dc3c01 	bicsne	r3, ip, #256	; 0x100
    1738:	00202000 	eoreq	r2, r0, r0
    173c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1740:	0000031a 	andeq	r0, r0, sl, lsl r3
    1744:	0100700e 	tsteq	r0, lr
    1748:	0001893c 	andeq	r8, r1, ip, lsr r9
    174c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1750:	0100780e 	tsteq	r0, lr, lsl #16
    1754:	00002f3c 	andeq	r2, r0, ip, lsr pc
    1758:	70910200 	addsvc	r0, r1, r0, lsl #4
    175c:	0100790e 	tsteq	r0, lr, lsl #18
    1760:	00002f3c 	andeq	r2, r0, ip, lsr pc
    1764:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1768:	0a3e0d00 	beq	f84b70 <startup-0x1f07b490>
    176c:	26010000 	strcs	r0, [r1], -r0
    1770:	2000133e 	andcs	r1, r0, lr, lsr r3
    1774:	0000009e 	muleq	r0, lr, r0
    1778:	033c9c01 	teqeq	ip, #256	; 0x100
    177c:	700e0000 	andvc	r0, lr, r0
    1780:	89260100 	stmdbhi	r6!, {r8}
    1784:	02000001 	andeq	r0, r0, #1
    1788:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
    178c:	00000ada 	ldrdeq	r0, [r0], -sl
    1790:	131c2201 	tstne	ip, #268435456	; 0x10000000
    1794:	00222000 	eoreq	r2, r2, r0
    1798:	9c010000 	stcls	0, cr0, [r1], {-0}
    179c:	0000035e 	andeq	r0, r0, lr, asr r3
    17a0:	0100700e 	tsteq	r0, lr
    17a4:	00018922 	andeq	r8, r1, r2, lsr #18
    17a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17ac:	0ac70d00 	beq	ff1c4bb4 <exit_bits+0xdf1c34ac>
    17b0:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    17b4:	200012fa 	strdcs	r1, [r0], -sl
    17b8:	00000022 	andeq	r0, r0, r2, lsr #32
    17bc:	03809c01 	orreq	r9, r0, #256	; 0x100
    17c0:	700e0000 	andvc	r0, lr, r0
    17c4:	891e0100 	ldmdbhi	lr, {r8}
    17c8:	02000001 	andeq	r0, r0, #1
    17cc:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
    17d0:	00000a72 	andeq	r0, r0, r2, ror sl
    17d4:	12200901 	eorne	r0, r0, #16384	; 0x4000
    17d8:	00da2000 	sbcseq	r2, sl, r0
    17dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    17e0:	00000430 	andeq	r0, r0, r0, lsr r4
    17e4:	0100730e 	tsteq	r0, lr, lsl #6
    17e8:	00043009 	andeq	r3, r4, r9
    17ec:	5c910200 	lfmpl	f0, 4, [r1], {0}
    17f0:	0100780e 	tsteq	r0, lr, lsl #16
    17f4:	00002f09 	andeq	r2, r0, r9, lsl #30
    17f8:	58910200 	ldmpl	r1, {r9}
    17fc:	0100790e 	tsteq	r0, lr, lsl #18
    1800:	00002f09 	andeq	r2, r0, r9, lsl #30
    1804:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    1808:	7465730e 	strbtvc	r7, [r5], #-782	; 0xfffffcf2
    180c:	2f090100 	svccs	0x00090100
    1810:	02000000 	andeq	r0, r0, #0
    1814:	8c065091 	stchi	0, cr5, [r6], {145}	; 0x91
    1818:	0100000a 	tsteq	r0, sl
    181c:	00002f0a 	andeq	r2, r0, sl, lsl #30
    1820:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1824:	00125411 	andseq	r5, r2, r1, lsl r4
    1828:	00009e20 	andeq	r9, r0, r0, lsr #28
    182c:	00691200 	rsbeq	r1, r9, r0, lsl #4
    1830:	002f1201 	eoreq	r1, pc, r1, lsl #4
    1834:	91020000 	mrsls	r0, (UNDEF: 2)
    1838:	125a1170 	subsne	r1, sl, #112, 2
    183c:	00862000 	addeq	r2, r6, r0
    1840:	6a120000 	bvs	481848 <startup-0x1fb7e7b8>
    1844:	2f130100 	svccs	0x00130100
    1848:	02000000 	andeq	r0, r0, #0
    184c:	60116c91 	mulsvs	r1, r1, ip
    1850:	72200012 	eorvc	r0, r0, #18
    1854:	06000000 	streq	r0, [r0], -r0
    1858:	000007d6 	ldrdeq	r0, [r0], -r6
    185c:	00211401 	eoreq	r1, r1, r1, lsl #8
    1860:	91020000 	mrsls	r0, (UNDEF: 2)
    1864:	12781167 	rsbsne	r1, r8, #-1073741799	; 0xc0000019
    1868:	005a2000 	subseq	r2, sl, r0
    186c:	6b120000 	blvs	481874 <startup-0x1fb7e78c>
    1870:	2f150100 	svccs	0x00150100
    1874:	02000000 	andeq	r0, r0, #0
    1878:	00006891 	muleq	r0, r1, r8
    187c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1880:	0000b704 	andeq	fp, r0, r4, lsl #14
    1884:	0abb1300 	beq	feec648c <exit_bits+0xdeec4d84>
    1888:	03010000 	movweq	r0, #4096	; 0x1000
    188c:	200011f4 	strdcs	r1, [r0], -r4
    1890:	0000002c 	andeq	r0, r0, ip, lsr #32
    1894:	730e9c01 	movwvc	r9, #60417	; 0xec01
    1898:	30030100 	andcc	r0, r3, r0, lsl #2
    189c:	02000004 	andeq	r0, r0, #4
    18a0:	08147491 	ldmdaeq	r4, {r0, r4, r7, sl, ip, sp, lr}
    18a4:	01000006 	tsteq	r0, r6
    18a8:	0000b103 	andeq	fp, r0, r3, lsl #2
    18ac:	70910200 	addsvc	r0, r1, r0, lsl #4
    18b0:	00018a14 	andeq	r8, r1, r4, lsl sl
    18b4:	2f030100 	svccs	0x00030100
    18b8:	02000000 	andeq	r0, r0, #0
    18bc:	95146c91 	ldrls	r6, [r4, #-3217]	; 0xfffff36f
    18c0:	01000002 	tsteq	r0, r2
    18c4:	00002f03 	andeq	r2, r0, r3, lsl #30
    18c8:	68910200 	ldmvs	r1, {r9}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b011705 	bleq	45c54 <startup-0x1ffba3ac>
  3c:	3b0b3a0b 	blcc	2ce870 <startup-0x1fd31790>
  40:	0013010b 	andseq	r0, r3, fp, lsl #2
  44:	000d0600 	andeq	r0, sp, r0, lsl #12
  48:	0b3a0803 	bleq	e8205c <startup-0x1f17dfa4>
  4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  50:	0d070000 	stceq	0, cr0, [r7, #-0]
  54:	00134900 	andseq	r4, r3, r0, lsl #18
  58:	01130800 	tsteq	r3, r0, lsl #16
  5c:	0b0b0e03 	bleq	2c3870 <startup-0x1fd3c790>
  60:	0b3b0b3a 	bleq	ec2d50 <startup-0x1f13d2b0>
  64:	00001301 	andeq	r1, r0, r1, lsl #6
  68:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
  6c:	000b3813 	andeq	r3, fp, r3, lsl r8
  70:	00160a00 	andseq	r0, r6, r0, lsl #20
  74:	0b3a0e03 	bleq	e83888 <startup-0x1f17c778>
  78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  7c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  80:	3a0e0300 	bcc	380c88 <startup-0x1fc7f378>
  84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  88:	0c000013 	stceq	0, cr0, [r0], {19}
  8c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  90:	0b3b0b3a 	bleq	ec2d80 <startup-0x1f13d280>
  94:	0b381349 	bleq	e04dc0 <startup-0x1f1fb240>
  98:	240d0000 	strcs	r0, [sp], #-0
  9c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  a0:	0008030b 	andeq	r0, r8, fp, lsl #6
  a4:	01010e00 	tsteq	r1, r0, lsl #28
  a8:	13011349 	movwne	r1, #4937	; 0x1349
  ac:	210f0000 	mrscs	r0, CPSR
  b0:	2f134900 	svccs	0x00134900
  b4:	1000000b 	andne	r0, r0, fp
  b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	0f110000 	svceq	0x00110000
  c8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  cc:	12000013 	andne	r0, r0, #19
  d0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
  dc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
  e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  ec:	00001802 	andeq	r1, r0, r2, lsl #16
  f0:	3f012e15 	svccc	0x00012e15
  f4:	3a0e0319 	bcc	380d60 <startup-0x1fc7f2a0>
  f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 100:	96184006 	ldrls	r4, [r8], -r6
 104:	13011942 	movwne	r1, #6466	; 0x1942
 108:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 10c:	03193f01 	tsteq	r9, #1, 30
 110:	3b0b3a0e 	blcc	2ce950 <startup-0x1fd316b0>
 114:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 118:	00130119 	andseq	r0, r3, r9, lsl r1
 11c:	00181700 	andseq	r1, r8, r0, lsl #14
 120:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 124:	03193f01 	tsteq	r9, #1, 30
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 130:	19000019 	stmdbne	r0, {r0, r3, r4}
 134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 138:	0b3a0e03 	bleq	e8394c <startup-0x1f17c6b4>
 13c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 140:	06120111 			; <UNDEFINED> instruction: 0x06120111
 144:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 148:	00130119 	andseq	r0, r3, r9, lsl r1
 14c:	00051a00 	andeq	r1, r5, r0, lsl #20
 150:	0b3a0e03 	bleq	e83964 <startup-0x1f17c69c>
 154:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 158:	00001802 	andeq	r1, r0, r2, lsl #16
 15c:	11010b1b 	tstne	r1, fp, lsl fp
 160:	01061201 	tsteq	r6, r1, lsl #4
 164:	1c000013 	stcne	0, cr0, [r0], {19}
 168:	08030034 	stmdaeq	r3, {r2, r4, r5}
 16c:	0b3b0b3a 	bleq	ec2e5c <startup-0x1f13d1a4>
 170:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 174:	0b1d0000 	bleq	74017c <startup-0x1f8bfe84>
 178:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 17c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
 180:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 184:	0b3a0e03 	bleq	e83998 <startup-0x1f17c668>
 188:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 190:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 194:	00000019 	andeq	r0, r0, r9, lsl r0
 198:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 19c:	030b130e 	movweq	r1, #45838	; 0xb30e
 1a0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 1a4:	00171006 	andseq	r1, r7, r6
 1a8:	00240200 	eoreq	r0, r4, r0, lsl #4
 1ac:	0b3e0b0b 	bleq	f82de0 <startup-0x1f07d220>
 1b0:	00000e03 	andeq	r0, r0, r3, lsl #28
 1b4:	0b011303 	bleq	44dc8 <startup-0x1ffbb238>
 1b8:	3b0b3a0b 	blcc	2ce9ec <startup-0x1fd31614>
 1bc:	0013010b 	andseq	r0, r3, fp, lsl #2
 1c0:	000d0400 	andeq	r0, sp, r0, lsl #8
 1c4:	0b3a0e03 	bleq	e839d8 <startup-0x1f17c628>
 1c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1cc:	00000b38 	andeq	r0, r0, r8, lsr fp
 1d0:	0b011705 	bleq	45dec <startup-0x1ffba214>
 1d4:	3b0b3a0b 	blcc	2cea08 <startup-0x1fd315f8>
 1d8:	0013010b 	andseq	r0, r3, fp, lsl #2
 1dc:	000d0600 	andeq	r0, sp, r0, lsl #12
 1e0:	0b3a0e03 	bleq	e839f4 <startup-0x1f17c60c>
 1e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e8:	0d070000 	stceq	0, cr0, [r7, #-0]
 1ec:	00134900 	andseq	r4, r3, r0, lsl #18
 1f0:	01130800 	tsteq	r3, r0, lsl #16
 1f4:	0b0b0e03 	bleq	2c3a08 <startup-0x1fd3c5f8>
 1f8:	0b3b0b3a 	bleq	ec2ee8 <startup-0x1f13d118>
 1fc:	00001301 	andeq	r1, r0, r1, lsl #6
 200:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 204:	000b3813 	andeq	r3, fp, r3, lsl r8
 208:	000d0a00 	andeq	r0, sp, r0, lsl #20
 20c:	0b3a0803 	bleq	e82220 <startup-0x1f17dde0>
 210:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 214:	00000b38 	andeq	r0, r0, r8, lsr fp
 218:	0300160b 	movweq	r1, #1547	; 0x60b
 21c:	3b0b3a0e 	blcc	2cea5c <startup-0x1fd315a4>
 220:	0013490b 	andseq	r4, r3, fp, lsl #18
 224:	00340c00 	eorseq	r0, r4, r0, lsl #24
 228:	0b3a0e03 	bleq	e83a3c <startup-0x1f17c5c4>
 22c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 230:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 234:	240d0000 	strcs	r0, [sp], #-0
 238:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 23c:	0008030b 	andeq	r0, r8, fp, lsl #6
 240:	00350e00 	eorseq	r0, r5, r0, lsl #28
 244:	00001349 	andeq	r1, r0, r9, asr #6
 248:	0300340f 	movweq	r3, #1039	; 0x40f
 24c:	3b0b3a0e 	blcc	2cea8c <startup-0x1fd31574>
 250:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 254:	10000018 	andne	r0, r0, r8, lsl r0
 258:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 25c:	0b3a0e03 	bleq	e83a70 <startup-0x1f17c590>
 260:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 264:	06120111 			; <UNDEFINED> instruction: 0x06120111
 268:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 26c:	11000019 	tstne	r0, r9, lsl r0
 270:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 274:	0b3a0e03 	bleq	e83a88 <startup-0x1f17c578>
 278:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 27c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 280:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 284:	12000019 	andne	r0, r0, #25
 288:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 28c:	0b3a0e03 	bleq	e83aa0 <startup-0x1f17c560>
 290:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 294:	06120111 			; <UNDEFINED> instruction: 0x06120111
 298:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 29c:	00130119 	andseq	r0, r3, r9, lsl r1
 2a0:	00051300 	andeq	r1, r5, r0, lsl #6
 2a4:	0b3a0e03 	bleq	e83ab8 <startup-0x1f17c548>
 2a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ac:	00001802 	andeq	r1, r0, r2, lsl #16
 2b0:	3f012e14 	svccc	0x00012e14
 2b4:	3a0e0319 	bcc	380f20 <startup-0x1fc7f0e0>
 2b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2c0:	96184006 	ldrls	r4, [r8], -r6
 2c4:	13011942 	movwne	r1, #6466	; 0x1942
 2c8:	01000000 	mrseq	r0, (UNDEF: 0)
 2cc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2d0:	0e030b13 	vmoveq.32	d3[0], r0
 2d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2d8:	00001710 	andeq	r1, r0, r0, lsl r7
 2dc:	0b011302 	bleq	44eec <startup-0x1ffbb114>
 2e0:	3b0b3a0b 	blcc	2ceb14 <startup-0x1fd314ec>
 2e4:	0013010b 	andseq	r0, r3, fp, lsl #2
 2e8:	000d0300 	andeq	r0, sp, r0, lsl #6
 2ec:	0b3a0e03 	bleq	e83b00 <startup-0x1f17c500>
 2f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2f4:	00000b38 	andeq	r0, r0, r8, lsr fp
 2f8:	0b002404 	bleq	9310 <startup-0x1fff6cf0>
 2fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 300:	0500000e 	streq	r0, [r0, #-14]
 304:	0b0b0117 	bleq	2c0768 <startup-0x1fd3f898>
 308:	0b3b0b3a 	bleq	ec2ff8 <startup-0x1f13d008>
 30c:	00001301 	andeq	r1, r0, r1, lsl #6
 310:	03000d06 	movweq	r0, #3334	; 0xd06
 314:	3b0b3a08 	blcc	2ceb3c <startup-0x1fd314c4>
 318:	0013490b 	andseq	r4, r3, fp, lsl #18
 31c:	000d0700 	andeq	r0, sp, r0, lsl #14
 320:	00001349 	andeq	r1, r0, r9, asr #6
 324:	03011308 	movweq	r1, #4872	; 0x1308
 328:	3a0b0b0e 	bcc	2c2f68 <startup-0x1fd3d098>
 32c:	010b3b0b 	tsteq	fp, fp, lsl #22
 330:	09000013 	stmdbeq	r0, {r0, r1, r4}
 334:	1349000d 	movtne	r0, #36877	; 0x900d
 338:	00000b38 	andeq	r0, r0, r8, lsr fp
 33c:	0300160a 	movweq	r1, #1546	; 0x60a
 340:	3b0b3a0e 	blcc	2ceb80 <startup-0x1fd31480>
 344:	0013490b 	andseq	r4, r3, fp, lsl #18
 348:	000d0b00 	andeq	r0, sp, r0, lsl #22
 34c:	0b3a0803 	bleq	e82360 <startup-0x1f17dca0>
 350:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 354:	00000b38 	andeq	r0, r0, r8, lsr fp
 358:	0301130c 	movweq	r1, #4876	; 0x130c
 35c:	3a050b0e 	bcc	142f9c <startup-0x1febd064>
 360:	010b3b0b 	tsteq	fp, fp, lsl #22
 364:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 368:	0b0b0024 	bleq	2c0400 <startup-0x1fd3fc00>
 36c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 370:	010e0000 	mrseq	r0, (UNDEF: 14)
 374:	01134901 	tsteq	r3, r1, lsl #18
 378:	0f000013 	svceq	0x00000013
 37c:	13490021 	movtne	r0, #36897	; 0x9021
 380:	00000b2f 	andeq	r0, r0, pc, lsr #22
 384:	0b000f10 	bleq	3fcc <startup-0x1fffc034>
 388:	0013490b 	andseq	r4, r3, fp, lsl #18
 38c:	01151100 	tsteq	r5, r0, lsl #2
 390:	13011927 	movwne	r1, #6439	; 0x1927
 394:	05120000 	ldreq	r0, [r2, #-0]
 398:	00134900 	andseq	r4, r3, r0, lsl #18
 39c:	002e1300 	eoreq	r1, lr, r0, lsl #6
 3a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3a8:	01111927 	tsteq	r1, r7, lsr #18
 3ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3b0:	00194297 	mulseq	r9, r7, r2
 3b4:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 3b8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3c0:	01111927 	tsteq	r1, r7, lsr #18
 3c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3c8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3cc:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 3d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 3d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3dc:	05160000 	ldreq	r0, [r6, #-0]
 3e0:	3a080300 	bcc	200fe8 <startup-0x1fdff018>
 3e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3e8:	00180213 	andseq	r0, r8, r3, lsl r2
 3ec:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 3f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3f8:	01111927 	tsteq	r1, r7, lsr #18
 3fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 400:	01194296 			; <UNDEFINED> instruction: 0x01194296
 404:	18000013 	stmdane	r0, {r0, r1, r4}
 408:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 40c:	0b3a0e03 	bleq	e83c20 <startup-0x1f17c3e0>
 410:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 414:	06120111 			; <UNDEFINED> instruction: 0x06120111
 418:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 41c:	00130119 	andseq	r0, r3, r9, lsl r1
 420:	00051900 	andeq	r1, r5, r0, lsl #18
 424:	0b3a0e03 	bleq	e83c38 <startup-0x1f17c3c8>
 428:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 42c:	00001802 	andeq	r1, r0, r2, lsl #16
 430:	11010b1a 	tstne	r1, sl, lsl fp
 434:	00061201 	andeq	r1, r6, r1, lsl #4
 438:	00341b00 	eorseq	r1, r4, r0, lsl #22
 43c:	0b3a0803 	bleq	e82450 <startup-0x1f17dbb0>
 440:	1349053b 	movtne	r0, #38203	; 0x953b
 444:	00001802 	andeq	r1, r0, r2, lsl #16
 448:	0300341c 	movweq	r3, #1052	; 0x41c
 44c:	3b0b3a08 	blcc	2cec74 <startup-0x1fd3138c>
 450:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 454:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 458:	08030005 	stmdaeq	r3, {r0, r2}
 45c:	0b3b0b3a 	bleq	ec314c <startup-0x1f13ceb4>
 460:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 464:	341e0000 	ldrcc	r0, [lr], #-0
 468:	3a0e0300 	bcc	381070 <startup-0x1fc7ef90>
 46c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 470:	00180213 	andseq	r0, r8, r3, lsl r2
 474:	002e1f00 	eoreq	r1, lr, r0, lsl #30
 478:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 47c:	0b3b0b3a 	bleq	ec316c <startup-0x1f13ce94>
 480:	01111927 	tsteq	r1, r7, lsr #18
 484:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 488:	00194296 	mulseq	r9, r6, r2
 48c:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 490:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 494:	0b3b0b3a 	bleq	ec3184 <startup-0x1f13ce7c>
 498:	13491927 	movtne	r1, #39207	; 0x9927
 49c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4a4:	00130119 	andseq	r0, r3, r9, lsl r1
 4a8:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
 4ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4b0:	0b3b0b3a 	bleq	ec31a0 <startup-0x1f13ce60>
 4b4:	01111927 	tsteq	r1, r7, lsr #18
 4b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4bc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4c0:	22000013 	andcs	r0, r0, #19
 4c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4c8:	0b3a0e03 	bleq	e83cdc <startup-0x1f17c324>
 4cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 4d8:	00000019 	andeq	r0, r0, r9, lsl r0
 4dc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 4e0:	030b130e 	movweq	r1, #45838	; 0xb30e
 4e4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4e8:	00171006 	andseq	r1, r7, r6
 4ec:	01130200 	tsteq	r3, r0, lsl #4
 4f0:	0b3a0b0b 	bleq	e83124 <startup-0x1f17cedc>
 4f4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 4f8:	0d030000 	stceq	0, cr0, [r3, #-0]
 4fc:	3a0e0300 	bcc	381104 <startup-0x1fc7eefc>
 500:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 504:	000b3813 	andeq	r3, fp, r3, lsl r8
 508:	00240400 	eoreq	r0, r4, r0, lsl #8
 50c:	0b3e0b0b 	bleq	f83140 <startup-0x1f07cec0>
 510:	00000e03 	andeq	r0, r0, r3, lsl #28
 514:	0b011705 	bleq	46130 <startup-0x1ffb9ed0>
 518:	3b0b3a0b 	blcc	2ced4c <startup-0x1fd312b4>
 51c:	0013010b 	andseq	r0, r3, fp, lsl #2
 520:	000d0600 	andeq	r0, sp, r0, lsl #12
 524:	0b3a0803 	bleq	e82538 <startup-0x1f17dac8>
 528:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 52c:	0d070000 	stceq	0, cr0, [r7, #-0]
 530:	00134900 	andseq	r4, r3, r0, lsl #18
 534:	01130800 	tsteq	r3, r0, lsl #16
 538:	0b0b0e03 	bleq	2c3d4c <startup-0x1fd3c2b4>
 53c:	0b3b0b3a 	bleq	ec322c <startup-0x1f13cdd4>
 540:	00001301 	andeq	r1, r0, r1, lsl #6
 544:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 548:	000b3813 	andeq	r3, fp, r3, lsl r8
 54c:	00160a00 	andseq	r0, r6, r0, lsl #20
 550:	0b3a0e03 	bleq	e83d64 <startup-0x1f17c29c>
 554:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 558:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 55c:	03193f01 	tsteq	r9, #1, 30
 560:	3b0b3a0e 	blcc	2ceda0 <startup-0x1fd31260>
 564:	1119270b 	tstne	r9, fp, lsl #14
 568:	40061201 	andmi	r1, r6, r1, lsl #4
 56c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 570:	00001301 	andeq	r1, r0, r1, lsl #6
 574:	0300050c 	movweq	r0, #1292	; 0x50c
 578:	3b0b3a08 	blcc	2ceda0 <startup-0x1fd31260>
 57c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 580:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 584:	0b0b000f 	bleq	2c05c8 <startup-0x1fd3fa38>
 588:	00001349 	andeq	r1, r0, r9, asr #6
 58c:	0300050e 	movweq	r0, #1294	; 0x50e
 590:	3b0b3a0e 	blcc	2cedd0 <startup-0x1fd31230>
 594:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 598:	0f000018 	svceq	0x00000018
 59c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5a0:	0b3b0b3a 	bleq	ec3290 <startup-0x1f13cd70>
 5a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5a8:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 5ac:	03193f01 	tsteq	r9, #1, 30
 5b0:	3b0b3a0e 	blcc	2cedf0 <startup-0x1fd31210>
 5b4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 5b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 5bc:	96184006 	ldrls	r4, [r8], -r6
 5c0:	13011942 	movwne	r1, #6466	; 0x1942
 5c4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 5c8:	03193f01 	tsteq	r9, #1, 30
 5cc:	3b0b3a0e 	blcc	2cee0c <startup-0x1fd311f4>
 5d0:	1119270b 	tstne	r9, fp, lsl #14
 5d4:	40061201 	andmi	r1, r6, r1, lsl #4
 5d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5dc:	00001301 	andeq	r1, r0, r1, lsl #6
 5e0:	3f002e12 	svccc	0x00002e12
 5e4:	3a0e0319 	bcc	381250 <startup-0x1fc7edb0>
 5e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5f0:	96184006 	ldrls	r4, [r8], -r6
 5f4:	00001942 	andeq	r1, r0, r2, asr #18
 5f8:	01110100 	tsteq	r1, r0, lsl #2
 5fc:	0b130e25 	bleq	4c3e98 <startup-0x1fb3c168>
 600:	01110e03 	tsteq	r1, r3, lsl #28
 604:	17100612 			; <UNDEFINED> instruction: 0x17100612
 608:	13020000 	movwne	r0, #8192	; 0x2000
 60c:	3a0b0b01 	bcc	2c3218 <startup-0x1fd3cde8>
 610:	010b3b0b 	tsteq	fp, fp, lsl #22
 614:	03000013 	movweq	r0, #19
 618:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 61c:	0b3b0b3a 	bleq	ec330c <startup-0x1f13ccf4>
 620:	0b381349 	bleq	e0534c <startup-0x1f1facb4>
 624:	24040000 	strcs	r0, [r4], #-0
 628:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 62c:	000e030b 	andeq	r0, lr, fp, lsl #6
 630:	01170500 	tsteq	r7, r0, lsl #10
 634:	0b3a0b0b 	bleq	e83268 <startup-0x1f17cd98>
 638:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 63c:	0d060000 	stceq	0, cr0, [r6, #-0]
 640:	3a080300 	bcc	201248 <startup-0x1fdfedb8>
 644:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 648:	07000013 	smladeq	r0, r3, r0, r0
 64c:	1349000d 	movtne	r0, #36877	; 0x900d
 650:	13080000 	movwne	r0, #32768	; 0x8000
 654:	0b0e0301 	bleq	381260 <startup-0x1fc7eda0>
 658:	3b0b3a0b 	blcc	2cee8c <startup-0x1fd31174>
 65c:	0013010b 	andseq	r0, r3, fp, lsl #2
 660:	000d0900 	andeq	r0, sp, r0, lsl #18
 664:	0b381349 	bleq	e05390 <startup-0x1f1fac70>
 668:	160a0000 	strne	r0, [sl], -r0
 66c:	3a0e0300 	bcc	381274 <startup-0x1fc7ed8c>
 670:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 674:	0b000013 	bleq	6c8 <startup-0x1ffff938>
 678:	13490101 	movtne	r0, #37121	; 0x9101
 67c:	00001301 	andeq	r1, r0, r1, lsl #6
 680:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 684:	000b2f13 	andeq	r2, fp, r3, lsl pc
 688:	00340d00 	eorseq	r0, r4, r0, lsl #26
 68c:	0b3a0803 	bleq	e826a0 <startup-0x1f17d960>
 690:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 694:	00001802 	andeq	r1, r0, r2, lsl #16
 698:	3f012e0e 	svccc	0x00012e0e
 69c:	3a0e0319 	bcc	381308 <startup-0x1fc7ecf8>
 6a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6a4:	11134919 	tstne	r3, r9, lsl r9
 6a8:	40061201 	andmi	r1, r6, r1, lsl #4
 6ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6b0:	00001301 	andeq	r1, r0, r1, lsl #6
 6b4:	0b00240f 	bleq	96f8 <startup-0x1fff6908>
 6b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 6bc:	10000008 	andne	r0, r0, r8
 6c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6c4:	0b3a0e03 	bleq	e83ed8 <startup-0x1f17c128>
 6c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 6d4:	00130119 	andseq	r0, r3, r9, lsl r1
 6d8:	00051100 	andeq	r1, r5, r0, lsl #2
 6dc:	0b3a0803 	bleq	e826f0 <startup-0x1f17d910>
 6e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6e4:	00001802 	andeq	r1, r0, r2, lsl #16
 6e8:	3f012e12 	svccc	0x00012e12
 6ec:	3a0e0319 	bcc	381358 <startup-0x1fc7eca8>
 6f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6f4:	11134919 	tstne	r3, r9, lsl r9
 6f8:	40061201 	andmi	r1, r6, r1, lsl #4
 6fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 700:	00001301 	andeq	r1, r0, r1, lsl #6
 704:	03003413 	movweq	r3, #1043	; 0x413
 708:	3b0b3a08 	blcc	2cef30 <startup-0x1fd310d0>
 70c:	0013490b 	andseq	r4, r3, fp, lsl #18
 710:	00341400 	eorseq	r1, r4, r0, lsl #8
 714:	0b3a0e03 	bleq	e83f28 <startup-0x1f17c0d8>
 718:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 71c:	00001802 	andeq	r1, r0, r2, lsl #16
 720:	11010b15 	tstne	r1, r5, lsl fp
 724:	00061201 	andeq	r1, r6, r1, lsl #4
 728:	002e1600 	eoreq	r1, lr, r0, lsl #12
 72c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 730:	0b3b0b3a 	bleq	ec3420 <startup-0x1f13cbe0>
 734:	01111927 	tsteq	r1, r7, lsr #18
 738:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 73c:	00194297 	mulseq	r9, r7, r2
 740:	11010000 	mrsne	r0, (UNDEF: 1)
 744:	130e2501 	movwne	r2, #58625	; 0xe501
 748:	110e030b 	tstne	lr, fp, lsl #6
 74c:	10061201 	andne	r1, r6, r1, lsl #4
 750:	02000017 	andeq	r0, r0, #23
 754:	0b0b0024 	bleq	2c07ec <startup-0x1fd3f814>
 758:	0e030b3e 	vmoveq.16	d3[0], r0
 75c:	24030000 	strcs	r0, [r3], #-0
 760:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 764:	0008030b 	andeq	r0, r8, fp, lsl #6
 768:	01010400 	tsteq	r1, r0, lsl #8
 76c:	13011349 	movwne	r1, #4937	; 0x1349
 770:	21050000 	mrscs	r0, (UNDEF: 5)
 774:	2f134900 	svccs	0x00134900
 778:	0600000b 	streq	r0, [r0], -fp
 77c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 780:	0b3b0b3a 	bleq	ec3470 <startup-0x1f13cb90>
 784:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 788:	13070000 	movwne	r0, #28672	; 0x7000
 78c:	0b0e0301 	bleq	381398 <startup-0x1fc7ec68>
 790:	3b0b3a0b 	blcc	2cefc4 <startup-0x1fd3103c>
 794:	0013010b 	andseq	r0, r3, fp, lsl #2
 798:	000d0800 	andeq	r0, sp, r0, lsl #16
 79c:	0b3a0e03 	bleq	e83fb0 <startup-0x1f17c050>
 7a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7a4:	00000b38 	andeq	r0, r0, r8, lsr fp
 7a8:	0b000f09 	bleq	43d4 <startup-0x1fffbc2c>
 7ac:	0013490b 	andseq	r4, r3, fp, lsl #18
 7b0:	00160a00 	andseq	r0, r6, r0, lsl #20
 7b4:	0b3a0e03 	bleq	e83fc8 <startup-0x1f17c038>
 7b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7bc:	150b0000 	strne	r0, [fp, #-0]
 7c0:	01192701 	tsteq	r9, r1, lsl #14
 7c4:	0c000013 	stceq	0, cr0, [r0], {19}
 7c8:	13490005 	movtne	r0, #36869	; 0x9005
 7cc:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 7d0:	03193f01 	tsteq	r9, #1, 30
 7d4:	3b0b3a0e 	blcc	2cf014 <startup-0x1fd30fec>
 7d8:	1119270b 	tstne	r9, fp, lsl #14
 7dc:	40061201 	andmi	r1, r6, r1, lsl #4
 7e0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 7e4:	00001301 	andeq	r1, r0, r1, lsl #6
 7e8:	0300050e 	movweq	r0, #1294	; 0x50e
 7ec:	3b0b3a08 	blcc	2cf014 <startup-0x1fd30fec>
 7f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 7f4:	0f000018 	svceq	0x00000018
 7f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7fc:	0b3a0e03 	bleq	e84010 <startup-0x1f17bff0>
 800:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 804:	01111349 	tsteq	r1, r9, asr #6
 808:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 80c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 810:	10000013 	andne	r0, r0, r3, lsl r0
 814:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 818:	0b3a0e03 	bleq	e8402c <startup-0x1f17bfd4>
 81c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 820:	06120111 			; <UNDEFINED> instruction: 0x06120111
 824:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 828:	00130119 	andseq	r0, r3, r9, lsl r1
 82c:	010b1100 	mrseq	r1, (UNDEF: 27)
 830:	06120111 			; <UNDEFINED> instruction: 0x06120111
 834:	34120000 	ldrcc	r0, [r2], #-0
 838:	3a080300 	bcc	201440 <startup-0x1fdfebc0>
 83c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 840:	00180213 	andseq	r0, r8, r3, lsl r2
 844:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 848:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 84c:	0b3b0b3a 	bleq	ec353c <startup-0x1f13cac4>
 850:	01111927 	tsteq	r1, r7, lsr #18
 854:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 858:	00194297 	mulseq	r9, r7, r2
 85c:	00051400 	andeq	r1, r5, r0, lsl #8
 860:	0b3a0e03 	bleq	e84074 <startup-0x1f17bf8c>
 864:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 868:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000480 	andeq	r0, r0, r0, lsl #9
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	07c20002 	strbeq	r0, [r2, r2]
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000490 	mulcs	r0, r0, r4
  3c:	00000178 	andeq	r0, r0, r8, ror r1
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	09a80002 	stmibeq	r8!, {r1}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000608 	andcs	r0, r0, r8, lsl #12
  5c:	00000728 	andeq	r0, r0, r8, lsr #14
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0f560002 	svceq	0x00560002
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000d30 	andcs	r0, r0, r0, lsr sp
  7c:	0000034a 	andeq	r0, r0, sl, asr #6
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	127c0002 	rsbsne	r0, ip, #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	2000107c 	andcs	r1, r0, ip, ror r0
  9c:	00000178 	andeq	r0, r0, r8, ror r1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	144f0002 	strbne	r0, [pc], #-2	; b4 <startup-0x1fffff4c>
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200011f4 	strdcs	r1, [r0], -r4
  bc:	000003f2 	strdeq	r0, [r0], -r2
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000490 	mulcs	r0, r0, r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000191 	muleq	r0, r1, r1
   4:	00bc0002 	adcseq	r0, ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
  20:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; fffffe88 <exit_bits+0xdfffe780>
  24:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  28:	2f373130 	svccs	0x00373130
  2c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
  30:	30544144 	subscc	r4, r4, r4, asr #2
  34:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff78 <exit_bits+0xdfffe870>
  38:	20736261 	rsbscs	r6, r3, r1, ror #4
  3c:	20646e61 	rsbcs	r6, r4, r1, ror #28
  40:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
  44:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
  48:	70732f73 	rsbsvc	r2, r3, r3, ror pc
  4c:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  50:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  54:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
  58:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
  5c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
  60:	00657275 	rsbeq	r7, r5, r5, ror r2
  64:	61747300 	cmnvs	r4, r0, lsl #6
  68:	70757472 	rsbsvc	r7, r5, r2, ror r4
  6c:	0100632e 	tsteq	r0, lr, lsr #6
  70:	70670000 	rsbvc	r0, r7, r0
  74:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
  78:	00000100 	andeq	r0, r0, r0, lsl #2
  7c:	63737973 	cmnvs	r3, #1884160	; 0x1cc000
  80:	682e6766 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, sl, sp, lr}
  84:	00000100 	andeq	r0, r0, r0, lsl #2
  88:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
  8c:	0100682e 	tsteq	r0, lr, lsr #16
  90:	70730000 	rsbsvc	r0, r3, r0
  94:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  98:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
  9c:	00000100 	andeq	r0, r0, r0, lsl #2
  a0:	6c6c6177 	stfvse	f6, [ip], #-476	; 0xfffffe24
  a4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
  a8:	00000100 	andeq	r0, r0, r0, lsl #2
  ac:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
  b0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
  b4:	00000100 	andeq	r0, r0, r0, lsl #2
  b8:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
  bc:	2e736574 	mrccs	5, 3, r6, cr3, cr4, {3}
  c0:	00010068 	andeq	r0, r1, r8, rrx
  c4:	05000000 	streq	r0, [r0, #-0]
  c8:	00000002 	andeq	r0, r0, r2
  cc:	012d0320 			; <UNDEFINED> instruction: 0x012d0320
  d0:	03025e13 	movweq	r5, #11795	; 0x2e13
  d4:	00010100 	andeq	r0, r1, r0, lsl #2
  d8:	00100205 	andseq	r0, r0, r5, lsl #4
  dc:	36032000 	strcc	r2, [r3], -r0
  e0:	28033d01 	stmdacs	r3, {r0, r8, sl, fp, ip, sp}
  e4:	0068672e 	rsbeq	r6, r8, lr, lsr #14
  e8:	59030402 	stmdbpl	r3, {r1, sl}
  ec:	03040200 	movweq	r0, #16896	; 0x4200
  f0:	0402008f 	streq	r0, [r2], #-143	; 0xffffff71
  f4:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
  f8:	9191a15c 	orrsls	sl, r1, ip, asr r1
  fc:	03040200 	movweq	r0, #16896	; 0x4200
 100:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 104:	0200e303 	andeq	lr, r0, #201326592	; 0xc000000
 108:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 10c:	4b4b5c06 	blmi	12d712c <startup-0x1ed28ed4>
 110:	adc94e4b 	stclge	14, cr4, [r9, #300]	; 0x12c
 114:	aeadbbbb 	vdupge.16	<illegal reg q14.5>, fp
 118:	4b4b6767 	blmi	12d9ebc <startup-0x1ed26144>
 11c:	4a74033d 	bmi	1d00e18 <startup-0x1e2ff1e8>
 120:	24200d03 	strtcs	r0, [r0], #-3331	; 0xfffff2fd
 124:	4b4b4b4b 	blmi	12d2e58 <startup-0x1ed2d1a8>
 128:	67672ff4 			; <UNDEFINED> instruction: 0x67672ff4
 12c:	4ba0ae3e 	blmi	fe82ba2c <exit_bits+0xde82a324>
 130:	59cb7675 	stmibpl	fp, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 134:	84bc3d75 	ldrthi	r3, [ip], #3445	; 0xd75
 138:	02003d67 	andeq	r3, r0, #6592	; 0x19c0
 13c:	003d0304 	eorseq	r0, sp, r4, lsl #6
 140:	81030402 	tsthi	r3, r2, lsl #8
 144:	01040200 	mrseq	r0, R12_usr
 148:	02003c06 	andeq	r3, r0, #1536	; 0x600
 14c:	3b060204 	blcc	180964 <startup-0x1fe7f69c>
 150:	01040200 	mrseq	r0, R12_usr
 154:	43063c06 	movwmi	r3, #27654	; 0x6c06
 158:	4b832f2f 	blmi	fe0cbe1c <exit_bits+0xde0ca714>
 15c:	832f2f4d 			; <UNDEFINED> instruction: 0x832f2f4d
 160:	adad4d4b 	stcge	13, cr4, [sp, #300]!	; 0x12c
 164:	03040200 	movweq	r0, #16896	; 0x4200
 168:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 16c:	0200e503 	andeq	lr, r0, #12582912	; 0xc00000
 170:	00bb0304 	adcseq	r0, fp, r4, lsl #6
 174:	b7030402 	strlt	r0, [r3, -r2, lsl #8]
 178:	01040200 	mrseq	r0, R12_usr
 17c:	41063c06 	tstmi	r6, r6, lsl #24
 180:	2e0903a0 	cdpcs	3, 0, cr0, cr9, cr0, {5}
 184:	322f2f2f 	eorcc	r2, pc, #47, 30	; 0xbc
 188:	77754b3f 			; <UNDEFINED> instruction: 0x77754b3f
 18c:	75753f3d 	ldrbvc	r3, [r5, #-3901]!	; 0xfffff0c3
 190:	01001302 	tsteq	r0, r2, lsl #6
 194:	0000c501 	andeq	ip, r0, r1, lsl #10
 198:	7e000200 	cdpvc	2, 0, cr0, cr0, cr0, {0}
 19c:	02000000 	andeq	r0, r0, #0
 1a0:	0d0efb01 	vstreq	d15, [lr, #-4]
 1a4:	01010100 	mrseq	r0, (UNDEF: 17)
 1a8:	00000001 	andeq	r0, r0, r1
 1ac:	01000001 	tsteq	r0, r1
 1b0:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 1b4:	6f6f6863 	svcvs	0x006f6863
 1b8:	41442f6c 	cmpmi	r4, ip, ror #30
 1bc:	37313054 			; <UNDEFINED> instruction: 0x37313054
 1c0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 1c4:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 1c8:	2f373130 	svccs	0x00373130
 1cc:	7362614c 	cmnvc	r2, #76, 2
 1d0:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 1d4:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 1d8:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 1dc:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 1e0:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 1e4:	625f7379 	subsvs	r7, pc, #-469762047	; 0xe4000001
 1e8:	72617a69 	rsbvc	r7, r1, #430080	; 0x69000
 1ec:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
 1f0:	6e657664 	cdpvs	6, 6, cr7, cr5, cr4, {3}
 1f4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 1f8:	65640000 	strbvs	r0, [r4, #-0]!
 1fc:	5f79616c 	svcpl	0x0079616c
 200:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 204:	70757272 	rsbsvc	r7, r5, r2, ror r2
 208:	00632e74 	rsbeq	r2, r3, r4, ror lr
 20c:	73000001 	movwvc	r0, #1
 210:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 214:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 218:	00000100 	andeq	r0, r0, r0, lsl #2
 21c:	02050000 	andeq	r0, r5, #0
 220:	20000490 	mulcs	r0, r0, r4
 224:	3e2f2f18 	mcrcc	15, 1, r2, cr15, cr8, {0}
 228:	5a3d3d2f 	bpl	f4f6ec <startup-0x1f0b0914>
 22c:	683d3d2f 	ldmdavs	sp!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 230:	303e3d2f 	eorscc	r3, lr, pc, lsr #26
 234:	3d4b684e 	stclcc	8, cr6, [fp, #-312]	; 0xfffffec8
 238:	383d3d3d 	ldmdacc	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 23c:	3d4ba025 	stclcc	0, cr10, [fp, #-148]	; 0xffffff6c
 240:	383d3d3d 	ldmdacc	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 244:	3d4ba025 	stclcc	0, cr10, [fp, #-148]	; 0xffffff6c
 248:	763d3d4b 	ldrtvc	r3, [sp], -fp, asr #26
 24c:	2f763d2f 	svccs	0x00763d2f
 250:	4b4b593d 	blmi	12d674c <startup-0x1ed298b4>
 254:	1e331b35 	vmovne.s16	r1, d3[2]
 258:	000b023e 	andeq	r0, fp, lr, lsr r2
 25c:	01c30101 	biceq	r0, r3, r1, lsl #2
 260:	00020000 	andeq	r0, r2, r0
 264:	0000008e 	andeq	r0, r0, lr, lsl #1
 268:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 26c:	0101000d 	tsteq	r1, sp
 270:	00000101 	andeq	r0, r0, r1, lsl #2
 274:	00000100 	andeq	r0, r0, r0, lsl #2
 278:	2f3a4301 	svccs	0x003a4301
 27c:	6f686353 	svcvs	0x00686353
 280:	442f6c6f 	strtmi	r6, [pc], #-3183	; 288 <startup-0x1ffffd78>
 284:	31305441 	teqcc	r0, r1, asr #8
 288:	6f4d2f37 	svcvs	0x004d2f37
 28c:	41442d70 	hvcmi	17104	; 0x42d0
 290:	37313054 			; <UNDEFINED> instruction: 0x37313054
 294:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 298:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 29c:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 2a0:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 2a4:	2f736573 	svccs	0x00736573
 2a8:	6f6f7073 	svcvs	0x006f7073
 2ac:	5f737970 	svcpl	0x00737970
 2b0:	617a6962 	cmnvs	sl, r2, ror #18
 2b4:	5f657272 	svcpl	0x00657272
 2b8:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 2bc:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 2c0:	67000065 	strvs	r0, [r0, -r5, rrx]
 2c4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2c8:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 2cc:	616c7073 	smcvs	50947	; 0xc703
 2d0:	00632e79 	rsbeq	r2, r3, r9, ror lr
 2d4:	67000001 	strvs	r0, [r0, -r1]
 2d8:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 2dc:	00010068 	andeq	r0, r1, r8, rrx
 2e0:	61726700 	cmnvs	r2, r0, lsl #14
 2e4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2e8:	70736964 	rsbsvc	r6, r3, r4, ror #18
 2ec:	2e79616c 	rpwcsez	f6, f1, #4.0
 2f0:	00010068 	andeq	r0, r1, r8, rrx
 2f4:	05000000 	streq	r0, [r0, #-0]
 2f8:	00060802 	andeq	r0, r6, r2, lsl #16
 2fc:	59671420 	stmdbpl	r7!, {r5, sl, ip}^
 300:	76598391 			; <UNDEFINED> instruction: 0x76598391
 304:	83d75967 	bicshi	r5, r7, #1687552	; 0x19c000
 308:	03676859 	cmneq	r7, #5832704	; 0x590000
 30c:	70037410 	andvc	r7, r3, r0, lsl r4
 310:	4a100320 	bmi	400f98 <startup-0x1fbff068>
 314:	3d207203 	sfmcc	f7, 4, [r0, #-12]!
 318:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 31c:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 320:	3e3f4c22 	cdpcc	12, 3, cr4, cr15, cr2, {1}
 324:	323d3d3f 	eorscc	r3, sp, #4032	; 0xfc0
 328:	3d4b303d 	stclcc	0, cr3, [fp, #-244]	; 0xffffff0c
 32c:	77036731 	smladxvc	r3, r1, r7, r6
 330:	200a034a 	andcs	r0, sl, sl, asr #6
 334:	a03d3e25 	eorsge	r3, sp, r5, lsr #28
 338:	3e3e3f68 	cdpcc	15, 3, cr3, cr14, cr8, {3}
 33c:	313d3059 	teqcc	sp, r9, asr r0
 340:	593e3f5a 	ldmdbpl	lr!, {r1, r3, r4, r6, r8, r9, sl, fp, ip, sp}
 344:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 348:	3d2e0b03 	fstmdbxcc	lr!, {d0}	;@ Deprecated
 34c:	594b92ae 	stmdbpl	fp, {r1, r2, r3, r5, r7, r9, ip, pc}^
 350:	3f2f3d30 	svccc	0x002f3d30
 354:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 358:	3f3d323d 	svccc	0x003d323d
 35c:	3d91763d 	ldccc	6, cr7, [r1, #244]	; 0xf4
 360:	4c833d59 	stcmi	13, cr3, [r3], {89}	; 0x59
 364:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 368:	674c833d 	smlaldxvs	r8, ip, sp, r3
 36c:	2f4c6759 	svccs	0x004c6759
 370:	3d3e3e3e 	ldccc	14, cr3, [lr, #-248]!	; 0xffffff08
 374:	4b4b3e3e 	blmi	12cfc74 <startup-0x1ed3038c>
 378:	3d4c4b4b 	vstrcc	d20, [ip, #-300]	; 0xfffffed4
 37c:	9f4b3d3e 	svcls	0x004b3d3e
 380:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 384:	02004b03 	andeq	r4, r0, #3072	; 0xc00
 388:	00490304 	subeq	r0, r9, r4, lsl #6
 38c:	06010402 	streq	r0, [r1], -r2, lsl #8
 390:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 394:	00460602 	subeq	r0, r6, r2, lsl #12
 398:	06010402 	streq	r0, [r1], -r2, lsl #8
 39c:	4c520658 	mrrcmi	6, 5, r0, r2, cr8
 3a0:	040200e6 	streq	r0, [r2], #-230	; 0xffffff1a
 3a4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 3a8:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
 3ac:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 3b0:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
 3b4:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 3b8:	034bae5c 	movteq	sl, #48732	; 0xbe5c
 3bc:	4b20080d 	blmi	8023f8 <startup-0x1f7fdc08>
 3c0:	764b4b7a 			; <UNDEFINED> instruction: 0x764b4b7a
 3c4:	d7c9694b 	strble	r6, [r9, fp, asr #18]
 3c8:	ae4bc99f 			; <UNDEFINED> instruction: 0xae4bc99f
 3cc:	4e039fa0 	cdpmi	15, 0, cr9, cr3, cr0, {5}
 3d0:	0331313c 	teqeq	r1, #60, 2
 3d4:	4b5a202d 	blmi	1688490 <startup-0x1e977b70>
 3d8:	03040200 	movweq	r0, #16896	; 0x4200
 3dc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 3e0:	00c70803 	sbceq	r0, r7, r3, lsl #16
 3e4:	06010402 	streq	r0, [r1], -r2, lsl #8
 3e8:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 3ec:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 3f0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 3f4:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 3f8:	01040200 	mrseq	r0, R12_usr
 3fc:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
 400:	754b4b4c 	strbvc	r4, [fp, #-2892]	; 0xfffff4b4
 404:	04020077 	streq	r0, [r2], #-119	; 0xffffff89
 408:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 40c:	02005a83 	andeq	r5, r0, #536576	; 0x83000
 410:	4a060104 	bmi	180828 <startup-0x1fe7f7d8>
 414:	4b5b8306 	blmi	16e1034 <startup-0x1e91efcc>
 418:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 41c:	3d3d304c 	ldccc	0, cr3, [sp, #-304]!	; 0xfffffed0
 420:	01000802 	tsteq	r0, r2, lsl #16
 424:	00010301 	andeq	r0, r1, r1, lsl #6
 428:	78000200 	stmdavc	r0, {r9}
 42c:	02000000 	andeq	r0, r0, #0
 430:	0d0efb01 	vstreq	d15, [lr, #-4]
 434:	01010100 	mrseq	r0, (UNDEF: 17)
 438:	00000001 	andeq	r0, r0, r1
 43c:	01000001 	tsteq	r0, r1
 440:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 444:	6f6f6863 	svcvs	0x006f6863
 448:	41442f6c 	cmpmi	r4, ip, ror #30
 44c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 450:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 454:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 458:	2f373130 	svccs	0x00373130
 45c:	7362614c 	cmnvc	r2, #76, 2
 460:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 464:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 468:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 46c:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 470:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 474:	625f7379 	subsvs	r7, pc, #-469762047	; 0xe4000001
 478:	72617a69 	rsbvc	r7, r1, #430080	; 0x69000
 47c:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
 480:	6e657664 	cdpvs	6, 6, cr7, cr5, cr4, {3}
 484:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 488:	73610000 	cmnvc	r1, #0
 48c:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 490:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 494:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 498:	00000100 	andeq	r0, r0, r0, lsl #2
 49c:	6f697067 	svcvs	0x00697067
 4a0:	0100682e 	tsteq	r0, lr, lsr #16
 4a4:	00000000 	andeq	r0, r0, r0
 4a8:	0d300205 	lfmeq	f0, 4, [r0, #-20]!	; 0xffffffec
 4ac:	30142000 	andscc	r2, r4, r0
 4b0:	5a5a403e 	bpl	16905b0 <startup-0x1e96fa50>
 4b4:	6884595a 	stmvs	r4, {r1, r3, r4, r6, r8, fp, ip, lr}
 4b8:	68839159 	stmvs	r3, {r0, r3, r4, r6, r8, ip, pc}
 4bc:	84d75968 	ldrbhi	r5, [r7], #2408	; 0x968
 4c0:	3f3d6876 	svccc	0x003d6876
 4c4:	3d684c59 	stclcc	12, cr4, [r8, #-356]!	; 0xfffffe9c
 4c8:	3f4c593f 	svccc	0x004c593f
 4cc:	5b3e3d69 	blpl	f8fa78 <startup-0x1f070588>
 4d0:	3f842f68 	svccc	0x00842f68
 4d4:	5b3f3d69 	blpl	fcfa80 <startup-0x1f030580>
 4d8:	68842f68 	stmvs	r4, {r3, r5, r6, r8, r9, sl, fp, sp}
 4dc:	3d314d3f 	ldccc	13, cr4, [r1, #-252]!	; 0xffffff04
 4e0:	313f4068 	teqcc	pc, r8, rrx
 4e4:	762f3e4d 	strtvc	r3, [pc], -sp, asr #28
 4e8:	040200ae 	streq	r0, [r2], #-174	; 0xffffff52
 4ec:	06200601 	strteq	r0, [r0], -r1, lsl #12
 4f0:	4b5b3f67 	blmi	16d0294 <startup-0x1e92fd6c>
 4f4:	4c4c1e4e 	mcrrmi	14, 4, r1, ip, cr14
 4f8:	003f3d68 	eorseq	r3, pc, r8, ror #26
 4fc:	06010402 	streq	r0, [r1], -r2, lsl #8
 500:	3f670620 	svccc	0x00670620
 504:	5a4c3d5b 	bpl	130fa78 <startup-0x1ecf0588>
 508:	01040200 	mrseq	r0, R12_usr
 50c:	40063c06 	andmi	r3, r6, r6, lsl #24
 510:	01040200 	mrseq	r0, R12_usr
 514:	41063c06 	tstmi	r6, r6, lsl #24
 518:	03783d67 	cmneq	r8, #6592	; 0x19c0
 51c:	0332c872 	teqeq	r2, #7471104	; 0x720000
 520:	4c3e200b 	ldcmi	0, cr2, [lr], #-44	; 0xffffffd4
 524:	024d7321 	subeq	r7, sp, #-2080374784	; 0x84000000
 528:	01010004 	tsteq	r1, r4
 52c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 530:	007e0002 	rsbseq	r0, lr, r2
 534:	01020000 	mrseq	r0, (UNDEF: 2)
 538:	000d0efb 	strdeq	r0, [sp], -fp
 53c:	01010101 	tsteq	r1, r1, lsl #2
 540:	01000000 	mrseq	r0, (UNDEF: 0)
 544:	43010000 	movwmi	r0, #4096	; 0x1000
 548:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
 54c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 3b4 <startup-0x1ffffc4c>
 550:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 554:	2f373130 	svccs	0x00373130
 558:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 55c:	30544144 	subscc	r4, r4, r4, asr #2
 560:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; 4a4 <startup-0x1ffffb5c>
 564:	20736261 	rsbscs	r6, r3, r1, ror #4
 568:	20646e61 	rsbcs	r6, r4, r1, ror #28
 56c:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 570:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 574:	70732f73 	rsbsvc	r2, r3, r3, ror pc
 578:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 57c:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 580:	7272617a 	rsbsvc	r6, r2, #-2147483618	; 0x8000001e
 584:	64615f65 	strbtvs	r5, [r1], #-3941	; 0xfffff09b
 588:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
 58c:	00657275 	rsbeq	r7, r5, r5, ror r2
 590:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 594:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 598:	00010063 	andeq	r0, r1, r3, rrx
 59c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 5a0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 5a4:	6b000001 	blvs	5b0 <startup-0x1ffffa50>
 5a8:	61707965 	cmnvs	r0, r5, ror #18
 5ac:	00682e64 	rsbeq	r2, r8, r4, ror #28
 5b0:	00000001 	andeq	r0, r0, r1
 5b4:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
 5b8:	14200010 	strtne	r0, [r0], #-16
 5bc:	6775672f 	ldrbvs	r6, [r5, -pc, lsr #14]!
 5c0:	5975674b 	ldmdbpl	r5!, {r0, r1, r3, r6, r8, r9, sl, sp, lr}^
 5c4:	594c3f5a 	stmdbpl	ip, {r1, r3, r4, r6, r8, r9, sl, fp, ip, sp}^
 5c8:	003d4b59 	eorseq	r4, sp, r9, asr fp
 5cc:	03020402 	movweq	r0, #9218	; 0x2402
 5d0:	0200ac7a 	andeq	sl, r0, #31232	; 0x7a00
 5d4:	58060104 	stmdapl	r6, {r2, r8}
 5d8:	4a0a0306 	bmi	2811f8 <startup-0x1fd7ee08>
 5dc:	6768213d 			; <UNDEFINED> instruction: 0x6768213d
 5e0:	4b4b4b91 	blmi	12d342c <startup-0x1ed2cbd4>
 5e4:	3f924c4b 	svccc	0x00924c4b
 5e8:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 5ec:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 5f0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 5f4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 5f8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 5fc:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 600:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 604:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 608:	0602212f 	streq	r2, [r2], -pc, lsr #2
 60c:	27010100 	strcs	r0, [r1, -r0, lsl #2]
 610:	02000001 	andeq	r0, r0, #1
 614:	00009c00 	andeq	r9, r0, r0, lsl #24
 618:	fb010200 	blx	40e22 <startup-0x1ffbf1de>
 61c:	01000d0e 	tsteq	r0, lr, lsl #26
 620:	00010101 	andeq	r0, r1, r1, lsl #2
 624:	00010000 	andeq	r0, r1, r0
 628:	3a430100 	bcc	10c0a30 <startup-0x1ef3f5d0>
 62c:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 630:	2f6c6f6f 	svccs	0x006c6f6f
 634:	30544144 	subscc	r4, r4, r4, asr #2
 638:	4d2f3731 	stcmi	7, cr3, [pc, #-196]!	; 57c <startup-0x1ffffa84>
 63c:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 640:	31305441 	teqcc	r0, r1, asr #8
 644:	614c2f37 	cmpvs	ip, r7, lsr pc
 648:	61207362 			; <UNDEFINED> instruction: 0x61207362
 64c:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 650:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 654:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 658:	6f70732f 	svcvs	0x0070732f
 65c:	7379706f 	cmnvc	r9, #111	; 0x6f
 660:	7a69625f 	bvc	1a58fe4 <startup-0x1e5a701c>
 664:	65727261 	ldrbvs	r7, [r2, #-609]!	; 0xfffffd9f
 668:	7664615f 			; <UNDEFINED> instruction: 0x7664615f
 66c:	75746e65 	ldrbvc	r6, [r4, #-3685]!	; 0xfffff19b
 670:	00006572 	andeq	r6, r0, r2, ror r5
 674:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 678:	2e736574 	mrccs	5, 3, r6, cr3, cr4, {3}
 67c:	00010063 	andeq	r0, r1, r3, rrx
 680:	6f707300 	svcvs	0x00707300
 684:	2e79706f 	cdpcs	0, 7, cr7, cr9, cr15, {3}
 688:	006d6278 	rsbeq	r6, sp, r8, ror r2
 68c:	77000001 	strvc	r0, [r0, -r1]
 690:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
 694:	006d6278 	rsbeq	r6, sp, r8, ror r2
 698:	65000001 	strvs	r0, [r0, #-1]
 69c:	2e746978 			; <UNDEFINED> instruction: 0x2e746978
 6a0:	006d6278 	rsbeq	r6, sp, r8, ror r2
 6a4:	73000001 	movwvc	r0, #1
 6a8:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 6ac:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 6b0:	00000100 	andeq	r0, r0, r0, lsl #2
 6b4:	02050000 	andeq	r0, r5, #0
 6b8:	200011f4 	strdcs	r1, [r0], -r4
 6bc:	4b4b7514 	blmi	12ddb14 <startup-0x1ed224ec>
 6c0:	75774c3d 	ldrbvc	r4, [r7, #-3133]!	; 0xfffff3c3
 6c4:	3d3d6968 			; <UNDEFINED> instruction: 0x3d3d6968
 6c8:	00913dbb 			; <UNDEFINED> instruction: 0x00913dbb
 6cc:	08020402 	stmdaeq	r2, {r1, sl}
 6d0:	0402009c 	streq	r0, [r2], #-156	; 0xffffff64
 6d4:	003c0601 	eorseq	r0, ip, r1, lsl #12
 6d8:	06020402 	streq	r0, [r2], -r2, lsl #8
 6dc:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 6e0:	003c0601 	eorseq	r0, ip, r1, lsl #12
 6e4:	06020402 	streq	r0, [r2], -r2, lsl #8
 6e8:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 6ec:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 6f0:	4c660a03 			; <UNDEFINED> instruction: 0x4c660a03
 6f4:	4b4c914b 	blmi	1324c28 <startup-0x1ecdb3d8>
 6f8:	594b4c91 	stmdbpl	fp, {r0, r4, r7, sl, fp, lr}^
 6fc:	3d4b7675 	stclcc	6, cr7, [fp, #-468]	; 0xfffffe2c
 700:	4b85833e 	blmi	fe161400 <exit_bits+0xde15fcf8>
 704:	84833e3d 	strhi	r3, [r3], #3645	; 0xe3d
 708:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 70c:	3e214b4c 	vnmulcc.f64	d4, d1, d12
 710:	3d3e2167 	ldfccs	f2, [lr, #-412]!	; 0xfffffe64
 714:	03693fc0 	cmneq	r9, #192, 30	; 0x300
 718:	21ba080a 			; <UNDEFINED> instruction: 0x21ba080a
 71c:	3ec03dd8 	mcrcc	13, 6, r3, cr0, cr8, {6}
 720:	080a0368 	stmdaeq	sl, {r3, r5, r6, r8, r9}
 724:	3dd821ba 	ldfcce	f2, [r8, #744]	; 0x2e8
 728:	03683ec0 	cmneq	r8, #192, 28	; 0xc00
 72c:	21ba080a 			; <UNDEFINED> instruction: 0x21ba080a
 730:	59594bd8 	ldmdbpl	r9, {r3, r4, r6, r7, r8, r9, fp, lr}^
 734:	00040259 	andeq	r0, r4, r9, asr r2
 738:	Address 0x00000738 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
   4:	7000776f 	andvc	r7, r0, pc, ror #14
   8:	6552636d 	ldrbvs	r6, [r2, #-877]	; 0xfffffc93
   c:	76726573 			; <UNDEFINED> instruction: 0x76726573
  10:	65006465 	strvs	r6, [r0, #-1125]	; 0xfffffb9b
  14:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
  18:	6f4c3272 	svcvs	0x004c3272
  1c:	655f0077 	ldrbvs	r0, [pc, #-119]	; ffffffad <exit_bits+0xdfffe8a5>
  20:	00697478 	rsbeq	r7, r9, r8, ror r4
  24:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
  28:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
  2c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
  30:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
  34:	685f7470 	ldmdavs	pc, {r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  38:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
  3c:	65007265 	strvs	r7, [r0, #-613]	; 0xfffffd9b
  40:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
  44:	65003172 	strvs	r3, [r0, #-370]	; 0xfffffe8e
  48:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
  4c:	65003272 	strvs	r3, [r0, #-626]	; 0xfffffd8e
  50:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
  54:	65003372 	strvs	r3, [r0, #-882]	; 0xfffffc8e
  58:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
  5c:	77003472 	smlsdxvc	r0, r2, r4, r3
  60:	5f6c6c61 	svcpl	0x006c6c61
  64:	73746962 	cmnvc	r4, #1605632	; 0x188000
  68:	72646f00 	rsbvc	r6, r4, #0, 30
  6c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
  70:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  74:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  78:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  7c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  80:	30373130 	eorscc	r3, r7, r0, lsr r1
  84:	20353132 	eorscs	r3, r5, r2, lsr r1
  88:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  8c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  90:	415b2029 	cmpmi	fp, r9, lsr #32
  94:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff34a <exit_bits+0xdfffdc42>
  98:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  9c:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  a0:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
  a4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  a8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  ac:	6f697369 	svcvs	0x00697369
  b0:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
  b4:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
  b8:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  bc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  c0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  c4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  c8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  cc:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  d0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  d4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  d8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  dc:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  e0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  e4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  e8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  ec:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  f0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  f4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  f8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  fc:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 100:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 104:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 108:	7a697300 	bvc	1a5cd10 <startup-0x1e5a32f0>
 10c:	70797465 	rsbsvc	r7, r9, r5, ror #8
 110:	6d630065 	stclvs	0, cr0, [r3, #-404]!	; 0xfffffe6c
 114:	48726370 	ldmdami	r2!, {r4, r5, r6, r8, r9, sp, lr}^
 118:	00686769 	rsbeq	r6, r8, r9, ror #14
 11c:	63706d63 	cmnvs	r0, #6336	; 0x18c0
 120:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 124:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 128:	656d006e 	strbvs	r0, [sp, #-110]!	; 0xffffff92
 12c:	706d726d 	rsbvc	r7, sp, sp, ror #4
 130:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 134:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 138:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 13c:	656b0073 	strbvs	r0, [fp, #-115]!	; 0xffffff8d
 140:	616f6279 	smcvs	63017	; 0xf629
 144:	765f6472 			; <UNDEFINED> instruction: 0x765f6472
 148:	77006c61 	strvc	r6, [r0, -r1, ror #24]
 14c:	736c6c61 	cmnvc	ip, #24832	; 0x6100
 150:	79746f00 	ldmdbvc	r4!, {r8, r9, sl, fp, sp, lr}^
 154:	00726570 	rsbseq	r6, r2, r0, ror r5
 158:	6f746f67 	svcvs	0x00746f67
 15c:	65007978 	strvs	r7, [r0, #-2424]	; 0xfffff688
 160:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
 164:	6f4c3372 	svcvs	0x004c3372
 168:	69770077 	ldmdbvs	r7!, {r0, r1, r2, r4, r5, r6}^
 16c:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 170:	00657461 	rsbeq	r7, r5, r1, ror #8
 174:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 178:	656d5f74 	strbvs	r5, [sp, #-3956]!	; 0xfffff08c
 17c:	67617373 			; <UNDEFINED> instruction: 0x67617373
 180:	77003265 	strvc	r3, [r0, -r5, ror #4]
 184:	5f6c6c61 	svcpl	0x006c6c61
 188:	69770079 	ldmdbvs	r7!, {r0, r3, r4, r5, r6}^
 18c:	00687464 	rsbeq	r7, r8, r4, ror #8
 190:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 194:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 198:	5f657469 	svcpl	0x00657469
 19c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 1a0:	6d00676e 	stcvs	7, cr6, [r0, #-440]	; 0xfffffe48
 1a4:	0065766f 	rsbeq	r7, r5, pc, ror #12
 1a8:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 1ac:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 1b0:	6568635f 	strbvs	r6, [r8, #-863]!	; 0xfffffca1
 1b4:	6e696b63 	vnmulvs.f64	d22, d9, d19
 1b8:	78650067 	stmdavc	r5!, {r0, r1, r2, r5, r6}^
 1bc:	785f7469 	ldmdavc	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 1c0:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
 1c4:	00795f74 	rsbseq	r5, r9, r4, ror pc
 1c8:	6c6c6177 	stfvse	f6, [ip], #-476	; 0xfffffe24
 1cc:	6f00785f 	svcvs	0x0000785f
 1d0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 1d4:	77007264 	strvc	r7, [r0, -r4, ror #4]
 1d8:	5f6c6c61 	svcpl	0x006c6c61
 1dc:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 1e0:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 1e4:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 1e8:	656d0062 	strbvs	r0, [sp, #-98]!	; 0xffffff9e
 1ec:	706d726d 	rsbvc	r7, sp, sp, ror #4
 1f0:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 1f4:	50535000 	subspl	r5, r3, r0
 1f8:	45544952 	ldrbmi	r4, [r4, #-2386]	; 0xfffff6ae
 1fc:	70537400 	subsvc	r7, r3, r0, lsl #8
 200:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 204:	63736100 	cmnvs	r3, #0, 2
 208:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
 20c:	616c7073 	smcvs	50947	; 0xc703
 210:	6e695f79 	mcrvs	15, 3, r5, cr9, cr9, {3}
 214:	5f007469 	svcpl	0x00007469
 218:	43535953 	cmpmi	r3, #1359872	; 0x14c000
 21c:	72004746 	andvc	r4, r0, #18350080	; 0x1180000
 220:	00727374 	rsbseq	r7, r2, r4, ror r3
 224:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 228:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 22c:	61686320 	cmnvs	r8, r0, lsr #6
 230:	6d630072 	stclvs	0, cr0, [r3, #-456]!	; 0xfffffe38
 234:	00726370 	rsbseq	r6, r2, r0, ror r3
 238:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 23c:	76007263 	strvc	r7, [r0], -r3, ror #4
 240:	6f746369 	svcvs	0x00746369
 244:	6d5f7972 	vldrvs.16	s15, [pc, #-228]	; 168 <startup-0x1ffffe98>	; <UNPREDICTABLE>
 248:	61737365 	cmnvs	r3, r5, ror #6
 24c:	00326567 	eorseq	r6, r2, r7, ror #10
 250:	6f6f7073 	svcvs	0x006f7073
 254:	705f7970 	subsvc	r7, pc, r0, ror r9	; <UNPREDICTABLE>
 258:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 25c:	6e007265 	cdpvs	2, 0, cr7, cr0, cr5, {3}
 260:	5f747865 	svcpl	0x00747865
 264:	63617073 	cmnvs	r1, #115	; 0x73
 268:	53500065 	cmppl	r0, #101	; 0x65
 26c:	54495250 	strbpl	r5, [r9], #-592	; 0xfffffdb0
 270:	424f5f45 	submi	r5, pc, #276	; 0x114
 274:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 278:	736f7000 	cmnvc	pc, #0
 27c:	6500785f 	strvs	r7, [r0, #-2143]	; 0xfffff7a1
 280:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
 284:	6f4c3472 	svcvs	0x004c3472
 288:	70730077 	rsbsvc	r0, r3, r7, ror r0
 28c:	5f706f6f 	svcpl	0x00706f6f
 290:	73746962 	cmnvc	r4, #1605632	; 0x188000
 294:	69656800 	stmdbvs	r5!, {fp, sp, lr}^
 298:	00746867 	rsbseq	r6, r4, r7, ror #16
 29c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 2a0:	7473006f 	ldrbtvc	r0, [r3], #-111	; 0xffffff91
 2a4:	5f747261 	svcpl	0x00747261
 2a8:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
 2ac:	31656761 	cmncc	r5, r1, ror #14
 2b0:	6f707300 	svcvs	0x00707300
 2b4:	5f79706f 	svcpl	0x0079706f
 2b8:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
 2bc:	5f746e65 	svcpl	0x00746e65
 2c0:	78650078 	stmdavc	r5!, {r3, r4, r5, r6}^
 2c4:	72636974 	rsbvc	r6, r3, #116, 18	; 0x1d0000
 2c8:	67694833 			; <UNDEFINED> instruction: 0x67694833
 2cc:	656d0068 	strbvs	r0, [sp, #-104]!	; 0xffffff98
 2d0:	706d726d 	rsbvc	r7, sp, sp, ror #4
 2d4:	2f3a4300 	svccs	0x003a4300
 2d8:	6f686353 	svcvs	0x00686353
 2dc:	442f6c6f 	strtmi	r6, [pc], #-3183	; 2e4 <startup-0x1ffffd1c>
 2e0:	31305441 	teqcc	r0, r1, asr #8
 2e4:	6f4d2f37 	svcvs	0x004d2f37
 2e8:	41442d70 	hvcmi	17104	; 0x42d0
 2ec:	37313054 			; <UNDEFINED> instruction: 0x37313054
 2f0:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 2f4:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 2f8:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 2fc:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 300:	2f736573 	svccs	0x00736573
 304:	6f6f7073 	svcvs	0x006f7073
 308:	5f737970 	svcpl	0x00737970
 30c:	617a6962 	cmnvs	sl, r2, ror #18
 310:	5f657272 	svcpl	0x00657272
 314:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 318:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 31c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
 320:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 324:	00632e70 	rsbeq	r2, r3, r0, ror lr
 328:	74636976 	strbtvc	r6, [r3], #-2422	; 0xfffff68a
 32c:	5f79726f 	svcpl	0x0079726f
 330:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
 334:	31656761 	cmncc	r5, r1, ror #14
 338:	6f687300 	svcvs	0x00687300
 33c:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 340:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 344:	2064656e 	rsbcs	r6, r4, lr, ror #10
 348:	00746e69 	rsbseq	r6, r4, r9, ror #28
 34c:	4f495047 	svcmi	0x00495047
 350:	736f7000 	cmnvc	pc, #0
 354:	6500795f 	strvs	r7, [r0, #-2399]	; 0xfffff6a1
 358:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
 35c:	69483172 	stmdbvs	r8, {r1, r4, r5, r6, r8, ip, sp}^
 360:	5f006867 	svcpl	0x00006867
 364:	63737973 	cmnvs	r3, #1884160	; 0x1cc000
 368:	69006766 	stmdbvs	r0, {r1, r2, r5, r6, r8, r9, sl, sp, lr}
 36c:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 370:	74006867 	strvc	r6, [r0], #-2151	; 0xfffff799
 374:	69727053 	ldmdbvs	r2!, {r0, r1, r4, r6, ip, sp, lr}^
 378:	624f6574 	subvs	r6, pc, #116, 10	; 0x1d000000
 37c:	7865006a 	stmdavc	r5!, {r1, r3, r5, r6}^
 380:	72636974 	rsbvc	r6, r3, #116, 18	; 0x1d0000
 384:	776f4c31 			; <UNDEFINED> instruction: 0x776f4c31
 388:	61726400 	cmnvs	r2, r0, lsl #8
 38c:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 390:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 394:	00646565 	rsbeq	r6, r4, r5, ror #10
 398:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
 39c:	70610049 	rsbvc	r0, r1, r9, asr #32
 3a0:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
 3a4:	65007469 	strvs	r7, [r0, #-1129]	; 0xfffffb97
 3a8:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
 3ac:	69483272 	stmdbvs	r8, {r1, r4, r5, r6, r9, ip, sp}^
 3b0:	70006867 	andvc	r6, r0, r7, ror #16
 3b4:	72647075 	rsbvc	r7, r4, #117	; 0x75
 3b8:	73746600 	cmnvc	r4, #0, 12
 3bc:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 3c0:	6d5f7469 	cfldrdvs	mvd7, [pc, #-420]	; 224 <startup-0x1ffffddc>
 3c4:	675f7061 	ldrbvs	r7, [pc, -r1, rrx]
 3c8:	00646972 	rsbeq	r6, r4, r2, ror r9
 3cc:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 3d0:	6d700072 	ldclvs	0, cr0, [r0, #-456]!	; 0xfffffe38
 3d4:	74794263 	ldrbtvc	r4, [r9], #-611	; 0xfffffd9d
 3d8:	6b003365 	blvs	d174 <startup-0x1fff2e8c>
 3dc:	6f627965 	svcvs	0x00627965
 3e0:	5f647261 	svcpl	0x00647261
 3e4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 3e8:	72707300 	rsbsvc	r7, r0, #0, 6
 3ec:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
 3f0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 3f4:	78650070 	stmdavc	r5!, {r4, r5, r6}^
 3f8:	72636974 	rsbvc	r6, r3, #116, 18	; 0x1d0000
 3fc:	67694834 			; <UNDEFINED> instruction: 0x67694834
 400:	70730068 	rsbsvc	r0, r3, r8, rrx
 404:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 408:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
 40c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
 410:	6500795f 	strvs	r7, [r0, #-2399]	; 0xfffff6a1
 414:	5f746978 	svcpl	0x00746978
 418:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 41c:	00726574 	rsbseq	r6, r2, r4, ror r5
 420:	5f726964 	svcpl	0x00726964
 424:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
 428:	00795f72 	rsbseq	r5, r9, r2, ror pc
 42c:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 430:	7300776f 	movwvc	r7, #1903	; 0x76f
 434:	72656977 	rsbvc	r6, r5, #1949696	; 0x1dc000
 438:	6f707300 	svcvs	0x00707300
 43c:	5f79706f 	svcpl	0x0079706f
 440:	70730078 	rsbsvc	r0, r3, r8, ror r0
 444:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 448:	6400795f 	strvs	r7, [r0], #-2399	; 0xfffff6a1
 44c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 450:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 454:	6900696c 	stmdbvs	r0, {r2, r3, r5, r6, r8, fp, sp, lr}
 458:	5f74696e 	svcpl	0x0074696e
 45c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 460:	5f6b6369 	svcpl	0x006b6369
 464:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 468:	70757272 	rsbsvc	r7, r5, r2, ror r2
 46c:	61685f74 	smcvs	34292	; 0x85f4
 470:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 474:	6f630072 	svcvs	0x00630072
 478:	00746e75 	rsbseq	r6, r4, r5, ror lr
 47c:	54535953 	ldrbpl	r5, [r3], #-2387	; 0xfffff6ad
 480:	5f4b4349 	svcpl	0x004b4349
 484:	55525453 	ldrbpl	r5, [r2, #-1107]	; 0xfffffbad
 488:	64005443 	strvs	r5, [r0], #-1091	; 0xfffffbbd
 48c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 490:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 494:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 498:	695f7470 	ldmdbvs	pc, {r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 49c:	0074696e 	rsbseq	r6, r4, lr, ror #18
 4a0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 4a4:	61747300 	cmnvs	r4, r0, lsl #6
 4a8:	645f7472 	ldrbvs	r7, [pc], #-1138	; 4b0 <startup-0x1ffffb50>
 4ac:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 4b0:	2f3a4300 	svccs	0x003a4300
 4b4:	6f686353 	svcvs	0x00686353
 4b8:	442f6c6f 	strtmi	r6, [pc], #-3183	; 4c0 <startup-0x1ffffb40>
 4bc:	31305441 	teqcc	r0, r1, asr #8
 4c0:	6f4d2f37 	svcvs	0x004d2f37
 4c4:	41442d70 	hvcmi	17104	; 0x42d0
 4c8:	37313054 			; <UNDEFINED> instruction: 0x37313054
 4cc:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 4d0:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 4d4:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 4d8:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 4dc:	2f736573 	svccs	0x00736573
 4e0:	6f6f7073 	svcvs	0x006f7073
 4e4:	5f737970 	svcpl	0x00737970
 4e8:	617a6962 	cmnvs	sl, r2, ror #18
 4ec:	5f657272 	svcpl	0x00657272
 4f0:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 4f4:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 4f8:	65642f65 	strbvs	r2, [r4, #-3941]!	; 0xfffff09b
 4fc:	5f79616c 	svcpl	0x0079616c
 500:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 504:	70757272 	rsbsvc	r7, r5, r2, ror r2
 508:	00632e74 	rsbeq	r2, r3, r4, ror lr
 50c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 510:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 514:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 518:	736e3035 	cmnvc	lr, #53	; 0x35
 51c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 520:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffffbc7 <exit_bits+0xdfffe4bf>
 524:	736e3030 	cmnvc	lr, #48	; 0x30
 528:	72746300 	rsbsvc	r6, r4, #0, 6
 52c:	6968546c 	stmdbvs	r8!, {r2, r3, r5, r6, sl, ip, lr}^
 530:	79426472 	stmdbvc	r2, {r1, r4, r5, r6, sl, sp, lr}^
 534:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
 538:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 53c:	756f635f 	strbvc	r6, [pc, #-863]!	; 1e5 <startup-0x1ffffe1b>
 540:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 544:	72746300 	rsbsvc	r6, r4, #0, 6
 548:	7269466c 	rsbvc	r4, r9, #108, 12	; 0x6c00000
 54c:	79427473 	stmdbvc	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 550:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
 554:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 558:	31646576 	smccc	18006	; 0x4656
 55c:	73657200 	cmnvc	r5, #0, 4
 560:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 564:	5f003264 	svcpl	0x00003264
 568:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 56c:	006b6369 	rsbeq	r6, fp, r9, ror #6
 570:	616c6564 	cmnvs	ip, r4, ror #10
 574:	6d315f79 	ldcvs	15, cr5, [r1, #-484]!	; 0xfffffe1c
 578:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 57c:	6c757000 	ldclvs	0, cr7, [r5], #-0
 580:	00736573 	rsbseq	r6, r3, r3, ror r5
 584:	616c6564 	cmnvs	ip, r4, ror #10
 588:	6d315f79 	ldcvs	15, cr5, [r1, #-484]!	; 0xfffffe1c
 58c:	6f726b69 	svcvs	0x00726b69
 590:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 594:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 4da <startup-0x1ffffb26>	; <UNPREDICTABLE>
 598:	6f726b69 	svcvs	0x00726b69
 59c:	6c616300 	stclvs	3, cr6, [r1], #-0
 5a0:	73006269 	movwvc	r6, #617	; 0x269
 5a4:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 5a8:	665f6b63 	ldrbvs	r6, [pc], -r3, ror #22
 5ac:	0067616c 	rsbeq	r6, r7, ip, ror #2
 5b0:	4f454750 	svcmi	0x00454750
 5b4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
 5b8:	72670059 	rsbvc	r0, r7, #89	; 0x59
 5bc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 5c0:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 5c4:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 5c8:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 5cc:	73007465 	movwvc	r7, #1125	; 0x465
 5d0:	5f657a69 	svcpl	0x00657a69
 5d4:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 5d8:	795f657a 	ldmdbvc	pc, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 5dc:	61726400 	cmnvs	r2, r0, lsl #8
 5e0:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 5e4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 5e8:	6c657300 	stclvs	3, cr7, [r5], #-0
 5ec:	5f746365 	svcpl	0x00746365
 5f0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 5f4:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 5f8:	67007265 	strvs	r7, [r0, -r5, ror #4]
 5fc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 600:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 604:	5f646165 	svcpl	0x00646165
 608:	61746164 	cmnvs	r4, r4, ror #2
 60c:	67617000 	strbvs	r7, [r1, -r0]!
 610:	69700065 	ldmdbvs	r0!, {r0, r2, r5, r6}^
 614:	006c6578 	rsbeq	r6, ip, r8, ror r5
 618:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 61c:	5000746e 	andpl	r7, r0, lr, ror #8
 620:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 624:	615f7800 	cmpvs	pc, r0, lsl #16
 628:	61757463 	cmnvs	r5, r3, ror #8
 62c:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 630:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 634:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 638:	00657469 	rsbeq	r7, r5, r9, ror #8
 63c:	706d6574 	rsbvc	r6, sp, r4, ror r5
 640:	61726700 	cmnvs	r2, r0, lsl #14
 644:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 648:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 64c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 650:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 654:	00726165 	rsbseq	r6, r2, r5, ror #2
 658:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 65c:	5f6c6f72 	svcpl	0x006c6f72
 660:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 664:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 668:	61726700 	cmnvs	r2, r0, lsl #14
 66c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 670:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 674:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 678:	00657a69 	rsbeq	r7, r5, r9, ror #20
 67c:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 680:	6f6f6863 	svcvs	0x006f6863
 684:	41442f6c 	cmpmi	r4, ip, ror #30
 688:	37313054 			; <UNDEFINED> instruction: 0x37313054
 68c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 690:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 694:	2f373130 	svccs	0x00373130
 698:	7362614c 	cmnvc	r2, #76, 2
 69c:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 6a0:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 6a4:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 6a8:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 6ac:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 6b0:	625f7379 	subsvs	r7, pc, #-469762047	; 0xe4000001
 6b4:	72617a69 	rsbvc	r7, r1, #430080	; 0x69000
 6b8:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
 6bc:	6e657664 	cdpvs	6, 6, cr7, cr5, cr4, {3}
 6c0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 6c4:	6172672f 	cmnvs	r2, pc, lsr #14
 6c8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 6cc:	70736964 	rsbsvc	r6, r3, r4, ror #18
 6d0:	2e79616c 	rpwcsez	f6, f1, #4.0
 6d4:	47740063 	ldrbmi	r0, [r4, -r3, rrx]!
 6d8:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 6dc:	00797274 	rsbseq	r7, r9, r4, ror r2
 6e0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 6e4:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 6e8:	70617267 	rsbvc	r7, r1, r7, ror #4
 6ec:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 6f0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 6f4:	695f7961 	ldmdbvs	pc, {r0, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
 6f8:	0074696e 	rsbseq	r6, r4, lr, ror #18
 6fc:	70736964 	rsbsvc	r6, r3, r4, ror #18
 700:	5f79616c 	svcpl	0x0079616c
 704:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
 708:	6174735f 	cmnvs	r4, pc, asr r3
 70c:	00737574 	rsbseq	r7, r3, r4, ror r5
 710:	6b73616d 	blvs	1cd8ccc <startup-0x1e327334>
 714:	61726700 	cmnvs	r2, r0, lsl #14
 718:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 71c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 720:	645f6574 	ldrbvs	r6, [pc], #-1396	; 728 <startup-0x1ffff8d8>
 724:	00617461 	rsbeq	r7, r1, r1, ror #8
 728:	5f746573 	svcpl	0x00746573
 72c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 730:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 734:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 738:	61726700 	cmnvs	r2, r0, lsl #14
 73c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 740:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 744:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 748:	00796461 	rsbseq	r6, r9, r1, ror #8
 74c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 750:	6c630078 	stclvs	0, cr0, [r3], #-480	; 0xfffffe20
 754:	5f726165 	svcpl	0x00726165
 758:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 75c:	74007463 	strvc	r7, [r0], #-1123	; 0xfffffb9d
 760:	006a624f 	rsbeq	r6, sl, pc, asr #4
 764:	70617267 	rsbvc	r7, r1, r7, ror #4
 768:	5f636968 	svcpl	0x00636968
 76c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 770:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 774:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 778:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
 77c:	5f65766f 	svcpl	0x0065766f
 780:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 784:	67007463 	strvs	r7, [r0, -r3, ror #8]
 788:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 78c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 790:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 794:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 620 <startup-0x1ffff9e0>
 798:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 79c:	424f5000 	submi	r5, pc, #0
 7a0:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 7a4:	61726700 	cmnvs	r2, r0, lsl #14
 7a8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 7ac:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 7b0:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 7b4:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 7b8:	7361006e 	cmnvc	r1, #110	; 0x6e
 7bc:	5f696963 	svcpl	0x00696963
 7c0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 7c4:	6174735f 	cmnvs	r4, pc, asr r3
 7c8:	00737574 	rsbseq	r7, r3, r4, ror r5
 7cc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 7d0:	65746361 	ldrbvs	r6, [r4, #-865]!	; 0xfffffc9f
 7d4:	79620072 	stmdbvc	r2!, {r1, r4, r5, r6}^
 7d8:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
 7dc:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
 7e0:	61765f6e 	cmnvs	r6, lr, ror #30
 7e4:	0065756c 	rsbeq	r7, r5, ip, ror #10
 7e8:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 7ec:	6f6f6863 	svcvs	0x006f6863
 7f0:	41442f6c 	cmpmi	r4, ip, ror #30
 7f4:	37313054 			; <UNDEFINED> instruction: 0x37313054
 7f8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 7fc:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 800:	2f373130 	svccs	0x00373130
 804:	7362614c 	cmnvc	r2, #76, 2
 808:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 80c:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 810:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 814:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 818:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 81c:	625f7379 	subsvs	r7, pc, #-469762047	; 0xe4000001
 820:	72617a69 	rsbvc	r7, r1, #430080	; 0x69000
 824:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
 828:	6e657664 	cdpvs	6, 6, cr7, cr5, cr4, {3}
 82c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 830:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 834:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
 838:	616c7073 	smcvs	50947	; 0xc703
 83c:	00632e79 	rsbeq	r2, r3, r9, ror lr
 840:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xfffff090
 844:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 6d0 <startup-0x1ffff930>
 848:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 84c:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 850:	63007961 	movwvs	r7, #2401	; 0x961
 854:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 858:	7361006e 	cmnvc	r1, #110	; 0x6e
 85c:	5f696963 	svcpl	0x00696963
 860:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 864:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 868:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 6a0 <startup-0x1ffff960>
 86c:	0072656c 	rsbseq	r6, r2, ip, ror #10
 870:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 874:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 878:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 87c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 880:	70007465 	andvc	r7, r0, r5, ror #8
 884:	5f74726f 	svcpl	0x0074726f
 888:	006c6176 	rsbeq	r6, ip, r6, ror r1
 88c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 890:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 894:	5f657469 	svcpl	0x00657469
 898:	00646d63 	rsbeq	r6, r4, r3, ror #26
 89c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 8a0:	00737365 	rsbseq	r7, r3, r5, ror #6
 8a4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 8a8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 8ac:	5f657469 	svcpl	0x00657469
 8b0:	61746164 	cmnvs	r4, r4, ror #2
 8b4:	63736100 	cmnvs	r3, #0, 2
 8b8:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 8bc:	616d6d6f 	cmnvs	sp, pc, ror #26
 8c0:	6100646e 	tstvs	r0, lr, ror #8
 8c4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 8c8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 8cc:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 8d0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 8d4:	00726165 	rsbseq	r6, r2, r5, ror #2
 8d8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 8dc:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 8e0:	645f6461 	ldrbvs	r6, [pc], #-1121	; 8e8 <startup-0x1ffff718>
 8e4:	00617461 	rsbeq	r7, r1, r1, ror #8
 8e8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 8ec:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 8f0:	5f657469 	svcpl	0x00657469
 8f4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 8f8:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 8fc:	61007265 	tstvs	r0, r5, ror #4
 900:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 904:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 908:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 90c:	00726168 	rsbseq	r6, r2, r8, ror #2
 910:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
 914:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 918:	00776f52 	rsbseq	r6, r7, r2, asr pc
 91c:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 920:	6f6f6863 	svcvs	0x006f6863
 924:	41442f6c 	cmpmi	r4, ip, ror #30
 928:	37313054 			; <UNDEFINED> instruction: 0x37313054
 92c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 930:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 934:	2f373130 	svccs	0x00373130
 938:	7362614c 	cmnvc	r2, #76, 2
 93c:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 940:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 944:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 948:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 94c:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 950:	625f7379 	subsvs	r7, pc, #-469762047	; 0xe4000001
 954:	72617a69 	rsbvc	r7, r1, #430080	; 0x69000
 958:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
 95c:	6e657664 	cdpvs	6, 6, cr7, cr5, cr4, {3}
 960:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 964:	79656b2f 	stmdbvc	r5!, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 968:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 96c:	65520063 	ldrbvs	r0, [r2, #-99]	; 0xffffff9d
 970:	6f436461 	svcvs	0x00436461
 974:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 978:	6d756400 	cfldrdvs	mvd6, [r5, #-0]
 97c:	665f796d 	ldrbvs	r7, [pc], -sp, ror #18
 980:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 984:	326e6f69 	rsbcc	r6, lr, #420	; 0x1a4
 988:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 98c:	78655f74 	stmdavc	r5!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 990:	73007469 	movwvc	r7, #1129	; 0x469
 994:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 998:	70735f79 	rsbsvc	r5, r3, r9, ror pc
 99c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 9a0:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 9a4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 9a8:	2f3a4300 	svccs	0x003a4300
 9ac:	6f686353 	svcvs	0x00686353
 9b0:	442f6c6f 	strtmi	r6, [pc], #-3183	; 9b8 <startup-0x1ffff648>
 9b4:	31305441 	teqcc	r0, r1, asr #8
 9b8:	6f4d2f37 	svcvs	0x004d2f37
 9bc:	41442d70 	hvcmi	17104	; 0x42d0
 9c0:	37313054 			; <UNDEFINED> instruction: 0x37313054
 9c4:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 9c8:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 9cc:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 9d0:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 9d4:	2f736573 	svccs	0x00736573
 9d8:	6f6f7073 	svcvs	0x006f7073
 9dc:	5f737970 	svcpl	0x00737970
 9e0:	617a6962 	cmnvs	sl, r2, ror #18
 9e4:	5f657272 	svcpl	0x00657272
 9e8:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
 9ec:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
 9f0:	70732f65 	rsbsvc	r2, r3, r5, ror #30
 9f4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 9f8:	00632e73 	rsbeq	r2, r3, r3, ror lr
 9fc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 a00:	6f70735f 	svcvs	0x0070735f
 a04:	0079706f 	rsbseq	r7, r9, pc, rrx
 a08:	6c6c6177 	stfvse	f6, [ip], #-476	; 0xfffffe24
 a0c:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 a10:	5f657469 	svcpl	0x00657469
 a14:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 a18:	00726574 	rsbseq	r6, r2, r4, ror r5
 a1c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 a20:	6c61775f 	stclvs	7, cr7, [r1], #-380	; 0xfffffe84
 a24:	6573006c 	ldrbvs	r0, [r3, #-108]!	; 0xffffff94
 a28:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 a2c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 a30:	6a626f5f 	bvs	189c7b4 <startup-0x1e76384c>
 a34:	5f746365 	svcpl	0x00746365
 a38:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 a3c:	6f6d0064 	svcvs	0x006d0064
 a40:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
 a44:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 a48:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 a4c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 a50:	64707500 	ldrbtvs	r7, [r0], #-1280	; 0xfffffb00
 a54:	5f657461 	svcpl	0x00657461
 a58:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 a5c:	6f5f6574 	svcvs	0x005f6574
 a60:	63656a62 	cmnvs	r5, #401408	; 0x62000
 a64:	61770074 	cmnvs	r7, r4, ror r0
 a68:	735f6c6c 	cmpvc	pc, #108, 24	; 0x6c00
 a6c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 a70:	72640065 	rsbvc	r0, r4, #101	; 0x65
 a74:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 a78:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 a7c:	70730065 	rsbsvc	r0, r3, r5, rrx
 a80:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 a84:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 a88:	00657469 	rsbeq	r7, r5, r9, ror #8
 a8c:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 a90:	6e695f68 	cdpvs	15, 6, cr5, cr9, cr8, {3}
 a94:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
 a98:	65007365 	strvs	r7, [r0, #-869]	; 0xfffffc9b
 a9c:	5f746978 	svcpl	0x00746978
 aa0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 aa4:	705f6574 	subsvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
 aa8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 aac:	65007265 	strvs	r7, [r0, #-613]	; 0xfffffd9b
 ab0:	5f746978 	svcpl	0x00746978
 ab4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 ab8:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
 abc:	5f64616f 	svcpl	0x0064616f
 ac0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 ac4:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
 ac8:	5f776172 	svcpl	0x00776172
 acc:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 ad0:	6f5f6574 	svcvs	0x005f6574
 ad4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 ad8:	6c630074 	stclvs	0, cr0, [r3], #-464	; 0xfffffe30
 adc:	5f726165 	svcpl	0x00726165
 ae0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 ae4:	6f5f6574 	svcvs	0x005f6574
 ae8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 aec:	75640074 	strbvc	r0, [r4, #-116]!	; 0xffffff8c
 af0:	5f796d6d 	svcpl	0x00796d6d
 af4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 af8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 afc:	Address 0x00000afc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000001f4 	strdeq	r0, [r0], -r4
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	980e4101 	stmdals	lr, {r0, r8, lr}
  3c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000204 	andcs	r0, r0, r4, lsl #4
  4c:	0000004c 	andeq	r0, r0, ip, asr #32
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	20000250 	andcs	r0, r0, r0, asr r2
  68:	00000084 	andeq	r0, r0, r4, lsl #1
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  7c:	0000070d 	andeq	r0, r0, sp, lsl #14
  80:	00000020 	andeq	r0, r0, r0, lsr #32
  84:	00000000 	andeq	r0, r0, r0
  88:	200002d4 	ldrdcs	r0, [r0], -r4
  8c:	00000130 	andeq	r0, r0, r0, lsr r1
  90:	400c0e41 	andmi	r0, ip, r1, asr #28
  94:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  98:	018e4002 	orreq	r4, lr, r2
  9c:	01900e41 	orrseq	r0, r0, r1, asr #28
  a0:	00070d41 	andeq	r0, r7, r1, asr #26
  a4:	00000018 	andeq	r0, r0, r8, lsl r0
  a8:	00000000 	andeq	r0, r0, r0
  ac:	20000404 	andcs	r0, r0, r4, lsl #8
  b0:	0000008c 	andeq	r0, r0, ip, lsl #1
  b4:	40080e41 	andmi	r0, r8, r1, asr #28
  b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  c0:	0000000c 	andeq	r0, r0, ip
  c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  c8:	7c020001 	stcvc	0, cr0, [r2], {1}
  cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  d0:	00000018 	andeq	r0, r0, r8, lsl r0
  d4:	000000c0 	andeq	r0, r0, r0, asr #1
  d8:	20000490 	mulcs	r0, r0, r4
  dc:	0000000e 	andeq	r0, r0, lr
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  ec:	00000018 	andeq	r0, r0, r8, lsl r0
  f0:	000000c0 	andeq	r0, r0, r0, asr #1
  f4:	2000049e 	mulcs	r0, lr, r4
  f8:	0000001a 	andeq	r0, r0, sl, lsl r0
  fc:	40080e41 	andmi	r0, r8, r1, asr #28
 100:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 104:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 108:	00000018 	andeq	r0, r0, r8, lsl r0
 10c:	000000c0 	andeq	r0, r0, r0, asr #1
 110:	200004b8 			; <UNDEFINED> instruction: 0x200004b8
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	40080e41 	andmi	r0, r8, r1, asr #28
 11c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 120:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 124:	00000018 	andeq	r0, r0, r8, lsl r0
 128:	000000c0 	andeq	r0, r0, r0, asr #1
 12c:	200004d4 	ldrdcs	r0, [r0], -r4
 130:	00000010 	andeq	r0, r0, r0, lsl r0
 134:	40080e41 	andmi	r0, r8, r1, asr #28
 138:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 13c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 140:	00000018 	andeq	r0, r0, r8, lsl r0
 144:	000000c0 	andeq	r0, r0, r0, asr #1
 148:	200004e4 	andcs	r0, r0, r4, ror #9
 14c:	00000018 	andeq	r0, r0, r8, lsl r0
 150:	40080e41 	andmi	r0, r8, r1, asr #28
 154:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 158:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	000000c0 	andeq	r0, r0, r0, asr #1
 164:	200004fc 	strdcs	r0, [r0], -ip
 168:	0000003c 	andeq	r0, r0, ip, lsr r0
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	000000c0 	andeq	r0, r0, r0, asr #1
 184:	20000538 	andcs	r0, r0, r8, lsr r5
 188:	0000003c 	andeq	r0, r0, ip, lsr r0
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	100e4101 	andne	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	000000c0 	andeq	r0, r0, r0, asr #1
 1a4:	20000574 	andcs	r0, r0, r4, ror r5
 1a8:	00000030 	andeq	r0, r0, r0, lsr r0
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	000000c0 	andeq	r0, r0, r0, asr #1
 1c4:	200005a4 	andcs	r0, r0, r4, lsr #11
 1c8:	00000018 	andeq	r0, r0, r8, lsl r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d8:	00000018 	andeq	r0, r0, r8, lsl r0
 1dc:	000000c0 	andeq	r0, r0, r0, asr #1
 1e0:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 1e4:	0000004c 	andeq	r0, r0, ip, asr #32
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f4:	0000000c 	andeq	r0, r0, ip
 1f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 200:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	000001f4 	strdeq	r0, [r0], -r4
 20c:	20000608 	andcs	r0, r0, r8, lsl #12
 210:	00000050 	andeq	r0, r0, r0, asr r0
 214:	40080e41 	andmi	r0, r8, r1, asr #28
 218:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 21c:	180e4101 	stmdane	lr, {r0, r8, lr}
 220:	00070d41 	andeq	r0, r7, r1, asr #26
 224:	0000001c 	andeq	r0, r0, ip, lsl r0
 228:	000001f4 	strdeq	r0, [r0], -r4
 22c:	20000658 	andcs	r0, r0, r8, asr r6
 230:	00000058 	andeq	r0, r0, r8, asr r0
 234:	40080e41 	andmi	r0, r8, r1, asr #28
 238:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 23c:	180e4101 	stmdane	lr, {r0, r8, lr}
 240:	00070d41 	andeq	r0, r7, r1, asr #26
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	000001f4 	strdeq	r0, [r0], -r4
 24c:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 250:	0000005a 	andeq	r0, r0, sl, asr r0
 254:	40080e41 	andmi	r0, r8, r1, asr #28
 258:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 25c:	100e4101 	andne	r4, lr, r1, lsl #2
 260:	00070d41 	andeq	r0, r7, r1, asr #26
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	000001f4 	strdeq	r0, [r0], -r4
 26c:	2000070a 	andcs	r0, r0, sl, lsl #14
 270:	00000076 	andeq	r0, r0, r6, ror r0
 274:	40080e41 	andmi	r0, r8, r1, asr #28
 278:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 27c:	100e4101 	andne	r4, lr, r1, lsl #2
 280:	00070d41 	andeq	r0, r7, r1, asr #26
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000001f4 	strdeq	r0, [r0], -r4
 28c:	20000780 	andcs	r0, r0, r0, lsl #15
 290:	00000090 	muleq	r0, r0, r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	000001f4 	strdeq	r0, [r0], -r4
 2ac:	20000810 	andcs	r0, r0, r0, lsl r8
 2b0:	00000080 	andeq	r0, r0, r0, lsl #1
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	100e4101 	andne	r4, lr, r1, lsl #2
 2c0:	00070d41 	andeq	r0, r7, r1, asr #26
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	000001f4 	strdeq	r0, [r0], -r4
 2cc:	20000890 	mulcs	r0, r0, r8
 2d0:	00000040 	andeq	r0, r0, r0, asr #32
 2d4:	40080e41 	andmi	r0, r8, r1, asr #28
 2d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2dc:	100e4101 	andne	r4, lr, r1, lsl #2
 2e0:	00070d41 	andeq	r0, r7, r1, asr #26
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	000001f4 	strdeq	r0, [r0], -r4
 2ec:	200008d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2f0:	00000046 	andeq	r0, r0, r6, asr #32
 2f4:	40080e41 	andmi	r0, r8, r1, asr #28
 2f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2fc:	100e4101 	andne	r4, lr, r1, lsl #2
 300:	00070d41 	andeq	r0, r7, r1, asr #26
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	000001f4 	strdeq	r0, [r0], -r4
 30c:	20000916 	andcs	r0, r0, r6, lsl r9
 310:	0000002a 	andeq	r0, r0, sl, lsr #32
 314:	40080e41 	andmi	r0, r8, r1, asr #28
 318:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 31c:	100e4101 	andne	r4, lr, r1, lsl #2
 320:	00070d41 	andeq	r0, r7, r1, asr #26
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	000001f4 	strdeq	r0, [r0], -r4
 32c:	20000940 	andcs	r0, r0, r0, asr #18
 330:	0000005c 	andeq	r0, r0, ip, asr r0
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	000001f4 	strdeq	r0, [r0], -r4
 348:	2000099c 	mulcs	r0, ip, r9
 34c:	00000066 	andeq	r0, r0, r6, rrx
 350:	40080e41 	andmi	r0, r8, r1, asr #28
 354:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 358:	100e4101 	andne	r4, lr, r1, lsl #2
 35c:	00070d41 	andeq	r0, r7, r1, asr #26
 360:	00000020 	andeq	r0, r0, r0, lsr #32
 364:	000001f4 	strdeq	r0, [r0], -r4
 368:	20000a02 	andcs	r0, r0, r2, lsl #20
 36c:	000001a6 	andeq	r0, r0, r6, lsr #3
 370:	400c0e41 	andmi	r0, ip, r1, asr #28
 374:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 378:	018e4002 	orreq	r4, lr, r2
 37c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 380:	0000070d 	andeq	r0, r0, sp, lsl #14
 384:	0000001c 	andeq	r0, r0, ip, lsl r0
 388:	000001f4 	strdeq	r0, [r0], -r4
 38c:	20000ba8 	andcs	r0, r0, r8, lsr #23
 390:	00000064 	andeq	r0, r0, r4, rrx
 394:	40080e41 	andmi	r0, r8, r1, asr #28
 398:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 39c:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a0:	00070d41 	andeq	r0, r7, r1, asr #26
 3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a8:	000001f4 	strdeq	r0, [r0], -r4
 3ac:	20000c0c 	andcs	r0, r0, ip, lsl #24
 3b0:	00000064 	andeq	r0, r0, r4, rrx
 3b4:	40080e41 	andmi	r0, r8, r1, asr #28
 3b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3bc:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c0:	00070d41 	andeq	r0, r7, r1, asr #26
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	000001f4 	strdeq	r0, [r0], -r4
 3cc:	20000c70 	andcs	r0, r0, r0, ror ip
 3d0:	00000080 	andeq	r0, r0, r0, lsl #1
 3d4:	40080e41 	andmi	r0, r8, r1, asr #28
 3d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3dc:	100e4101 	andne	r4, lr, r1, lsl #2
 3e0:	00070d41 	andeq	r0, r7, r1, asr #26
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	000001f4 	strdeq	r0, [r0], -r4
 3ec:	20000cf0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 3f0:	00000020 	andeq	r0, r0, r0, lsr #32
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 400:	00070d41 	andeq	r0, r7, r1, asr #26
 404:	00000018 	andeq	r0, r0, r8, lsl r0
 408:	000001f4 	strdeq	r0, [r0], -r4
 40c:	20000d10 	andcs	r0, r0, r0, lsl sp
 410:	00000020 	andeq	r0, r0, r0, lsr #32
 414:	40080e41 	andmi	r0, r8, r1, asr #28
 418:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 41c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 420:	0000000c 	andeq	r0, r0, ip
 424:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 428:	7c020001 	stcvc	0, cr0, [r2], {1}
 42c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 430:	00000018 	andeq	r0, r0, r8, lsl r0
 434:	00000420 	andeq	r0, r0, r0, lsr #8
 438:	20000d30 	andcs	r0, r0, r0, lsr sp
 43c:	00000048 	andeq	r0, r0, r8, asr #32
 440:	40080e41 	andmi	r0, r8, r1, asr #28
 444:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 448:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000420 	andeq	r0, r0, r0, lsr #8
 454:	20000d78 	andcs	r0, r0, r8, ror sp
 458:	00000044 	andeq	r0, r0, r4, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	180e4101 	stmdane	lr, {r0, r8, lr}
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000420 	andeq	r0, r0, r0, lsr #8
 474:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
 478:	00000050 	andeq	r0, r0, r0, asr r0
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	180e4101 	stmdane	lr, {r0, r8, lr}
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000420 	andeq	r0, r0, r0, lsr #8
 494:	20000e0c 	andcs	r0, r0, ip, lsl #28
 498:	0000002a 	andeq	r0, r0, sl, lsr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000420 	andeq	r0, r0, r0, lsr #8
 4b4:	20000e36 	andcs	r0, r0, r6, lsr lr
 4b8:	0000002a 	andeq	r0, r0, sl, lsr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	00000020 	andeq	r0, r0, r0, lsr #32
 4d0:	00000420 	andeq	r0, r0, r0, lsr #8
 4d4:	20000e60 	andcs	r0, r0, r0, ror #28
 4d8:	00000048 	andeq	r0, r0, r8, asr #32
 4dc:	400c0e41 	andmi	r0, ip, r1, asr #28
 4e0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4e4:	018e4002 	orreq	r4, lr, r2
 4e8:	41180e41 	tstmi	r8, r1, asr #28
 4ec:	0000070d 	andeq	r0, r0, sp, lsl #14
 4f0:	00000020 	andeq	r0, r0, r0, lsr #32
 4f4:	00000420 	andeq	r0, r0, r0, lsr #8
 4f8:	20000ea8 	andcs	r0, r0, r8, lsr #29
 4fc:	00000048 	andeq	r0, r0, r8, asr #32
 500:	400c0e41 	andmi	r0, ip, r1, asr #28
 504:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 508:	018e4002 	orreq	r4, lr, r2
 50c:	41180e41 	tstmi	r8, r1, asr #28
 510:	0000070d 	andeq	r0, r0, sp, lsl #14
 514:	0000001c 	andeq	r0, r0, ip, lsl r0
 518:	00000420 	andeq	r0, r0, r0, lsr #8
 51c:	20000ef0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 520:	00000030 	andeq	r0, r0, r0, lsr r0
 524:	40080e41 	andmi	r0, r8, r1, asr #28
 528:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 52c:	100e4101 	andne	r4, lr, r1, lsl #2
 530:	00070d41 	andeq	r0, r7, r1, asr #26
 534:	0000001c 	andeq	r0, r0, ip, lsl r0
 538:	00000420 	andeq	r0, r0, r0, lsr #8
 53c:	20000f20 	andcs	r0, r0, r0, lsr #30
 540:	00000030 	andeq	r0, r0, r0, lsr r0
 544:	40080e41 	andmi	r0, r8, r1, asr #28
 548:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 54c:	100e4101 	andne	r4, lr, r1, lsl #2
 550:	00070d41 	andeq	r0, r7, r1, asr #26
 554:	0000001c 	andeq	r0, r0, ip, lsl r0
 558:	00000420 	andeq	r0, r0, r0, lsr #8
 55c:	20000f50 	andcs	r0, r0, r0, asr pc
 560:	00000056 	andeq	r0, r0, r6, asr r0
 564:	40080e41 	andmi	r0, r8, r1, asr #28
 568:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 56c:	100e4101 	andne	r4, lr, r1, lsl #2
 570:	00070d41 	andeq	r0, r7, r1, asr #26
 574:	0000001c 	andeq	r0, r0, ip, lsl r0
 578:	00000420 	andeq	r0, r0, r0, lsr #8
 57c:	20000fa6 	andcs	r0, r0, r6, lsr #31
 580:	00000044 	andeq	r0, r0, r4, asr #32
 584:	40080e41 	andmi	r0, r8, r1, asr #28
 588:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 58c:	100e4101 	andne	r4, lr, r1, lsl #2
 590:	00070d41 	andeq	r0, r7, r1, asr #26
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	00000420 	andeq	r0, r0, r0, lsr #8
 59c:	20000fea 	andcs	r0, r0, sl, ror #31
 5a0:	00000068 	andeq	r0, r0, r8, rrx
 5a4:	40080e41 	andmi	r0, r8, r1, asr #28
 5a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 5b0:	00070d41 	andeq	r0, r7, r1, asr #26
 5b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b8:	00000420 	andeq	r0, r0, r0, lsr #8
 5bc:	20001052 	andcs	r1, r0, r2, asr r0
 5c0:	00000028 	andeq	r0, r0, r8, lsr #32
 5c4:	40080e41 	andmi	r0, r8, r1, asr #28
 5c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5cc:	100e4101 	andne	r4, lr, r1, lsl #2
 5d0:	00070d41 	andeq	r0, r7, r1, asr #26
 5d4:	0000000c 	andeq	r0, r0, ip
 5d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 5e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5e4:	00000018 	andeq	r0, r0, r8, lsl r0
 5e8:	000005d4 	ldrdeq	r0, [r0], -r4
 5ec:	2000107c 	andcs	r1, r0, ip, ror r0
 5f0:	00000060 	andeq	r0, r0, r0, rrx
 5f4:	40080e41 	andmi	r0, r8, r1, asr #28
 5f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5fc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 600:	0000001c 	andeq	r0, r0, ip, lsl r0
 604:	000005d4 	ldrdeq	r0, [r0], -r4
 608:	200010dc 	ldrdcs	r1, [r0], -ip
 60c:	0000006c 	andeq	r0, r0, ip, rrx
 610:	40080e41 	andmi	r0, r8, r1, asr #28
 614:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 618:	100e4101 	andne	r4, lr, r1, lsl #2
 61c:	00070d41 	andeq	r0, r7, r1, asr #26
 620:	0000001c 	andeq	r0, r0, ip, lsl r0
 624:	000005d4 	ldrdeq	r0, [r0], -r4
 628:	20001148 	andcs	r1, r0, r8, asr #2
 62c:	00000058 	andeq	r0, r0, r8, asr r0
 630:	40080e41 	andmi	r0, r8, r1, asr #28
 634:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 638:	100e4101 	andne	r4, lr, r1, lsl #2
 63c:	00070d41 	andeq	r0, r7, r1, asr #26
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	000005d4 	ldrdeq	r0, [r0], -r4
 648:	200011a0 	andcs	r1, r0, r0, lsr #3
 64c:	00000054 	andeq	r0, r0, r4, asr r0
 650:	40080e41 	andmi	r0, r8, r1, asr #28
 654:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 658:	100e4101 	andne	r4, lr, r1, lsl #2
 65c:	00070d41 	andeq	r0, r7, r1, asr #26
 660:	0000000c 	andeq	r0, r0, ip
 664:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 668:	7c020001 	stcvc	0, cr0, [r2], {1}
 66c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 670:	0000001c 	andeq	r0, r0, ip, lsl r0
 674:	00000660 	andeq	r0, r0, r0, ror #12
 678:	200011f4 	strdcs	r1, [r0], -r4
 67c:	0000002c 	andeq	r0, r0, ip, lsr #32
 680:	40080e41 	andmi	r0, r8, r1, asr #28
 684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 688:	180e4101 	stmdane	lr, {r0, r8, lr}
 68c:	00070d41 	andeq	r0, r7, r1, asr #26
 690:	0000001c 	andeq	r0, r0, ip, lsl r0
 694:	00000660 	andeq	r0, r0, r0, ror #12
 698:	20001220 	andcs	r1, r0, r0, lsr #4
 69c:	000000da 	ldrdeq	r0, [r0], -sl
 6a0:	40080e41 	andmi	r0, r8, r1, asr #28
 6a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a8:	300e4101 	andcc	r4, lr, r1, lsl #2
 6ac:	00070d41 	andeq	r0, r7, r1, asr #26
 6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b4:	00000660 	andeq	r0, r0, r0, ror #12
 6b8:	200012fa 	strdcs	r1, [r0], -sl
 6bc:	00000022 	andeq	r0, r0, r2, lsr #32
 6c0:	40080e41 	andmi	r0, r8, r1, asr #28
 6c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c8:	100e4101 	andne	r4, lr, r1, lsl #2
 6cc:	00070d41 	andeq	r0, r7, r1, asr #26
 6d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d4:	00000660 	andeq	r0, r0, r0, ror #12
 6d8:	2000131c 	andcs	r1, r0, ip, lsl r3
 6dc:	00000022 	andeq	r0, r0, r2, lsr #32
 6e0:	40080e41 	andmi	r0, r8, r1, asr #28
 6e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e8:	100e4101 	andne	r4, lr, r1, lsl #2
 6ec:	00070d41 	andeq	r0, r7, r1, asr #26
 6f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f4:	00000660 	andeq	r0, r0, r0, ror #12
 6f8:	2000133e 	andcs	r1, r0, lr, lsr r3
 6fc:	0000009e 	muleq	r0, lr, r0
 700:	40080e41 	andmi	r0, r8, r1, asr #28
 704:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 708:	100e4101 	andne	r4, lr, r1, lsl #2
 70c:	00070d41 	andeq	r0, r7, r1, asr #26
 710:	0000001c 	andeq	r0, r0, ip, lsl r0
 714:	00000660 	andeq	r0, r0, r0, ror #12
 718:	200013dc 	ldrdcs	r1, [r0], -ip
 71c:	00000020 	andeq	r0, r0, r0, lsr #32
 720:	40080e41 	andmi	r0, r8, r1, asr #28
 724:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 728:	180e4101 	stmdane	lr, {r0, r8, lr}
 72c:	00070d41 	andeq	r0, r7, r1, asr #26
 730:	0000001c 	andeq	r0, r0, ip, lsl r0
 734:	00000660 	andeq	r0, r0, r0, ror #12
 738:	200013fc 	strdcs	r1, [r0], -ip
 73c:	00000010 	andeq	r0, r0, r0, lsl r0
 740:	40080e41 	andmi	r0, r8, r1, asr #28
 744:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 748:	100e4101 	andne	r4, lr, r1, lsl #2
 74c:	00070d41 	andeq	r0, r7, r1, asr #26
 750:	0000001c 	andeq	r0, r0, ip, lsl r0
 754:	00000660 	andeq	r0, r0, r0, ror #12
 758:	2000140c 	andcs	r1, r0, ip, lsl #8
 75c:	00000014 	andeq	r0, r0, r4, lsl r0
 760:	40080e41 	andmi	r0, r8, r1, asr #28
 764:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 768:	180e4101 	stmdane	lr, {r0, r8, lr}
 76c:	00070d41 	andeq	r0, r7, r1, asr #26
 770:	0000001c 	andeq	r0, r0, ip, lsl r0
 774:	00000660 	andeq	r0, r0, r0, ror #12
 778:	20001420 	andcs	r1, r0, r0, lsr #8
 77c:	00000088 	andeq	r0, r0, r8, lsl #1
 780:	40080e41 	andmi	r0, r8, r1, asr #28
 784:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 788:	380e4101 	stmdacc	lr, {r0, r8, lr}
 78c:	00070d41 	andeq	r0, r7, r1, asr #26
 790:	0000001c 	andeq	r0, r0, ip, lsl r0
 794:	00000660 	andeq	r0, r0, r0, ror #12
 798:	200014a8 	andcs	r1, r0, r8, lsr #9
 79c:	00000088 	andeq	r0, r0, r8, lsl #1
 7a0:	40080e41 	andmi	r0, r8, r1, asr #28
 7a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a8:	380e4101 	stmdacc	lr, {r0, r8, lr}
 7ac:	00070d41 	andeq	r0, r7, r1, asr #26
 7b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b4:	00000660 	andeq	r0, r0, r0, ror #12
 7b8:	20001530 	andcs	r1, r0, r0, lsr r5
 7bc:	00000088 	andeq	r0, r0, r8, lsl #1
 7c0:	40080e41 	andmi	r0, r8, r1, asr #28
 7c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c8:	380e4101 	stmdacc	lr, {r0, r8, lr}
 7cc:	00070d41 	andeq	r0, r7, r1, asr #26
 7d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d4:	00000660 	andeq	r0, r0, r0, ror #12
 7d8:	200015b8 			; <UNDEFINED> instruction: 0x200015b8
 7dc:	0000002e 	andeq	r0, r0, lr, lsr #32
 7e0:	40080e41 	andmi	r0, r8, r1, asr #28
 7e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7e8:	100e4101 	andne	r4, lr, r1, lsl #2
 7ec:	00070d41 	andeq	r0, r7, r1, asr #26
