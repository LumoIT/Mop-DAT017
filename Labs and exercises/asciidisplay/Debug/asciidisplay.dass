
./Debug/asciidisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 *
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void ){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:
void ascii_command(unsigned char, unsigned int, unsigned short);
void ascii_write_char(unsigned char);
void gotoxy(unsigned int, unsigned int);
void ascii_write_string(char*);

void main(void){
20000010:	b590      	push	{r4, r7, lr}
20000012:	b08b      	sub	sp, #44	; 0x2c
20000014:	af00      	add	r7, sp, #0
    char *s;
    char test1[] = "Alfanumerisk ";
20000016:	2314      	movs	r3, #20
20000018:	18fb      	adds	r3, r7, r3
2000001a:	4a15      	ldr	r2, [pc, #84]	; (20000070 <main+0x60>)
2000001c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000001e:	c313      	stmia	r3!, {r0, r1, r4}
20000020:	8812      	ldrh	r2, [r2, #0]
20000022:	801a      	strh	r2, [r3, #0]
    char test2[] = "Display - test";
20000024:	1d3b      	adds	r3, r7, #4
20000026:	4a13      	ldr	r2, [pc, #76]	; (20000074 <main+0x64>)
20000028:	ca13      	ldmia	r2!, {r0, r1, r4}
2000002a:	c313      	stmia	r3!, {r0, r1, r4}
2000002c:	8811      	ldrh	r1, [r2, #0]
2000002e:	8019      	strh	r1, [r3, #0]
20000030:	7892      	ldrb	r2, [r2, #2]
20000032:	709a      	strb	r2, [r3, #2]
    
    app_init();
20000034:	f000 f820 	bl	20000078 <app_init>
    //ascii_init();
    gotoxy(1, 1);
20000038:	2101      	movs	r1, #1
2000003a:	2001      	movs	r0, #1
2000003c:	f000 f9b3 	bl	200003a6 <gotoxy>
    s = test1;
20000040:	2314      	movs	r3, #20
20000042:	18fb      	adds	r3, r7, r3
20000044:	627b      	str	r3, [r7, #36]	; 0x24
    ascii_write_string(*s);
20000046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	0018      	movs	r0, r3
2000004c:	f000 f9df 	bl	2000040e <ascii_write_string>
    gotoxy(1, 2);
20000050:	2102      	movs	r1, #2
20000052:	2001      	movs	r0, #1
20000054:	f000 f9a7 	bl	200003a6 <gotoxy>
    s = test2;
20000058:	1d3b      	adds	r3, r7, #4
2000005a:	627b      	str	r3, [r7, #36]	; 0x24
    ascii_write_string(*s);
2000005c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000005e:	781b      	ldrb	r3, [r3, #0]
20000060:	0018      	movs	r0, r3
20000062:	f000 f9d4 	bl	2000040e <ascii_write_string>
}
20000066:	46c0      	nop			; (mov r8, r8)
20000068:	46bd      	mov	sp, r7
2000006a:	b00b      	add	sp, #44	; 0x2c
2000006c:	bd90      	pop	{r4, r7, pc}
2000006e:	46c0      	nop			; (mov r8, r8)
20000070:	20000438 	andcs	r0, r0, r8, lsr r4
20000074:	20000448 	andcs	r0, r0, r8, asr #8

20000078 <app_init>:

void app_init(void){
20000078:	b580      	push	{r7, lr}
2000007a:	af00      	add	r7, sp, #0
    // Port E -> output
    portModer = 0x55555555;
2000007c:	4b0f      	ldr	r3, [pc, #60]	; (200000bc <app_init+0x44>)
2000007e:	4a10      	ldr	r2, [pc, #64]	; (200000c0 <app_init+0x48>)
20000080:	601a      	str	r2, [r3, #0]
    
    // ***DISPLAY INIT***
    // Clear display
    ascii_command(0x1, 2, 0);
20000082:	2200      	movs	r2, #0
20000084:	2102      	movs	r1, #2
20000086:	2001      	movs	r0, #1
20000088:	f000 f938 	bl	200002fc <ascii_command>
    // Set address register to 0, reset cursor
    ascii_command(0x2, 2, 0);
2000008c:	2200      	movs	r2, #0
2000008e:	2102      	movs	r1, #2
20000090:	2002      	movs	r0, #2
20000092:	f000 f933 	bl	200002fc <ascii_command>
    // 2 rows, characters are 5x8 dots
    ascii_command(0x38, 39, 1);
20000096:	2201      	movs	r2, #1
20000098:	2127      	movs	r1, #39	; 0x27
2000009a:	2038      	movs	r0, #56	; 0x38
2000009c:	f000 f92e 	bl	200002fc <ascii_command>
    // Turn on display, turn on cursor, cursor not blinking
    ascii_command(0xE, 39, 1);
200000a0:	2201      	movs	r2, #1
200000a2:	2127      	movs	r1, #39	; 0x27
200000a4:	200e      	movs	r0, #14
200000a6:	f000 f929 	bl	200002fc <ascii_command>
    // Increment mode, no shift
    ascii_command(0x6, 39, 1);
200000aa:	2201      	movs	r2, #1
200000ac:	2127      	movs	r1, #39	; 0x27
200000ae:	2006      	movs	r0, #6
200000b0:	f000 f924 	bl	200002fc <ascii_command>
}
200000b4:	46c0      	nop			; (mov r8, r8)
200000b6:	46bd      	mov	sp, r7
200000b8:	bd80      	pop	{r7, pc}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	40021000 	andmi	r1, r2, r0
200000c0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200000c4 <delay_250ns>:

void delay_250ns(void){
200000c4:	b580      	push	{r7, lr}
200000c6:	af00      	add	r7, sp, #0
    STK_CTRL &= 0xFFFEFFF8;
200000c8:	4b13      	ldr	r3, [pc, #76]	; (20000118 <delay_250ns+0x54>)
200000ca:	4a13      	ldr	r2, [pc, #76]	; (20000118 <delay_250ns+0x54>)
200000cc:	6812      	ldr	r2, [r2, #0]
200000ce:	4913      	ldr	r1, [pc, #76]	; (2000011c <delay_250ns+0x58>)
200000d0:	400a      	ands	r2, r1
200000d2:	601a      	str	r2, [r3, #0]
    STK_LOAD &= 0xFF000000;
200000d4:	4b12      	ldr	r3, [pc, #72]	; (20000120 <delay_250ns+0x5c>)
200000d6:	4a12      	ldr	r2, [pc, #72]	; (20000120 <delay_250ns+0x5c>)
200000d8:	6812      	ldr	r2, [r2, #0]
200000da:	0e12      	lsrs	r2, r2, #24
200000dc:	0612      	lsls	r2, r2, #24
200000de:	601a      	str	r2, [r3, #0]
    STK_LOAD |= COUNT_VAL-1;
200000e0:	4b0f      	ldr	r3, [pc, #60]	; (20000120 <delay_250ns+0x5c>)
200000e2:	4a0f      	ldr	r2, [pc, #60]	; (20000120 <delay_250ns+0x5c>)
200000e4:	6812      	ldr	r2, [r2, #0]
200000e6:	2129      	movs	r1, #41	; 0x29
200000e8:	430a      	orrs	r2, r1
200000ea:	601a      	str	r2, [r3, #0]
    STK_VAL = 0;
200000ec:	4b0d      	ldr	r3, [pc, #52]	; (20000124 <delay_250ns+0x60>)
200000ee:	2200      	movs	r2, #0
200000f0:	601a      	str	r2, [r3, #0]
    STK_CTRL |= 0x5;
200000f2:	4b09      	ldr	r3, [pc, #36]	; (20000118 <delay_250ns+0x54>)
200000f4:	4a08      	ldr	r2, [pc, #32]	; (20000118 <delay_250ns+0x54>)
200000f6:	6812      	ldr	r2, [r2, #0]
200000f8:	2105      	movs	r1, #5
200000fa:	430a      	orrs	r2, r1
200000fc:	601a      	str	r2, [r3, #0]
    
    while(STK_CTRL & 0x00010000 == 0);
200000fe:	46c0      	nop			; (mov r8, r8)
20000100:	4b05      	ldr	r3, [pc, #20]	; (20000118 <delay_250ns+0x54>)
20000102:	681b      	ldr	r3, [r3, #0]
    
    STK_CTRL &= 0xFFFEFFF8;
20000104:	4b04      	ldr	r3, [pc, #16]	; (20000118 <delay_250ns+0x54>)
20000106:	4a04      	ldr	r2, [pc, #16]	; (20000118 <delay_250ns+0x54>)
20000108:	6812      	ldr	r2, [r2, #0]
2000010a:	4904      	ldr	r1, [pc, #16]	; (2000011c <delay_250ns+0x58>)
2000010c:	400a      	ands	r2, r1
2000010e:	601a      	str	r2, [r3, #0]
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	bd80      	pop	{r7, pc}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	e000e010 	and	lr, r0, r0, lsl r0
2000011c:	fffefff8 			; <UNDEFINED> instruction: 0xfffefff8
20000120:	e000e014 	and	lr, r0, r4, lsl r0
20000124:	e000e018 	and	lr, r0, r8, lsl r0

20000128 <delay_mikro>:

void delay_mikro(unsigned int us){
20000128:	b580      	push	{r7, lr}
2000012a:	b084      	sub	sp, #16
2000012c:	af00      	add	r7, sp, #0
2000012e:	6078      	str	r0, [r7, #4]
    for(int i=0; i < us*4; i++){
20000130:	2300      	movs	r3, #0
20000132:	60fb      	str	r3, [r7, #12]
20000134:	e004      	b.n	20000140 <delay_mikro+0x18>
        delay_250ns();
20000136:	f7ff ffc5 	bl	200000c4 <delay_250ns>
    for(int i=0; i < us*4; i++){
2000013a:	68fb      	ldr	r3, [r7, #12]
2000013c:	3301      	adds	r3, #1
2000013e:	60fb      	str	r3, [r7, #12]
20000140:	687b      	ldr	r3, [r7, #4]
20000142:	009a      	lsls	r2, r3, #2
20000144:	68fb      	ldr	r3, [r7, #12]
20000146:	429a      	cmp	r2, r3
20000148:	d8f5      	bhi.n	20000136 <delay_mikro+0xe>
    }
}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	46bd      	mov	sp, r7
2000014e:	b004      	add	sp, #16
20000150:	bd80      	pop	{r7, pc}

20000152 <delay_milli>:

void delay_milli(unsigned int ms){
20000152:	b580      	push	{r7, lr}
20000154:	b082      	sub	sp, #8
20000156:	af00      	add	r7, sp, #0
20000158:	6078      	str	r0, [r7, #4]
    delay_mikro(ms*MILLI_TO_MIKRO);
2000015a:	687b      	ldr	r3, [r7, #4]
2000015c:	22fa      	movs	r2, #250	; 0xfa
2000015e:	0092      	lsls	r2, r2, #2
20000160:	4353      	muls	r3, r2
20000162:	0018      	movs	r0, r3
20000164:	f7ff ffe0 	bl	20000128 <delay_mikro>
}
20000168:	46c0      	nop			; (mov r8, r8)
2000016a:	46bd      	mov	sp, r7
2000016c:	b002      	add	sp, #8
2000016e:	bd80      	pop	{r7, pc}

20000170 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x){
20000170:	b580      	push	{r7, lr}
20000172:	b082      	sub	sp, #8
20000174:	af00      	add	r7, sp, #0
20000176:	0002      	movs	r2, r0
20000178:	1dfb      	adds	r3, r7, #7
2000017a:	701a      	strb	r2, [r3, #0]
    // Set bits that are 1 in x to 1, leave rest be
    portOdrLow |= x;
2000017c:	4905      	ldr	r1, [pc, #20]	; (20000194 <ascii_ctrl_bit_set+0x24>)
2000017e:	4b05      	ldr	r3, [pc, #20]	; (20000194 <ascii_ctrl_bit_set+0x24>)
20000180:	781a      	ldrb	r2, [r3, #0]
20000182:	1dfb      	adds	r3, r7, #7
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	4313      	orrs	r3, r2
20000188:	b2db      	uxtb	r3, r3
2000018a:	700b      	strb	r3, [r1, #0]
}
2000018c:	46c0      	nop			; (mov r8, r8)
2000018e:	46bd      	mov	sp, r7
20000190:	b002      	add	sp, #8
20000192:	bd80      	pop	{r7, pc}
20000194:	40021014 	andmi	r1, r2, r4, lsl r0

20000198 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000198:	b580      	push	{r7, lr}
2000019a:	b082      	sub	sp, #8
2000019c:	af00      	add	r7, sp, #0
2000019e:	0002      	movs	r2, r0
200001a0:	1dfb      	adds	r3, r7, #7
200001a2:	701a      	strb	r2, [r3, #0]
    // Set any bits that are 0 in x to 0, leave rest as they were
    portOdrLow &= x;
200001a4:	4905      	ldr	r1, [pc, #20]	; (200001bc <ascii_ctrl_bit_clear+0x24>)
200001a6:	4b05      	ldr	r3, [pc, #20]	; (200001bc <ascii_ctrl_bit_clear+0x24>)
200001a8:	781b      	ldrb	r3, [r3, #0]
200001aa:	1dfa      	adds	r2, r7, #7
200001ac:	7812      	ldrb	r2, [r2, #0]
200001ae:	4013      	ands	r3, r2
200001b0:	b2db      	uxtb	r3, r3
200001b2:	700b      	strb	r3, [r1, #0]
}
200001b4:	46c0      	nop			; (mov r8, r8)
200001b6:	46bd      	mov	sp, r7
200001b8:	b002      	add	sp, #8
200001ba:	bd80      	pop	{r7, pc}
200001bc:	40021014 	andmi	r1, r2, r4, lsl r0

200001c0 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
200001c0:	b580      	push	{r7, lr}
200001c2:	b082      	sub	sp, #8
200001c4:	af00      	add	r7, sp, #0
200001c6:	0002      	movs	r2, r0
200001c8:	1dfb      	adds	r3, r7, #7
200001ca:	701a      	strb	r2, [r3, #0]
    // Prepare display for sending command
    ascii_ctrl_bit_clear(B_RS | B_RW);
200001cc:	2003      	movs	r0, #3
200001ce:	f7ff ffe3 	bl	20000198 <ascii_ctrl_bit_clear>
    
    // Write command
    ascii_write_controller(command);
200001d2:	1dfb      	adds	r3, r7, #7
200001d4:	781b      	ldrb	r3, [r3, #0]
200001d6:	0018      	movs	r0, r3
200001d8:	f000 f85e 	bl	20000298 <ascii_write_controller>
}
200001dc:	46c0      	nop			; (mov r8, r8)
200001de:	46bd      	mov	sp, r7
200001e0:	b002      	add	sp, #8
200001e2:	bd80      	pop	{r7, pc}

200001e4 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200001e4:	b580      	push	{r7, lr}
200001e6:	b082      	sub	sp, #8
200001e8:	af00      	add	r7, sp, #0
200001ea:	0002      	movs	r2, r0
200001ec:	1dfb      	adds	r3, r7, #7
200001ee:	701a      	strb	r2, [r3, #0]
    // Prepare display for writing data
    ascii_ctrl_bit_set(B_RS);
200001f0:	2001      	movs	r0, #1
200001f2:	f7ff ffbd 	bl	20000170 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200001f6:	2002      	movs	r0, #2
200001f8:	f7ff ffce 	bl	20000198 <ascii_ctrl_bit_clear>
    
    // Write data
    ascii_write_controller(data);
200001fc:	1dfb      	adds	r3, r7, #7
200001fe:	781b      	ldrb	r3, [r3, #0]
20000200:	0018      	movs	r0, r3
20000202:	f000 f849 	bl	20000298 <ascii_write_controller>
}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	46bd      	mov	sp, r7
2000020a:	b002      	add	sp, #8
2000020c:	bd80      	pop	{r7, pc}

2000020e <ascii_read_data>:

unsigned char ascii_read_data(void){
2000020e:	b590      	push	{r4, r7, lr}
20000210:	b083      	sub	sp, #12
20000212:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    portModer &= 0x0000FFFF;
20000214:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <ascii_read_data+0x3a>)
20000216:	4a0c      	ldr	r2, [pc, #48]	; (20000248 <ascii_read_data+0x3a>)
20000218:	6812      	ldr	r2, [r2, #0]
2000021a:	0412      	lsls	r2, r2, #16
2000021c:	0c12      	lsrs	r2, r2, #16
2000021e:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading data
    ascii_ctrl_bit_set(B_RS | B_RW);
20000220:	2003      	movs	r0, #3
20000222:	f7ff ffa5 	bl	20000170 <ascii_ctrl_bit_set>
    
    return_value = ascii_read_controller();
20000226:	1dfc      	adds	r4, r7, #7
20000228:	f000 f84e 	bl	200002c8 <ascii_read_controller>
2000022c:	0003      	movs	r3, r0
2000022e:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    portModer |= 0x55550000;
20000230:	4b05      	ldr	r3, [pc, #20]	; (20000248 <ascii_read_data+0x3a>)
20000232:	4a05      	ldr	r2, [pc, #20]	; (20000248 <ascii_read_data+0x3a>)
20000234:	6812      	ldr	r2, [r2, #0]
20000236:	4905      	ldr	r1, [pc, #20]	; (2000024c <ascii_read_data+0x3e>)
20000238:	430a      	orrs	r2, r1
2000023a:	601a      	str	r2, [r3, #0]
    
    return return_value;
2000023c:	1dfb      	adds	r3, r7, #7
2000023e:	781b      	ldrb	r3, [r3, #0]
}
20000240:	0018      	movs	r0, r3
20000242:	46bd      	mov	sp, r7
20000244:	b003      	add	sp, #12
20000246:	bd90      	pop	{r4, r7, pc}
20000248:	40021000 	andmi	r1, r2, r0
2000024c:	55550000 	ldrbpl	r0, [r5, #-0]

20000250 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000250:	b590      	push	{r4, r7, lr}
20000252:	b083      	sub	sp, #12
20000254:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    portModer &= 0x0000FFFF;
20000256:	4b0e      	ldr	r3, [pc, #56]	; (20000290 <ascii_read_status+0x40>)
20000258:	4a0d      	ldr	r2, [pc, #52]	; (20000290 <ascii_read_status+0x40>)
2000025a:	6812      	ldr	r2, [r2, #0]
2000025c:	0412      	lsls	r2, r2, #16
2000025e:	0c12      	lsrs	r2, r2, #16
20000260:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading status and address
    ascii_ctrl_bit_clear(B_RS);
20000262:	2001      	movs	r0, #1
20000264:	f7ff ff98 	bl	20000198 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000268:	2002      	movs	r0, #2
2000026a:	f7ff ff81 	bl	20000170 <ascii_ctrl_bit_set>
    
    // Read values from display
    return_value = ascii_read_controller();
2000026e:	1dfc      	adds	r4, r7, #7
20000270:	f000 f82a 	bl	200002c8 <ascii_read_controller>
20000274:	0003      	movs	r3, r0
20000276:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    portModer |= 0x55550000;
20000278:	4b05      	ldr	r3, [pc, #20]	; (20000290 <ascii_read_status+0x40>)
2000027a:	4a05      	ldr	r2, [pc, #20]	; (20000290 <ascii_read_status+0x40>)
2000027c:	6812      	ldr	r2, [r2, #0]
2000027e:	4905      	ldr	r1, [pc, #20]	; (20000294 <ascii_read_status+0x44>)
20000280:	430a      	orrs	r2, r1
20000282:	601a      	str	r2, [r3, #0]
    
    return return_value;
20000284:	1dfb      	adds	r3, r7, #7
20000286:	781b      	ldrb	r3, [r3, #0]
}
20000288:	0018      	movs	r0, r3
2000028a:	46bd      	mov	sp, r7
2000028c:	b003      	add	sp, #12
2000028e:	bd90      	pop	{r4, r7, pc}
20000290:	40021000 	andmi	r1, r2, r0
20000294:	55550000 	ldrbpl	r0, [r5, #-0]

20000298 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
20000298:	b580      	push	{r7, lr}
2000029a:	b082      	sub	sp, #8
2000029c:	af00      	add	r7, sp, #0
2000029e:	0002      	movs	r2, r0
200002a0:	1dfb      	adds	r3, r7, #7
200002a2:	701a      	strb	r2, [r3, #0]
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
200002a4:	2040      	movs	r0, #64	; 0x40
200002a6:	f7ff ff63 	bl	20000170 <ascii_ctrl_bit_set>
    
    // Set data register values
    portOdrHigh = byte;
200002aa:	4a06      	ldr	r2, [pc, #24]	; (200002c4 <ascii_write_controller+0x2c>)
200002ac:	1dfb      	adds	r3, r7, #7
200002ae:	781b      	ldrb	r3, [r3, #0]
200002b0:	7013      	strb	r3, [r2, #0]
    
    // Wait for 230ns (here at least 250, hope this should still work)
    delay_250ns();
200002b2:	f7ff ff07 	bl	200000c4 <delay_250ns>
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
200002b6:	2040      	movs	r0, #64	; 0x40
200002b8:	f7ff ff6e 	bl	20000198 <ascii_ctrl_bit_clear>
}
200002bc:	46c0      	nop			; (mov r8, r8)
200002be:	46bd      	mov	sp, r7
200002c0:	b002      	add	sp, #8
200002c2:	bd80      	pop	{r7, pc}
200002c4:	40021015 	andmi	r1, r2, r5, lsl r0

200002c8 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
200002c8:	b580      	push	{r7, lr}
200002ca:	b082      	sub	sp, #8
200002cc:	af00      	add	r7, sp, #0
    unsigned char return_value;
    
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
200002ce:	2040      	movs	r0, #64	; 0x40
200002d0:	f7ff ff4e 	bl	20000170 <ascii_ctrl_bit_set>
    
    // Wait for at least 360ns, here at least 500
    delay_250ns();
200002d4:	f7ff fef6 	bl	200000c4 <delay_250ns>
    delay_250ns();
200002d8:	f7ff fef4 	bl	200000c4 <delay_250ns>
    
    // Read data register
    return_value = portIdrHigh;
200002dc:	4a06      	ldr	r2, [pc, #24]	; (200002f8 <ascii_read_controller+0x30>)
200002de:	1dfb      	adds	r3, r7, #7
200002e0:	7812      	ldrb	r2, [r2, #0]
200002e2:	701a      	strb	r2, [r3, #0]
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
200002e4:	2040      	movs	r0, #64	; 0x40
200002e6:	f7ff ff57 	bl	20000198 <ascii_ctrl_bit_clear>
    
    return return_value;
200002ea:	1dfb      	adds	r3, r7, #7
200002ec:	781b      	ldrb	r3, [r3, #0]
}
200002ee:	0018      	movs	r0, r3
200002f0:	46bd      	mov	sp, r7
200002f2:	b002      	add	sp, #8
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)
200002f8:	40021011 	andmi	r1, r2, r1, lsl r0

200002fc <ascii_command>:

void ascii_command(unsigned char command, unsigned int post_command_delay, unsigned short us){
200002fc:	b580      	push	{r7, lr}
200002fe:	b082      	sub	sp, #8
20000300:	af00      	add	r7, sp, #0
20000302:	6039      	str	r1, [r7, #0]
20000304:	0011      	movs	r1, r2
20000306:	1dfb      	adds	r3, r7, #7
20000308:	1c02      	adds	r2, r0, #0
2000030a:	701a      	strb	r2, [r3, #0]
2000030c:	1d3b      	adds	r3, r7, #4
2000030e:	1c0a      	adds	r2, r1, #0
20000310:	801a      	strh	r2, [r3, #0]
    // Prepare to check if display ready
    ascii_ctrl_bit_set(B_RW);
20000312:	2002      	movs	r0, #2
20000314:	f7ff ff2c 	bl	20000170 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RS);
20000318:	2001      	movs	r0, #1
2000031a:	f7ff ff3d 	bl	20000198 <ascii_ctrl_bit_clear>
    
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while(ascii_read_status() & 0x80 != 0);
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	f7ff ff96 	bl	20000250 <ascii_read_status>
20000324:	0003      	movs	r3, r0
20000326:	001a      	movs	r2, r3
20000328:	2301      	movs	r3, #1
2000032a:	4013      	ands	r3, r2
2000032c:	d1f8      	bne.n	20000320 <ascii_command+0x24>
    delay_mikro(8);
2000032e:	2008      	movs	r0, #8
20000330:	f7ff fefa 	bl	20000128 <delay_mikro>
    
    // Send command
    ascii_write_cmd(command);
20000334:	1dfb      	adds	r3, r7, #7
20000336:	781b      	ldrb	r3, [r3, #0]
20000338:	0018      	movs	r0, r3
2000033a:	f7ff ff41 	bl	200001c0 <ascii_write_cmd>
    
    // Wait for the entered amount of time
    if(us == 1){
2000033e:	1d3b      	adds	r3, r7, #4
20000340:	881b      	ldrh	r3, [r3, #0]
20000342:	2b01      	cmp	r3, #1
20000344:	d104      	bne.n	20000350 <ascii_command+0x54>
        delay_mikro(post_command_delay);
20000346:	683b      	ldr	r3, [r7, #0]
20000348:	0018      	movs	r0, r3
2000034a:	f7ff feed 	bl	20000128 <delay_mikro>
    } else {
        delay_milli(post_command_delay);
    }
}
2000034e:	e003      	b.n	20000358 <ascii_command+0x5c>
        delay_milli(post_command_delay);
20000350:	683b      	ldr	r3, [r7, #0]
20000352:	0018      	movs	r0, r3
20000354:	f7ff fefd 	bl	20000152 <delay_milli>
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}

20000360 <ascii_write_char>:

void ascii_write_char(unsigned char character){
20000360:	b580      	push	{r7, lr}
20000362:	b082      	sub	sp, #8
20000364:	af00      	add	r7, sp, #0
20000366:	0002      	movs	r2, r0
20000368:	1dfb      	adds	r3, r7, #7
2000036a:	701a      	strb	r2, [r3, #0]
    // Prepare to check if display ready
    ascii_ctrl_bit_set(B_RW);
2000036c:	2002      	movs	r0, #2
2000036e:	f7ff feff 	bl	20000170 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RS);
20000372:	2001      	movs	r0, #1
20000374:	f7ff ff10 	bl	20000198 <ascii_ctrl_bit_clear>
    
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while(ascii_read_status() & 0x80 != 0);
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	f7ff ff69 	bl	20000250 <ascii_read_status>
2000037e:	0003      	movs	r3, r0
20000380:	001a      	movs	r2, r3
20000382:	2301      	movs	r3, #1
20000384:	4013      	ands	r3, r2
20000386:	d1f8      	bne.n	2000037a <ascii_write_char+0x1a>
    delay_mikro(8);
20000388:	2008      	movs	r0, #8
2000038a:	f7ff fecd 	bl	20000128 <delay_mikro>
    
    // Write character do display
    ascii_write_data(character);
2000038e:	1dfb      	adds	r3, r7, #7
20000390:	781b      	ldrb	r3, [r3, #0]
20000392:	0018      	movs	r0, r3
20000394:	f7ff ff26 	bl	200001e4 <ascii_write_data>
    
    // Delay for 43us
    delay_mikro(43);
20000398:	202b      	movs	r0, #43	; 0x2b
2000039a:	f7ff fec5 	bl	20000128 <delay_mikro>
}
2000039e:	46c0      	nop			; (mov r8, r8)
200003a0:	46bd      	mov	sp, r7
200003a2:	b002      	add	sp, #8
200003a4:	bd80      	pop	{r7, pc}

200003a6 <gotoxy>:

void gotoxy(unsigned int row, unsigned int column){
200003a6:	b580      	push	{r7, lr}
200003a8:	b084      	sub	sp, #16
200003aa:	af00      	add	r7, sp, #0
200003ac:	6078      	str	r0, [r7, #4]
200003ae:	6039      	str	r1, [r7, #0]
    // Make sure row not out of bounds
    if(row < 1 || row > 20){
200003b0:	687b      	ldr	r3, [r7, #4]
200003b2:	2b00      	cmp	r3, #0
200003b4:	d025      	beq.n	20000402 <gotoxy+0x5c>
200003b6:	687b      	ldr	r3, [r7, #4]
200003b8:	2b14      	cmp	r3, #20
200003ba:	d822      	bhi.n	20000402 <gotoxy+0x5c>
        return;
    }
    // Make sure column not out of bounds
    if(column < 1 || column > 2){
200003bc:	683b      	ldr	r3, [r7, #0]
200003be:	2b00      	cmp	r3, #0
200003c0:	d021      	beq.n	20000406 <gotoxy+0x60>
200003c2:	683b      	ldr	r3, [r7, #0]
200003c4:	2b02      	cmp	r3, #2
200003c6:	d81e      	bhi.n	20000406 <gotoxy+0x60>
        return;
    }
    
    // Set address to the correct location
    unsigned char address = row - 1;
200003c8:	687b      	ldr	r3, [r7, #4]
200003ca:	b2da      	uxtb	r2, r3
200003cc:	230f      	movs	r3, #15
200003ce:	18fb      	adds	r3, r7, r3
200003d0:	3a01      	subs	r2, #1
200003d2:	701a      	strb	r2, [r3, #0]
    if(column == 2){
200003d4:	683b      	ldr	r3, [r7, #0]
200003d6:	2b02      	cmp	r3, #2
200003d8:	d106      	bne.n	200003e8 <gotoxy+0x42>
        address += 0x40;
200003da:	230f      	movs	r3, #15
200003dc:	18fb      	adds	r3, r7, r3
200003de:	220f      	movs	r2, #15
200003e0:	18ba      	adds	r2, r7, r2
200003e2:	7812      	ldrb	r2, [r2, #0]
200003e4:	3240      	adds	r2, #64	; 0x40
200003e6:	701a      	strb	r2, [r3, #0]
    }
    
    // Send command to mark correct spot
    ascii_command(0x80 | address, 39, 1);
200003e8:	230f      	movs	r3, #15
200003ea:	18fb      	adds	r3, r7, r3
200003ec:	781b      	ldrb	r3, [r3, #0]
200003ee:	2280      	movs	r2, #128	; 0x80
200003f0:	4252      	negs	r2, r2
200003f2:	4313      	orrs	r3, r2
200003f4:	b2db      	uxtb	r3, r3
200003f6:	2201      	movs	r2, #1
200003f8:	2127      	movs	r1, #39	; 0x27
200003fa:	0018      	movs	r0, r3
200003fc:	f7ff ff7e 	bl	200002fc <ascii_command>
20000400:	e002      	b.n	20000408 <gotoxy+0x62>
        return;
20000402:	46c0      	nop			; (mov r8, r8)
20000404:	e000      	b.n	20000408 <gotoxy+0x62>
        return;
20000406:	46c0      	nop			; (mov r8, r8)
}
20000408:	46bd      	mov	sp, r7
2000040a:	b004      	add	sp, #16
2000040c:	bd80      	pop	{r7, pc}

2000040e <ascii_write_string>:

void ascii_write_string(char *s){
2000040e:	b580      	push	{r7, lr}
20000410:	b082      	sub	sp, #8
20000412:	af00      	add	r7, sp, #0
20000414:	6078      	str	r0, [r7, #4]
    // Write each character onto the display until the finishing character is reached
    while(*s != 0){
20000416:	e006      	b.n	20000426 <ascii_write_string+0x18>
        ascii_write_char(*s++);
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	1c5a      	adds	r2, r3, #1
2000041c:	607a      	str	r2, [r7, #4]
2000041e:	781b      	ldrb	r3, [r3, #0]
20000420:	0018      	movs	r0, r3
20000422:	f7ff ff9d 	bl	20000360 <ascii_write_char>
    while(*s != 0){
20000426:	687b      	ldr	r3, [r7, #4]
20000428:	781b      	ldrb	r3, [r3, #0]
2000042a:	2b00      	cmp	r3, #0
2000042c:	d1f4      	bne.n	20000418 <ascii_write_string+0xa>
    }
}
2000042e:	46c0      	nop			; (mov r8, r8)
20000430:	46bd      	mov	sp, r7
20000432:	b002      	add	sp, #8
20000434:	bd80      	pop	{r7, pc}
20000436:	46c0      	nop			; (mov r8, r8)
20000438:	61666c41 	cmnvs	r6, r1, asr #24
2000043c:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
20000440:	6b736972 	blvs	21cdaa10 <ascii_write_string+0x1cda602>
20000444:	00000020 	andeq	r0, r0, r0, lsr #32
20000448:	70736944 	rsbsvc	r6, r3, r4, asr #18
2000044c:	2079616c 	rsbscs	r6, r9, ip, ror #2
20000450:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0xffffffd3
20000454:	00007473 	andeq	r7, r0, r3, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000032a 	andeq	r0, r0, sl, lsr #6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000f3 	strdeq	r0, [r0], -r3
  10:	0001e00c 	andeq	lr, r1, ip
	...
  20:	018b0200 	orreq	r0, fp, r0, lsl #4
  24:	07010000 	streq	r0, [r1, -r0]
  28:	00040e01 	andeq	r0, r4, r1, lsl #28
  2c:	00002820 	andeq	r2, r0, r0, lsr #16
  30:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
  34:	03000000 	movweq	r0, #0
  38:	07010073 	smlsdxeq	r1, r3, r0, r0
  3c:	00004501 	andeq	r4, r0, r1, lsl #10
  40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
  44:	4b040400 	blmi	10104c <startup-0x1fefefb4>
  48:	05000000 	streq	r0, [r0, #-0]
  4c:	00ee0801 	rsceq	r0, lr, r1, lsl #16
  50:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
  54:	01000001 	tsteq	r0, r1
  58:	0003a6f3 	strdeq	sl, [r3], -r3
  5c:	00006820 	andeq	r6, r0, r0, lsr #16
  60:	929c0100 	addsls	r0, ip, #0, 2
  64:	07000000 	streq	r0, [r0, -r0]
  68:	00776f72 	rsbseq	r6, r7, r2, ror pc
  6c:	0092f301 	addseq	pc, r2, r1, lsl #6
  70:	91020000 	mrsls	r0, (UNDEF: 2)
  74:	01d2086c 	bicseq	r0, r2, ip, ror #16
  78:	f3010000 	vhadd.u8	d0, d1, d0
  7c:	00000092 	muleq	r0, r2, r0
  80:	09689102 	stmdbeq	r8!, {r1, r8, ip, pc}^
  84:	0000007e 	andeq	r0, r0, lr, ror r0
  88:	0099fe01 	addseq	pc, r9, r1, lsl #28
  8c:	91020000 	mrsls	r0, (UNDEF: 2)
  90:	04050077 	streq	r0, [r5], #-119	; 0xffffff89
  94:	00001207 	andeq	r1, r0, r7, lsl #4
  98:	08010500 	stmdaeq	r1, {r8, sl}
  9c:	000000e5 	andeq	r0, r0, r5, ror #1
  a0:	00022f06 	andeq	r2, r2, r6, lsl #30
  a4:	60e30100 	rscvs	r0, r3, r0, lsl #2
  a8:	46200003 	strtmi	r0, [r0], -r3
  ac:	01000000 	mrseq	r0, (UNDEF: 0)
  b0:	0000c49c 	muleq	r0, ip, r4
  b4:	02530800 	subseq	r0, r3, #0, 16
  b8:	e3010000 	movw	r0, #4096	; 0x1000
  bc:	00000099 	muleq	r0, r9, r0
  c0:	00779102 	rsbseq	r9, r7, r2, lsl #2
  c4:	0000c706 	andeq	ip, r0, r6, lsl #14
  c8:	fccf0100 	stc2l	1, cr0, [pc], {0}
  cc:	64200002 	strtvs	r0, [r0], #-2
  d0:	01000000 	mrseq	r0, (UNDEF: 0)
  d4:	0001039c 	muleq	r1, ip, r3
  d8:	00cd0800 	sbceq	r0, sp, r0, lsl #16
  dc:	cf010000 	svcgt	0x00010000
  e0:	00000099 	muleq	r0, r9, r0
  e4:	08779102 	ldmdaeq	r7!, {r1, r8, ip, pc}^
  e8:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
  ec:	0092cf01 	addseq	ip, r2, r1, lsl #30
  f0:	91020000 	mrsls	r0, (UNDEF: 2)
  f4:	73750770 	cmnvc	r5, #112, 14	; 0x1c00000
  f8:	03cf0100 	biceq	r0, pc, #0, 2
  fc:	02000001 	andeq	r0, r0, #1
 100:	05007491 	streq	r7, [r0, #-1169]	; 0xfffffb6f
 104:	000c0702 	andeq	r0, ip, r2, lsl #14
 108:	400a0000 	andmi	r0, sl, r0
 10c:	01000000 	mrseq	r0, (UNDEF: 0)
 110:	000099bc 			; <UNDEFINED> instruction: 0x000099bc
 114:	0002c800 	andeq	ip, r2, r0, lsl #16
 118:	00003420 	andeq	r3, r0, r0, lsr #8
 11c:	329c0100 	addscc	r0, ip, #0, 2
 120:	09000001 	stmdbeq	r0, {r0}
 124:	000000a9 	andeq	r0, r0, r9, lsr #1
 128:	0099bd01 	addseq	fp, r9, r1, lsl #26
 12c:	91020000 	mrsls	r0, (UNDEF: 2)
 130:	56060077 			; <UNDEFINED> instruction: 0x56060077
 134:	01000000 	mrseq	r0, (UNDEF: 0)
 138:	000298ae 	andeq	r9, r2, lr, lsr #17
 13c:	00003020 	andeq	r3, r0, r0, lsr #32
 140:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
 144:	08000001 	stmdaeq	r0, {r0}
 148:	000001ae 	andeq	r0, r0, lr, lsr #3
 14c:	0099ae01 	addseq	sl, r9, r1, lsl #28
 150:	91020000 	mrsls	r0, (UNDEF: 2)
 154:	860a0077 			; <UNDEFINED> instruction: 0x860a0077
 158:	01000000 	mrseq	r0, (UNDEF: 0)
 15c:	0000999c 	muleq	r0, ip, r9
 160:	00025000 	andeq	r5, r2, r0
 164:	00004820 	andeq	r4, r0, r0, lsr #16
 168:	7e9c0100 	fmlvce	f0, f4, f0
 16c:	09000001 	stmdbeq	r0, {r0}
 170:	000000a9 	andeq	r0, r0, r9, lsr #1
 174:	00999d01 	addseq	r9, r9, r1, lsl #26
 178:	91020000 	mrsls	r0, (UNDEF: 2)
 17c:	d50a006f 	strle	r0, [sl, #-111]	; 0xffffff91
 180:	01000000 	mrseq	r0, (UNDEF: 0)
 184:	0000998c 	andeq	r9, r0, ip, lsl #19
 188:	00020e00 	andeq	r0, r2, r0, lsl #28
 18c:	00004220 	andeq	r4, r0, r0, lsr #4
 190:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
 194:	09000001 	stmdbeq	r0, {r0}
 198:	000000a9 	andeq	r0, r0, r9, lsr #1
 19c:	00998d01 	addseq	r8, r9, r1, lsl #26
 1a0:	91020000 	mrsls	r0, (UNDEF: 2)
 1a4:	9806006f 	stmdals	r6, {r0, r1, r2, r3, r5, r6}
 1a8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ac:	0001e483 	andeq	lr, r1, r3, lsl #9
 1b0:	00002a20 	andeq	r2, r0, r0, lsr #20
 1b4:	ca9c0100 	bgt	fe7005bc <ascii_write_string+0xde7001ae>
 1b8:	08000001 	stmdaeq	r0, {r0}
 1bc:	000000e0 	andeq	r0, r0, r0, ror #1
 1c0:	00998301 	addseq	r8, r9, r1, lsl #6
 1c4:	91020000 	mrsls	r0, (UNDEF: 2)
 1c8:	9e060077 	mcrls	0, 0, r0, cr6, cr7, {3}
 1cc:	01000001 	tsteq	r0, r1
 1d0:	0001c07b 	andeq	ip, r1, fp, ror r0
 1d4:	00002420 	andeq	r2, r0, r0, lsr #8
 1d8:	ee9c0100 	fmle	f0, f4, f0
 1dc:	08000001 	stmdaeq	r0, {r0}
 1e0:	000000cd 	andeq	r0, r0, sp, asr #1
 1e4:	00997b01 	addseq	r7, r9, r1, lsl #22
 1e8:	91020000 	mrsls	r0, (UNDEF: 2)
 1ec:	1f0b0077 	svcne	0x000b0077
 1f0:	01000000 	mrseq	r0, (UNDEF: 0)
 1f4:	00019876 	andeq	r9, r1, r6, ror r8
 1f8:	00002820 	andeq	r2, r0, r0, lsr #16
 1fc:	109c0100 	addsne	r0, ip, r0, lsl #2
 200:	07000002 	streq	r0, [r0, -r2]
 204:	76010078 			; <UNDEFINED> instruction: 0x76010078
 208:	00000099 	muleq	r0, r9, r0
 20c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 210:	0002400b 	andeq	r4, r2, fp
 214:	70710100 	rsbsvc	r0, r1, r0, lsl #2
 218:	28200001 	stmdacs	r0!, {r0}
 21c:	01000000 	mrseq	r0, (UNDEF: 0)
 220:	0002329c 	muleq	r2, ip, r2
 224:	00780700 	rsbseq	r0, r8, r0, lsl #14
 228:	00997101 	addseq	r7, r9, r1, lsl #2
 22c:	91020000 	mrsls	r0, (UNDEF: 2)
 230:	00060077 	andeq	r0, r6, r7, ror r0
 234:	01000000 	mrseq	r0, (UNDEF: 0)
 238:	0001526d 	andeq	r5, r1, sp, ror #4
 23c:	00001e20 	andeq	r1, r0, r0, lsr #28
 240:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
 244:	07000002 	streq	r0, [r0, -r2]
 248:	0100736d 	tsteq	r0, sp, ror #6
 24c:	0000926d 	andeq	r9, r0, sp, ror #4
 250:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 254:	00340600 	eorseq	r0, r4, r0, lsl #12
 258:	67010000 	strvs	r0, [r1, -r0]
 25c:	20000128 	andcs	r0, r0, r8, lsr #2
 260:	0000002a 	andeq	r0, r0, sl, lsr #32
 264:	028e9c01 	addeq	r9, lr, #256	; 0x100
 268:	75070000 	strvc	r0, [r7, #-0]
 26c:	67010073 	smlsdxvs	r1, r3, r0, r0
 270:	00000092 	muleq	r0, r2, r0
 274:	0c6c9102 	stfeqp	f1, [ip], #-8
 278:	20000130 	andcs	r0, r0, r0, lsr r1
 27c:	0000001a 	andeq	r0, r0, sl, lsl r0
 280:	0100690d 	tsteq	r0, sp, lsl #18
 284:	00028e68 	andeq	r8, r2, r8, ror #28
 288:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 28c:	040e0000 	streq	r0, [lr], #-0
 290:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 294:	00b60f00 	adcseq	r0, r6, r0, lsl #30
 298:	5b010000 	blpl	402a0 <startup-0x1ffbfd60>
 29c:	200000c4 	andcs	r0, r0, r4, asr #1
 2a0:	00000064 	andeq	r0, r0, r4, rrx
 2a4:	6d109c01 	ldcvs	12, cr9, [r0, #-4]
 2a8:	01000000 	mrseq	r0, (UNDEF: 0)
 2ac:	0000784a 	andeq	r7, r0, sl, asr #16
 2b0:	00004c20 	andeq	r4, r0, r0, lsr #24
 2b4:	069c0100 	ldreq	r0, [ip], r0, lsl #2
 2b8:	000000c2 	andeq	r0, r0, r2, asr #1
 2bc:	00103b01 	andseq	r3, r0, r1, lsl #22
 2c0:	00682000 	rsbeq	r2, r8, r0
 2c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2c8:	000002f5 	strdeq	r0, [r0], -r5
 2cc:	0100730d 	tsteq	r0, sp, lsl #6
 2d0:	0000453c 	andeq	r4, r0, ip, lsr r5
 2d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 2d8:	0001b309 	andeq	fp, r1, r9, lsl #6
 2dc:	f53d0100 			; <UNDEFINED> instruction: 0xf53d0100
 2e0:	02000002 	andeq	r0, r0, #2
 2e4:	b9095c91 	stmdblt	r9, {r0, r4, r7, sl, fp, ip, lr}
 2e8:	01000001 	tsteq	r0, r1
 2ec:	00030c3e 	andeq	r0, r3, lr, lsr ip
 2f0:	4c910200 	lfmmi	f0, 4, [r1], {0}
 2f4:	004b1100 	subeq	r1, fp, r0, lsl #2
 2f8:	03050000 	movweq	r0, #20480	; 0x5000
 2fc:	05120000 	ldreq	r0, [r2, #-0]
 300:	0d000003 	stceq	0, cr0, [r0, #-12]
 304:	07040500 	streq	r0, [r4, -r0, lsl #10]
 308:	00000226 	andeq	r0, r0, r6, lsr #4
 30c:	00004b11 	andeq	r4, r0, r1, lsl fp
 310:	00031c00 	andeq	r1, r3, r0, lsl #24
 314:	03051200 	movweq	r1, #20992	; 0x5200
 318:	000e0000 	andeq	r0, lr, r0
 31c:	0000760f 	andeq	r7, r0, pc, lsl #12
 320:	00070100 	andeq	r0, r7, r0, lsl #2
 324:	0c200000 	stceq	0, cr0, [r0], #-0
 328:	01000000 	mrseq	r0, (UNDEF: 0)
 32c:	Address 0x0000032c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
  14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  1c:	01111927 	tsteq	r1, r7, lsr #18
  20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  24:	01194296 			; <UNDEFINED> instruction: 0x01194296
  28:	03000013 	movweq	r0, #19
  2c:	08030005 	stmdaeq	r3, {r0, r2}
  30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  34:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  38:	0f040000 	svceq	0x00040000
  3c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  40:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
  44:	0b0b0024 	bleq	2c00dc <startup-0x1fd3ff24>
  48:	0e030b3e 	vmoveq.16	d3[0], r0
  4c:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
  50:	03193f01 	tsteq	r9, #1, 30
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	1119270b 	tstne	r9, fp, lsl #14
  5c:	40061201 	andmi	r1, r6, r1, lsl #4
  60:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  64:	00001301 	andeq	r1, r0, r1, lsl #6
  68:	03000507 	movweq	r0, #1287	; 0x507
  6c:	3b0b3a08 	blcc	2ce894 <startup-0x1fd3176c>
  70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  74:	08000018 	stmdaeq	r0, {r3, r4}
  78:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  7c:	0b3b0b3a 	bleq	ec2d6c <startup-0x1f13d294>
  80:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  84:	34090000 	strcc	r0, [r9], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	00180213 	andseq	r0, r8, r3, lsl r2
  94:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
  98:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  9c:	0b3b0b3a 	bleq	ec2d8c <startup-0x1f13d274>
  a0:	13491927 	movtne	r1, #39207	; 0x9927
  a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  ac:	00130119 	andseq	r0, r3, r9, lsl r1
  b0:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
  b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  b8:	0b3b0b3a 	bleq	ec2da8 <startup-0x1f13d258>
  bc:	01111927 	tsteq	r1, r7, lsr #18
  c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  c4:	01194297 			; <UNDEFINED> instruction: 0x01194297
  c8:	0c000013 	stceq	0, cr0, [r0], {19}
  cc:	0111010b 	tsteq	r1, fp, lsl #2
  d0:	00000612 	andeq	r0, r0, r2, lsl r6
  d4:	0300340d 	movweq	r3, #1037	; 0x40d
  d8:	3b0b3a08 	blcc	2ce900 <startup-0x1fd31700>
  dc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  e0:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  e4:	0b0b0024 	bleq	2c017c <startup-0x1fd3fe84>
  e8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  ec:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  f0:	03193f00 	tsteq	r9, #0, 30
  f4:	3b0b3a0e 	blcc	2ce934 <startup-0x1fd316cc>
  f8:	1119270b 	tstne	r9, fp, lsl #14
  fc:	40061201 	andmi	r1, r6, r1, lsl #4
 100:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 104:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 108:	03193f00 	tsteq	r9, #0, 30
 10c:	3b0b3a0e 	blcc	2ce94c <startup-0x1fd316b4>
 110:	1119270b 	tstne	r9, fp, lsl #14
 114:	40061201 	andmi	r1, r6, r1, lsl #4
 118:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 11c:	01110000 	tsteq	r1, r0
 120:	01134901 	tsteq	r3, r1, lsl #18
 124:	12000013 	andne	r0, r0, #19
 128:	13490021 	movtne	r0, #36897	; 0x9021
 12c:	00000b2f 	andeq	r0, r0, pc, lsr #22
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000426 	andeq	r0, r0, r6, lsr #8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000436 	andcs	r0, r0, r6, lsr r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000120 	andeq	r0, r0, r0, lsr #2
   4:	005c0002 	subseq	r0, ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
  20:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; fffffe88 <ascii_write_string+0xdffffa7a>
  24:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  28:	2f373130 	svccs	0x00373130
  2c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
  30:	30544144 	subscc	r4, r4, r4, asr #2
  34:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff78 <ascii_write_string+0xdffffb6a>
  38:	20736261 	rsbscs	r6, r3, r1, ror #4
  3c:	20646e61 	rsbcs	r6, r4, r1, ror #28
  40:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
  44:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
  48:	73612f73 	cmnvc	r1, #460	; 0x1cc
  4c:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
  50:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  54:	00007961 	andeq	r7, r0, r1, ror #18
  58:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  5c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  60:	00010063 	andeq	r0, r1, r3, rrx
  64:	05000000 	streq	r0, [r0, #-0]
  68:	00000002 	andeq	r0, r0, r2
  6c:	5e131820 	cdppl	8, 1, cr1, cr3, cr0, {1}
  70:	01000302 	tsteq	r0, r2, lsl #6
  74:	02050001 	andeq	r0, r5, #1
  78:	20000010 	andcs	r0, r0, r0, lsl r0
  7c:	3e013a03 	vmlacc.f32	s6, s2, s6
  80:	4b308475 	blmi	c2125c <startup-0x1f3deda4>
  84:	2f4b593d 	svccs	0x004b593d
  88:	40309259 	eorsmi	r9, r0, r9, asr r2
  8c:	5a5a5a5a 	bpl	16969fc <startup-0x1e969604>
  90:	672f8459 			; <UNDEFINED> instruction: 0x672f8459
  94:	683d6767 	ldmdavs	sp!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}
  98:	4bbc673e 	blmi	fef19d98 <ascii_write_string+0xdef1998a>
  9c:	03040200 	movweq	r0, #16896	; 0x4200
  a0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  a4:	02002d03 	andeq	r2, r0, #3, 26	; 0xc0
  a8:	3c060104 	stfccs	f0, [r6], {4}
  ac:	4b4c5b06 	blmi	1316ccc <startup-0x1ece9334>
  b0:	83684c75 	cmnhi	r8, #29952	; 0x7500
  b4:	68836868 	stmvs	r3, {r3, r5, r6, fp, sp, lr}
  b8:	4c593f68 	mrrcmi	15, 6, r3, r9, cr8
  bc:	593f3d68 	ldmdbpl	pc!, {r3, r5, r6, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
  c0:	3e693f4c 	cdpcc	15, 6, cr3, cr9, cr12, {2}
  c4:	842f685b 	strthi	r6, [pc], #-2139	; cc <startup-0x1fffff34>
  c8:	3f3d693f 	svccc	0x003d693f
  cc:	842f685b 	strthi	r6, [pc], #-2139	; d4 <startup-0x1fffff2c>
  d0:	314d3f68 	cmpcc	sp, r8, ror #30
  d4:	3f40683d 	svccc	0x0040683d
  d8:	3e4d312f 	dvfccep	f3, f5, #10.0
  dc:	3dae762f 	stccc	6, cr7, [lr, #188]!	; 0xbc
  e0:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
  e4:	06200601 	strteq	r0, [r0], -r1, lsl #12
  e8:	4b5b3f75 	blmi	16cfec4 <startup-0x1e93013c>
  ec:	4c4c1e4e 	mcrrmi	14, 4, r1, ip, cr14
  f0:	003f3d68 	eorseq	r3, pc, r8, ror #26
  f4:	06010402 	streq	r0, [r1], -r2, lsl #8
  f8:	3f750620 	svccc	0x00750620
  fc:	5a4c3d5b 	bpl	130f670 <startup-0x1ecf0990>
 100:	01040200 	mrseq	r0, R12_usr
 104:	40063c06 	andmi	r3, r6, r6, lsl #24
 108:	01040200 	mrseq	r0, R12_usr
 10c:	41063c06 	tstmi	r6, r6, lsl #24
 110:	03783d67 	cmneq	r8, #6592	; 0x19c0
 114:	0332c872 	teqeq	r2, #7471104	; 0x720000
 118:	4c3e200b 	ldcmi	0, cr2, [lr], #-44	; 0xffffffd4
 11c:	024d7321 	subeq	r7, sp, #-2080374784	; 0x84000000
 120:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  10:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
  14:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  18:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  1c:	6100746e 	tstvs	r0, lr, ror #8
  20:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  24:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
  28:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  2c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
  30:	00726165 	rsbseq	r6, r2, r5, ror #2
  34:	616c6564 	cmnvs	ip, r4, ror #10
  38:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  3c:	006f726b 	rsbeq	r7, pc, fp, ror #4
  40:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  44:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  48:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
  4c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  50:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  54:	73610072 	cmnvc	r1, #114	; 0x72
  58:	5f696963 	svcpl	0x00696963
  5c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  60:	6f635f65 	svcvs	0x00635f65
  64:	6f72746e 	svcvs	0x0072746e
  68:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  6c:	70706100 	rsbsvc	r6, r0, r0, lsl #2
  70:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  74:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
  78:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  7c:	64610070 	strbtvs	r0, [r1], #-112	; 0xffffff90
  80:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
  84:	73610073 	cmnvc	r1, #115	; 0x73
  88:	5f696963 	svcpl	0x00696963
  8c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  90:	6174735f 	cmnvs	r4, pc, asr r3
  94:	00737574 	rsbseq	r7, r3, r4, ror r5
  98:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  9c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  a0:	5f657469 	svcpl	0x00657469
  a4:	61746164 	cmnvs	r4, r4, ror #2
  a8:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
  ac:	5f6e7275 	svcpl	0x006e7275
  b0:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
  b4:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
  b8:	5f79616c 	svcpl	0x0079616c
  bc:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
  c0:	616d0073 	smcvs	53251	; 0xd003
  c4:	61006e69 	tstvs	r0, r9, ror #28
  c8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  cc:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; ffffff58 <ascii_write_string+0xdffffb4a>
  d0:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  d4:	63736100 	cmnvs	r3, #0, 2
  d8:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
  dc:	5f646165 	svcpl	0x00646165
  e0:	61746164 	cmnvs	r4, r4, ror #2
  e4:	736e7500 	cmnvc	lr, #0, 10
  e8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  ec:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  f0:	47007261 	strmi	r7, [r0, -r1, ror #4]
  f4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  f8:	36203939 			; <UNDEFINED> instruction: 0x36203939
  fc:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
 100:	31303220 	teqcc	r0, r0, lsr #4
 104:	31323037 	teqcc	r2, r7, lsr r0
 108:	72282035 	eorvc	r2, r8, #53	; 0x35
 10c:	61656c65 	cmnvs	r5, r5, ror #24
 110:	20296573 	eorcs	r6, r9, r3, ror r5
 114:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 118:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
 11c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 120:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
 124:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 128:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 12c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 130:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 134:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
 138:	205d3231 	subscs	r3, sp, r1, lsr r2
 13c:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 140:	20626d75 	rsbcs	r6, r2, r5, ror sp
 144:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 148:	613d6863 	teqvs	sp, r3, ror #16
 14c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 150:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 154:	6f6c666d 	svcvs	0x006c666d
 158:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 15c:	733d6962 	teqvc	sp, #1605632	; 0x188000
 160:	2074666f 	rsbscs	r6, r4, pc, ror #12
 164:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 168:	20626d75 	rsbcs	r6, r2, r5, ror sp
 16c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 170:	613d6863 	teqvs	sp, r3, ror #16
 174:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 178:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 17c:	4f2d2067 	svcmi	0x002d2067
 180:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 184:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 188:	61003939 	tstvs	r0, r9, lsr r9
 18c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 190:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 194:	735f6574 	cmpvc	pc, #116, 10	; 0x1d000000
 198:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 19c:	73610067 	cmnvc	r1, #103	; 0x67
 1a0:	5f696963 	svcpl	0x00696963
 1a4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 1a8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 1ac:	79620064 	stmdbvc	r2!, {r2, r5, r6}^
 1b0:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
 1b4:	31747365 	cmncc	r4, r5, ror #6
 1b8:	73657400 	cmnvc	r5, #0, 8
 1bc:	70003274 	andvc	r3, r0, r4, ror r2
 1c0:	5f74736f 	svcpl	0x0074736f
 1c4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1c8:	5f646e61 	svcpl	0x00646e61
 1cc:	616c6564 	cmnvs	ip, r4, ror #10
 1d0:	6f630079 	svcvs	0x00630079
 1d4:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 1d8:	746f6700 	strbtvc	r6, [pc], #-1792	; 1e0 <startup-0x1ffffe20>
 1dc:	0079786f 	rsbseq	r7, r9, pc, ror #16
 1e0:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 1e4:	6f6f6863 	svcvs	0x006f6863
 1e8:	41442f6c 	cmpmi	r4, ip, ror #30
 1ec:	37313054 			; <UNDEFINED> instruction: 0x37313054
 1f0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 1f4:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 1f8:	2f373130 	svccs	0x00373130
 1fc:	7362614c 	cmnvc	r2, #76, 2
 200:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 204:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 208:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 20c:	612f7365 			; <UNDEFINED> instruction: 0x612f7365
 210:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 214:	70736964 	rsbsvc	r6, r3, r4, ror #18
 218:	2f79616c 	svccs	0x0079616c
 21c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 220:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 224:	69730063 	ldmdbvs	r3!, {r0, r1, r5, r6}^
 228:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 22c:	61006570 	tstvs	r0, r0, ror r5
 230:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 234:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 238:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 23c:	00726168 	rsbseq	r6, r2, r8, ror #2
 240:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 244:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 248:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 24c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 250:	63007465 	movwvs	r7, #1125	; 0x465
 254:	61726168 	cmnvs	r2, r8, ror #2
 258:	72657463 	rsbvc	r7, r5, #1660944384	; 0x63000000
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000068 	andeq	r0, r0, r8, rrx
  30:	400c0e41 	andmi	r0, ip, r1, asr #28
  34:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  38:	018e4002 	orreq	r4, lr, r2
  3c:	41380e41 	teqmi	r8, r1, asr #28
  40:	0000070d 	andeq	r0, r0, sp, lsl #14
  44:	00000018 	andeq	r0, r0, r8, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	20000078 	andcs	r0, r0, r8, ror r0
  50:	0000004c 	andeq	r0, r0, ip, asr #32
  54:	40080e41 	andmi	r0, r8, r1, asr #28
  58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  5c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  60:	00000018 	andeq	r0, r0, r8, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	200000c4 	andcs	r0, r0, r4, asr #1
  6c:	00000064 	andeq	r0, r0, r4, rrx
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	20000128 	andcs	r0, r0, r8, lsr #2
  88:	0000002a 	andeq	r0, r0, sl, lsr #32
  8c:	40080e41 	andmi	r0, r8, r1, asr #28
  90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  94:	180e4101 	stmdane	lr, {r0, r8, lr}
  98:	00070d41 	andeq	r0, r7, r1, asr #26
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	20000152 	andcs	r0, r0, r2, asr r1
  a8:	0000001e 	andeq	r0, r0, lr, lsl r0
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	20000170 	andcs	r0, r0, r0, ror r1
  c8:	00000028 	andeq	r0, r0, r8, lsr #32
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000198 	mulcs	r0, r8, r1
  e8:	00000028 	andeq	r0, r0, r8, lsr #32
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	200001c0 	andcs	r0, r0, r0, asr #3
 108:	00000024 	andeq	r0, r0, r4, lsr #32
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	100e4101 	andne	r4, lr, r1, lsl #2
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	200001e4 	andcs	r0, r0, r4, ror #3
 128:	0000002a 	andeq	r0, r0, sl, lsr #32
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	100e4101 	andne	r4, lr, r1, lsl #2
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	00000020 	andeq	r0, r0, r0, lsr #32
 140:	00000000 	andeq	r0, r0, r0
 144:	2000020e 	andcs	r0, r0, lr, lsl #4
 148:	00000042 	andeq	r0, r0, r2, asr #32
 14c:	400c0e41 	andmi	r0, ip, r1, asr #28
 150:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 154:	018e4002 	orreq	r4, lr, r2
 158:	41180e41 	tstmi	r8, r1, asr #28
 15c:	0000070d 	andeq	r0, r0, sp, lsl #14
 160:	00000020 	andeq	r0, r0, r0, lsr #32
 164:	00000000 	andeq	r0, r0, r0
 168:	20000250 	andcs	r0, r0, r0, asr r2
 16c:	00000048 	andeq	r0, r0, r8, asr #32
 170:	400c0e41 	andmi	r0, ip, r1, asr #28
 174:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 178:	018e4002 	orreq	r4, lr, r2
 17c:	41180e41 	tstmi	r8, r1, asr #28
 180:	0000070d 	andeq	r0, r0, sp, lsl #14
 184:	0000001c 	andeq	r0, r0, ip, lsl r0
 188:	00000000 	andeq	r0, r0, r0
 18c:	20000298 	mulcs	r0, r8, r2
 190:	00000030 	andeq	r0, r0, r0, lsr r0
 194:	40080e41 	andmi	r0, r8, r1, asr #28
 198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 19c:	100e4101 	andne	r4, lr, r1, lsl #2
 1a0:	00070d41 	andeq	r0, r7, r1, asr #26
 1a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a8:	00000000 	andeq	r0, r0, r0
 1ac:	200002c8 	andcs	r0, r0, r8, asr #5
 1b0:	00000034 	andeq	r0, r0, r4, lsr r0
 1b4:	40080e41 	andmi	r0, r8, r1, asr #28
 1b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1bc:	100e4101 	andne	r4, lr, r1, lsl #2
 1c0:	00070d41 	andeq	r0, r7, r1, asr #26
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	200002fc 	strdcs	r0, [r0], -ip
 1d0:	00000064 	andeq	r0, r0, r4, rrx
 1d4:	40080e41 	andmi	r0, r8, r1, asr #28
 1d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1dc:	100e4101 	andne	r4, lr, r1, lsl #2
 1e0:	00070d41 	andeq	r0, r7, r1, asr #26
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	20000360 	andcs	r0, r0, r0, ror #6
 1f0:	00000046 	andeq	r0, r0, r6, asr #32
 1f4:	40080e41 	andmi	r0, r8, r1, asr #28
 1f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1fc:	100e4101 	andne	r4, lr, r1, lsl #2
 200:	00070d41 	andeq	r0, r7, r1, asr #26
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	00000000 	andeq	r0, r0, r0
 20c:	200003a6 	andcs	r0, r0, r6, lsr #7
 210:	00000068 	andeq	r0, r0, r8, rrx
 214:	40080e41 	andmi	r0, r8, r1, asr #28
 218:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 21c:	180e4101 	stmdane	lr, {r0, r8, lr}
 220:	00070d41 	andeq	r0, r7, r1, asr #26
 224:	0000001c 	andeq	r0, r0, ip, lsl r0
 228:	00000000 	andeq	r0, r0, r0
 22c:	2000040e 	andcs	r0, r0, lr, lsl #8
 230:	00000028 	andeq	r0, r0, r8, lsr #32
 234:	40080e41 	andmi	r0, r8, r1, asr #28
 238:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 23c:	100e4101 	andne	r4, lr, r1, lsl #2
 240:	00070d41 	andeq	r0, r7, r1, asr #26
