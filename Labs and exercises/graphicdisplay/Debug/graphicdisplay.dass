
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define EXERCISE 15
 
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void ){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:

void main(void){
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
	graphic_write_command (LCD_SET_PAGE | 1, B_CS1 | B_CS2);
	graphic_write_data (0xFF, B_CS1 | B_CS2);
#endif // 5.14
    
#if EXERCISE == 15
    init_app();
20000016:	f000 fa25 	bl	20000464 <init_app>
    graphic_initialize();
2000001a:	f000 fa33 	bl	20000484 <graphic_initialize>
#ifndef SIMULATOR
    graphic_clear_screen();
#endif // For simulator
    while(1){
        // Draw a horisontal line
        for(int i = 0; i < 128; i++){
2000001e:	2300      	movs	r3, #0
20000020:	60fb      	str	r3, [r7, #12]
20000022:	e009      	b.n	20000038 <main+0x28>
            pixel(i, 10, 1);
20000024:	68fb      	ldr	r3, [r7, #12]
20000026:	b2db      	uxtb	r3, r3
20000028:	2201      	movs	r2, #1
2000002a:	210a      	movs	r1, #10
2000002c:	0018      	movs	r0, r3
2000002e:	f000 fa8a 	bl	20000546 <pixel>
        for(int i = 0; i < 128; i++){
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	3301      	adds	r3, #1
20000036:	60fb      	str	r3, [r7, #12]
20000038:	68fb      	ldr	r3, [r7, #12]
2000003a:	2b7f      	cmp	r3, #127	; 0x7f
2000003c:	ddf2      	ble.n	20000024 <main+0x14>
        }
        // Draw a vertical line
        for(int i = 0; i < 64; i++){
2000003e:	2300      	movs	r3, #0
20000040:	60bb      	str	r3, [r7, #8]
20000042:	e009      	b.n	20000058 <main+0x48>
            pixel(10, i, 1);
20000044:	68bb      	ldr	r3, [r7, #8]
20000046:	b2db      	uxtb	r3, r3
20000048:	2201      	movs	r2, #1
2000004a:	0019      	movs	r1, r3
2000004c:	200a      	movs	r0, #10
2000004e:	f000 fa7a 	bl	20000546 <pixel>
        for(int i = 0; i < 64; i++){
20000052:	68bb      	ldr	r3, [r7, #8]
20000054:	3301      	adds	r3, #1
20000056:	60bb      	str	r3, [r7, #8]
20000058:	68bb      	ldr	r3, [r7, #8]
2000005a:	2b3f      	cmp	r3, #63	; 0x3f
2000005c:	ddf2      	ble.n	20000044 <main+0x34>
        }
        
        delay_milli(500);
2000005e:	23fa      	movs	r3, #250	; 0xfa
20000060:	005b      	lsls	r3, r3, #1
20000062:	0018      	movs	r0, r3
20000064:	f000 f876 	bl	20000154 <delay_milli>
        
        // Erase horisontal line
        for(int i = 0; i < 128; i++){
20000068:	2300      	movs	r3, #0
2000006a:	607b      	str	r3, [r7, #4]
2000006c:	e009      	b.n	20000082 <main+0x72>
            pixel(i, 10, 0);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
20000072:	2200      	movs	r2, #0
20000074:	210a      	movs	r1, #10
20000076:	0018      	movs	r0, r3
20000078:	f000 fa65 	bl	20000546 <pixel>
        for(int i = 0; i < 128; i++){
2000007c:	687b      	ldr	r3, [r7, #4]
2000007e:	3301      	adds	r3, #1
20000080:	607b      	str	r3, [r7, #4]
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	2b7f      	cmp	r3, #127	; 0x7f
20000086:	ddf2      	ble.n	2000006e <main+0x5e>
        }
        // Erase a vertical line
        for(int i = 0; i < 64; i++){
20000088:	2300      	movs	r3, #0
2000008a:	603b      	str	r3, [r7, #0]
2000008c:	e009      	b.n	200000a2 <main+0x92>
            pixel(10, i, 0);
2000008e:	683b      	ldr	r3, [r7, #0]
20000090:	b2db      	uxtb	r3, r3
20000092:	2200      	movs	r2, #0
20000094:	0019      	movs	r1, r3
20000096:	200a      	movs	r0, #10
20000098:	f000 fa55 	bl	20000546 <pixel>
        for(int i = 0; i < 64; i++){
2000009c:	683b      	ldr	r3, [r7, #0]
2000009e:	3301      	adds	r3, #1
200000a0:	603b      	str	r3, [r7, #0]
200000a2:	683b      	ldr	r3, [r7, #0]
200000a4:	2b3f      	cmp	r3, #63	; 0x3f
200000a6:	ddf2      	ble.n	2000008e <main+0x7e>
        }
        
        delay_milli(500);
200000a8:	23fa      	movs	r3, #250	; 0xfa
200000aa:	005b      	lsls	r3, r3, #1
200000ac:	0018      	movs	r0, r3
200000ae:	f000 f851 	bl	20000154 <delay_milli>
        for(int i = 0; i < 128; i++){
200000b2:	e7b4      	b.n	2000001e <main+0xe>

200000b4 <delay_250ns>:
#include "delay.h"

void delay_250ns(void){
200000b4:	b580      	push	{r7, lr}
200000b6:	af00      	add	r7, sp, #0
    STK_CTRL &= 0xFFFEFFF8;
200000b8:	4b13      	ldr	r3, [pc, #76]	; (20000108 <delay_250ns+0x54>)
200000ba:	4a13      	ldr	r2, [pc, #76]	; (20000108 <delay_250ns+0x54>)
200000bc:	6812      	ldr	r2, [r2, #0]
200000be:	4913      	ldr	r1, [pc, #76]	; (2000010c <delay_250ns+0x58>)
200000c0:	400a      	ands	r2, r1
200000c2:	601a      	str	r2, [r3, #0]
    STK_LOAD &= 0xFF000000;
200000c4:	4b12      	ldr	r3, [pc, #72]	; (20000110 <delay_250ns+0x5c>)
200000c6:	4a12      	ldr	r2, [pc, #72]	; (20000110 <delay_250ns+0x5c>)
200000c8:	6812      	ldr	r2, [r2, #0]
200000ca:	0e12      	lsrs	r2, r2, #24
200000cc:	0612      	lsls	r2, r2, #24
200000ce:	601a      	str	r2, [r3, #0]
    STK_LOAD |= COUNT_VAL-1;
200000d0:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <delay_250ns+0x5c>)
200000d2:	4a0f      	ldr	r2, [pc, #60]	; (20000110 <delay_250ns+0x5c>)
200000d4:	6812      	ldr	r2, [r2, #0]
200000d6:	2129      	movs	r1, #41	; 0x29
200000d8:	430a      	orrs	r2, r1
200000da:	601a      	str	r2, [r3, #0]
    STK_VAL = 0;
200000dc:	4b0d      	ldr	r3, [pc, #52]	; (20000114 <delay_250ns+0x60>)
200000de:	2200      	movs	r2, #0
200000e0:	601a      	str	r2, [r3, #0]
    STK_CTRL |= 0x5;
200000e2:	4b09      	ldr	r3, [pc, #36]	; (20000108 <delay_250ns+0x54>)
200000e4:	4a08      	ldr	r2, [pc, #32]	; (20000108 <delay_250ns+0x54>)
200000e6:	6812      	ldr	r2, [r2, #0]
200000e8:	2105      	movs	r1, #5
200000ea:	430a      	orrs	r2, r1
200000ec:	601a      	str	r2, [r3, #0]
    
    while(STK_CTRL & 0x00010000 == 0);
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	4b05      	ldr	r3, [pc, #20]	; (20000108 <delay_250ns+0x54>)
200000f2:	681b      	ldr	r3, [r3, #0]
    
    STK_CTRL &= 0xFFFEFFF8;
200000f4:	4b04      	ldr	r3, [pc, #16]	; (20000108 <delay_250ns+0x54>)
200000f6:	4a04      	ldr	r2, [pc, #16]	; (20000108 <delay_250ns+0x54>)
200000f8:	6812      	ldr	r2, [r2, #0]
200000fa:	4904      	ldr	r1, [pc, #16]	; (2000010c <delay_250ns+0x58>)
200000fc:	400a      	ands	r2, r1
200000fe:	601a      	str	r2, [r3, #0]
}
20000100:	46c0      	nop			; (mov r8, r8)
20000102:	46bd      	mov	sp, r7
20000104:	bd80      	pop	{r7, pc}
20000106:	46c0      	nop			; (mov r8, r8)
20000108:	e000e010 	and	lr, r0, r0, lsl r0
2000010c:	fffefff8 			; <UNDEFINED> instruction: 0xfffefff8
20000110:	e000e014 	and	lr, r0, r4, lsl r0
20000114:	e000e018 	and	lr, r0, r8, lsl r0

20000118 <delay_500ns>:

void delay_500ns(void){
20000118:	b580      	push	{r7, lr}
2000011a:	af00      	add	r7, sp, #0
    delay_250ns();
2000011c:	f7ff ffca 	bl	200000b4 <delay_250ns>
    delay_250ns();
20000120:	f7ff ffc8 	bl	200000b4 <delay_250ns>
}
20000124:	46c0      	nop			; (mov r8, r8)
20000126:	46bd      	mov	sp, r7
20000128:	bd80      	pop	{r7, pc}

2000012a <delay_mikro>:

void delay_mikro(unsigned int us){
2000012a:	b580      	push	{r7, lr}
2000012c:	b084      	sub	sp, #16
2000012e:	af00      	add	r7, sp, #0
20000130:	6078      	str	r0, [r7, #4]
    for(int i=0; i < us*2; i++){
20000132:	2300      	movs	r3, #0
20000134:	60fb      	str	r3, [r7, #12]
20000136:	e004      	b.n	20000142 <delay_mikro+0x18>
        delay_500ns();
20000138:	f7ff ffee 	bl	20000118 <delay_500ns>
    for(int i=0; i < us*2; i++){
2000013c:	68fb      	ldr	r3, [r7, #12]
2000013e:	3301      	adds	r3, #1
20000140:	60fb      	str	r3, [r7, #12]
20000142:	687b      	ldr	r3, [r7, #4]
20000144:	005a      	lsls	r2, r3, #1
20000146:	68fb      	ldr	r3, [r7, #12]
20000148:	429a      	cmp	r2, r3
2000014a:	d8f5      	bhi.n	20000138 <delay_mikro+0xe>
    }
}
2000014c:	46c0      	nop			; (mov r8, r8)
2000014e:	46bd      	mov	sp, r7
20000150:	b004      	add	sp, #16
20000152:	bd80      	pop	{r7, pc}

20000154 <delay_milli>:

void delay_milli(unsigned int ms){
20000154:	b580      	push	{r7, lr}
20000156:	b082      	sub	sp, #8
20000158:	af00      	add	r7, sp, #0
2000015a:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
	delay_mikro(ms);
2000015c:	687b      	ldr	r3, [r7, #4]
2000015e:	0018      	movs	r0, r3
20000160:	f7ff ffe3 	bl	2000012a <delay_mikro>
	return;
20000164:	46c0      	nop			; (mov r8, r8)
#endif // For simulator
    delay_mikro(ms*MILLI_TO_MIKRO);
}
20000166:	46bd      	mov	sp, r7
20000168:	b002      	add	sp, #8
2000016a:	bd80      	pop	{r7, pc}

2000016c <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"

void graphic_ctrl_bit_set(uint8_t x){
2000016c:	b580      	push	{r7, lr}
2000016e:	b084      	sub	sp, #16
20000170:	af00      	add	r7, sp, #0
20000172:	0002      	movs	r2, r0
20000174:	1dfb      	adds	r3, r7, #7
20000176:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
20000178:	4a0c      	ldr	r2, [pc, #48]	; (200001ac <graphic_ctrl_bit_set+0x40>)
2000017a:	230f      	movs	r3, #15
2000017c:	18fb      	adds	r3, r7, r3
2000017e:	7d12      	ldrb	r2, [r2, #20]
20000180:	701a      	strb	r2, [r3, #0]
    control_register |= (x | B_SELECT);
20000182:	1dfa      	adds	r2, r7, #7
20000184:	230f      	movs	r3, #15
20000186:	18fb      	adds	r3, r7, r3
20000188:	7812      	ldrb	r2, [r2, #0]
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	4313      	orrs	r3, r2
2000018e:	b2da      	uxtb	r2, r3
20000190:	230f      	movs	r3, #15
20000192:	18fb      	adds	r3, r7, r3
20000194:	2104      	movs	r1, #4
20000196:	430a      	orrs	r2, r1
20000198:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
2000019a:	4a04      	ldr	r2, [pc, #16]	; (200001ac <graphic_ctrl_bit_set+0x40>)
2000019c:	230f      	movs	r3, #15
2000019e:	18fb      	adds	r3, r7, r3
200001a0:	781b      	ldrb	r3, [r3, #0]
200001a2:	7513      	strb	r3, [r2, #20]
}
200001a4:	46c0      	nop			; (mov r8, r8)
200001a6:	46bd      	mov	sp, r7
200001a8:	b004      	add	sp, #16
200001aa:	bd80      	pop	{r7, pc}
200001ac:	40021000 	andmi	r1, r2, r0

200001b0 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
200001b0:	b580      	push	{r7, lr}
200001b2:	b084      	sub	sp, #16
200001b4:	af00      	add	r7, sp, #0
200001b6:	0002      	movs	r2, r0
200001b8:	1dfb      	adds	r3, r7, #7
200001ba:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
200001bc:	4a11      	ldr	r2, [pc, #68]	; (20000204 <graphic_ctrl_bit_clear+0x54>)
200001be:	230f      	movs	r3, #15
200001c0:	18fb      	adds	r3, r7, r3
200001c2:	7d12      	ldrb	r2, [r2, #20]
200001c4:	701a      	strb	r2, [r3, #0]
    control_register &= (~x);
200001c6:	1dfb      	adds	r3, r7, #7
200001c8:	781b      	ldrb	r3, [r3, #0]
200001ca:	b25b      	sxtb	r3, r3
200001cc:	43db      	mvns	r3, r3
200001ce:	b25b      	sxtb	r3, r3
200001d0:	220f      	movs	r2, #15
200001d2:	18ba      	adds	r2, r7, r2
200001d4:	7812      	ldrb	r2, [r2, #0]
200001d6:	b252      	sxtb	r2, r2
200001d8:	4013      	ands	r3, r2
200001da:	b25a      	sxtb	r2, r3
200001dc:	230f      	movs	r3, #15
200001de:	18fb      	adds	r3, r7, r3
200001e0:	701a      	strb	r2, [r3, #0]
    control_register |= B_SELECT;
200001e2:	230f      	movs	r3, #15
200001e4:	18fb      	adds	r3, r7, r3
200001e6:	220f      	movs	r2, #15
200001e8:	18ba      	adds	r2, r7, r2
200001ea:	7812      	ldrb	r2, [r2, #0]
200001ec:	2104      	movs	r1, #4
200001ee:	430a      	orrs	r2, r1
200001f0:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
200001f2:	4a04      	ldr	r2, [pc, #16]	; (20000204 <graphic_ctrl_bit_clear+0x54>)
200001f4:	230f      	movs	r3, #15
200001f6:	18fb      	adds	r3, r7, r3
200001f8:	781b      	ldrb	r3, [r3, #0]
200001fa:	7513      	strb	r3, [r2, #20]
}
200001fc:	46c0      	nop			; (mov r8, r8)
200001fe:	46bd      	mov	sp, r7
20000200:	b004      	add	sp, #16
20000202:	bd80      	pop	{r7, pc}
20000204:	40021000 	andmi	r1, r2, r0

20000208 <select_controller>:

void select_controller(uint8_t controller){
20000208:	b580      	push	{r7, lr}
2000020a:	b082      	sub	sp, #8
2000020c:	af00      	add	r7, sp, #0
2000020e:	0002      	movs	r2, r0
20000210:	1dfb      	adds	r3, r7, #7
20000212:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000214:	1dfb      	adds	r3, r7, #7
20000216:	781b      	ldrb	r3, [r3, #0]
20000218:	2b08      	cmp	r3, #8
2000021a:	d00c      	beq.n	20000236 <select_controller+0x2e>
2000021c:	dc02      	bgt.n	20000224 <select_controller+0x1c>
2000021e:	2b00      	cmp	r3, #0
20000220:	d005      	beq.n	2000022e <select_controller+0x26>
            break;
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
    }
}
20000222:	e01a      	b.n	2000025a <select_controller+0x52>
    switch(controller){
20000224:	2b10      	cmp	r3, #16
20000226:	d00d      	beq.n	20000244 <select_controller+0x3c>
20000228:	2b18      	cmp	r3, #24
2000022a:	d012      	beq.n	20000252 <select_controller+0x4a>
}
2000022c:	e015      	b.n	2000025a <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000022e:	2018      	movs	r0, #24
20000230:	f7ff ffbe 	bl	200001b0 <graphic_ctrl_bit_clear>
            break;
20000234:	e011      	b.n	2000025a <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS2);
20000236:	2010      	movs	r0, #16
20000238:	f7ff ffba 	bl	200001b0 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS1);
2000023c:	2008      	movs	r0, #8
2000023e:	f7ff ff95 	bl	2000016c <graphic_ctrl_bit_set>
            break;
20000242:	e00a      	b.n	2000025a <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000244:	2008      	movs	r0, #8
20000246:	f7ff ffb3 	bl	200001b0 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
2000024a:	2010      	movs	r0, #16
2000024c:	f7ff ff8e 	bl	2000016c <graphic_ctrl_bit_set>
            break;
20000250:	e003      	b.n	2000025a <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
20000252:	2018      	movs	r0, #24
20000254:	f7ff ff8a 	bl	2000016c <graphic_ctrl_bit_set>
            break;
20000258:	46c0      	nop			; (mov r8, r8)
}
2000025a:	46c0      	nop			; (mov r8, r8)
2000025c:	46bd      	mov	sp, r7
2000025e:	b002      	add	sp, #8
20000260:	bd80      	pop	{r7, pc}

20000262 <graphic_wait_ready>:

void graphic_wait_ready(void){
20000262:	b580      	push	{r7, lr}
20000264:	b082      	sub	sp, #8
20000266:	af00      	add	r7, sp, #0
    uint8_t display_busy_status;
    // Enable = 0
    graphic_ctrl_bit_clear(B_E);
20000268:	2040      	movs	r0, #64	; 0x40
2000026a:	f7ff ffa1 	bl	200001b0 <graphic_ctrl_bit_clear>
    // E: 15-8 = input, 7-0 = output
    GPIO_E.moder = 0x00005555;
2000026e:	4b14      	ldr	r3, [pc, #80]	; (200002c0 <graphic_wait_ready+0x5e>)
20000270:	4a14      	ldr	r2, [pc, #80]	; (200002c4 <graphic_wait_ready+0x62>)
20000272:	601a      	str	r2, [r3, #0]
    
    // RS = 0, RW = 1
    graphic_ctrl_bit_clear(B_RS);
20000274:	2001      	movs	r0, #1
20000276:	f7ff ff9b 	bl	200001b0 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
2000027a:	2002      	movs	r0, #2
2000027c:	f7ff ff76 	bl	2000016c <graphic_ctrl_bit_set>
    delay_500ns();
20000280:	f7ff ff4a 	bl	20000118 <delay_500ns>
    
    while(1){
        // Enable = 1
        graphic_ctrl_bit_set(B_E);
20000284:	2040      	movs	r0, #64	; 0x40
20000286:	f7ff ff71 	bl	2000016c <graphic_ctrl_bit_set>
        delay_500ns();
2000028a:	f7ff ff45 	bl	20000118 <delay_500ns>
        // Enable = 0
        graphic_ctrl_bit_clear(B_E);
2000028e:	2040      	movs	r0, #64	; 0x40
20000290:	f7ff ff8e 	bl	200001b0 <graphic_ctrl_bit_clear>
        delay_500ns();
20000294:	f7ff ff40 	bl	20000118 <delay_500ns>
        // Exit loop if not busy
        display_busy_status = GPIO_E.idrHigh & LCD_BUSY;
20000298:	4b09      	ldr	r3, [pc, #36]	; (200002c0 <graphic_wait_ready+0x5e>)
2000029a:	7c5b      	ldrb	r3, [r3, #17]
2000029c:	b2da      	uxtb	r2, r3
2000029e:	1dfb      	adds	r3, r7, #7
200002a0:	217f      	movs	r1, #127	; 0x7f
200002a2:	438a      	bics	r2, r1
200002a4:	701a      	strb	r2, [r3, #0]
        if(display_busy_status == 0){
200002a6:	1dfb      	adds	r3, r7, #7
200002a8:	781b      	ldrb	r3, [r3, #0]
200002aa:	2b00      	cmp	r3, #0
200002ac:	d000      	beq.n	200002b0 <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_set(B_E);
200002ae:	e7e9      	b.n	20000284 <graphic_wait_ready+0x22>
            break;
200002b0:	46c0      	nop			; (mov r8, r8)
    }
    
    // Enable = 1
    // graphic_ctrl_bit_set(B_E); // Commented out to check if this works because it works for NaN
    // E: 15-0 = output
    GPIO_E.moder = 0x55555555;
200002b2:	4b03      	ldr	r3, [pc, #12]	; (200002c0 <graphic_wait_ready+0x5e>)
200002b4:	4a04      	ldr	r2, [pc, #16]	; (200002c8 <graphic_wait_ready+0x66>)
200002b6:	601a      	str	r2, [r3, #0]
}
200002b8:	46c0      	nop			; (mov r8, r8)
200002ba:	46bd      	mov	sp, r7
200002bc:	b002      	add	sp, #8
200002be:	bd80      	pop	{r7, pc}
200002c0:	40021000 	andmi	r1, r2, r0
200002c4:	00005555 	andeq	r5, r0, r5, asr r5
200002c8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002cc <graphic_read>:

uint8_t graphic_read(uint8_t controller){
200002cc:	b580      	push	{r7, lr}
200002ce:	b084      	sub	sp, #16
200002d0:	af00      	add	r7, sp, #0
200002d2:	0002      	movs	r2, r0
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	701a      	strb	r2, [r3, #0]
	//Set enable to 0
	graphic_ctrl_bit_clear(B_E);
200002d8:	2040      	movs	r0, #64	; 0x40
200002da:	f7ff ff69 	bl	200001b0 <graphic_ctrl_bit_clear>
	
	//set E to input high byte / output low byte
	GPIO_E.moder = 0x00005555;
200002de:	4b12      	ldr	r3, [pc, #72]	; (20000328 <graphic_read+0x5c>)
200002e0:	4a12      	ldr	r2, [pc, #72]	; (2000032c <graphic_read+0x60>)
200002e2:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_RS | B_RW);
200002e4:	2003      	movs	r0, #3
200002e6:	f7ff ff41 	bl	2000016c <graphic_ctrl_bit_set>
	
	select_controller(controller);
200002ea:	1dfb      	adds	r3, r7, #7
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	0018      	movs	r0, r3
200002f0:	f7ff ff8a 	bl	20000208 <select_controller>
	delay_500ns();
200002f4:	f7ff ff10 	bl	20000118 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
200002f8:	2040      	movs	r0, #64	; 0x40
200002fa:	f7ff ff37 	bl	2000016c <graphic_ctrl_bit_set>
	delay_500ns();
200002fe:	f7ff ff0b 	bl	20000118 <delay_500ns>
	
	// set return value to what is on the data register
	uint8_t RV = GPIO_E.idrHigh;
20000302:	4a09      	ldr	r2, [pc, #36]	; (20000328 <graphic_read+0x5c>)
20000304:	230f      	movs	r3, #15
20000306:	18fb      	adds	r3, r7, r3
20000308:	7c52      	ldrb	r2, [r2, #17]
2000030a:	701a      	strb	r2, [r3, #0]
	
	graphic_ctrl_bit_clear(B_E);
2000030c:	2040      	movs	r0, #64	; 0x40
2000030e:	f7ff ff4f 	bl	200001b0 <graphic_ctrl_bit_clear>
	
	//set E to output
	GPIO_E.moder = 0x55555555;
20000312:	4b05      	ldr	r3, [pc, #20]	; (20000328 <graphic_read+0x5c>)
20000314:	4a06      	ldr	r2, [pc, #24]	; (20000330 <graphic_read+0x64>)
20000316:	601a      	str	r2, [r3, #0]
		//case B_CS1 | B_CS2: select_controller(B_CS1 | B_CS2); break;
		//default: select_controller(0);
	}*/
	//graphic_wait_ready();
	
	return RV;
20000318:	230f      	movs	r3, #15
2000031a:	18fb      	adds	r3, r7, r3
2000031c:	781b      	ldrb	r3, [r3, #0]
}
2000031e:	0018      	movs	r0, r3
20000320:	46bd      	mov	sp, r7
20000322:	b004      	add	sp, #16
20000324:	bd80      	pop	{r7, pc}
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	40021000 	andmi	r1, r2, r0
2000032c:	00005555 	andeq	r5, r0, r5, asr r5
20000330:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000334 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000334:	b580      	push	{r7, lr}
20000336:	b082      	sub	sp, #8
20000338:	af00      	add	r7, sp, #0
2000033a:	0002      	movs	r2, r0
2000033c:	1dfb      	adds	r3, r7, #7
2000033e:	701a      	strb	r2, [r3, #0]
20000340:	1dbb      	adds	r3, r7, #6
20000342:	1c0a      	adds	r2, r1, #0
20000344:	701a      	strb	r2, [r3, #0]
	//datareg to value
	GPIO_E.odrHigh = value;
20000346:	4a1a      	ldr	r2, [pc, #104]	; (200003b0 <graphic_write+0x7c>)
20000348:	1dfb      	adds	r3, r7, #7
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
2000034e:	1dbb      	adds	r3, r7, #6
20000350:	781b      	ldrb	r3, [r3, #0]
20000352:	0018      	movs	r0, r3
20000354:	f7ff ff58 	bl	20000208 <select_controller>
	delay_500ns();
20000358:	f7ff fede 	bl	20000118 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
2000035c:	2040      	movs	r0, #64	; 0x40
2000035e:	f7ff ff05 	bl	2000016c <graphic_ctrl_bit_set>
	delay_500ns();
20000362:	f7ff fed9 	bl	20000118 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000366:	2040      	movs	r0, #64	; 0x40
20000368:	f7ff ff22 	bl	200001b0 <graphic_ctrl_bit_clear>
	
	//select actual controller, wait while we read
	if (controller & B_CS1){
2000036c:	1dbb      	adds	r3, r7, #6
2000036e:	781b      	ldrb	r3, [r3, #0]
20000370:	2208      	movs	r2, #8
20000372:	4013      	ands	r3, r2
20000374:	d004      	beq.n	20000380 <graphic_write+0x4c>
		select_controller(B_CS1);
20000376:	2008      	movs	r0, #8
20000378:	f7ff ff46 	bl	20000208 <select_controller>
		graphic_wait_ready();
2000037c:	f7ff ff71 	bl	20000262 <graphic_wait_ready>
	}
	if (controller & B_CS2){
20000380:	1dbb      	adds	r3, r7, #6
20000382:	781b      	ldrb	r3, [r3, #0]
20000384:	2210      	movs	r2, #16
20000386:	4013      	ands	r3, r2
20000388:	d004      	beq.n	20000394 <graphic_write+0x60>
		select_controller(B_CS2);
2000038a:	2010      	movs	r0, #16
2000038c:	f7ff ff3c 	bl	20000208 <select_controller>
		graphic_wait_ready();
20000390:	f7ff ff67 	bl	20000262 <graphic_wait_ready>
	}
	
	//datareg to 0
	GPIO_E.odrHigh = 0;
20000394:	4b06      	ldr	r3, [pc, #24]	; (200003b0 <graphic_write+0x7c>)
20000396:	2200      	movs	r2, #0
20000398:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
2000039a:	2040      	movs	r0, #64	; 0x40
2000039c:	f7ff fee6 	bl	2000016c <graphic_ctrl_bit_set>
	
	//set controller to 0
	select_controller(0);
200003a0:	2000      	movs	r0, #0
200003a2:	f7ff ff31 	bl	20000208 <select_controller>
}
200003a6:	46c0      	nop			; (mov r8, r8)
200003a8:	46bd      	mov	sp, r7
200003aa:	b002      	add	sp, #8
200003ac:	bd80      	pop	{r7, pc}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	40021000 	andmi	r1, r2, r0

200003b4 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
200003b4:	b580      	push	{r7, lr}
200003b6:	b082      	sub	sp, #8
200003b8:	af00      	add	r7, sp, #0
200003ba:	0002      	movs	r2, r0
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	701a      	strb	r2, [r3, #0]
200003c0:	1dbb      	adds	r3, r7, #6
200003c2:	1c0a      	adds	r2, r1, #0
200003c4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003c6:	2040      	movs	r0, #64	; 0x40
200003c8:	f7ff fef2 	bl	200001b0 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003cc:	1dbb      	adds	r3, r7, #6
200003ce:	781b      	ldrb	r3, [r3, #0]
200003d0:	0018      	movs	r0, r3
200003d2:	f7ff ff19 	bl	20000208 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200003d6:	2003      	movs	r0, #3
200003d8:	f7ff feea 	bl	200001b0 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200003dc:	1dbb      	adds	r3, r7, #6
200003de:	781a      	ldrb	r2, [r3, #0]
200003e0:	1dfb      	adds	r3, r7, #7
200003e2:	781b      	ldrb	r3, [r3, #0]
200003e4:	0011      	movs	r1, r2
200003e6:	0018      	movs	r0, r3
200003e8:	f7ff ffa4 	bl	20000334 <graphic_write>
}
200003ec:	46c0      	nop			; (mov r8, r8)
200003ee:	46bd      	mov	sp, r7
200003f0:	b002      	add	sp, #8
200003f2:	bd80      	pop	{r7, pc}

200003f4 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200003f4:	b580      	push	{r7, lr}
200003f6:	b082      	sub	sp, #8
200003f8:	af00      	add	r7, sp, #0
200003fa:	0002      	movs	r2, r0
200003fc:	1dfb      	adds	r3, r7, #7
200003fe:	701a      	strb	r2, [r3, #0]
20000400:	1dbb      	adds	r3, r7, #6
20000402:	1c0a      	adds	r2, r1, #0
20000404:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000406:	2040      	movs	r0, #64	; 0x40
20000408:	f7ff fed2 	bl	200001b0 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000040c:	1dbb      	adds	r3, r7, #6
2000040e:	781b      	ldrb	r3, [r3, #0]
20000410:	0018      	movs	r0, r3
20000412:	f7ff fef9 	bl	20000208 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000416:	2001      	movs	r0, #1
20000418:	f7ff fea8 	bl	2000016c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
2000041c:	2002      	movs	r0, #2
2000041e:	f7ff fec7 	bl	200001b0 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000422:	1dbb      	adds	r3, r7, #6
20000424:	781a      	ldrb	r2, [r3, #0]
20000426:	1dfb      	adds	r3, r7, #7
20000428:	781b      	ldrb	r3, [r3, #0]
2000042a:	0011      	movs	r1, r2
2000042c:	0018      	movs	r0, r3
2000042e:	f7ff ff81 	bl	20000334 <graphic_write>
}
20000432:	46c0      	nop			; (mov r8, r8)
20000434:	46bd      	mov	sp, r7
20000436:	b002      	add	sp, #8
20000438:	bd80      	pop	{r7, pc}

2000043a <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
2000043a:	b580      	push	{r7, lr}
2000043c:	b082      	sub	sp, #8
2000043e:	af00      	add	r7, sp, #0
20000440:	0002      	movs	r2, r0
20000442:	1dfb      	adds	r3, r7, #7
20000444:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
20000446:	1dfb      	adds	r3, r7, #7
20000448:	781b      	ldrb	r3, [r3, #0]
2000044a:	0018      	movs	r0, r3
2000044c:	f7ff ff3e 	bl	200002cc <graphic_read>
	return graphic_read(controller);
20000450:	1dfb      	adds	r3, r7, #7
20000452:	781b      	ldrb	r3, [r3, #0]
20000454:	0018      	movs	r0, r3
20000456:	f7ff ff39 	bl	200002cc <graphic_read>
2000045a:	0003      	movs	r3, r0
}
2000045c:	0018      	movs	r0, r3
2000045e:	46bd      	mov	sp, r7
20000460:	b002      	add	sp, #8
20000462:	bd80      	pop	{r7, pc}

20000464 <init_app>:

void init_app(void){
20000464:	b580      	push	{r7, lr}
20000466:	af00      	add	r7, sp, #0
	//port E is output
	GPIO_E.moder = 0x55555555;
20000468:	4b04      	ldr	r3, [pc, #16]	; (2000047c <init_app+0x18>)
2000046a:	4a05      	ldr	r2, [pc, #20]	; (20000480 <init_app+0x1c>)
2000046c:	601a      	str	r2, [r3, #0]
	GPIO_E.ospeedr = 0x55555555;
2000046e:	4b03      	ldr	r3, [pc, #12]	; (2000047c <init_app+0x18>)
20000470:	4a03      	ldr	r2, [pc, #12]	; (20000480 <init_app+0x1c>)
20000472:	609a      	str	r2, [r3, #8]
}
20000474:	46c0      	nop			; (mov r8, r8)
20000476:	46bd      	mov	sp, r7
20000478:	bd80      	pop	{r7, pc}
2000047a:	46c0      	nop			; (mov r8, r8)
2000047c:	40021000 	andmi	r1, r2, r0
20000480:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000484 <graphic_initialize>:

void graphic_initialize(void){
20000484:	b580      	push	{r7, lr}
20000486:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000488:	2040      	movs	r0, #64	; 0x40
2000048a:	f7ff fe6f 	bl	2000016c <graphic_ctrl_bit_set>
	
	delay_mikro(10);
2000048e:	200a      	movs	r0, #10
20000490:	f7ff fe4b 	bl	2000012a <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000494:	2078      	movs	r0, #120	; 0x78
20000496:	f7ff fe8b 	bl	200001b0 <graphic_ctrl_bit_clear>
	
	delay_milli(30);
2000049a:	201e      	movs	r0, #30
2000049c:	f7ff fe5a 	bl	20000154 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200004a0:	2020      	movs	r0, #32
200004a2:	f7ff fe63 	bl	2000016c <graphic_ctrl_bit_set>
	
	delay_milli(100); // Added because NaN has it
200004a6:	2064      	movs	r0, #100	; 0x64
200004a8:	f7ff fe54 	bl	20000154 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200004ac:	2118      	movs	r1, #24
200004ae:	203e      	movs	r0, #62	; 0x3e
200004b0:	f7ff ff80 	bl	200003b4 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200004b4:	2118      	movs	r1, #24
200004b6:	203f      	movs	r0, #63	; 0x3f
200004b8:	f7ff ff7c 	bl	200003b4 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200004bc:	2118      	movs	r1, #24
200004be:	20c0      	movs	r0, #192	; 0xc0
200004c0:	f7ff ff78 	bl	200003b4 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200004c4:	2118      	movs	r1, #24
200004c6:	2040      	movs	r0, #64	; 0x40
200004c8:	f7ff ff74 	bl	200003b4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
200004cc:	2118      	movs	r1, #24
200004ce:	20b8      	movs	r0, #184	; 0xb8
200004d0:	f7ff ff70 	bl	200003b4 <graphic_write_command>
	
	select_controller(0);
200004d4:	2000      	movs	r0, #0
200004d6:	f7ff fe97 	bl	20000208 <select_controller>
}
200004da:	46c0      	nop			; (mov r8, r8)
200004dc:	46bd      	mov	sp, r7
200004de:	bd80      	pop	{r7, pc}

200004e0 <graphic_clear_screen>:

void graphic_clear_screen(void){
200004e0:	b580      	push	{r7, lr}
200004e2:	b082      	sub	sp, #8
200004e4:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++){
200004e6:	1dfb      	adds	r3, r7, #7
200004e8:	2200      	movs	r2, #0
200004ea:	701a      	strb	r2, [r3, #0]
200004ec:	e023      	b.n	20000536 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
200004ee:	1dfb      	adds	r3, r7, #7
200004f0:	781b      	ldrb	r3, [r3, #0]
200004f2:	2248      	movs	r2, #72	; 0x48
200004f4:	4252      	negs	r2, r2
200004f6:	4313      	orrs	r3, r2
200004f8:	b2db      	uxtb	r3, r3
200004fa:	2118      	movs	r1, #24
200004fc:	0018      	movs	r0, r3
200004fe:	f7ff ff59 	bl	200003b4 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000502:	2118      	movs	r1, #24
20000504:	2040      	movs	r0, #64	; 0x40
20000506:	f7ff ff55 	bl	200003b4 <graphic_write_command>
		
		for(uint8_t add = 0; add < 64; add++){
2000050a:	1dbb      	adds	r3, r7, #6
2000050c:	2200      	movs	r2, #0
2000050e:	701a      	strb	r2, [r3, #0]
20000510:	e008      	b.n	20000524 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000512:	2118      	movs	r1, #24
20000514:	2000      	movs	r0, #0
20000516:	f7ff ff6d 	bl	200003f4 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
2000051a:	1dbb      	adds	r3, r7, #6
2000051c:	781a      	ldrb	r2, [r3, #0]
2000051e:	1dbb      	adds	r3, r7, #6
20000520:	3201      	adds	r2, #1
20000522:	701a      	strb	r2, [r3, #0]
20000524:	1dbb      	adds	r3, r7, #6
20000526:	781b      	ldrb	r3, [r3, #0]
20000528:	2b3f      	cmp	r3, #63	; 0x3f
2000052a:	d9f2      	bls.n	20000512 <graphic_clear_screen+0x32>
	for(uint8_t page = 0; page < 8; page++){
2000052c:	1dfb      	adds	r3, r7, #7
2000052e:	781a      	ldrb	r2, [r3, #0]
20000530:	1dfb      	adds	r3, r7, #7
20000532:	3201      	adds	r2, #1
20000534:	701a      	strb	r2, [r3, #0]
20000536:	1dfb      	adds	r3, r7, #7
20000538:	781b      	ldrb	r3, [r3, #0]
2000053a:	2b07      	cmp	r3, #7
2000053c:	d9d7      	bls.n	200004ee <graphic_clear_screen+0xe>
		}
	}
}
2000053e:	46c0      	nop			; (mov r8, r8)
20000540:	46bd      	mov	sp, r7
20000542:	b002      	add	sp, #8
20000544:	bd80      	pop	{r7, pc}

20000546 <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
20000546:	b590      	push	{r4, r7, lr}
20000548:	b085      	sub	sp, #20
2000054a:	af00      	add	r7, sp, #0
2000054c:	0004      	movs	r4, r0
2000054e:	0008      	movs	r0, r1
20000550:	0011      	movs	r1, r2
20000552:	1dfb      	adds	r3, r7, #7
20000554:	1c22      	adds	r2, r4, #0
20000556:	701a      	strb	r2, [r3, #0]
20000558:	1dbb      	adds	r3, r7, #6
2000055a:	1c02      	adds	r2, r0, #0
2000055c:	701a      	strb	r2, [r3, #0]
2000055e:	1d7b      	adds	r3, r7, #5
20000560:	1c0a      	adds	r2, r1, #0
20000562:	701a      	strb	r2, [r3, #0]
    // Validate values for input variables
    if(x < 1 || x > 128){
20000564:	1dfb      	adds	r3, r7, #7
20000566:	781b      	ldrb	r3, [r3, #0]
20000568:	2b00      	cmp	r3, #0
2000056a:	d100      	bne.n	2000056e <pixel+0x28>
2000056c:	e0b2      	b.n	200006d4 <pixel+0x18e>
2000056e:	1dfb      	adds	r3, r7, #7
20000570:	781b      	ldrb	r3, [r3, #0]
20000572:	2b80      	cmp	r3, #128	; 0x80
20000574:	d900      	bls.n	20000578 <pixel+0x32>
20000576:	e0ad      	b.n	200006d4 <pixel+0x18e>
        return;
    }
    if(y < 1 || y > 64){
20000578:	1dbb      	adds	r3, r7, #6
2000057a:	781b      	ldrb	r3, [r3, #0]
2000057c:	2b00      	cmp	r3, #0
2000057e:	d100      	bne.n	20000582 <pixel+0x3c>
20000580:	e0aa      	b.n	200006d8 <pixel+0x192>
20000582:	1dbb      	adds	r3, r7, #6
20000584:	781b      	ldrb	r3, [r3, #0]
20000586:	2b40      	cmp	r3, #64	; 0x40
20000588:	d900      	bls.n	2000058c <pixel+0x46>
2000058a:	e0a5      	b.n	200006d8 <pixel+0x192>
        return;
    }
    if(set != 1 && set != 0){
2000058c:	1d7b      	adds	r3, r7, #5
2000058e:	781b      	ldrb	r3, [r3, #0]
20000590:	2b01      	cmp	r3, #1
20000592:	d004      	beq.n	2000059e <pixel+0x58>
20000594:	1d7b      	adds	r3, r7, #5
20000596:	781b      	ldrb	r3, [r3, #0]
20000598:	2b00      	cmp	r3, #0
2000059a:	d000      	beq.n	2000059e <pixel+0x58>
2000059c:	e09e      	b.n	200006dc <pixel+0x196>
        return;
    }
    
    uint8_t index = (y-1)/8;
2000059e:	1dbb      	adds	r3, r7, #6
200005a0:	781b      	ldrb	r3, [r3, #0]
200005a2:	3b01      	subs	r3, #1
200005a4:	2b00      	cmp	r3, #0
200005a6:	da00      	bge.n	200005aa <pixel+0x64>
200005a8:	3307      	adds	r3, #7
200005aa:	10db      	asrs	r3, r3, #3
200005ac:	001a      	movs	r2, r3
200005ae:	230c      	movs	r3, #12
200005b0:	18fb      	adds	r3, r7, r3
200005b2:	701a      	strb	r2, [r3, #0]
    // Create mask for y, works as well as switch from book, but with less code
    uint8_t mask = 1;
200005b4:	230f      	movs	r3, #15
200005b6:	18fb      	adds	r3, r7, r3
200005b8:	2201      	movs	r2, #1
200005ba:	701a      	strb	r2, [r3, #0]
    mask = mask << ((y-1)%8);
200005bc:	230f      	movs	r3, #15
200005be:	18fb      	adds	r3, r7, r3
200005c0:	781a      	ldrb	r2, [r3, #0]
200005c2:	1dbb      	adds	r3, r7, #6
200005c4:	781b      	ldrb	r3, [r3, #0]
200005c6:	3b01      	subs	r3, #1
200005c8:	4946      	ldr	r1, [pc, #280]	; (200006e4 <pixel+0x19e>)
200005ca:	400b      	ands	r3, r1
200005cc:	d504      	bpl.n	200005d8 <pixel+0x92>
200005ce:	3b01      	subs	r3, #1
200005d0:	2108      	movs	r1, #8
200005d2:	4249      	negs	r1, r1
200005d4:	430b      	orrs	r3, r1
200005d6:	3301      	adds	r3, #1
200005d8:	409a      	lsls	r2, r3
200005da:	230f      	movs	r3, #15
200005dc:	18fb      	adds	r3, r7, r3
200005de:	701a      	strb	r2, [r3, #0]
    
    // Invert mask if the bit is going to get cleared
    if(set == 0){
200005e0:	1d7b      	adds	r3, r7, #5
200005e2:	781b      	ldrb	r3, [r3, #0]
200005e4:	2b00      	cmp	r3, #0
200005e6:	d106      	bne.n	200005f6 <pixel+0xb0>
        mask = ~mask;
200005e8:	230f      	movs	r3, #15
200005ea:	18fb      	adds	r3, r7, r3
200005ec:	220f      	movs	r2, #15
200005ee:	18ba      	adds	r2, r7, r2
200005f0:	7812      	ldrb	r2, [r2, #0]
200005f2:	43d2      	mvns	r2, r2
200005f4:	701a      	strb	r2, [r3, #0]
    }
    
    uint8_t x_actual;
    uint8_t controller;
    // Select applicable chip (screen half), and store the actual value of x
    if(x > 64){
200005f6:	1dfb      	adds	r3, r7, #7
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	2b40      	cmp	r3, #64	; 0x40
200005fc:	d90a      	bls.n	20000614 <pixel+0xce>
        controller = B_CS2;
200005fe:	230d      	movs	r3, #13
20000600:	18fb      	adds	r3, r7, r3
20000602:	2210      	movs	r2, #16
20000604:	701a      	strb	r2, [r3, #0]
        x_actual = x - 65;
20000606:	230e      	movs	r3, #14
20000608:	18fb      	adds	r3, r7, r3
2000060a:	1dfa      	adds	r2, r7, #7
2000060c:	7812      	ldrb	r2, [r2, #0]
2000060e:	3a41      	subs	r2, #65	; 0x41
20000610:	701a      	strb	r2, [r3, #0]
20000612:	e009      	b.n	20000628 <pixel+0xe2>
    } else {
        controller = B_CS1;
20000614:	230d      	movs	r3, #13
20000616:	18fb      	adds	r3, r7, r3
20000618:	2208      	movs	r2, #8
2000061a:	701a      	strb	r2, [r3, #0]
        x_actual = x - 1;
2000061c:	230e      	movs	r3, #14
2000061e:	18fb      	adds	r3, r7, r3
20000620:	1dfa      	adds	r2, r7, #7
20000622:	7812      	ldrb	r2, [r2, #0]
20000624:	3a01      	subs	r2, #1
20000626:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000628:	230e      	movs	r3, #14
2000062a:	18fb      	adds	r3, r7, r3
2000062c:	781b      	ldrb	r3, [r3, #0]
2000062e:	2240      	movs	r2, #64	; 0x40
20000630:	4313      	orrs	r3, r2
20000632:	b2da      	uxtb	r2, r3
20000634:	230d      	movs	r3, #13
20000636:	18fb      	adds	r3, r7, r3
20000638:	781b      	ldrb	r3, [r3, #0]
2000063a:	0019      	movs	r1, r3
2000063c:	0010      	movs	r0, r2
2000063e:	f7ff feb9 	bl	200003b4 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
20000642:	230c      	movs	r3, #12
20000644:	18fb      	adds	r3, r7, r3
20000646:	781b      	ldrb	r3, [r3, #0]
20000648:	2248      	movs	r2, #72	; 0x48
2000064a:	4252      	negs	r2, r2
2000064c:	4313      	orrs	r3, r2
2000064e:	b2da      	uxtb	r2, r3
20000650:	230d      	movs	r3, #13
20000652:	18fb      	adds	r3, r7, r3
20000654:	781b      	ldrb	r3, [r3, #0]
20000656:	0019      	movs	r1, r3
20000658:	0010      	movs	r0, r2
2000065a:	f7ff feab 	bl	200003b4 <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
2000065e:	230b      	movs	r3, #11
20000660:	18fc      	adds	r4, r7, r3
20000662:	230d      	movs	r3, #13
20000664:	18fb      	adds	r3, r7, r3
20000666:	781b      	ldrb	r3, [r3, #0]
20000668:	0018      	movs	r0, r3
2000066a:	f7ff fee6 	bl	2000043a <graphic_read_data>
2000066e:	0003      	movs	r3, r0
20000670:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000672:	230e      	movs	r3, #14
20000674:	18fb      	adds	r3, r7, r3
20000676:	781b      	ldrb	r3, [r3, #0]
20000678:	2240      	movs	r2, #64	; 0x40
2000067a:	4313      	orrs	r3, r2
2000067c:	b2da      	uxtb	r2, r3
2000067e:	230d      	movs	r3, #13
20000680:	18fb      	adds	r3, r7, r3
20000682:	781b      	ldrb	r3, [r3, #0]
20000684:	0019      	movs	r1, r3
20000686:	0010      	movs	r0, r2
20000688:	f7ff fe94 	bl	200003b4 <graphic_write_command>
    if(set == 1){
2000068c:	1d7b      	adds	r3, r7, #5
2000068e:	781b      	ldrb	r3, [r3, #0]
20000690:	2b01      	cmp	r3, #1
20000692:	d10a      	bne.n	200006aa <pixel+0x164>
        mask |= temp;
20000694:	230f      	movs	r3, #15
20000696:	18fb      	adds	r3, r7, r3
20000698:	220f      	movs	r2, #15
2000069a:	18b9      	adds	r1, r7, r2
2000069c:	220b      	movs	r2, #11
2000069e:	18ba      	adds	r2, r7, r2
200006a0:	7809      	ldrb	r1, [r1, #0]
200006a2:	7812      	ldrb	r2, [r2, #0]
200006a4:	430a      	orrs	r2, r1
200006a6:	701a      	strb	r2, [r3, #0]
200006a8:	e009      	b.n	200006be <pixel+0x178>
    } else {
        mask &= temp;
200006aa:	230f      	movs	r3, #15
200006ac:	18fb      	adds	r3, r7, r3
200006ae:	220f      	movs	r2, #15
200006b0:	18ba      	adds	r2, r7, r2
200006b2:	210b      	movs	r1, #11
200006b4:	1879      	adds	r1, r7, r1
200006b6:	7812      	ldrb	r2, [r2, #0]
200006b8:	7809      	ldrb	r1, [r1, #0]
200006ba:	400a      	ands	r2, r1
200006bc:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
200006be:	230d      	movs	r3, #13
200006c0:	18fb      	adds	r3, r7, r3
200006c2:	781a      	ldrb	r2, [r3, #0]
200006c4:	230f      	movs	r3, #15
200006c6:	18fb      	adds	r3, r7, r3
200006c8:	781b      	ldrb	r3, [r3, #0]
200006ca:	0011      	movs	r1, r2
200006cc:	0018      	movs	r0, r3
200006ce:	f7ff fe91 	bl	200003f4 <graphic_write_data>
200006d2:	e004      	b.n	200006de <pixel+0x198>
        return;
200006d4:	46c0      	nop			; (mov r8, r8)
200006d6:	e002      	b.n	200006de <pixel+0x198>
        return;
200006d8:	46c0      	nop			; (mov r8, r8)
200006da:	e000      	b.n	200006de <pixel+0x198>
        return;
200006dc:	46c0      	nop			; (mov r8, r8)
}
200006de:	46bd      	mov	sp, r7
200006e0:	b005      	add	sp, #20
200006e2:	bd90      	pop	{r4, r7, pc}
200006e4:	80000007 	andhi	r0, r0, r7

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000000ef 	andeq	r0, r0, pc, ror #1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000084 	andeq	r0, r0, r4, lsl #1
  10:	0000340c 	andeq	r3, r0, ip, lsl #8
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	0000011c 	andeq	r0, r0, ip, lsl r1
  28:	27070402 	strcs	r0, [r7, -r2, lsl #8]
  2c:	02000000 	andeq	r0, r0, #0
  30:	011e0601 	tsteq	lr, r1, lsl #12
  34:	02020000 	andeq	r0, r2, #0
  38:	00001305 	andeq	r1, r0, r5, lsl #6
  3c:	07020200 	streq	r0, [r2, -r0, lsl #4]
  40:	00000000 	andeq	r0, r0, r0
  44:	34050402 	strcc	r0, [r5], #-1026	; 0xfffffbfe
  48:	02000001 	andeq	r0, r0, #1
  4c:	00220704 	eoreq	r0, r2, r4, lsl #14
  50:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  54:	00012f05 	andeq	r2, r1, r5, lsl #30
  58:	07080200 	streq	r0, [r8, -r0, lsl #4]
  5c:	0000001d 	andeq	r0, r0, sp, lsl r0
  60:	69050403 	stmdbvs	r5, {r0, r1, sl}
  64:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
  68:	0000012a 	andeq	r0, r0, sl, lsr #2
  6c:	00101801 	andseq	r1, r0, r1, lsl #16
  70:	00a42000 	adceq	r2, r4, r0
  74:	9c010000 	stcls	0, cr0, [r1], {-0}
  78:	000000e1 	andeq	r0, r0, r1, ror #1
  7c:	00001e05 	andeq	r1, r0, r5, lsl #28
  80:	00002020 	andeq	r2, r0, r0, lsr #32
  84:	00009600 	andeq	r9, r0, r0, lsl #12
  88:	00690600 	rsbeq	r0, r9, r0, lsl #12
  8c:	00602d01 	rsbeq	r2, r0, r1, lsl #26
  90:	91020000 	mrsls	r0, (UNDEF: 2)
  94:	3e050074 	mcrcc	0, 0, r0, cr5, cr4, {3}
  98:	20200000 	eorcs	r0, r0, r0
  9c:	b0000000 	andlt	r0, r0, r0
  a0:	06000000 	streq	r0, [r0], -r0
  a4:	31010069 	tstcc	r1, r9, rrx
  a8:	00000060 	andeq	r0, r0, r0, rrx
  ac:	00709102 	rsbseq	r9, r0, r2, lsl #2
  b0:	00006805 	andeq	r6, r0, r5, lsl #16
  b4:	00002020 	andeq	r2, r0, r0, lsr #32
  b8:	0000ca00 	andeq	ip, r0, r0, lsl #20
  bc:	00690600 	rsbeq	r0, r9, r0, lsl #12
  c0:	00603801 	rsbeq	r3, r0, r1, lsl #16
  c4:	91020000 	mrsls	r0, (UNDEF: 2)
  c8:	8807006c 	stmdahi	r7, {r2, r3, r5, r6}
  cc:	20200000 	eorcs	r0, r0, r0
  d0:	06000000 	streq	r0, [r0], -r0
  d4:	3c010069 	stccc	0, cr0, [r1], {105}	; 0x69
  d8:	00000060 	andeq	r0, r0, r0, rrx
  dc:	00689102 	rsbeq	r9, r8, r2, lsl #2
  e0:	007c0800 	rsbseq	r0, ip, r0, lsl #16
  e4:	0f010000 	svceq	0x00010000
  e8:	20000000 	andcs	r0, r0, r0
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	aa009c01 	bge	270fc <startup-0x1ffd8f04>
  f4:	04000000 	streq	r0, [r0], #-0
  f8:	00007d00 	andeq	r7, r0, r0, lsl #26
  fc:	84010400 	strhi	r0, [r1], #-1024	; 0xfffffc00
 100:	0c000000 	stceq	0, cr0, [r0], {-0}
 104:	00000155 	andeq	r0, r0, r5, asr r1
 108:	200000b4 	strhcs	r0, [r0], -r4
 10c:	000000b8 	strheq	r0, [r0], -r8
 110:	000000d9 	ldrdeq	r0, [r0], -r9
 114:	00019b02 	andeq	r9, r1, r2, lsl #22
 118:	541a0100 	ldrpl	r0, [sl], #-256	; 0xffffff00
 11c:	18200001 	stmdane	r0!, {r0}
 120:	01000000 	mrseq	r0, (UNDEF: 0)
 124:	0000449c 	muleq	r0, ip, r4
 128:	736d0300 	cmnvc	sp, #0, 6
 12c:	441a0100 	ldrmi	r0, [sl], #-256	; 0xffffff00
 130:	02000000 	andeq	r0, r0, #0
 134:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
 138:	00270704 	eoreq	r0, r7, r4, lsl #14
 13c:	3d020000 	stccc	0, cr0, [r2, #-0]
 140:	01000001 	tsteq	r0, r1
 144:	00012a14 	andeq	r2, r1, r4, lsl sl
 148:	00002a20 	andeq	r2, r0, r0, lsr #20
 14c:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
 150:	03000000 	movweq	r0, #0
 154:	01007375 	tsteq	r0, r5, ror r3
 158:	00004414 	andeq	r4, r0, r4, lsl r4
 15c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 160:	00013205 	andeq	r3, r1, r5, lsl #4
 164:	00001a20 	andeq	r1, r0, r0, lsr #20
 168:	00690600 	rsbeq	r0, r9, r0, lsl #12
 16c:	00841501 	addeq	r1, r4, r1, lsl #10
 170:	91020000 	mrsls	r0, (UNDEF: 2)
 174:	07000074 	smlsdxeq	r0, r4, r0, r0
 178:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 17c:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 180:	01000001 	tsteq	r0, r1
 184:	0001180f 	andeq	r1, r1, pc, lsl #16
 188:	00001220 	andeq	r1, r0, r0, lsr #4
 18c:	099c0100 	ldmibeq	ip, {r8}
 190:	000001a7 	andeq	r0, r0, r7, lsr #3
 194:	00b40301 	adcseq	r0, r4, r1, lsl #6
 198:	00642000 	rsbeq	r2, r4, r0
 19c:	9c010000 	stcls	0, cr0, [r1], {-0}
 1a0:	00038000 	andeq	r8, r3, r0
 1a4:	16000400 	strne	r0, [r0], -r0, lsl #8
 1a8:	04000001 	streq	r0, [r0], #-1
 1ac:	00008401 	andeq	r8, r0, r1, lsl #8
 1b0:	02350c00 	eorseq	r0, r5, #0, 24
 1b4:	016c0000 	cmneq	ip, r0
 1b8:	057c2000 	ldrbeq	r2, [ip, #-0]!
 1bc:	01700000 	cmneq	r0, r0
 1c0:	02020000 	andeq	r0, r2, #0
 1c4:	00420b02 	subeq	r0, r2, r2, lsl #22
 1c8:	df030000 	svcle	0x00030000
 1cc:	02000002 	andeq	r0, r0, #2
 1d0:	0000420c 	andeq	r4, r0, ip, lsl #4
 1d4:	ca030000 	bgt	c01dc <startup-0x1ff3fe24>
 1d8:	02000002 	andeq	r0, r0, #2
 1dc:	0000420d 	andeq	r4, r0, sp, lsl #4
 1e0:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
 1e4:	011c0801 	tsteq	ip, r1, lsl #16
 1e8:	04050000 	streq	r0, [r5], #-0
 1ec:	00620902 	rsbeq	r0, r2, r2, lsl #18
 1f0:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
 1f4:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
 1f8:	0000620a 	andeq	r6, r0, sl, lsl #4
 1fc:	00210700 	eoreq	r0, r1, r0, lsl #14
 200:	04000000 	streq	r0, [r0], #-0
 204:	00270704 	eoreq	r0, r7, r4, lsl #14
 208:	02020000 	andeq	r0, r2, #0
 20c:	008a1202 	addeq	r1, sl, r2, lsl #4
 210:	c3030000 	movwgt	r0, #12288	; 0x3000
 214:	02000002 	andeq	r0, r0, #2
 218:	00004213 	andeq	r4, r0, r3, lsl r2
 21c:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
 220:	02000001 	andeq	r0, r0, #1
 224:	00004214 	andeq	r4, r0, r4, lsl r2
 228:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
 22c:	a3100204 	tstge	r0, #4, 4	; 0x40000000
 230:	06000000 	streq	r0, [r0], -r0
 234:	0072646f 	rsbseq	r6, r2, pc, ror #8
 238:	00621102 	rsbeq	r1, r2, r2, lsl #2
 23c:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
 240:	00000000 	andeq	r0, r0, r0
 244:	0001b808 	andeq	fp, r1, r8, lsl #16
 248:	04021800 	streq	r1, [r2], #-2048	; 0xfffff800
 24c:	000000ec 	andeq	r0, r0, ip, ror #1
 250:	00033703 	andeq	r3, r3, r3, lsl #14
 254:	62050200 	andvs	r0, r5, #0, 4
 258:	00000000 	andeq	r0, r0, r0
 25c:	0001d603 	andeq	sp, r1, r3, lsl #12
 260:	62060200 	andvs	r0, r6, #0, 4
 264:	04000000 	streq	r0, [r0], #-0
 268:	0002d203 	andeq	sp, r2, r3, lsl #4
 26c:	62070200 	andvs	r0, r7, #0, 4
 270:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 274:	00029703 	andeq	r9, r2, r3, lsl #14
 278:	62080200 	andvs	r0, r8, #0, 4
 27c:	0c000000 	stceq	0, cr0, [r0], {-0}
 280:	00004909 	andeq	r4, r0, r9, lsl #18
 284:	8a091000 	bhi	24428c <startup-0x1fdbbd74>
 288:	14000000 	strne	r0, [r0], #-0
 28c:	02190a00 	andseq	r0, r9, #0, 20
 290:	17020000 	strne	r0, [r2, -r0]
 294:	000000a3 	andeq	r0, r0, r3, lsr #1
 298:	0002bb0a 	andeq	fp, r2, sl, lsl #22
 29c:	42160300 	andsmi	r0, r6, #0, 6
 2a0:	0b000000 	bleq	2a8 <startup-0x1ffffd58>
 2a4:	000001ef 	andeq	r0, r0, pc, ror #3
 2a8:	0546c401 	strbeq	ip, [r6, #-1025]	; 0xfffffbff
 2ac:	01a22000 			; <UNDEFINED> instruction: 0x01a22000
 2b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2b4:	00000184 	andeq	r0, r0, r4, lsl #3
 2b8:	0100780c 	tsteq	r0, ip, lsl #16
 2bc:	0000f7c4 	andeq	pc, r0, r4, asr #15
 2c0:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 2c4:	0100790c 	tsteq	r0, ip, lsl #18
 2c8:	0000f7c4 	andeq	pc, r0, r4, asr #15
 2cc:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 2d0:	7465730c 	strbtvc	r7, [r5], #-780	; 0xfffffcf4
 2d4:	f7c40100 			; <UNDEFINED> instruction: 0xf7c40100
 2d8:	02000000 	andeq	r0, r0, #0
 2dc:	1d0d6591 	cfstr32ne	mvfx6, [sp, #-580]	; 0xfffffdbc
 2e0:	01000003 	tsteq	r0, r3
 2e4:	0000f7d0 	ldrdeq	pc, [r0], -r0
 2e8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 2ec:	0002da0d 	andeq	sp, r2, sp, lsl #20
 2f0:	f7d20100 			; <UNDEFINED> instruction: 0xf7d20100
 2f4:	02000000 	andeq	r0, r0, #0
 2f8:	fd0d6f91 	stc2	15, cr6, [sp, #-580]	; 0xfffffdbc
 2fc:	01000001 	tsteq	r0, r1
 300:	0000f7da 	ldrdeq	pc, [r0], -sl
 304:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 308:	0001cb0d 	andeq	ip, r1, sp, lsl #22
 30c:	f7db0100 			; <UNDEFINED> instruction: 0xf7db0100
 310:	02000000 	andeq	r0, r0, #0
 314:	140d6d91 	strne	r6, [sp], #-3473	; 0xfffff26f
 318:	01000002 	tsteq	r0, r2
 31c:	0000f7e7 	andeq	pc, r0, r7, ror #15
 320:	6b910200 	blvs	fe440b28 <pixel+0xde4405e2>
 324:	03600b00 	cmneq	r0, #0, 22
 328:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
 32c:	200004e0 	andcs	r0, r0, r0, ror #9
 330:	00000066 	andeq	r0, r0, r6, rrx
 334:	01ca9c01 	biceq	r9, sl, r1, lsl #24
 338:	e60e0000 	str	r0, [lr], -r0
 33c:	58200004 	stmdapl	r0!, {r2}
 340:	0d000000 	stceq	0, cr0, [r0, #-0]
 344:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
 348:	00f7ba01 	rscseq	fp, r7, r1, lsl #20
 34c:	91020000 	mrsls	r0, (UNDEF: 2)
 350:	050a0e77 	streq	r0, [sl, #-3703]	; 0xfffff189
 354:	00222000 	eoreq	r2, r2, r0
 358:	610f0000 	mrsvs	r0, CPSR
 35c:	01006464 	tsteq	r0, r4, ror #8
 360:	0000f7be 			; <UNDEFINED> instruction: 0x0000f7be
 364:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 368:	10000000 	andne	r0, r0, r0
 36c:	00000284 	andeq	r0, r0, r4, lsl #5
 370:	0484a401 	streq	sl, [r4], #1025	; 0x401
 374:	005c2000 	subseq	r2, ip, r0
 378:	9c010000 	stcls	0, cr0, [r1], {-0}
 37c:	0002b211 	andeq	fp, r2, r1, lsl r2
 380:	649e0100 	ldrvs	r0, [lr], #256	; 0x100
 384:	20200004 	eorcs	r0, r0, r4
 388:	01000000 	mrseq	r0, (UNDEF: 0)
 38c:	01dd129c 			; <UNDEFINED> instruction: 0x01dd129c
 390:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 394:	000000f7 	strdeq	r0, [r0], -r7
 398:	2000043a 	andcs	r0, r0, sl, lsr r4
 39c:	0000002a 	andeq	r0, r0, sl, lsr #32
 3a0:	02149c01 	andseq	r9, r4, #256	; 0x100
 3a4:	cb130000 	blgt	4c03ac <startup-0x1fb3fc54>
 3a8:	01000001 	tsteq	r0, r1
 3ac:	0000f799 	muleq	r0, r9, r7
 3b0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3b4:	02e60b00 	rsceq	r0, r6, #0, 22
 3b8:	91010000 	mrsls	r0, (UNDEF: 1)
 3bc:	200003f4 	strdcs	r0, [r0], -r4
 3c0:	00000046 	andeq	r0, r0, r6, asr #32
 3c4:	02469c01 	subeq	r9, r6, #256	; 0x100
 3c8:	ea130000 	b	4c03d0 <startup-0x1fb3fc30>
 3cc:	01000001 	tsteq	r0, r1
 3d0:	0000f791 	muleq	r0, r1, r7
 3d4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3d8:	0001cb13 	andeq	ip, r1, r3, lsl fp
 3dc:	f7910100 			; <UNDEFINED> instruction: 0xf7910100
 3e0:	02000000 	andeq	r0, r0, #0
 3e4:	0b007691 	bleq	1de30 <startup-0x1ffe21d0>
 3e8:	0000034a 	andeq	r0, r0, sl, asr #6
 3ec:	03b48a01 			; <UNDEFINED> instruction: 0x03b48a01
 3f0:	00402000 	subeq	r2, r0, r0
 3f4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3f8:	00000278 	andeq	r0, r0, r8, ror r2
 3fc:	00035813 	andeq	r5, r3, r3, lsl r8
 400:	f78a0100 			; <UNDEFINED> instruction: 0xf78a0100
 404:	02000000 	andeq	r0, r0, #0
 408:	cb137791 	blgt	4de254 <startup-0x1fb21dac>
 40c:	01000001 	tsteq	r0, r1
 410:	0000f78a 	andeq	pc, r0, sl, lsl #15
 414:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 418:	02060b00 	andeq	r0, r6, #0, 22
 41c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
 420:	20000334 	andcs	r0, r0, r4, lsr r3
 424:	00000080 	andeq	r0, r0, r0, lsl #1
 428:	02aa9c01 	adceq	r9, sl, #256	; 0x100
 42c:	be130000 	cdplt	0, 1, cr0, cr3, cr0, {0}
 430:	01000001 	tsteq	r0, r1
 434:	0000f76e 	andeq	pc, r0, lr, ror #14
 438:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 43c:	0001cb13 	andeq	ip, r1, r3, lsl fp
 440:	f76e0100 			; <UNDEFINED> instruction: 0xf76e0100
 444:	02000000 	andeq	r0, r0, #0
 448:	12007691 	andne	r7, r0, #152043520	; 0x9100000
 44c:	0000033d 	andeq	r0, r0, sp, lsr r3
 450:	00f74301 	rscseq	r4, r7, r1, lsl #6
 454:	02cc0000 	sbceq	r0, ip, #0
 458:	00682000 	rsbeq	r2, r8, r0
 45c:	9c010000 	stcls	0, cr0, [r1], {-0}
 460:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 464:	0001cb13 	andeq	ip, r1, r3, lsl fp
 468:	f7430100 			; <UNDEFINED> instruction: 0xf7430100
 46c:	02000000 	andeq	r0, r0, #0
 470:	520f6f91 	andpl	r6, pc, #580	; 0x244
 474:	53010056 	movwpl	r0, #4182	; 0x1056
 478:	000000f7 	strdeq	r0, [r0], -r7
 47c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 480:	00030a0b 	andeq	r0, r3, fp, lsl #20
 484:	62230100 	eorvs	r0, r3, #0, 2
 488:	6a200002 	bvs	800498 <startup-0x1f7ffb68>
 48c:	01000000 	mrseq	r0, (UNDEF: 0)
 490:	0003039c 	muleq	r3, ip, r3
 494:	03230d00 			; <UNDEFINED> instruction: 0x03230d00
 498:	24010000 	strcs	r0, [r1], #-0
 49c:	000000f7 	strdeq	r0, [r0], -r7
 4a0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 4a4:	0001c40b 	andeq	ip, r1, fp, lsl #8
 4a8:	08100100 	ldmdaeq	r0, {r8}
 4ac:	5a200002 	bpl	8004bc <startup-0x1f7ffb44>
 4b0:	01000000 	mrseq	r0, (UNDEF: 0)
 4b4:	0003279c 	muleq	r3, ip, r7
 4b8:	01cb1300 	biceq	r1, fp, r0, lsl #6
 4bc:	10010000 	andne	r0, r1, r0
 4c0:	000000f7 	strdeq	r0, [r0], -r7
 4c4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 4c8:	00021e14 	andeq	r1, r2, r4, lsl lr
 4cc:	b0090100 	andlt	r0, r9, r0, lsl #2
 4d0:	58200001 	stmdapl	r0!, {r0}
 4d4:	01000000 	mrseq	r0, (UNDEF: 0)
 4d8:	0003579c 	muleq	r3, ip, r7
 4dc:	00780c00 	rsbseq	r0, r8, r0, lsl #24
 4e0:	00f70901 	rscseq	r0, r7, r1, lsl #18
 4e4:	91020000 	mrsls	r0, (UNDEF: 2)
 4e8:	02f90d6f 	rscseq	r0, r9, #7104	; 0x1bc0
 4ec:	0a010000 	beq	404f4 <startup-0x1ffbfb0c>
 4f0:	000000f7 	strdeq	r0, [r0], -r7
 4f4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 4f8:	00029d15 	andeq	r9, r2, r5, lsl sp
 4fc:	6c030100 	stfvss	f0, [r3], {-0}
 500:	44200001 	strtmi	r0, [r0], #-1
 504:	01000000 	mrseq	r0, (UNDEF: 0)
 508:	00780c9c 			; <UNDEFINED> instruction: 0x00780c9c
 50c:	00f70301 	rscseq	r0, r7, r1, lsl #6
 510:	91020000 	mrsls	r0, (UNDEF: 2)
 514:	02f90d6f 	rscseq	r0, r9, #7104	; 0x1bc0
 518:	04010000 	streq	r0, [r1], #-0
 51c:	000000f7 	strdeq	r0, [r0], -r7
 520:	00779102 	rsbseq	r9, r7, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	0b002403 	bleq	9030 <startup-0x1fff6fd0>
  20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  24:	04000008 	streq	r0, [r0], #-8
  28:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  2c:	0b3a0e03 	bleq	e83840 <startup-0x1f17c7c0>
  30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  34:	06120111 			; <UNDEFINED> instruction: 0x06120111
  38:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  3c:	00130119 	andseq	r0, r3, r9, lsl r1
  40:	010b0500 	tsteq	fp, r0, lsl #10
  44:	06120111 			; <UNDEFINED> instruction: 0x06120111
  48:	00001301 	andeq	r1, r0, r1, lsl #6
  4c:	03003406 	movweq	r3, #1030	; 0x406
  50:	3b0b3a08 	blcc	2ce878 <startup-0x1fd31788>
  54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  58:	07000018 	smladeq	r0, r8, r0, r0
  5c:	0111010b 	tsteq	r1, fp, lsl #2
  60:	00000612 	andeq	r0, r0, r2, lsl r6
  64:	3f002e08 	svccc	0x00002e08
  68:	3a0e0319 	bcc	380cd4 <startup-0x1fc7f32c>
  6c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  70:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  74:	97184006 	ldrls	r4, [r8, -r6]
  78:	00001942 	andeq	r1, r0, r2, asr #18
  7c:	01110100 	tsteq	r1, r0, lsl #2
  80:	0b130e25 	bleq	4c391c <startup-0x1fb3c6e4>
  84:	01110e03 	tsteq	r1, r3, lsl #28
  88:	17100612 			; <UNDEFINED> instruction: 0x17100612
  8c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
  90:	03193f01 	tsteq	r9, #1, 30
  94:	3b0b3a0e 	blcc	2ce8d4 <startup-0x1fd3172c>
  98:	1119270b 	tstne	r9, fp, lsl #14
  9c:	40061201 	andmi	r1, r6, r1, lsl #4
  a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  a4:	00001301 	andeq	r1, r0, r1, lsl #6
  a8:	03000503 	movweq	r0, #1283	; 0x503
  ac:	3b0b3a08 	blcc	2ce8d4 <startup-0x1fd3172c>
  b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  b4:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
  b8:	0b0b0024 	bleq	2c0150 <startup-0x1fd3feb0>
  bc:	0e030b3e 	vmoveq.16	d3[0], r0
  c0:	0b050000 	bleq	1400c8 <startup-0x1febff38>
  c4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  c8:	06000006 	streq	r0, [r0], -r6
  cc:	08030034 	stmdaeq	r3, {r2, r4, r5}
  d0:	0b3b0b3a 	bleq	ec2dc0 <startup-0x1f13d240>
  d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  d8:	24070000 	strcs	r0, [r7], #-0
  dc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  e0:	0008030b 	andeq	r0, r8, fp, lsl #6
  e4:	002e0800 	eoreq	r0, lr, r0, lsl #16
  e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  ec:	0b3b0b3a 	bleq	ec2ddc <startup-0x1f13d224>
  f0:	01111927 	tsteq	r1, r7, lsr #18
  f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f8:	00194296 	mulseq	r9, r6, r2
  fc:	002e0900 	eoreq	r0, lr, r0, lsl #18
 100:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 104:	0b3b0b3a 	bleq	ec2df4 <startup-0x1f13d20c>
 108:	01111927 	tsteq	r1, r7, lsr #18
 10c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 110:	00194297 	mulseq	r9, r7, r2
 114:	11010000 	mrsne	r0, (UNDEF: 1)
 118:	130e2501 	movwne	r2, #58625	; 0xe501
 11c:	110e030b 	tstne	lr, fp, lsl #6
 120:	10061201 	andne	r1, r6, r1, lsl #4
 124:	02000017 	andeq	r0, r0, #23
 128:	0b0b0113 	bleq	2c057c <startup-0x1fd3fa84>
 12c:	0b3b0b3a 	bleq	ec2e1c <startup-0x1f13d1e4>
 130:	00001301 	andeq	r1, r0, r1, lsl #6
 134:	03000d03 	movweq	r0, #3331	; 0xd03
 138:	3b0b3a0e 	blcc	2ce978 <startup-0x1fd31688>
 13c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 140:	0400000b 	streq	r0, [r0], #-11
 144:	0b0b0024 	bleq	2c01dc <startup-0x1fd3fe24>
 148:	0e030b3e 	vmoveq.16	d3[0], r0
 14c:	17050000 	strne	r0, [r5, -r0]
 150:	3a0b0b01 	bcc	2c2d5c <startup-0x1fd3d2a4>
 154:	010b3b0b 	tsteq	fp, fp, lsl #22
 158:	06000013 			; <UNDEFINED> instruction: 0x06000013
 15c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 160:	0b3b0b3a 	bleq	ec2e50 <startup-0x1f13d1b0>
 164:	00001349 	andeq	r1, r0, r9, asr #6
 168:	49000d07 	stmdbmi	r0, {r0, r1, r2, r8, sl, fp}
 16c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 170:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 174:	0b3a0b0b 	bleq	e82da8 <startup-0x1f17d258>
 178:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 17c:	0d090000 	stceq	0, cr0, [r9, #-0]
 180:	38134900 	ldmdacc	r3, {r8, fp, lr}
 184:	0a00000b 	beq	1b8 <startup-0x1ffffe48>
 188:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 18c:	0b3b0b3a 	bleq	ec2e7c <startup-0x1f13d184>
 190:	00001349 	andeq	r1, r0, r9, asr #6
 194:	3f012e0b 	svccc	0x00012e0b
 198:	3a0e0319 	bcc	380e04 <startup-0x1fc7f1fc>
 19c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1a0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1a4:	96184006 	ldrls	r4, [r8], -r6
 1a8:	13011942 	movwne	r1, #6466	; 0x1942
 1ac:	050c0000 	streq	r0, [ip, #-0]
 1b0:	3a080300 	bcc	200db8 <startup-0x1fdff248>
 1b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1b8:	00180213 	andseq	r0, r8, r3, lsl r2
 1bc:	00340d00 	eorseq	r0, r4, r0, lsl #26
 1c0:	0b3a0e03 	bleq	e839d4 <startup-0x1f17c62c>
 1c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1c8:	00001802 	andeq	r1, r0, r2, lsl #16
 1cc:	11010b0e 	tstne	r1, lr, lsl #22
 1d0:	00061201 	andeq	r1, r6, r1, lsl #4
 1d4:	00340f00 	eorseq	r0, r4, r0, lsl #30
 1d8:	0b3a0803 	bleq	e821ec <startup-0x1f17de14>
 1dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e0:	00001802 	andeq	r1, r0, r2, lsl #16
 1e4:	3f002e10 	svccc	0x00002e10
 1e8:	3a0e0319 	bcc	380e54 <startup-0x1fc7f1ac>
 1ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1f4:	96184006 	ldrls	r4, [r8], -r6
 1f8:	00001942 	andeq	r1, r0, r2, asr #18
 1fc:	3f002e11 	svccc	0x00002e11
 200:	3a0e0319 	bcc	380e6c <startup-0x1fc7f194>
 204:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 208:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 20c:	97184006 	ldrls	r4, [r8, -r6]
 210:	00001942 	andeq	r1, r0, r2, asr #18
 214:	3f012e12 	svccc	0x00012e12
 218:	3a0e0319 	bcc	380e84 <startup-0x1fc7f17c>
 21c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 220:	11134919 	tstne	r3, r9, lsl r9
 224:	40061201 	andmi	r1, r6, r1, lsl #4
 228:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 22c:	00001301 	andeq	r1, r0, r1, lsl #6
 230:	03000513 	movweq	r0, #1299	; 0x513
 234:	3b0b3a0e 	blcc	2cea74 <startup-0x1fd3158c>
 238:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 23c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 240:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 244:	0b3a0e03 	bleq	e83a58 <startup-0x1f17c5a8>
 248:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 24c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 250:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 254:	00130119 	andseq	r0, r3, r9, lsl r1
 258:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 25c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 260:	0b3b0b3a 	bleq	ec2f50 <startup-0x1f13d0b0>
 264:	01111927 	tsteq	r1, r7, lsr #18
 268:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 26c:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000a4 	andeq	r0, r0, r4, lsr #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	00f30002 	rscseq	r0, r3, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000b4 	strhcs	r0, [r0], -r4
  3c:	000000b8 	strheq	r0, [r0], -r8
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	01a10002 			; <UNDEFINED> instruction: 0x01a10002
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000016c 	andcs	r0, r0, ip, ror #2
  5c:	0000057c 	andeq	r0, r0, ip, ror r5
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000b4 	strhcs	r0, [r0], -r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000d5 	ldrdeq	r0, [r0], -r5
   4:	005e0002 	subseq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
  20:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; fffffe88 <pixel+0xdffff942>
  24:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  28:	2f373130 	svccs	0x00373130
  2c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
  30:	30544144 	subscc	r4, r4, r4, asr #2
  34:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff78 <pixel+0xdffffa32>
  38:	20736261 	rsbscs	r6, r3, r1, ror #4
  3c:	20646e61 	rsbcs	r6, r4, r1, ror #28
  40:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
  44:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
  48:	72672f73 	rsbvc	r2, r7, #460	; 0x1cc
  4c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  50:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  54:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  58:	74730000 	ldrbtvc	r0, [r3], #-0
  5c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  60:	00632e70 	rsbeq	r2, r3, r0, ror lr
  64:	00000001 	andeq	r0, r0, r1
  68:	00020500 	andeq	r0, r2, r0, lsl #10
  6c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  70:	5e13010e 	mufpls	f0, f3, #0.5
  74:	01000302 	tsteq	r0, r2, lsl #6
  78:	02050001 	andeq	r0, r5, #1
  7c:	20000010 	andcs	r0, r0, r0, lsl r0
  80:	03011703 	movweq	r1, #5891	; 0x1703
  84:	342f3c0e 	strtcc	r3, [pc], #-3086	; 8c <startup-0x1fffff74>
  88:	03040200 	movweq	r0, #16896	; 0x4200
  8c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  90:	02007303 	andeq	r7, r0, #201326592	; 0xc000000
  94:	3c060104 	stfccs	f0, [r6], {4}
  98:	02004006 	andeq	r4, r0, #6
  9c:	003d0304 	eorseq	r0, sp, r4, lsl #6
  a0:	73030402 	movwvc	r0, #13314	; 0x3402
  a4:	01040200 	mrseq	r0, R12_usr
  a8:	40063c06 	andmi	r3, r6, r6, lsl #24
  ac:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
  b0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
  b4:	00730304 	rsbseq	r0, r3, r4, lsl #6
  b8:	06010402 	streq	r0, [r1], -r2, lsl #8
  bc:	0040063c 	subeq	r0, r0, ip, lsr r6
  c0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
  c4:	03040200 	movweq	r0, #16896	; 0x4200
  c8:	04020073 	streq	r0, [r2], #-115	; 0xffffff8d
  cc:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
  d0:	586d0340 	stmdapl	sp!, {r6, r8, r9}^
  d4:	01000102 	tsteq	r0, r2, lsl #2
  d8:	00009301 	andeq	r9, r0, r1, lsl #6
  dc:	5c000200 	sfmpl	f0, 4, [r0], {-0}
  e0:	02000000 	andeq	r0, r0, #0
  e4:	0d0efb01 	vstreq	d15, [lr, #-4]
  e8:	01010100 	mrseq	r0, (UNDEF: 17)
  ec:	00000001 	andeq	r0, r0, r1
  f0:	01000001 	tsteq	r0, r1
  f4:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
  f8:	6f6f6863 	svcvs	0x006f6863
  fc:	41442f6c 	cmpmi	r4, ip, ror #30
 100:	37313054 			; <UNDEFINED> instruction: 0x37313054
 104:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 108:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 10c:	2f373130 	svccs	0x00373130
 110:	7362614c 	cmnvc	r2, #76, 2
 114:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 118:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 11c:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 120:	672f7365 	strvs	r7, [pc, -r5, ror #6]!
 124:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 128:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 12c:	616c7073 	smcvs	50947	; 0xc703
 130:	64000079 	strvs	r0, [r0], #-121	; 0xffffff87
 134:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 138:	0100632e 	tsteq	r0, lr, lsr #6
 13c:	00000000 	andeq	r0, r0, r0
 140:	00b40205 	adcseq	r0, r4, r5, lsl #4
 144:	2f142000 	svccs	0x00142000
 148:	3d676767 	stclcc	7, cr6, [r7, #-412]!	; 0xfffffe64
 14c:	bc673e68 	stcllt	14, cr3, [r7], #-416	; 0xfffffe60
 150:	3e2f2f2f 	cdpcc	15, 2, cr2, cr15, cr15, {1}
 154:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 158:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 15c:	002d0304 	eoreq	r0, sp, r4, lsl #6
 160:	06010402 	streq	r0, [r1], -r2, lsl #8
 164:	4c5b063c 	mrrcmi	6, 3, r0, fp, cr12
 168:	02234b4c 	eoreq	r4, r3, #76, 22	; 0x13000
 16c:	01010003 	tsteq	r1, r3
 170:	00000164 	andeq	r0, r0, r4, ror #2
 174:	00830002 	addeq	r0, r3, r2
 178:	01020000 	mrseq	r0, (UNDEF: 2)
 17c:	000d0efb 	strdeq	r0, [sp], -fp
 180:	01010101 	tsteq	r1, r1, lsl #2
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	43010000 	movwmi	r0, #4096	; 0x1000
 18c:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
 190:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; fffffff8 <pixel+0xdffffab2>
 194:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 198:	2f373130 	svccs	0x00373130
 19c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 1a0:	30544144 	subscc	r4, r4, r4, asr #2
 1a4:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; e8 <startup-0x1fffff18>
 1a8:	20736261 	rsbscs	r6, r3, r1, ror #4
 1ac:	20646e61 	rsbcs	r6, r4, r1, ror #28
 1b0:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 1b4:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 1b8:	72672f73 	rsbvc	r2, r7, #460	; 0x1cc
 1bc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1c0:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 1c4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1c8:	72670000 	rsbvc	r0, r7, #0
 1cc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1d0:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 1d4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1d8:	0100632e 	tsteq	r0, lr, lsr #6
 1dc:	70670000 	rsbvc	r0, r7, r0
 1e0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 1e4:	00000100 	andeq	r0, r0, r0, lsl #2
 1e8:	70617267 	rsbvc	r7, r1, r7, ror #4
 1ec:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 1f0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 1f4:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 1f8:	00000100 	andeq	r0, r0, r0, lsl #2
 1fc:	02050000 	andeq	r0, r5, #0
 200:	2000016c 	andcs	r0, r0, ip, ror #2
 204:	bb596714 	bllt	1659e5c <startup-0x1e9a61a4>
 208:	59676859 	stmdbpl	r7!, {r0, r3, r4, r6, fp, sp, lr}^
 20c:	685983d7 	ldmdavs	r9, {r0, r1, r2, r4, r6, r7, r8, r9, pc}^
 210:	74100367 	ldrvc	r0, [r0], #-871	; 0xfffffc99
 214:	03207003 			; <UNDEFINED> instruction: 0x03207003
 218:	72034a10 	andvc	r4, r3, #16, 20	; 0x10000
 21c:	3d223d20 	stccc	13, cr3, [r2, #-128]!	; 0xffffff80
 220:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 224:	4c223d22 	stcmi	13, cr3, [r2], #-136	; 0xffffff78
 228:	3d3f3e3f 	ldccc	14, cr3, [pc, #-252]!	; 134 <startup-0x1ffffecc>
 22c:	303d323d 	eorscc	r3, sp, sp, lsr r2
 230:	0375303d 	cmneq	r5, #61	; 0x3d
 234:	27284a79 			; <UNDEFINED> instruction: 0x27284a79
 238:	3f68a03d 	svccc	0x0068a03d
 23c:	30593e3e 	subscc	r3, r9, lr, lsr lr
 240:	3f5a313d 	svccc	0x005a313d
 244:	3d3c1303 	ldccc	3, cr1, [ip, #-12]!
 248:	594b92ae 	stmdbpl	fp, {r1, r2, r3, r5, r7, r9, ip, pc}^
 24c:	3f2f3d30 	svccc	0x002f3d30
 250:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 254:	3f3d323d 	svccc	0x003d323d
 258:	3d91763d 	ldccc	6, cr7, [r1, #244]	; 0xf4
 25c:	4c833d59 	stcmi	13, cr3, [r3], {89}	; 0x59
 260:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 264:	674c833d 	smlaldxvs	r8, ip, sp, r3
 268:	304c6759 	subcc	r6, ip, r9, asr r7
 26c:	2f843d3d 	svccs	0x00843d3d
 270:	3d3e3e3e 	ldccc	14, cr3, [lr, #-248]!	; 0xffffff08
 274:	4b4b3e3e 	blmi	12cfb74 <startup-0x1ed3048c>
 278:	3d4c4b4b 	vstrcc	d20, [ip, #-300]	; 0xfffffed4
 27c:	9f4b3d3e 	svcls	0x004b3d3e
 280:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 284:	02004b03 	andeq	r4, r0, #3072	; 0xc00
 288:	00490304 	subeq	r0, r9, r4, lsl #6
 28c:	06010402 	streq	r0, [r1], -r2, lsl #8
 290:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 294:	00460602 	subeq	r0, r6, r2, lsl #12
 298:	06010402 	streq	r0, [r1], -r2, lsl #8
 29c:	4c520658 	mrrcmi	6, 5, r0, r2, cr8
 2a0:	040200e6 	streq	r0, [r2], #-230	; 0xffffff1a
 2a4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 2a8:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
 2ac:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 2b0:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
 2b4:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 2b8:	084bae5c 	stmdaeq	fp, {r2, r3, r4, r6, r9, sl, fp, sp, pc}^
 2bc:	4b7a4b23 	blmi	1e92f50 <startup-0x1e16d0b0>
 2c0:	694b764b 	stmdbvs	fp, {r0, r1, r3, r6, r9, sl, ip, sp, lr}^
 2c4:	c99fd7c9 	ldmibgt	pc, {r0, r3, r6, r7, r8, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
 2c8:	03a0ae4b 	moveq	sl, #1200	; 0x4b0
 2cc:	3131ac59 	teqcc	r1, r9, asr ip
 2d0:	02202203 	eoreq	r2, r0, #805306368	; 0x30000000
 2d4:	01010005 	tsteq	r1, r5

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
   4:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
   8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
   c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  10:	7300746e 	movwvc	r7, #1134	; 0x46e
  14:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
  18:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  1c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  20:	6f6c2067 	svcvs	0x006c2067
  24:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
  28:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  2c:	2064656e 	rsbcs	r6, r4, lr, ror #10
  30:	00746e69 	rsbseq	r6, r4, r9, ror #28
  34:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
  38:	6f6f6863 	svcvs	0x006f6863
  3c:	41442f6c 	cmpmi	r4, ip, ror #30
  40:	37313054 			; <UNDEFINED> instruction: 0x37313054
  44:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
  48:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
  4c:	2f373130 	svccs	0x00373130
  50:	7362614c 	cmnvc	r2, #76, 2
  54:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
  58:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
  5c:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
  60:	672f7365 	strvs	r7, [pc, -r5, ror #6]!
  64:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  68:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  6c:	616c7073 	smcvs	50947	; 0xc703
  70:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
  74:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  78:	00632e70 	rsbeq	r2, r3, r0, ror lr
  7c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  80:	00707574 	rsbseq	r7, r0, r4, ror r5
  84:	20554e47 	subscs	r4, r5, r7, asr #28
  88:	20393943 	eorscs	r3, r9, r3, asr #18
  8c:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  90:	30322031 	eorscc	r2, r2, r1, lsr r0
  94:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  98:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  9c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  a0:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  a4:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  a8:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  ac:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  b0:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  b4:	6172622d 	cmnvs	r2, sp, lsr #4
  b8:	2068636e 	rsbcs	r6, r8, lr, ror #6
  bc:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  c0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c4:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  c8:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  cc:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  d0:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  d4:	616d2d20 	cmnvs	sp, r0, lsr #26
  d8:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  dc:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  e0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  e4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  e8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  ec:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  f0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  f4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  f8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  fc:	616d2d20 	cmnvs	sp, r0, lsr #26
 100:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 104:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 108:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 10c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 110:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 114:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 118:	00393963 	eorseq	r3, r9, r3, ror #18
 11c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 120:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 124:	61686320 	cmnvs	r8, r0, lsr #6
 128:	616d0072 	smcvs	53250	; 0xd002
 12c:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
 130:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 134:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 138:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 13c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 140:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 86 <startup-0x1fffff7a>	; <UNPREDICTABLE>
 144:	6f726b69 	svcvs	0x00726b69
 148:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 14c:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff7f3 <pixel+0xdffff2ad>
 150:	736e3030 	cmnvc	lr, #48	; 0x30
 154:	2f3a4300 	svccs	0x003a4300
 158:	6f686353 	svcvs	0x00686353
 15c:	442f6c6f 	strtmi	r6, [pc], #-3183	; 164 <startup-0x1ffffe9c>
 160:	31305441 	teqcc	r0, r1, asr #8
 164:	6f4d2f37 	svcvs	0x004d2f37
 168:	41442d70 	hvcmi	17104	; 0x42d0
 16c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 170:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 174:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 178:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 17c:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 180:	2f736573 	svccs	0x00736573
 184:	70617267 	rsbvc	r7, r1, r7, ror #4
 188:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 18c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 190:	642f7961 	strtvs	r7, [pc], #-2401	; 198 <startup-0x1ffffe68>
 194:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 198:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 19c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1a0:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 1a4:	6400696c 	strvs	r6, [r0], #-2412	; 0xfffff694
 1a8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1ac:	3035325f 	eorscc	r3, r5, pc, asr r2
 1b0:	7000736e 	andvc	r7, r0, lr, ror #6
 1b4:	00656761 	rsbeq	r6, r5, r1, ror #14
 1b8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 1bc:	6176006f 	cmnvs	r6, pc, rrx
 1c0:	0065756c 	rsbeq	r7, r5, ip, ror #10
 1c4:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 1c8:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 1cc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 1d0:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 1d4:	746f0072 	strbtvc	r0, [pc], #-114	; 1dc <startup-0x1ffffe24>
 1d8:	72657079 	rsbvc	r7, r5, #121	; 0x79
 1dc:	61726700 	cmnvs	r2, r0, lsl #14
 1e0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1e4:	6165725f 	cmnvs	r5, pc, asr r2
 1e8:	61645f64 	cmnvs	r4, r4, ror #30
 1ec:	70006174 	andvc	r6, r0, r4, ror r1
 1f0:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 1f4:	72646f00 	rsbvc	r6, r4, #0, 30
 1f8:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 1fc:	615f7800 	cmpvs	pc, r0, lsl #16
 200:	61757463 	cmnvs	r5, r3, ror #8
 204:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 208:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 20c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 210:	00657469 	rsbeq	r7, r5, r9, ror #8
 214:	706d6574 	rsbvc	r6, sp, r4, ror r5
 218:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 21c:	7267004f 	rsbvc	r0, r7, #79	; 0x4f
 220:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 224:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 228:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 22c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 230:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 234:	2f3a4300 	svccs	0x003a4300
 238:	6f686353 	svcvs	0x00686353
 23c:	442f6c6f 	strtmi	r6, [pc], #-3183	; 244 <startup-0x1ffffdbc>
 240:	31305441 	teqcc	r0, r1, asr #8
 244:	6f4d2f37 	svcvs	0x004d2f37
 248:	41442d70 	hvcmi	17104	; 0x42d0
 24c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 250:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 254:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 258:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 25c:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 260:	2f736573 	svccs	0x00736573
 264:	70617267 	rsbvc	r7, r1, r7, ror #4
 268:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 26c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 270:	672f7961 	strvs	r7, [pc, -r1, ror #18]!
 274:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 278:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 27c:	616c7073 	smcvs	50947	; 0xc703
 280:	00632e79 	rsbeq	r2, r3, r9, ror lr
 284:	70617267 	rsbvc	r7, r1, r7, ror #4
 288:	5f636968 	svcpl	0x00636968
 28c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 290:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 294:	7000657a 	andvc	r6, r0, sl, ror r5
 298:	72647075 	rsbvc	r7, r4, #117	; 0x75
 29c:	61726700 	cmnvs	r2, r0, lsl #14
 2a0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2a4:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2a8:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2ac:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 2b0:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
 2b4:	615f7469 	cmpvs	pc, r9, ror #8
 2b8:	75007070 	strvc	r7, [r0, #-112]	; 0xffffff90
 2bc:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 2c0:	6f00745f 	svcvs	0x0000745f
 2c4:	6f4c7264 	svcvs	0x004c7264
 2c8:	64690077 	strbtvs	r0, [r9], #-119	; 0xffffff89
 2cc:	67694872 			; <UNDEFINED> instruction: 0x67694872
 2d0:	736f0068 	cmnvc	pc, #104	; 0x68
 2d4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2d8:	616d0072 	smcvs	53250	; 0xd002
 2dc:	69006b73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
 2e0:	6f4c7264 	svcvs	0x004c7264
 2e4:	72670077 	rsbvc	r0, r7, #119	; 0x77
 2e8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2ec:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2f0:	5f657469 	svcpl	0x00657469
 2f4:	61746164 	cmnvs	r4, r4, ror #2
 2f8:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
 2fc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 134 <startup-0x1ffffecc>
 300:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
 304:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
 308:	72670072 	rsbvc	r0, r7, #114	; 0x72
 30c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 310:	61775f63 	cmnvs	r7, r3, ror #30
 314:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 318:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 31c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 320:	64007865 	strvs	r7, [r0], #-2149	; 0xfffff79b
 324:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 328:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
 32c:	5f797375 	svcpl	0x00797375
 330:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 334:	6d007375 	stcvs	3, cr7, [r0, #-468]	; 0xfffffe2c
 338:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 33c:	61726700 	cmnvs	r2, r0, lsl #14
 340:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 344:	6165725f 	cmnvs	r5, pc, asr r2
 348:	72670064 	rsbvc	r0, r7, #100	; 0x64
 34c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 350:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 354:	5f657469 	svcpl	0x00657469
 358:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 35c:	00646e61 	rsbeq	r6, r4, r1, ror #28
 360:	70617267 	rsbvc	r7, r1, r7, ror #4
 364:	5f636968 	svcpl	0x00636968
 368:	61656c63 	cmnvs	r5, r3, ror #24
 36c:	63735f72 	cmnvs	r3, #456	; 0x1c8
 370:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000000a4 	andeq	r0, r0, r4, lsr #1
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000000c 	andeq	r0, r0, ip
  44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  48:	7c020001 	stcvc	0, cr0, [r2], {1}
  4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  50:	00000018 	andeq	r0, r0, r8, lsl r0
  54:	00000040 	andeq	r0, r0, r0, asr #32
  58:	200000b4 	strhcs	r0, [r0], -r4
  5c:	00000064 	andeq	r0, r0, r4, rrx
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	00000040 	andeq	r0, r0, r0, asr #32
  74:	20000118 	andcs	r0, r0, r8, lsl r1
  78:	00000012 	andeq	r0, r0, r2, lsl r0
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	00000040 	andeq	r0, r0, r0, asr #32
  90:	2000012a 	andcs	r0, r0, sl, lsr #2
  94:	0000002a 	andeq	r0, r0, sl, lsr #32
  98:	40080e41 	andmi	r0, r8, r1, asr #28
  9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a0:	180e4101 	stmdane	lr, {r0, r8, lr}
  a4:	00070d41 	andeq	r0, r7, r1, asr #26
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000040 	andeq	r0, r0, r0, asr #32
  b0:	20000154 	andcs	r0, r0, r4, asr r1
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
  b8:	40080e41 	andmi	r0, r8, r1, asr #28
  bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c0:	100e4101 	andne	r4, lr, r1, lsl #2
  c4:	00070d41 	andeq	r0, r7, r1, asr #26
  c8:	0000000c 	andeq	r0, r0, ip
  cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d0:	7c020001 	stcvc	0, cr0, [r2], {1}
  d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	000000c8 	andeq	r0, r0, r8, asr #1
  e0:	2000016c 	andcs	r0, r0, ip, ror #2
  e4:	00000044 	andeq	r0, r0, r4, asr #32
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	180e4101 	stmdane	lr, {r0, r8, lr}
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	000000c8 	andeq	r0, r0, r8, asr #1
 100:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
 104:	00000058 	andeq	r0, r0, r8, asr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	180e4101 	stmdane	lr, {r0, r8, lr}
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000c8 	andeq	r0, r0, r8, asr #1
 120:	20000208 	andcs	r0, r0, r8, lsl #4
 124:	0000005a 	andeq	r0, r0, sl, asr r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000c8 	andeq	r0, r0, r8, asr #1
 140:	20000262 	andcs	r0, r0, r2, ror #4
 144:	0000006a 	andeq	r0, r0, sl, rrx
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000c8 	andeq	r0, r0, r8, asr #1
 160:	200002cc 	andcs	r0, r0, ip, asr #5
 164:	00000068 	andeq	r0, r0, r8, rrx
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	180e4101 	stmdane	lr, {r0, r8, lr}
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	000000c8 	andeq	r0, r0, r8, asr #1
 180:	20000334 	andcs	r0, r0, r4, lsr r3
 184:	00000080 	andeq	r0, r0, r0, lsl #1
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	000000c8 	andeq	r0, r0, r8, asr #1
 1a0:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
 1a4:	00000040 	andeq	r0, r0, r0, asr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000000c8 	andeq	r0, r0, r8, asr #1
 1c0:	200003f4 	strdcs	r0, [r0], -r4
 1c4:	00000046 	andeq	r0, r0, r6, asr #32
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	100e4101 	andne	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000000c8 	andeq	r0, r0, r8, asr #1
 1e0:	2000043a 	andcs	r0, r0, sl, lsr r4
 1e4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	100e4101 	andne	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	00000018 	andeq	r0, r0, r8, lsl r0
 1fc:	000000c8 	andeq	r0, r0, r8, asr #1
 200:	20000464 	andcs	r0, r0, r4, ror #8
 204:	00000020 	andeq	r0, r0, r0, lsr #32
 208:	40080e41 	andmi	r0, r8, r1, asr #28
 20c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 210:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 214:	00000018 	andeq	r0, r0, r8, lsl r0
 218:	000000c8 	andeq	r0, r0, r8, asr #1
 21c:	20000484 	andcs	r0, r0, r4, lsl #9
 220:	0000005c 	andeq	r0, r0, ip, asr r0
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	000000c8 	andeq	r0, r0, r8, asr #1
 238:	200004e0 	andcs	r0, r0, r0, ror #9
 23c:	00000066 	andeq	r0, r0, r6, rrx
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	100e4101 	andne	r4, lr, r1, lsl #2
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	00000020 	andeq	r0, r0, r0, lsr #32
 254:	000000c8 	andeq	r0, r0, r8, asr #1
 258:	20000546 	andcs	r0, r0, r6, asr #10
 25c:	000001a2 	andeq	r0, r0, r2, lsr #3
 260:	400c0e41 	andmi	r0, ip, r1, asr #28
 264:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 268:	018e4002 	orreq	r4, lr, r2
 26c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 270:	0000070d 	andeq	r0, r0, sp, lsl #14
