
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define SIMULATOR
 
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void ){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:

void main(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	init_app();
20000014:	f000 f9ea 	bl	200003ec <init_app>
	graphic_initialize();
20000018:	f000 f9f8 	bl	2000040c <graphic_initialize>
#ifndef SIMULATOR
	graphic_clear_screen();
#endif //for simulator
	
	graphic_write_command (LCD_SET_ADD | 20, B_CS1 | B_CS2);
2000001c:	2118      	movs	r1, #24
2000001e:	2054      	movs	r0, #84	; 0x54
20000020:	f000 f98c 	bl	2000033c <graphic_write_command>
	graphic_write_command (LCD_SET_PAGE | 1, B_CS1 | B_CS2);
20000024:	2118      	movs	r1, #24
20000026:	20b9      	movs	r0, #185	; 0xb9
20000028:	f000 f988 	bl	2000033c <graphic_write_command>
	graphic_write_data (0xFF, B_CS1 | B_CS2);
2000002c:	2118      	movs	r1, #24
2000002e:	20ff      	movs	r0, #255	; 0xff
20000030:	f000 f9a4 	bl	2000037c <graphic_write_data>
}
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	46bd      	mov	sp, r7
20000038:	bd80      	pop	{r7, pc}
	...

2000003c <delay_250ns>:
#include "delay.h"

void delay_250ns(void){
2000003c:	b580      	push	{r7, lr}
2000003e:	af00      	add	r7, sp, #0
    STK_CTRL &= 0xFFFEFFF8;
20000040:	4b13      	ldr	r3, [pc, #76]	; (20000090 <delay_250ns+0x54>)
20000042:	4a13      	ldr	r2, [pc, #76]	; (20000090 <delay_250ns+0x54>)
20000044:	6812      	ldr	r2, [r2, #0]
20000046:	4913      	ldr	r1, [pc, #76]	; (20000094 <delay_250ns+0x58>)
20000048:	400a      	ands	r2, r1
2000004a:	601a      	str	r2, [r3, #0]
    STK_LOAD &= 0xFF000000;
2000004c:	4b12      	ldr	r3, [pc, #72]	; (20000098 <delay_250ns+0x5c>)
2000004e:	4a12      	ldr	r2, [pc, #72]	; (20000098 <delay_250ns+0x5c>)
20000050:	6812      	ldr	r2, [r2, #0]
20000052:	0e12      	lsrs	r2, r2, #24
20000054:	0612      	lsls	r2, r2, #24
20000056:	601a      	str	r2, [r3, #0]
    STK_LOAD |= COUNT_VAL-1;
20000058:	4b0f      	ldr	r3, [pc, #60]	; (20000098 <delay_250ns+0x5c>)
2000005a:	4a0f      	ldr	r2, [pc, #60]	; (20000098 <delay_250ns+0x5c>)
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	2129      	movs	r1, #41	; 0x29
20000060:	430a      	orrs	r2, r1
20000062:	601a      	str	r2, [r3, #0]
    STK_VAL = 0;
20000064:	4b0d      	ldr	r3, [pc, #52]	; (2000009c <delay_250ns+0x60>)
20000066:	2200      	movs	r2, #0
20000068:	601a      	str	r2, [r3, #0]
    STK_CTRL |= 0x5;
2000006a:	4b09      	ldr	r3, [pc, #36]	; (20000090 <delay_250ns+0x54>)
2000006c:	4a08      	ldr	r2, [pc, #32]	; (20000090 <delay_250ns+0x54>)
2000006e:	6812      	ldr	r2, [r2, #0]
20000070:	2105      	movs	r1, #5
20000072:	430a      	orrs	r2, r1
20000074:	601a      	str	r2, [r3, #0]
    
    while(STK_CTRL & 0x00010000 == 0);
20000076:	46c0      	nop			; (mov r8, r8)
20000078:	4b05      	ldr	r3, [pc, #20]	; (20000090 <delay_250ns+0x54>)
2000007a:	681b      	ldr	r3, [r3, #0]
    
    STK_CTRL &= 0xFFFEFFF8;
2000007c:	4b04      	ldr	r3, [pc, #16]	; (20000090 <delay_250ns+0x54>)
2000007e:	4a04      	ldr	r2, [pc, #16]	; (20000090 <delay_250ns+0x54>)
20000080:	6812      	ldr	r2, [r2, #0]
20000082:	4904      	ldr	r1, [pc, #16]	; (20000094 <delay_250ns+0x58>)
20000084:	400a      	ands	r2, r1
20000086:	601a      	str	r2, [r3, #0]
}
20000088:	46c0      	nop			; (mov r8, r8)
2000008a:	46bd      	mov	sp, r7
2000008c:	bd80      	pop	{r7, pc}
2000008e:	46c0      	nop			; (mov r8, r8)
20000090:	e000e010 	and	lr, r0, r0, lsl r0
20000094:	fffefff8 			; <UNDEFINED> instruction: 0xfffefff8
20000098:	e000e014 	and	lr, r0, r4, lsl r0
2000009c:	e000e018 	and	lr, r0, r8, lsl r0

200000a0 <delay_500ns>:

void delay_500ns(void){
200000a0:	b580      	push	{r7, lr}
200000a2:	af00      	add	r7, sp, #0
    delay_250ns();
200000a4:	f7ff ffca 	bl	2000003c <delay_250ns>
    delay_250ns();
200000a8:	f7ff ffc8 	bl	2000003c <delay_250ns>
}
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	bd80      	pop	{r7, pc}

200000b2 <delay_mikro>:

void delay_mikro(unsigned int us){
200000b2:	b580      	push	{r7, lr}
200000b4:	b084      	sub	sp, #16
200000b6:	af00      	add	r7, sp, #0
200000b8:	6078      	str	r0, [r7, #4]
    for(int i=0; i < us*2; i++){
200000ba:	2300      	movs	r3, #0
200000bc:	60fb      	str	r3, [r7, #12]
200000be:	e004      	b.n	200000ca <delay_mikro+0x18>
        delay_500ns();
200000c0:	f7ff ffee 	bl	200000a0 <delay_500ns>
    for(int i=0; i < us*2; i++){
200000c4:	68fb      	ldr	r3, [r7, #12]
200000c6:	3301      	adds	r3, #1
200000c8:	60fb      	str	r3, [r7, #12]
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	005a      	lsls	r2, r3, #1
200000ce:	68fb      	ldr	r3, [r7, #12]
200000d0:	429a      	cmp	r2, r3
200000d2:	d8f5      	bhi.n	200000c0 <delay_mikro+0xe>
    }
}
200000d4:	46c0      	nop			; (mov r8, r8)
200000d6:	46bd      	mov	sp, r7
200000d8:	b004      	add	sp, #16
200000da:	bd80      	pop	{r7, pc}

200000dc <delay_milli>:

void delay_milli(unsigned int ms){
200000dc:	b580      	push	{r7, lr}
200000de:	b082      	sub	sp, #8
200000e0:	af00      	add	r7, sp, #0
200000e2:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
	delay_mikro(ms);
200000e4:	687b      	ldr	r3, [r7, #4]
200000e6:	0018      	movs	r0, r3
200000e8:	f7ff ffe3 	bl	200000b2 <delay_mikro>
	return;
200000ec:	46c0      	nop			; (mov r8, r8)
#endif // For simulator
    delay_mikro(ms*MILLI_TO_MIKRO);
}
200000ee:	46bd      	mov	sp, r7
200000f0:	b002      	add	sp, #8
200000f2:	bd80      	pop	{r7, pc}

200000f4 <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"

void graphic_ctrl_bit_set(uint8_t x){
200000f4:	b580      	push	{r7, lr}
200000f6:	b084      	sub	sp, #16
200000f8:	af00      	add	r7, sp, #0
200000fa:	0002      	movs	r2, r0
200000fc:	1dfb      	adds	r3, r7, #7
200000fe:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
20000100:	4a0c      	ldr	r2, [pc, #48]	; (20000134 <graphic_ctrl_bit_set+0x40>)
20000102:	230f      	movs	r3, #15
20000104:	18fb      	adds	r3, r7, r3
20000106:	7d12      	ldrb	r2, [r2, #20]
20000108:	701a      	strb	r2, [r3, #0]
    control_register |= (x | B_SELECT);
2000010a:	1dfa      	adds	r2, r7, #7
2000010c:	230f      	movs	r3, #15
2000010e:	18fb      	adds	r3, r7, r3
20000110:	7812      	ldrb	r2, [r2, #0]
20000112:	781b      	ldrb	r3, [r3, #0]
20000114:	4313      	orrs	r3, r2
20000116:	b2da      	uxtb	r2, r3
20000118:	230f      	movs	r3, #15
2000011a:	18fb      	adds	r3, r7, r3
2000011c:	2104      	movs	r1, #4
2000011e:	430a      	orrs	r2, r1
20000120:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
20000122:	4a04      	ldr	r2, [pc, #16]	; (20000134 <graphic_ctrl_bit_set+0x40>)
20000124:	230f      	movs	r3, #15
20000126:	18fb      	adds	r3, r7, r3
20000128:	781b      	ldrb	r3, [r3, #0]
2000012a:	7513      	strb	r3, [r2, #20]
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	b004      	add	sp, #16
20000132:	bd80      	pop	{r7, pc}
20000134:	40021000 	andmi	r1, r2, r0

20000138 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000138:	b580      	push	{r7, lr}
2000013a:	b084      	sub	sp, #16
2000013c:	af00      	add	r7, sp, #0
2000013e:	0002      	movs	r2, r0
20000140:	1dfb      	adds	r3, r7, #7
20000142:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
20000144:	4a11      	ldr	r2, [pc, #68]	; (2000018c <graphic_ctrl_bit_clear+0x54>)
20000146:	230f      	movs	r3, #15
20000148:	18fb      	adds	r3, r7, r3
2000014a:	7d12      	ldrb	r2, [r2, #20]
2000014c:	701a      	strb	r2, [r3, #0]
    control_register &= (~x);
2000014e:	1dfb      	adds	r3, r7, #7
20000150:	781b      	ldrb	r3, [r3, #0]
20000152:	b25b      	sxtb	r3, r3
20000154:	43db      	mvns	r3, r3
20000156:	b25b      	sxtb	r3, r3
20000158:	220f      	movs	r2, #15
2000015a:	18ba      	adds	r2, r7, r2
2000015c:	7812      	ldrb	r2, [r2, #0]
2000015e:	b252      	sxtb	r2, r2
20000160:	4013      	ands	r3, r2
20000162:	b25a      	sxtb	r2, r3
20000164:	230f      	movs	r3, #15
20000166:	18fb      	adds	r3, r7, r3
20000168:	701a      	strb	r2, [r3, #0]
    control_register |= B_SELECT;
2000016a:	230f      	movs	r3, #15
2000016c:	18fb      	adds	r3, r7, r3
2000016e:	220f      	movs	r2, #15
20000170:	18ba      	adds	r2, r7, r2
20000172:	7812      	ldrb	r2, [r2, #0]
20000174:	2104      	movs	r1, #4
20000176:	430a      	orrs	r2, r1
20000178:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
2000017a:	4a04      	ldr	r2, [pc, #16]	; (2000018c <graphic_ctrl_bit_clear+0x54>)
2000017c:	230f      	movs	r3, #15
2000017e:	18fb      	adds	r3, r7, r3
20000180:	781b      	ldrb	r3, [r3, #0]
20000182:	7513      	strb	r3, [r2, #20]
}
20000184:	46c0      	nop			; (mov r8, r8)
20000186:	46bd      	mov	sp, r7
20000188:	b004      	add	sp, #16
2000018a:	bd80      	pop	{r7, pc}
2000018c:	40021000 	andmi	r1, r2, r0

20000190 <select_controller>:

void select_controller(uint8_t controller){
20000190:	b580      	push	{r7, lr}
20000192:	b082      	sub	sp, #8
20000194:	af00      	add	r7, sp, #0
20000196:	0002      	movs	r2, r0
20000198:	1dfb      	adds	r3, r7, #7
2000019a:	701a      	strb	r2, [r3, #0]
    switch(controller){
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	781b      	ldrb	r3, [r3, #0]
200001a0:	2b08      	cmp	r3, #8
200001a2:	d00c      	beq.n	200001be <select_controller+0x2e>
200001a4:	dc02      	bgt.n	200001ac <select_controller+0x1c>
200001a6:	2b00      	cmp	r3, #0
200001a8:	d005      	beq.n	200001b6 <select_controller+0x26>
            break;
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
    }
}
200001aa:	e01a      	b.n	200001e2 <select_controller+0x52>
    switch(controller){
200001ac:	2b10      	cmp	r3, #16
200001ae:	d00d      	beq.n	200001cc <select_controller+0x3c>
200001b0:	2b18      	cmp	r3, #24
200001b2:	d012      	beq.n	200001da <select_controller+0x4a>
}
200001b4:	e015      	b.n	200001e2 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
200001b6:	2018      	movs	r0, #24
200001b8:	f7ff ffbe 	bl	20000138 <graphic_ctrl_bit_clear>
            break;
200001bc:	e011      	b.n	200001e2 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS2);
200001be:	2010      	movs	r0, #16
200001c0:	f7ff ffba 	bl	20000138 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS1);
200001c4:	2008      	movs	r0, #8
200001c6:	f7ff ff95 	bl	200000f4 <graphic_ctrl_bit_set>
            break;
200001ca:	e00a      	b.n	200001e2 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
200001cc:	2008      	movs	r0, #8
200001ce:	f7ff ffb3 	bl	20000138 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
200001d2:	2010      	movs	r0, #16
200001d4:	f7ff ff8e 	bl	200000f4 <graphic_ctrl_bit_set>
            break;
200001d8:	e003      	b.n	200001e2 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
200001da:	2018      	movs	r0, #24
200001dc:	f7ff ff8a 	bl	200000f4 <graphic_ctrl_bit_set>
            break;
200001e0:	46c0      	nop			; (mov r8, r8)
}
200001e2:	46c0      	nop			; (mov r8, r8)
200001e4:	46bd      	mov	sp, r7
200001e6:	b002      	add	sp, #8
200001e8:	bd80      	pop	{r7, pc}

200001ea <graphic_wait_ready>:

void graphic_wait_ready(void){
200001ea:	b580      	push	{r7, lr}
200001ec:	b082      	sub	sp, #8
200001ee:	af00      	add	r7, sp, #0
    uint8_t display_busy_status;
    // Enable = 0
    graphic_ctrl_bit_clear(B_E);
200001f0:	2040      	movs	r0, #64	; 0x40
200001f2:	f7ff ffa1 	bl	20000138 <graphic_ctrl_bit_clear>
    // E: 15-8 = input, 7-0 = output
    GPIO_E.moder = 0x00005555;
200001f6:	4b14      	ldr	r3, [pc, #80]	; (20000248 <graphic_wait_ready+0x5e>)
200001f8:	4a14      	ldr	r2, [pc, #80]	; (2000024c <graphic_wait_ready+0x62>)
200001fa:	601a      	str	r2, [r3, #0]
    
    // RS = 0, RW = 1
    graphic_ctrl_bit_clear(B_RS);
200001fc:	2001      	movs	r0, #1
200001fe:	f7ff ff9b 	bl	20000138 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000202:	2002      	movs	r0, #2
20000204:	f7ff ff76 	bl	200000f4 <graphic_ctrl_bit_set>
    delay_500ns();
20000208:	f7ff ff4a 	bl	200000a0 <delay_500ns>
    
    while(1){
        // Enable = 1
        graphic_ctrl_bit_set(B_E);
2000020c:	2040      	movs	r0, #64	; 0x40
2000020e:	f7ff ff71 	bl	200000f4 <graphic_ctrl_bit_set>
        delay_500ns();
20000212:	f7ff ff45 	bl	200000a0 <delay_500ns>
        // Enable = 0
        graphic_ctrl_bit_clear(B_E);
20000216:	2040      	movs	r0, #64	; 0x40
20000218:	f7ff ff8e 	bl	20000138 <graphic_ctrl_bit_clear>
        delay_500ns();
2000021c:	f7ff ff40 	bl	200000a0 <delay_500ns>
        // Exit loop if not busy
        display_busy_status = GPIO_E.idrHigh & LCD_BUSY;
20000220:	4b09      	ldr	r3, [pc, #36]	; (20000248 <graphic_wait_ready+0x5e>)
20000222:	7c5b      	ldrb	r3, [r3, #17]
20000224:	b2da      	uxtb	r2, r3
20000226:	1dfb      	adds	r3, r7, #7
20000228:	217f      	movs	r1, #127	; 0x7f
2000022a:	438a      	bics	r2, r1
2000022c:	701a      	strb	r2, [r3, #0]
        if(display_busy_status == 0){
2000022e:	1dfb      	adds	r3, r7, #7
20000230:	781b      	ldrb	r3, [r3, #0]
20000232:	2b00      	cmp	r3, #0
20000234:	d000      	beq.n	20000238 <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_set(B_E);
20000236:	e7e9      	b.n	2000020c <graphic_wait_ready+0x22>
            break;
20000238:	46c0      	nop			; (mov r8, r8)
    }
    
    // Enable = 1
    // graphic_ctrl_bit_set(B_E); // Commented out to check if this works because it works for NaN
    // E: 15-0 = output
    GPIO_E.moder = 0x55555555;
2000023a:	4b03      	ldr	r3, [pc, #12]	; (20000248 <graphic_wait_ready+0x5e>)
2000023c:	4a04      	ldr	r2, [pc, #16]	; (20000250 <graphic_wait_ready+0x66>)
2000023e:	601a      	str	r2, [r3, #0]
}
20000240:	46c0      	nop			; (mov r8, r8)
20000242:	46bd      	mov	sp, r7
20000244:	b002      	add	sp, #8
20000246:	bd80      	pop	{r7, pc}
20000248:	40021000 	andmi	r1, r2, r0
2000024c:	00005555 	andeq	r5, r0, r5, asr r5
20000250:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000254 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000254:	b580      	push	{r7, lr}
20000256:	b084      	sub	sp, #16
20000258:	af00      	add	r7, sp, #0
2000025a:	0002      	movs	r2, r0
2000025c:	1dfb      	adds	r3, r7, #7
2000025e:	701a      	strb	r2, [r3, #0]
	//Set enable to 0
	graphic_ctrl_bit_clear(B_E);
20000260:	2040      	movs	r0, #64	; 0x40
20000262:	f7ff ff69 	bl	20000138 <graphic_ctrl_bit_clear>
	
	//set E to input high byte / output low byte
	GPIO_E.moder = 0x00005555;
20000266:	4b12      	ldr	r3, [pc, #72]	; (200002b0 <graphic_read+0x5c>)
20000268:	4a12      	ldr	r2, [pc, #72]	; (200002b4 <graphic_read+0x60>)
2000026a:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_RS | B_RW);
2000026c:	2003      	movs	r0, #3
2000026e:	f7ff ff41 	bl	200000f4 <graphic_ctrl_bit_set>
	
	select_controller(controller);
20000272:	1dfb      	adds	r3, r7, #7
20000274:	781b      	ldrb	r3, [r3, #0]
20000276:	0018      	movs	r0, r3
20000278:	f7ff ff8a 	bl	20000190 <select_controller>
	delay_500ns();
2000027c:	f7ff ff10 	bl	200000a0 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
20000280:	2040      	movs	r0, #64	; 0x40
20000282:	f7ff ff37 	bl	200000f4 <graphic_ctrl_bit_set>
	delay_500ns();
20000286:	f7ff ff0b 	bl	200000a0 <delay_500ns>
	
	// set return value to what is on the data register
	uint8_t RV = GPIO_E.idrHigh;
2000028a:	4a09      	ldr	r2, [pc, #36]	; (200002b0 <graphic_read+0x5c>)
2000028c:	230f      	movs	r3, #15
2000028e:	18fb      	adds	r3, r7, r3
20000290:	7c52      	ldrb	r2, [r2, #17]
20000292:	701a      	strb	r2, [r3, #0]
	
	graphic_ctrl_bit_clear(B_E);
20000294:	2040      	movs	r0, #64	; 0x40
20000296:	f7ff ff4f 	bl	20000138 <graphic_ctrl_bit_clear>
	
	//set E to output
	GPIO_E.moder = 0x55555555;
2000029a:	4b05      	ldr	r3, [pc, #20]	; (200002b0 <graphic_read+0x5c>)
2000029c:	4a06      	ldr	r2, [pc, #24]	; (200002b8 <graphic_read+0x64>)
2000029e:	601a      	str	r2, [r3, #0]
		//case B_CS1 | B_CS2: select_controller(B_CS1 | B_CS2); break;
		//default: select_controller(0);
	}*/
	//graphic_wait_ready();
	
	return RV;
200002a0:	230f      	movs	r3, #15
200002a2:	18fb      	adds	r3, r7, r3
200002a4:	781b      	ldrb	r3, [r3, #0]
}
200002a6:	0018      	movs	r0, r3
200002a8:	46bd      	mov	sp, r7
200002aa:	b004      	add	sp, #16
200002ac:	bd80      	pop	{r7, pc}
200002ae:	46c0      	nop			; (mov r8, r8)
200002b0:	40021000 	andmi	r1, r2, r0
200002b4:	00005555 	andeq	r5, r0, r5, asr r5
200002b8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002bc <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002bc:	b580      	push	{r7, lr}
200002be:	b082      	sub	sp, #8
200002c0:	af00      	add	r7, sp, #0
200002c2:	0002      	movs	r2, r0
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	701a      	strb	r2, [r3, #0]
200002c8:	1dbb      	adds	r3, r7, #6
200002ca:	1c0a      	adds	r2, r1, #0
200002cc:	701a      	strb	r2, [r3, #0]
	//datareg to value
	GPIO_E.odrHigh = value;
200002ce:	4a1a      	ldr	r2, [pc, #104]	; (20000338 <graphic_write+0x7c>)
200002d0:	1dfb      	adds	r3, r7, #7
200002d2:	781b      	ldrb	r3, [r3, #0]
200002d4:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
200002d6:	1dbb      	adds	r3, r7, #6
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	0018      	movs	r0, r3
200002dc:	f7ff ff58 	bl	20000190 <select_controller>
	delay_500ns();
200002e0:	f7ff fede 	bl	200000a0 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
200002e4:	2040      	movs	r0, #64	; 0x40
200002e6:	f7ff ff05 	bl	200000f4 <graphic_ctrl_bit_set>
	delay_500ns();
200002ea:	f7ff fed9 	bl	200000a0 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002ee:	2040      	movs	r0, #64	; 0x40
200002f0:	f7ff ff22 	bl	20000138 <graphic_ctrl_bit_clear>
	
	//select actual controller, wait while we read
	if (controller & B_CS1){
200002f4:	1dbb      	adds	r3, r7, #6
200002f6:	781b      	ldrb	r3, [r3, #0]
200002f8:	2208      	movs	r2, #8
200002fa:	4013      	ands	r3, r2
200002fc:	d004      	beq.n	20000308 <graphic_write+0x4c>
		select_controller(B_CS1);
200002fe:	2008      	movs	r0, #8
20000300:	f7ff ff46 	bl	20000190 <select_controller>
		graphic_wait_ready();
20000304:	f7ff ff71 	bl	200001ea <graphic_wait_ready>
	}
	if (controller & B_CS2){
20000308:	1dbb      	adds	r3, r7, #6
2000030a:	781b      	ldrb	r3, [r3, #0]
2000030c:	2210      	movs	r2, #16
2000030e:	4013      	ands	r3, r2
20000310:	d004      	beq.n	2000031c <graphic_write+0x60>
		select_controller(B_CS2);
20000312:	2010      	movs	r0, #16
20000314:	f7ff ff3c 	bl	20000190 <select_controller>
		graphic_wait_ready();
20000318:	f7ff ff67 	bl	200001ea <graphic_wait_ready>
	}
	
	//datareg to 0
	GPIO_E.odrHigh = 0;
2000031c:	4b06      	ldr	r3, [pc, #24]	; (20000338 <graphic_write+0x7c>)
2000031e:	2200      	movs	r2, #0
20000320:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
20000322:	2040      	movs	r0, #64	; 0x40
20000324:	f7ff fee6 	bl	200000f4 <graphic_ctrl_bit_set>
	
	//set controller to 0
	select_controller(0);
20000328:	2000      	movs	r0, #0
2000032a:	f7ff ff31 	bl	20000190 <select_controller>
}
2000032e:	46c0      	nop			; (mov r8, r8)
20000330:	46bd      	mov	sp, r7
20000332:	b002      	add	sp, #8
20000334:	bd80      	pop	{r7, pc}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	40021000 	andmi	r1, r2, r0

2000033c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000033c:	b580      	push	{r7, lr}
2000033e:	b082      	sub	sp, #8
20000340:	af00      	add	r7, sp, #0
20000342:	0002      	movs	r2, r0
20000344:	1dfb      	adds	r3, r7, #7
20000346:	701a      	strb	r2, [r3, #0]
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	1c0a      	adds	r2, r1, #0
2000034c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000034e:	2040      	movs	r0, #64	; 0x40
20000350:	f7ff fef2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000354:	1dbb      	adds	r3, r7, #6
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	0018      	movs	r0, r3
2000035a:	f7ff ff19 	bl	20000190 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000035e:	2003      	movs	r0, #3
20000360:	f7ff feea 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000364:	1dbb      	adds	r3, r7, #6
20000366:	781a      	ldrb	r2, [r3, #0]
20000368:	1dfb      	adds	r3, r7, #7
2000036a:	781b      	ldrb	r3, [r3, #0]
2000036c:	0011      	movs	r1, r2
2000036e:	0018      	movs	r0, r3
20000370:	f7ff ffa4 	bl	200002bc <graphic_write>
}
20000374:	46c0      	nop			; (mov r8, r8)
20000376:	46bd      	mov	sp, r7
20000378:	b002      	add	sp, #8
2000037a:	bd80      	pop	{r7, pc}

2000037c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000037c:	b580      	push	{r7, lr}
2000037e:	b082      	sub	sp, #8
20000380:	af00      	add	r7, sp, #0
20000382:	0002      	movs	r2, r0
20000384:	1dfb      	adds	r3, r7, #7
20000386:	701a      	strb	r2, [r3, #0]
20000388:	1dbb      	adds	r3, r7, #6
2000038a:	1c0a      	adds	r2, r1, #0
2000038c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000038e:	2040      	movs	r0, #64	; 0x40
20000390:	f7ff fed2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000394:	1dbb      	adds	r3, r7, #6
20000396:	781b      	ldrb	r3, [r3, #0]
20000398:	0018      	movs	r0, r3
2000039a:	f7ff fef9 	bl	20000190 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000039e:	2001      	movs	r0, #1
200003a0:	f7ff fea8 	bl	200000f4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003a4:	2002      	movs	r0, #2
200003a6:	f7ff fec7 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003aa:	1dbb      	adds	r3, r7, #6
200003ac:	781a      	ldrb	r2, [r3, #0]
200003ae:	1dfb      	adds	r3, r7, #7
200003b0:	781b      	ldrb	r3, [r3, #0]
200003b2:	0011      	movs	r1, r2
200003b4:	0018      	movs	r0, r3
200003b6:	f7ff ff81 	bl	200002bc <graphic_write>
}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	46bd      	mov	sp, r7
200003be:	b002      	add	sp, #8
200003c0:	bd80      	pop	{r7, pc}

200003c2 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003c2:	b580      	push	{r7, lr}
200003c4:	b082      	sub	sp, #8
200003c6:	af00      	add	r7, sp, #0
200003c8:	0002      	movs	r2, r0
200003ca:	1dfb      	adds	r3, r7, #7
200003cc:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
200003ce:	1dfb      	adds	r3, r7, #7
200003d0:	781b      	ldrb	r3, [r3, #0]
200003d2:	0018      	movs	r0, r3
200003d4:	f7ff ff3e 	bl	20000254 <graphic_read>
	return graphic_read(controller);
200003d8:	1dfb      	adds	r3, r7, #7
200003da:	781b      	ldrb	r3, [r3, #0]
200003dc:	0018      	movs	r0, r3
200003de:	f7ff ff39 	bl	20000254 <graphic_read>
200003e2:	0003      	movs	r3, r0
}
200003e4:	0018      	movs	r0, r3
200003e6:	46bd      	mov	sp, r7
200003e8:	b002      	add	sp, #8
200003ea:	bd80      	pop	{r7, pc}

200003ec <init_app>:

void init_app(void){
200003ec:	b580      	push	{r7, lr}
200003ee:	af00      	add	r7, sp, #0
	//port E is output
	GPIO_E.moder = 0x55555555;
200003f0:	4b04      	ldr	r3, [pc, #16]	; (20000404 <init_app+0x18>)
200003f2:	4a05      	ldr	r2, [pc, #20]	; (20000408 <init_app+0x1c>)
200003f4:	601a      	str	r2, [r3, #0]
	GPIO_E.ospeedr = 0x55555555;
200003f6:	4b03      	ldr	r3, [pc, #12]	; (20000404 <init_app+0x18>)
200003f8:	4a03      	ldr	r2, [pc, #12]	; (20000408 <init_app+0x1c>)
200003fa:	609a      	str	r2, [r3, #8]
}
200003fc:	46c0      	nop			; (mov r8, r8)
200003fe:	46bd      	mov	sp, r7
20000400:	bd80      	pop	{r7, pc}
20000402:	46c0      	nop			; (mov r8, r8)
20000404:	40021000 	andmi	r1, r2, r0
20000408:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000040c <graphic_initialize>:

void graphic_initialize(void){
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000410:	2040      	movs	r0, #64	; 0x40
20000412:	f7ff fe6f 	bl	200000f4 <graphic_ctrl_bit_set>
	
	delay_mikro(10);
20000416:	200a      	movs	r0, #10
20000418:	f7ff fe4b 	bl	200000b2 <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000041c:	2078      	movs	r0, #120	; 0x78
2000041e:	f7ff fe8b 	bl	20000138 <graphic_ctrl_bit_clear>
	
	delay_milli(30);
20000422:	201e      	movs	r0, #30
20000424:	f7ff fe5a 	bl	200000dc <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000428:	2020      	movs	r0, #32
2000042a:	f7ff fe63 	bl	200000f4 <graphic_ctrl_bit_set>
	
	delay_milli(100); // Added because NaN has it
2000042e:	2064      	movs	r0, #100	; 0x64
20000430:	f7ff fe54 	bl	200000dc <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000434:	2118      	movs	r1, #24
20000436:	203e      	movs	r0, #62	; 0x3e
20000438:	f7ff ff80 	bl	2000033c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000043c:	2118      	movs	r1, #24
2000043e:	203f      	movs	r0, #63	; 0x3f
20000440:	f7ff ff7c 	bl	2000033c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000444:	2118      	movs	r1, #24
20000446:	20c0      	movs	r0, #192	; 0xc0
20000448:	f7ff ff78 	bl	2000033c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000044c:	2118      	movs	r1, #24
2000044e:	2040      	movs	r0, #64	; 0x40
20000450:	f7ff ff74 	bl	2000033c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000454:	2118      	movs	r1, #24
20000456:	20b8      	movs	r0, #184	; 0xb8
20000458:	f7ff ff70 	bl	2000033c <graphic_write_command>
	
	select_controller(0);
2000045c:	2000      	movs	r0, #0
2000045e:	f7ff fe97 	bl	20000190 <select_controller>
}
20000462:	46c0      	nop			; (mov r8, r8)
20000464:	46bd      	mov	sp, r7
20000466:	bd80      	pop	{r7, pc}

20000468 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000468:	b580      	push	{r7, lr}
2000046a:	b082      	sub	sp, #8
2000046c:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++){
2000046e:	1dfb      	adds	r3, r7, #7
20000470:	2200      	movs	r2, #0
20000472:	701a      	strb	r2, [r3, #0]
20000474:	e023      	b.n	200004be <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000476:	1dfb      	adds	r3, r7, #7
20000478:	781b      	ldrb	r3, [r3, #0]
2000047a:	2248      	movs	r2, #72	; 0x48
2000047c:	4252      	negs	r2, r2
2000047e:	4313      	orrs	r3, r2
20000480:	b2db      	uxtb	r3, r3
20000482:	2118      	movs	r1, #24
20000484:	0018      	movs	r0, r3
20000486:	f7ff ff59 	bl	2000033c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000048a:	2118      	movs	r1, #24
2000048c:	2040      	movs	r0, #64	; 0x40
2000048e:	f7ff ff55 	bl	2000033c <graphic_write_command>
		
		for(uint8_t add = 0; add < 64; add++){
20000492:	1dbb      	adds	r3, r7, #6
20000494:	2200      	movs	r2, #0
20000496:	701a      	strb	r2, [r3, #0]
20000498:	e008      	b.n	200004ac <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
2000049a:	2118      	movs	r1, #24
2000049c:	2000      	movs	r0, #0
2000049e:	f7ff ff6d 	bl	2000037c <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
200004a2:	1dbb      	adds	r3, r7, #6
200004a4:	781a      	ldrb	r2, [r3, #0]
200004a6:	1dbb      	adds	r3, r7, #6
200004a8:	3201      	adds	r2, #1
200004aa:	701a      	strb	r2, [r3, #0]
200004ac:	1dbb      	adds	r3, r7, #6
200004ae:	781b      	ldrb	r3, [r3, #0]
200004b0:	2b3f      	cmp	r3, #63	; 0x3f
200004b2:	d9f2      	bls.n	2000049a <graphic_clear_screen+0x32>
	for(uint8_t page = 0; page < 8; page++){
200004b4:	1dfb      	adds	r3, r7, #7
200004b6:	781a      	ldrb	r2, [r3, #0]
200004b8:	1dfb      	adds	r3, r7, #7
200004ba:	3201      	adds	r2, #1
200004bc:	701a      	strb	r2, [r3, #0]
200004be:	1dfb      	adds	r3, r7, #7
200004c0:	781b      	ldrb	r3, [r3, #0]
200004c2:	2b07      	cmp	r3, #7
200004c4:	d9d7      	bls.n	20000476 <graphic_clear_screen+0xe>
		}
	}
200004c6:	46c0      	nop			; (mov r8, r8)
200004c8:	46bd      	mov	sp, r7
200004ca:	b002      	add	sp, #8
200004cc:	bd80      	pop	{r7, pc}
200004ce:	46c0      	nop			; (mov r8, r8)

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000086 	andeq	r0, r0, r6, lsl #1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000084 	andeq	r0, r0, r4, lsl #1
  10:	0000340c 	andeq	r3, r0, ip, lsl #8
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	0000011c 	andeq	r0, r0, ip, lsl r1
  28:	27070402 	strcs	r0, [r7, -r2, lsl #8]
  2c:	02000000 	andeq	r0, r0, #0
  30:	011e0601 	tsteq	lr, r1, lsl #12
  34:	02020000 	andeq	r0, r2, #0
  38:	00001305 	andeq	r1, r0, r5, lsl #6
  3c:	07020200 	streq	r0, [r2, -r0, lsl #4]
  40:	00000000 	andeq	r0, r0, r0
  44:	34050402 	strcc	r0, [r5], #-1026	; 0xfffffbfe
  48:	02000001 	andeq	r0, r0, #1
  4c:	00220704 	eoreq	r0, r2, r4, lsl #14
  50:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  54:	00012f05 	andeq	r2, r1, r5, lsl #30
  58:	07080200 	streq	r0, [r8, -r0, lsl #4]
  5c:	0000001d 	andeq	r0, r0, sp, lsl r0
  60:	69050403 	stmdbvs	r5, {r0, r1, sl}
  64:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
  68:	0000012a 	andeq	r0, r0, sl, lsr #2
  6c:	00101701 	andseq	r1, r0, r1, lsl #14
  70:	002a2000 	eoreq	r2, sl, r0
  74:	9c010000 	stcls	0, cr0, [r1], {-0}
  78:	00007c05 	andeq	r7, r0, r5, lsl #24
  7c:	000e0100 	andeq	r0, lr, r0, lsl #2
  80:	0c200000 	stceq	0, cr0, [r0], #-0
  84:	01000000 	mrseq	r0, (UNDEF: 0)
  88:	00aa009c 	umlaleq	r0, sl, ip, r0
  8c:	00040000 	andeq	r0, r4, r0
  90:	00000058 	andeq	r0, r0, r8, asr r0
  94:	00840104 	addeq	r0, r4, r4, lsl #2
  98:	550c0000 	strpl	r0, [ip, #-0]
  9c:	3c000001 	stccc	0, cr0, [r0], {1}
  a0:	b8200000 	stmdalt	r0!, {}	; <UNPREDICTABLE>
  a4:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
  a8:	02000000 	andeq	r0, r0, #0
  ac:	0000019b 	muleq	r0, fp, r1
  b0:	00dc1a01 	sbcseq	r1, ip, r1, lsl #20
  b4:	00182000 	andseq	r2, r8, r0
  b8:	9c010000 	stcls	0, cr0, [r1], {-0}
  bc:	00000044 	andeq	r0, r0, r4, asr #32
  c0:	00736d03 	rsbseq	r6, r3, r3, lsl #26
  c4:	00441a01 	subeq	r1, r4, r1, lsl #20
  c8:	91020000 	mrsls	r0, (UNDEF: 2)
  cc:	04040074 	streq	r0, [r4], #-116	; 0xffffff8c
  d0:	00002707 	andeq	r2, r0, r7, lsl #14
  d4:	013d0200 	teqeq	sp, r0, lsl #4
  d8:	14010000 	strne	r0, [r1], #-0
  dc:	200000b2 	strhcs	r0, [r0], -r2
  e0:	0000002a 	andeq	r0, r0, sl, lsr #32
  e4:	00849c01 	addeq	r9, r4, r1, lsl #24
  e8:	75030000 	strvc	r0, [r3, #-0]
  ec:	14010073 	strne	r0, [r1], #-115	; 0xffffff8d
  f0:	00000044 	andeq	r0, r0, r4, asr #32
  f4:	056c9102 	strbeq	r9, [ip, #-258]!	; 0xfffffefe
  f8:	200000ba 	strhcs	r0, [r0], -sl
  fc:	0000001a 	andeq	r0, r0, sl, lsl r0
 100:	01006906 	tsteq	r0, r6, lsl #18
 104:	00008415 	andeq	r8, r0, r5, lsl r4
 108:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 10c:	04070000 	streq	r0, [r7], #-0
 110:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 114:	01490800 	cmpeq	r9, r0, lsl #16
 118:	0f010000 	svceq	0x00010000
 11c:	200000a0 	andcs	r0, r0, r0, lsr #1
 120:	00000012 	andeq	r0, r0, r2, lsl r0
 124:	a7099c01 	strge	r9, [r9, -r1, lsl #24]
 128:	01000001 	tsteq	r0, r1
 12c:	00003c03 	andeq	r3, r0, r3, lsl #24
 130:	00006420 	andeq	r6, r0, r0, lsr #8
 134:	009c0100 	addseq	r0, ip, r0, lsl #2
 138:	000002fe 	strdeq	r0, [r0], -lr
 13c:	00f10004 	rscseq	r0, r1, r4
 140:	01040000 	mrseq	r0, (UNDEF: 4)
 144:	00000084 	andeq	r0, r0, r4, lsl #1
 148:	0002c50c 	andeq	ip, r2, ip, lsl #10
 14c:	0000f400 	andeq	pc, r0, r0, lsl #8
 150:	0003da20 	andeq	sp, r3, r0, lsr #20
 154:	00012500 	andeq	r2, r1, r0, lsl #10
 158:	02020200 	andeq	r0, r2, #0, 4
 15c:	0000420b 	andeq	r4, r0, fp, lsl #4
 160:	02680300 	rsbeq	r0, r8, #0, 6
 164:	0c020000 	stceq	0, cr0, [r2], {-0}
 168:	00000042 	andeq	r0, r0, r2, asr #32
 16c:	03310300 	teqeq	r1, #0, 6
 170:	0d020000 	stceq	0, cr0, [r2, #-0]
 174:	00000042 	andeq	r0, r0, r2, asr #32
 178:	01040001 	tsteq	r4, r1
 17c:	00011c08 	andeq	r1, r1, r8, lsl #24
 180:	02040500 	andeq	r0, r4, #0, 10
 184:	00006209 	andeq	r6, r0, r9, lsl #4
 188:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
 18c:	0a020072 	beq	8035c <startup-0x1ff7fca4>
 190:	00000062 	andeq	r0, r0, r2, rrx
 194:	00002107 	andeq	r2, r0, r7, lsl #2
 198:	04040000 	streq	r0, [r4], #-0
 19c:	00002707 	andeq	r2, r0, r7, lsl #14
 1a0:	02020200 	andeq	r0, r2, #0, 4
 1a4:	00008a12 	andeq	r8, r0, r2, lsl sl
 1a8:	02610300 	rsbeq	r0, r1, #0, 6
 1ac:	13020000 	movwne	r0, #8192	; 0x2000
 1b0:	00000042 	andeq	r0, r0, r2, asr #32
 1b4:	01fc0300 	mvnseq	r0, r0, lsl #6
 1b8:	14020000 	strne	r0, [r2], #-0
 1bc:	00000042 	andeq	r0, r0, r2, asr #32
 1c0:	04050001 	streq	r0, [r5], #-1
 1c4:	00a31002 	adceq	r1, r3, r2
 1c8:	6f060000 	svcvs	0x00060000
 1cc:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
 1d0:	00006211 	andeq	r6, r0, r1, lsl r2
 1d4:	00690700 	rsbeq	r0, r9, r0, lsl #14
 1d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 1dc:	000002ae 	andeq	r0, r0, lr, lsr #5
 1e0:	ec040218 	sfm	f0, 4, [r4], {24}
 1e4:	03000000 	movweq	r0, #0
 1e8:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
 1ec:	00620502 	rsbeq	r0, r2, r2, lsl #10
 1f0:	03000000 	movweq	r0, #0
 1f4:	0000022f 	andeq	r0, r0, pc, lsr #4
 1f8:	00620602 	rsbeq	r0, r2, r2, lsl #12
 1fc:	03040000 	movweq	r0, #16384	; 0x4000
 200:	0000034e 	andeq	r0, r0, lr, asr #6
 204:	00620702 	rsbeq	r0, r2, r2, lsl #14
 208:	03080000 	movweq	r0, #32768	; 0x8000
 20c:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
 210:	00620802 	rsbeq	r0, r2, r2, lsl #16
 214:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
 218:	00000049 	andeq	r0, r0, r9, asr #32
 21c:	008a0910 	addeq	r0, sl, r0, lsl r9
 220:	00140000 	andseq	r0, r4, r0
 224:	00032c0a 	andeq	r2, r3, sl, lsl #24
 228:	a3170200 	tstge	r7, #0, 4
 22c:	0a000000 	beq	234 <startup-0x1ffffdcc>
 230:	0000027c 	andeq	r0, r0, ip, ror r2
 234:	00421603 	subeq	r1, r2, r3, lsl #12
 238:	e70b0000 	str	r0, [fp, -r0]
 23c:	01000001 	tsteq	r0, r1
 240:	000468b9 			; <UNDEFINED> instruction: 0x000468b9
 244:	00006620 	andeq	r6, r0, r0, lsr #12
 248:	489c0100 	ldmmi	ip, {r8}
 24c:	0c000001 	stceq	0, cr0, [r0], {1}
 250:	2000046e 	andcs	r0, r0, lr, ror #8
 254:	00000058 	andeq	r0, r0, r8, asr r0
 258:	0002360d 	andeq	r3, r2, sp, lsl #12
 25c:	f7ba0100 			; <UNDEFINED> instruction: 0xf7ba0100
 260:	02000000 	andeq	r0, r0, #0
 264:	920c7791 	andls	r7, ip, #38010880	; 0x2440000
 268:	22200004 	eorcs	r0, r0, #4
 26c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 270:	00646461 	rsbeq	r6, r4, r1, ror #8
 274:	00f7be01 	rscseq	fp, r7, r1, lsl #28
 278:	91020000 	mrsls	r0, (UNDEF: 2)
 27c:	00000076 	andeq	r0, r0, r6, ror r0
 280:	00029b0f 	andeq	r9, r2, pc, lsl #22
 284:	0ca40100 	stfeqs	f0, [r4]
 288:	5c200004 	stcpl	0, cr0, [r0], #-16
 28c:	01000000 	mrseq	r0, (UNDEF: 0)
 290:	0292109c 	addseq	r1, r2, #156	; 0x9c
 294:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
 298:	200003ec 	andcs	r0, r0, ip, ror #7
 29c:	00000020 	andeq	r0, r0, r0, lsr #32
 2a0:	d5119c01 	ldrle	r9, [r1, #-3073]	; 0xfffff3ff
 2a4:	01000001 	tsteq	r0, r1
 2a8:	0000f799 	muleq	r0, r9, r7
 2ac:	0003c200 	andeq	ip, r3, r0, lsl #4
 2b0:	00002a20 	andeq	r2, r0, r0, lsr #20
 2b4:	929c0100 	addsls	r0, ip, #0, 2
 2b8:	12000001 	andne	r0, r0, #1
 2bc:	0000031b 	andeq	r0, r0, fp, lsl r3
 2c0:	00f79901 	rscseq	r9, r7, r1, lsl #18
 2c4:	91020000 	mrsls	r0, (UNDEF: 2)
 2c8:	4e0b0077 	mcrmi	0, 0, r0, cr11, cr7, {3}
 2cc:	01000002 	tsteq	r0, r2
 2d0:	00037c91 	muleq	r3, r1, ip
 2d4:	00004620 	andeq	r4, r0, r0, lsr #12
 2d8:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
 2dc:	12000001 	andne	r0, r0, #1
 2e0:	000001e2 	andeq	r0, r0, r2, ror #3
 2e4:	00f79101 	rscseq	r9, r7, r1, lsl #2
 2e8:	91020000 	mrsls	r0, (UNDEF: 2)
 2ec:	031b1277 	tsteq	fp, #1879048199	; 0x70000007
 2f0:	91010000 	mrsls	r0, (UNDEF: 1)
 2f4:	000000f7 	strdeq	r0, [r0], -r7
 2f8:	00769102 	rsbseq	r9, r6, r2, lsl #2
 2fc:	0001bf0b 	andeq	fp, r1, fp, lsl #30
 300:	3c8a0100 	stfccs	f0, [sl], {0}
 304:	40200003 	eormi	r0, r0, r3
 308:	01000000 	mrseq	r0, (UNDEF: 0)
 30c:	0001f69c 	muleq	r1, ip, r6
 310:	01cd1200 	biceq	r1, sp, r0, lsl #4
 314:	8a010000 	bhi	4031c <startup-0x1ffbfce4>
 318:	000000f7 	strdeq	r0, [r0], -r7
 31c:	12779102 	rsbsne	r9, r7, #-2147483648	; 0x80000000
 320:	0000031b 	andeq	r0, r0, fp, lsl r3
 324:	00f78a01 	rscseq	r8, r7, r1, lsl #20
 328:	91020000 	mrsls	r0, (UNDEF: 2)
 32c:	840b0076 	strhi	r0, [fp], #-118	; 0xffffff8a
 330:	01000002 	tsteq	r0, r2
 334:	0002bc6e 	andeq	fp, r2, lr, ror #24
 338:	00008020 	andeq	r8, r0, r0, lsr #32
 33c:	289c0100 	ldmcs	ip, {r8}
 340:	12000002 	andne	r0, r0, #2
 344:	00000326 	andeq	r0, r0, r6, lsr #6
 348:	00f76e01 	rscseq	r6, r7, r1, lsl #28
 34c:	91020000 	mrsls	r0, (UNDEF: 2)
 350:	031b1277 	tsteq	fp, #1879048199	; 0x70000007
 354:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
 358:	000000f7 	strdeq	r0, [r0], -r7
 35c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 360:	00026f11 	andeq	r6, r2, r1, lsl pc
 364:	f7430100 			; <UNDEFINED> instruction: 0xf7430100
 368:	54000000 	strpl	r0, [r0], #-0
 36c:	68200002 	stmdavs	r0!, {r1}
 370:	01000000 	mrseq	r0, (UNDEF: 0)
 374:	00025d9c 	muleq	r2, ip, sp
 378:	031b1200 	tsteq	fp, #0, 4
 37c:	43010000 	movwmi	r0, #4096	; 0x1000
 380:	000000f7 	strdeq	r0, [r0], -r7
 384:	0e6f9102 	lgneqe	f1, f2
 388:	01005652 	tsteq	r0, r2, asr r6
 38c:	0000f753 	andeq	pc, r0, r3, asr r7	; <UNPREDICTABLE>
 390:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 394:	023b0b00 	eorseq	r0, fp, #0, 22
 398:	23010000 	movwcs	r0, #4096	; 0x1000
 39c:	200001ea 	andcs	r0, r0, sl, ror #3
 3a0:	0000006a 	andeq	r0, r0, sl, rrx
 3a4:	02819c01 	addeq	r9, r1, #256	; 0x100
 3a8:	1b0d0000 	blne	3403b0 <startup-0x1fcbfc50>
 3ac:	01000002 	tsteq	r0, r2
 3b0:	0000f724 	andeq	pc, r0, r4, lsr #14
 3b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3b8:	03140b00 	tsteq	r4, #0, 22
 3bc:	10010000 	andne	r0, r1, r0
 3c0:	20000190 	mulcs	r0, r0, r1
 3c4:	0000005a 	andeq	r0, r0, sl, asr r0
 3c8:	02a59c01 	adceq	r9, r5, #256	; 0x100
 3cc:	1b120000 	blne	4803d4 <startup-0x1fb7fc2c>
 3d0:	01000003 	tsteq	r0, r3
 3d4:	0000f710 	andeq	pc, r0, r0, lsl r7	; <UNPREDICTABLE>
 3d8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3dc:	02041300 	andeq	r1, r4, #0, 6
 3e0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 3e4:	20000138 	andcs	r0, r0, r8, lsr r1
 3e8:	00000058 	andeq	r0, r0, r8, asr r0
 3ec:	02d59c01 	sbcseq	r9, r5, #256	; 0x100
 3f0:	78140000 	ldmdavc	r4, {}	; <UNPREDICTABLE>
 3f4:	f7090100 			; <UNDEFINED> instruction: 0xf7090100
 3f8:	02000000 	andeq	r0, r0, #0
 3fc:	b40d6f91 	strlt	r6, [sp], #-3985	; 0xfffff06f
 400:	01000002 	tsteq	r0, r2
 404:	0000f70a 	andeq	pc, r0, sl, lsl #14
 408:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 40c:	03391500 	teqeq	r9, #0, 10
 410:	03010000 	movweq	r0, #4096	; 0x1000
 414:	200000f4 	strdcs	r0, [r0], -r4
 418:	00000044 	andeq	r0, r0, r4, asr #32
 41c:	78149c01 	ldmdavc	r4, {r0, sl, fp, ip, pc}
 420:	f7030100 			; <UNDEFINED> instruction: 0xf7030100
 424:	02000000 	andeq	r0, r0, #0
 428:	b40d6f91 	strlt	r6, [sp], #-3985	; 0xfffff06f
 42c:	01000002 	tsteq	r0, r2
 430:	0000f704 	andeq	pc, r0, r4, lsl #14
 434:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	0b002403 	bleq	9030 <startup-0x1fff6fd0>
  20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  24:	04000008 	streq	r0, [r0], #-8
  28:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  2c:	0b3a0e03 	bleq	e83840 <startup-0x1f17c7c0>
  30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  34:	06120111 			; <UNDEFINED> instruction: 0x06120111
  38:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  3c:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
  40:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  54:	00000019 	andeq	r0, r0, r9, lsl r0
  58:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  5c:	030b130e 	movweq	r1, #45838	; 0xb30e
  60:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  64:	00171006 	andseq	r1, r7, r6
  68:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
  6c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  70:	0b3b0b3a 	bleq	ec2d60 <startup-0x1f13d2a0>
  74:	01111927 	tsteq	r1, r7, lsr #18
  78:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  7c:	01194296 			; <UNDEFINED> instruction: 0x01194296
  80:	03000013 	movweq	r0, #19
  84:	08030005 	stmdaeq	r3, {r0, r2}
  88:	0b3b0b3a 	bleq	ec2d78 <startup-0x1f13d288>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	24040000 	strcs	r0, [r4], #-0
  94:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  98:	000e030b 	andeq	r0, lr, fp, lsl #6
  9c:	010b0500 	tsteq	fp, r0, lsl #10
  a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a4:	34060000 	strcc	r0, [r6], #-0
  a8:	3a080300 	bcc	200cb0 <startup-0x1fdff350>
  ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  b0:	00180213 	andseq	r0, r8, r3, lsl r2
  b4:	00240700 	eoreq	r0, r4, r0, lsl #14
  b8:	0b3e0b0b 	bleq	f82cec <startup-0x1f07d314>
  bc:	00000803 	andeq	r0, r0, r3, lsl #16
  c0:	3f002e08 	svccc	0x00002e08
  c4:	3a0e0319 	bcc	380d30 <startup-0x1fc7f2d0>
  c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  d0:	96184006 	ldrls	r4, [r8], -r6
  d4:	00001942 	andeq	r1, r0, r2, asr #18
  d8:	3f002e09 	svccc	0x00002e09
  dc:	3a0e0319 	bcc	380d48 <startup-0x1fc7f2b8>
  e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  e8:	97184006 	ldrls	r4, [r8, -r6]
  ec:	00001942 	andeq	r1, r0, r2, asr #18
  f0:	01110100 	tsteq	r1, r0, lsl #2
  f4:	0b130e25 	bleq	4c3990 <startup-0x1fb3c670>
  f8:	01110e03 	tsteq	r1, r3, lsl #28
  fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 100:	13020000 	movwne	r0, #8192	; 0x2000
 104:	3a0b0b01 	bcc	2c2d10 <startup-0x1fd3d2f0>
 108:	010b3b0b 	tsteq	fp, fp, lsl #22
 10c:	03000013 	movweq	r0, #19
 110:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 114:	0b3b0b3a 	bleq	ec2e04 <startup-0x1f13d1fc>
 118:	0b381349 	bleq	e04e44 <startup-0x1f1fb1bc>
 11c:	24040000 	strcs	r0, [r4], #-0
 120:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 124:	000e030b 	andeq	r0, lr, fp, lsl #6
 128:	01170500 	tsteq	r7, r0, lsl #10
 12c:	0b3a0b0b 	bleq	e82d60 <startup-0x1f17d2a0>
 130:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 134:	0d060000 	stceq	0, cr0, [r6, #-0]
 138:	3a080300 	bcc	200d40 <startup-0x1fdff2c0>
 13c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 140:	07000013 	smladeq	r0, r3, r0, r0
 144:	1349000d 	movtne	r0, #36877	; 0x900d
 148:	13080000 	movwne	r0, #32768	; 0x8000
 14c:	0b0e0301 	bleq	380d58 <startup-0x1fc7f2a8>
 150:	3b0b3a0b 	blcc	2ce984 <startup-0x1fd3167c>
 154:	0013010b 	andseq	r0, r3, fp, lsl #2
 158:	000d0900 	andeq	r0, sp, r0, lsl #18
 15c:	0b381349 	bleq	e04e88 <startup-0x1f1fb178>
 160:	160a0000 	strne	r0, [sl], -r0
 164:	3a0e0300 	bcc	380d6c <startup-0x1fc7f294>
 168:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 16c:	0b000013 	bleq	1c0 <startup-0x1ffffe40>
 170:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 174:	0b3a0e03 	bleq	e83988 <startup-0x1f17c678>
 178:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 17c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 180:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 184:	00130119 	andseq	r0, r3, r9, lsl r1
 188:	010b0c00 	tsteq	fp, r0, lsl #24
 18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 190:	340d0000 	strcc	r0, [sp], #-0
 194:	3a0e0300 	bcc	380d9c <startup-0x1fc7f264>
 198:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 19c:	00180213 	andseq	r0, r8, r3, lsl r2
 1a0:	00340e00 	eorseq	r0, r4, r0, lsl #28
 1a4:	0b3a0803 	bleq	e821b8 <startup-0x1f17de48>
 1a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1ac:	00001802 	andeq	r1, r0, r2, lsl #16
 1b0:	3f002e0f 	svccc	0x00002e0f
 1b4:	3a0e0319 	bcc	380e20 <startup-0x1fc7f1e0>
 1b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1c0:	96184006 	ldrls	r4, [r8], -r6
 1c4:	00001942 	andeq	r1, r0, r2, asr #18
 1c8:	3f002e10 	svccc	0x00002e10
 1cc:	3a0e0319 	bcc	380e38 <startup-0x1fc7f1c8>
 1d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1d8:	97184006 	ldrls	r4, [r8, -r6]
 1dc:	00001942 	andeq	r1, r0, r2, asr #18
 1e0:	3f012e11 	svccc	0x00012e11
 1e4:	3a0e0319 	bcc	380e50 <startup-0x1fc7f1b0>
 1e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1ec:	11134919 	tstne	r3, r9, lsl r9
 1f0:	40061201 	andmi	r1, r6, r1, lsl #4
 1f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1f8:	00001301 	andeq	r1, r0, r1, lsl #6
 1fc:	03000512 	movweq	r0, #1298	; 0x512
 200:	3b0b3a0e 	blcc	2cea40 <startup-0x1fd315c0>
 204:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 208:	13000018 	movwne	r0, #24
 20c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 218:	06120111 			; <UNDEFINED> instruction: 0x06120111
 21c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 220:	00130119 	andseq	r0, r3, r9, lsl r1
 224:	00051400 	andeq	r1, r5, r0, lsl #8
 228:	0b3a0803 	bleq	e8223c <startup-0x1f17ddc4>
 22c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 230:	00001802 	andeq	r1, r0, r2, lsl #16
 234:	3f012e15 	svccc	0x00012e15
 238:	3a0e0319 	bcc	380ea4 <startup-0x1fc7f15c>
 23c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 240:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 244:	97184006 	ldrls	r4, [r8, -r6]
 248:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000002a 	andeq	r0, r0, sl, lsr #32
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	008a0002 	addeq	r0, sl, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000003c 	andcs	r0, r0, ip, lsr r0
  3c:	000000b8 	strheq	r0, [r0], -r8
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	01380002 	teqeq	r8, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000f4 	strdcs	r0, [r0], -r4
  5c:	000003da 	ldrdeq	r0, [r0], -sl
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000003a 	andcs	r0, r0, sl, lsr r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000008a 	andeq	r0, r0, sl, lsl #1
   4:	005e0002 	subseq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	63532f3a 	cmpvs	r3, #58, 30	; 0xe8
  20:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; fffffe88 <graphic_clear_screen+0xdffffa20>
  24:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  28:	2f373130 	svccs	0x00373130
  2c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
  30:	30544144 	subscc	r4, r4, r4, asr #2
  34:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff78 <graphic_clear_screen+0xdffffb10>
  38:	20736261 	rsbscs	r6, r3, r1, ror #4
  3c:	20646e61 	rsbcs	r6, r4, r1, ror #28
  40:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
  44:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
  48:	72672f73 	rsbvc	r2, r7, #460	; 0x1cc
  4c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  50:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  54:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  58:	74730000 	ldrbtvc	r0, [r3], #-0
  5c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  60:	00632e70 	rsbeq	r2, r3, r0, ror lr
  64:	00000001 	andeq	r0, r0, r1
  68:	00020500 	andeq	r0, r2, r0, lsl #10
  6c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  70:	5e13010d 	mufpls	f0, f3, #5.0
  74:	01000302 	tsteq	r0, r2, lsl #6
  78:	02050001 	andeq	r0, r5, #1
  7c:	20000010 	andcs	r0, r0, r0, lsl r0
  80:	2f011603 	svccs	0x00011603
  84:	4b4b332f 	blmi	12ccd48 <startup-0x1ed332b8>
  88:	0003024b 	andeq	r0, r3, fp, asr #4
  8c:	00930101 	addseq	r0, r3, r1, lsl #2
  90:	00020000 	andeq	r0, r2, r0
  94:	0000005c 	andeq	r0, r0, ip, asr r0
  98:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  9c:	0101000d 	tsteq	r1, sp
  a0:	00000101 	andeq	r0, r0, r1, lsl #2
  a4:	00000100 	andeq	r0, r0, r0, lsl #2
  a8:	2f3a4301 	svccs	0x003a4301
  ac:	6f686353 	svcvs	0x00686353
  b0:	442f6c6f 	strtmi	r6, [pc], #-3183	; b8 <startup-0x1fffff48>
  b4:	31305441 	teqcc	r0, r1, asr #8
  b8:	6f4d2f37 	svcvs	0x004d2f37
  bc:	41442d70 	hvcmi	17104	; 0x42d0
  c0:	37313054 			; <UNDEFINED> instruction: 0x37313054
  c4:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  c8:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
  cc:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
  d0:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
  d4:	2f736573 	svccs	0x00736573
  d8:	70617267 	rsbvc	r7, r1, r7, ror #4
  dc:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
  e0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  e4:	00007961 	andeq	r7, r0, r1, ror #18
  e8:	616c6564 	cmnvs	ip, r4, ror #10
  ec:	00632e79 	rsbeq	r2, r3, r9, ror lr
  f0:	00000001 	andeq	r0, r0, r1
  f4:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
  f8:	14200000 	strtne	r0, [r0], #-0
  fc:	6767672f 	strbvs	r6, [r7, -pc, lsr #14]!
 100:	673e683d 			; <UNDEFINED> instruction: 0x673e683d
 104:	2f2f2fbc 	svccs	0x002f2fbc
 108:	02004b3e 	andeq	r4, r0, #63488	; 0xf800
 10c:	003d0304 	eorseq	r0, sp, r4, lsl #6
 110:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 114:	01040200 	mrseq	r0, R12_usr
 118:	5b063c06 	blpl	18f138 <startup-0x1fe70ec8>
 11c:	234b4c4c 	movtcs	r4, #48204	; 0xbc4c
 120:	01000302 	tsteq	r0, r2, lsl #6
 124:	00013001 	andeq	r3, r1, r1
 128:	83000200 	movwhi	r0, #512	; 0x200
 12c:	02000000 	andeq	r0, r0, #0
 130:	0d0efb01 	vstreq	d15, [lr, #-4]
 134:	01010100 	mrseq	r0, (UNDEF: 17)
 138:	00000001 	andeq	r0, r0, r1
 13c:	01000001 	tsteq	r0, r1
 140:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
 144:	6f6f6863 	svcvs	0x006f6863
 148:	41442f6c 	cmpmi	r4, ip, ror #30
 14c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 150:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 154:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 158:	2f373130 	svccs	0x00373130
 15c:	7362614c 	cmnvc	r2, #76, 2
 160:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 164:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 168:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 16c:	672f7365 	strvs	r7, [pc, -r5, ror #6]!
 170:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 174:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 178:	616c7073 	smcvs	50947	; 0xc703
 17c:	67000079 	smlsdxvs	r0, r9, r0, r0
 180:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 184:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 188:	616c7073 	smcvs	50947	; 0xc703
 18c:	00632e79 	rsbeq	r2, r3, r9, ror lr
 190:	67000001 	strvs	r0, [r0, -r1]
 194:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 198:	00010068 	andeq	r0, r1, r8, rrx
 19c:	61726700 	cmnvs	r2, r0, lsl #14
 1a0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1a4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 1a8:	2e79616c 	rpwcsez	f6, f1, #4.0
 1ac:	00010068 	andeq	r0, r1, r8, rrx
 1b0:	05000000 	streq	r0, [r0, #-0]
 1b4:	0000f402 	andeq	pc, r0, r2, lsl #8
 1b8:	59671420 	stmdbpl	r7!, {r5, sl, ip}^
 1bc:	676859bb 			; <UNDEFINED> instruction: 0x676859bb
 1c0:	5983d759 	stmibpl	r3, {r0, r3, r4, r6, r8, r9, sl, ip, lr, pc}
 1c4:	10036768 	andne	r6, r3, r8, ror #14
 1c8:	20700374 	rsbscs	r0, r0, r4, ror r3
 1cc:	034a1003 	movteq	r1, #40963	; 0xa003
 1d0:	223d2072 	eorscs	r2, sp, #114	; 0x72
 1d4:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 1d8:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 1dc:	3f3e3f4c 	svccc	0x003e3f4c
 1e0:	3d323d3d 	ldccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 1e4:	75303d30 	ldrvc	r3, [r0, #-3376]!	; 0xfffff2d0
 1e8:	284a7903 	stmdacs	sl, {r0, r1, r8, fp, ip, sp, lr}^
 1ec:	68a03d27 	stmiavs	r0!, {r0, r1, r2, r5, r8, sl, fp, ip, sp}
 1f0:	593e3e3f 	ldmdbpl	lr!, {r0, r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 1f4:	5a313d30 	bpl	c4f6bc <startup-0x1f3b0944>
 1f8:	3c13033f 	ldccc	3, cr0, [r3], {63}	; 0x3f
 1fc:	4b92ae3d 	blmi	fe4abaf8 <graphic_clear_screen+0xde4ab690>
 200:	2f3d3059 	svccs	0x003d3059
 204:	303d593f 	eorscc	r5, sp, pc, lsr r9
 208:	3d323d59 	ldccc	13, cr3, [r2, #-356]!	; 0xfffffe9c
 20c:	91763d3f 	cmnls	r6, pc, lsr sp
 210:	833d593d 	teqhi	sp, #999424	; 0xf4000
 214:	593d914c 	ldmdbpl	sp!, {r2, r3, r6, r8, ip, pc}
 218:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
 21c:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 220:	843d3d30 	ldrthi	r3, [sp], #-3376	; 0xfffff2d0
 224:	3e3e3e2f 	cdpcc	14, 3, cr3, cr14, cr15, {1}
 228:	4b3e3e3d 	blmi	f8fb24 <startup-0x1f0704dc>
 22c:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 230:	4b3d3e3d 	blmi	f4fb2c <startup-0x1f0b04d4>
 234:	02004c9f 	andeq	r4, r0, #40704	; 0x9f00
 238:	004b0304 	subeq	r0, fp, r4, lsl #6
 23c:	49030402 	stmdbmi	r3, {r1, sl}
 240:	01040200 	mrseq	r0, R12_usr
 244:	02005806 	andeq	r5, r0, #393216	; 0x60000
 248:	46060204 	strmi	r0, [r6], -r4, lsl #4
 24c:	01040200 	mrseq	r0, R12_usr
 250:	52065806 	andpl	r5, r6, #393216	; 0x60000
 254:	01000402 	tsteq	r0, r2, lsl #8
 258:	Address 0x00000258 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
   4:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
   8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
   c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  10:	7300746e 	movwvc	r7, #1134	; 0x46e
  14:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
  18:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  1c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  20:	6f6c2067 	svcvs	0x006c2067
  24:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
  28:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  2c:	2064656e 	rsbcs	r6, r4, lr, ror #10
  30:	00746e69 	rsbseq	r6, r4, r9, ror #28
  34:	532f3a43 			; <UNDEFINED> instruction: 0x532f3a43
  38:	6f6f6863 	svcvs	0x006f6863
  3c:	41442f6c 	cmpmi	r4, ip, ror #30
  40:	37313054 			; <UNDEFINED> instruction: 0x37313054
  44:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
  48:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
  4c:	2f373130 	svccs	0x00373130
  50:	7362614c 	cmnvc	r2, #76, 2
  54:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
  58:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
  5c:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
  60:	672f7365 	strvs	r7, [pc, -r5, ror #6]!
  64:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  68:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  6c:	616c7073 	smcvs	50947	; 0xc703
  70:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
  74:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  78:	00632e70 	rsbeq	r2, r3, r0, ror lr
  7c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  80:	00707574 	rsbseq	r7, r0, r4, ror r5
  84:	20554e47 	subscs	r4, r5, r7, asr #28
  88:	20393943 	eorscs	r3, r9, r3, asr #18
  8c:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  90:	30322031 	eorscc	r2, r2, r1, lsr r0
  94:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  98:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  9c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  a0:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  a4:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  a8:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  ac:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  b0:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  b4:	6172622d 	cmnvs	r2, sp, lsr #4
  b8:	2068636e 	rsbcs	r6, r8, lr, ror #6
  bc:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  c0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c4:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  c8:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  cc:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  d0:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  d4:	616d2d20 	cmnvs	sp, r0, lsr #26
  d8:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  dc:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  e0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  e4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  e8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  ec:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  f0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  f4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  f8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  fc:	616d2d20 	cmnvs	sp, r0, lsr #26
 100:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 104:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 108:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 10c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 110:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 114:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 118:	00393963 	eorseq	r3, r9, r3, ror #18
 11c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 120:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 124:	61686320 	cmnvs	r8, r0, lsr #6
 128:	616d0072 	smcvs	53250	; 0xd002
 12c:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
 130:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 134:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 138:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 13c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 140:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 86 <startup-0x1fffff7a>	; <UNPREDICTABLE>
 144:	6f726b69 	svcvs	0x00726b69
 148:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 14c:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff7f3 <graphic_clear_screen+0xdffff38b>
 150:	736e3030 	cmnvc	lr, #48	; 0x30
 154:	2f3a4300 	svccs	0x003a4300
 158:	6f686353 	svcvs	0x00686353
 15c:	442f6c6f 	strtmi	r6, [pc], #-3183	; 164 <startup-0x1ffffe9c>
 160:	31305441 	teqcc	r0, r1, asr #8
 164:	6f4d2f37 	svcvs	0x004d2f37
 168:	41442d70 	hvcmi	17104	; 0x42d0
 16c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 170:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 174:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 178:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 17c:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 180:	2f736573 	svccs	0x00736573
 184:	70617267 	rsbvc	r7, r1, r7, ror #4
 188:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 18c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 190:	642f7961 	strtvs	r7, [pc], #-2401	; 198 <startup-0x1ffffe68>
 194:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 198:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 19c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1a0:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 1a4:	6400696c 	strvs	r6, [r0], #-2412	; 0xfffff694
 1a8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1ac:	3035325f 	eorscc	r3, r5, pc, asr r2
 1b0:	7000736e 	andvc	r7, r0, lr, ror #6
 1b4:	72647075 	rsbvc	r7, r4, #117	; 0x75
 1b8:	646f6d00 	strbtvs	r6, [pc], #-3328	; 1c0 <startup-0x1ffffe40>
 1bc:	67007265 	strvs	r7, [r0, -r5, ror #4]
 1c0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1c4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 1c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1cc:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 58 <startup-0x1fffffa8>
 1d0:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 1d4:	61726700 	cmnvs	r2, r0, lsl #14
 1d8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1dc:	6165725f 	cmnvs	r5, pc, asr r2
 1e0:	61645f64 	cmnvs	r4, r4, ror #30
 1e4:	67006174 	smlsdxvs	r0, r4, r1, r6
 1e8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1ec:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 1f0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 1f4:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 1f8:	006e6565 	rsbeq	r6, lr, r5, ror #10
 1fc:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
 200:	00686769 	rsbeq	r6, r8, r9, ror #14
 204:	70617267 	rsbvc	r7, r1, r7, ror #4
 208:	5f636968 	svcpl	0x00636968
 20c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 210:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 214:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 218:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
 21c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 220:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
 224:	5f797375 	svcpl	0x00797375
 228:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 22c:	6f007375 	svcvs	0x00007375
 230:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 234:	61700072 	cmnvs	r0, r2, ror r0
 238:	67006567 	strvs	r6, [r0, -r7, ror #10]
 23c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 240:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 244:	5f746961 	svcpl	0x00746961
 248:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 24c:	72670079 	rsbvc	r0, r7, #121	; 0x79
 250:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 254:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 258:	5f657469 	svcpl	0x00657469
 25c:	61746164 	cmnvs	r4, r4, ror #2
 260:	72646f00 	rsbvc	r6, r4, #0, 30
 264:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 268:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
 26c:	6700776f 	strvs	r7, [r0, -pc, ror #14]
 270:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 274:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 278:	00646165 	rsbeq	r6, r4, r5, ror #2
 27c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 280:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 284:	70617267 	rsbvc	r7, r1, r7, ror #4
 288:	5f636968 	svcpl	0x00636968
 28c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 290:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
 294:	615f7469 	cmpvs	pc, r9, ror #8
 298:	67007070 	smlsdxvs	r0, r0, r0, r7
 29c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2a0:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 2a4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 2a8:	7a696c61 	bvc	1a5b434 <startup-0x1e5a4bcc>
 2ac:	675f0065 	ldrbvs	r0, [pc, -r5, rrx]
 2b0:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 2b4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 2b8:	5f6c6f72 	svcpl	0x006c6f72
 2bc:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 2c0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 2c4:	2f3a4300 	svccs	0x003a4300
 2c8:	6f686353 	svcvs	0x00686353
 2cc:	442f6c6f 	strtmi	r6, [pc], #-3183	; 2d4 <startup-0x1ffffd2c>
 2d0:	31305441 	teqcc	r0, r1, asr #8
 2d4:	6f4d2f37 	svcvs	0x004d2f37
 2d8:	41442d70 	hvcmi	17104	; 0x42d0
 2dc:	37313054 			; <UNDEFINED> instruction: 0x37313054
 2e0:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 2e4:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 2e8:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 2ec:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 2f0:	2f736573 	svccs	0x00736573
 2f4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2f8:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 2fc:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 300:	672f7961 	strvs	r7, [pc, -r1, ror #18]!
 304:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 308:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 30c:	616c7073 	smcvs	50947	; 0xc703
 310:	00632e79 	rsbeq	r2, r3, r9, ror lr
 314:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 318:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 31c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 320:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 324:	61760072 	cmnvs	r6, r2, ror r0
 328:	0065756c 	rsbeq	r7, r5, ip, ror #10
 32c:	4f495047 	svcmi	0x00495047
 330:	72646900 	rsbvc	r6, r4, #0, 18
 334:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 338:	61726700 	cmnvs	r2, r0, lsl #14
 33c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 340:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 344:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 348:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 34c:	736f0074 	cmnvc	pc, #116	; 0x74
 350:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 354:	Address 0x00000354 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000002a 	andeq	r0, r0, sl, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000000c 	andeq	r0, r0, ip
  40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  44:	7c020001 	stcvc	0, cr0, [r2], {1}
  48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  4c:	00000018 	andeq	r0, r0, r8, lsl r0
  50:	0000003c 	andeq	r0, r0, ip, lsr r0
  54:	2000003c 	andcs	r0, r0, ip, lsr r0
  58:	00000064 	andeq	r0, r0, r4, rrx
  5c:	40080e41 	andmi	r0, r8, r1, asr #28
  60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  64:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  68:	00000018 	andeq	r0, r0, r8, lsl r0
  6c:	0000003c 	andeq	r0, r0, ip, lsr r0
  70:	200000a0 	andcs	r0, r0, r0, lsr #1
  74:	00000012 	andeq	r0, r0, r2, lsl r0
  78:	40080e41 	andmi	r0, r8, r1, asr #28
  7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  80:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  84:	0000001c 	andeq	r0, r0, ip, lsl r0
  88:	0000003c 	andeq	r0, r0, ip, lsr r0
  8c:	200000b2 	strhcs	r0, [r0], -r2
  90:	0000002a 	andeq	r0, r0, sl, lsr #32
  94:	40080e41 	andmi	r0, r8, r1, asr #28
  98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  9c:	180e4101 	stmdane	lr, {r0, r8, lr}
  a0:	00070d41 	andeq	r0, r7, r1, asr #26
  a4:	0000001c 	andeq	r0, r0, ip, lsl r0
  a8:	0000003c 	andeq	r0, r0, ip, lsr r0
  ac:	200000dc 	ldrdcs	r0, [r0], -ip
  b0:	00000018 	andeq	r0, r0, r8, lsl r0
  b4:	40080e41 	andmi	r0, r8, r1, asr #28
  b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  bc:	100e4101 	andne	r4, lr, r1, lsl #2
  c0:	00070d41 	andeq	r0, r7, r1, asr #26
  c4:	0000000c 	andeq	r0, r0, ip
  c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  cc:	7c020001 	stcvc	0, cr0, [r2], {1}
  d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	000000c4 	andeq	r0, r0, r4, asr #1
  dc:	200000f4 	strdcs	r0, [r0], -r4
  e0:	00000044 	andeq	r0, r0, r4, asr #32
  e4:	40080e41 	andmi	r0, r8, r1, asr #28
  e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  ec:	180e4101 	stmdane	lr, {r0, r8, lr}
  f0:	00070d41 	andeq	r0, r7, r1, asr #26
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	000000c4 	andeq	r0, r0, r4, asr #1
  fc:	20000138 	andcs	r0, r0, r8, lsr r1
 100:	00000058 	andeq	r0, r0, r8, asr r0
 104:	40080e41 	andmi	r0, r8, r1, asr #28
 108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 10c:	180e4101 	stmdane	lr, {r0, r8, lr}
 110:	00070d41 	andeq	r0, r7, r1, asr #26
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	000000c4 	andeq	r0, r0, r4, asr #1
 11c:	20000190 	mulcs	r0, r0, r1
 120:	0000005a 	andeq	r0, r0, sl, asr r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	100e4101 	andne	r4, lr, r1, lsl #2
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	000000c4 	andeq	r0, r0, r4, asr #1
 13c:	200001ea 	andcs	r0, r0, sl, ror #3
 140:	0000006a 	andeq	r0, r0, sl, rrx
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	000000c4 	andeq	r0, r0, r4, asr #1
 15c:	20000254 	andcs	r0, r0, r4, asr r2
 160:	00000068 	andeq	r0, r0, r8, rrx
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	180e4101 	stmdane	lr, {r0, r8, lr}
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	000000c4 	andeq	r0, r0, r4, asr #1
 17c:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 180:	00000080 	andeq	r0, r0, r0, lsl #1
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	100e4101 	andne	r4, lr, r1, lsl #2
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	000000c4 	andeq	r0, r0, r4, asr #1
 19c:	2000033c 	andcs	r0, r0, ip, lsr r3
 1a0:	00000040 	andeq	r0, r0, r0, asr #32
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	100e4101 	andne	r4, lr, r1, lsl #2
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	000000c4 	andeq	r0, r0, r4, asr #1
 1bc:	2000037c 	andcs	r0, r0, ip, ror r3
 1c0:	00000046 	andeq	r0, r0, r6, asr #32
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	100e4101 	andne	r4, lr, r1, lsl #2
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	000000c4 	andeq	r0, r0, r4, asr #1
 1dc:	200003c2 	andcs	r0, r0, r2, asr #7
 1e0:	0000002a 	andeq	r0, r0, sl, lsr #32
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	00000018 	andeq	r0, r0, r8, lsl r0
 1f8:	000000c4 	andeq	r0, r0, r4, asr #1
 1fc:	200003ec 	andcs	r0, r0, ip, ror #7
 200:	00000020 	andeq	r0, r0, r0, lsr #32
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 210:	00000018 	andeq	r0, r0, r8, lsl r0
 214:	000000c4 	andeq	r0, r0, r4, asr #1
 218:	2000040c 	andcs	r0, r0, ip, lsl #8
 21c:	0000005c 	andeq	r0, r0, ip, asr r0
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	000000c4 	andeq	r0, r0, r4, asr #1
 234:	20000468 	andcs	r0, r0, r8, ror #8
 238:	00000066 	andeq	r0, r0, r6, rrx
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	100e4101 	andne	r4, lr, r1, lsl #2
 248:	00070d41 	andeq	r0, r7, r1, asr #26
