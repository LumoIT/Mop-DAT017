
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define EXERCISE 16
 
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void ){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:

void main(void){
20000010:	b590      	push	{r4, r7, lr}
20000012:	b099      	sub	sp, #100	; 0x64
20000014:	af00      	add	r7, sp, #0
	init_app();
20000016:	f000 fcc1 	bl	2000099c <init_app>
	graphic_initialize();
2000001a:	f000 fad7 	bl	200005cc <graphic_initialize>
#ifndef SIMULATOR
	graphic_clear_screen();
2000001e:	f000 fb03 	bl	20000628 <graphic_clear_screen>
        delay_milli(500);
    }
#endif // 5.15

#if EXERCISE == 16
	keyboard_init();
20000022:	f000 fcd3 	bl	200009cc <keyboard_init>
	GEOMETRY ball_geometry = {
20000026:	2324      	movs	r3, #36	; 0x24
20000028:	18fb      	adds	r3, r7, r3
2000002a:	0018      	movs	r0, r3
2000002c:	2334      	movs	r3, #52	; 0x34
2000002e:	001a      	movs	r2, r3
20000030:	2100      	movs	r1, #0
20000032:	f000 fd7f 	bl	20000b34 <memset>
20000036:	2324      	movs	r3, #36	; 0x24
20000038:	18fb      	adds	r3, r7, r3
2000003a:	220c      	movs	r2, #12
2000003c:	601a      	str	r2, [r3, #0]
2000003e:	2324      	movs	r3, #36	; 0x24
20000040:	18fb      	adds	r3, r7, r3
20000042:	2204      	movs	r2, #4
20000044:	605a      	str	r2, [r3, #4]
20000046:	2324      	movs	r3, #36	; 0x24
20000048:	18fb      	adds	r3, r7, r3
2000004a:	2204      	movs	r2, #4
2000004c:	609a      	str	r2, [r3, #8]
2000004e:	2324      	movs	r3, #36	; 0x24
20000050:	18fb      	adds	r3, r7, r3
20000052:	2201      	movs	r2, #1
20000054:	735a      	strb	r2, [r3, #13]
20000056:	2324      	movs	r3, #36	; 0x24
20000058:	18fb      	adds	r3, r7, r3
2000005a:	2202      	movs	r2, #2
2000005c:	73da      	strb	r2, [r3, #15]
2000005e:	2324      	movs	r3, #36	; 0x24
20000060:	18fb      	adds	r3, r7, r3
20000062:	2201      	movs	r2, #1
20000064:	741a      	strb	r2, [r3, #16]
20000066:	2324      	movs	r3, #36	; 0x24
20000068:	18fb      	adds	r3, r7, r3
2000006a:	2201      	movs	r2, #1
2000006c:	749a      	strb	r2, [r3, #18]
2000006e:	2324      	movs	r3, #36	; 0x24
20000070:	18fb      	adds	r3, r7, r3
20000072:	2201      	movs	r2, #1
20000074:	74da      	strb	r2, [r3, #19]
20000076:	2324      	movs	r3, #36	; 0x24
20000078:	18fb      	adds	r3, r7, r3
2000007a:	2201      	movs	r2, #1
2000007c:	751a      	strb	r2, [r3, #20]
2000007e:	2324      	movs	r3, #36	; 0x24
20000080:	18fb      	adds	r3, r7, r3
20000082:	2202      	movs	r2, #2
20000084:	755a      	strb	r2, [r3, #21]
20000086:	2324      	movs	r3, #36	; 0x24
20000088:	18fb      	adds	r3, r7, r3
2000008a:	2201      	movs	r2, #1
2000008c:	759a      	strb	r2, [r3, #22]
2000008e:	2324      	movs	r3, #36	; 0x24
20000090:	18fb      	adds	r3, r7, r3
20000092:	2203      	movs	r2, #3
20000094:	75da      	strb	r2, [r3, #23]
20000096:	2324      	movs	r3, #36	; 0x24
20000098:	18fb      	adds	r3, r7, r3
2000009a:	2202      	movs	r2, #2
2000009c:	761a      	strb	r2, [r3, #24]
2000009e:	2324      	movs	r3, #36	; 0x24
200000a0:	18fb      	adds	r3, r7, r3
200000a2:	2202      	movs	r2, #2
200000a4:	769a      	strb	r2, [r3, #26]
200000a6:	2324      	movs	r3, #36	; 0x24
200000a8:	18fb      	adds	r3, r7, r3
200000aa:	2201      	movs	r2, #1
200000ac:	76da      	strb	r2, [r3, #27]
200000ae:	2324      	movs	r3, #36	; 0x24
200000b0:	18fb      	adds	r3, r7, r3
200000b2:	2202      	movs	r2, #2
200000b4:	771a      	strb	r2, [r3, #28]
200000b6:	2324      	movs	r3, #36	; 0x24
200000b8:	18fb      	adds	r3, r7, r3
200000ba:	2202      	movs	r2, #2
200000bc:	775a      	strb	r2, [r3, #29]
200000be:	2324      	movs	r3, #36	; 0x24
200000c0:	18fb      	adds	r3, r7, r3
200000c2:	2202      	movs	r2, #2
200000c4:	779a      	strb	r2, [r3, #30]
200000c6:	2324      	movs	r3, #36	; 0x24
200000c8:	18fb      	adds	r3, r7, r3
200000ca:	2203      	movs	r2, #3
200000cc:	77da      	strb	r2, [r3, #31]
200000ce:	2324      	movs	r3, #36	; 0x24
200000d0:	18fb      	adds	r3, r7, r3
200000d2:	2220      	movs	r2, #32
200000d4:	2103      	movs	r1, #3
200000d6:	5499      	strb	r1, [r3, r2]
200000d8:	2324      	movs	r3, #36	; 0x24
200000da:	18fb      	adds	r3, r7, r3
200000dc:	2221      	movs	r2, #33	; 0x21
200000de:	2101      	movs	r1, #1
200000e0:	5499      	strb	r1, [r3, r2]
200000e2:	2324      	movs	r3, #36	; 0x24
200000e4:	18fb      	adds	r3, r7, r3
200000e6:	2222      	movs	r2, #34	; 0x22
200000e8:	2103      	movs	r1, #3
200000ea:	5499      	strb	r1, [r3, r2]
200000ec:	2324      	movs	r3, #36	; 0x24
200000ee:	18fb      	adds	r3, r7, r3
200000f0:	2223      	movs	r2, #35	; 0x23
200000f2:	2102      	movs	r1, #2
200000f4:	5499      	strb	r1, [r3, r2]
		// px
		{
			{0,1}, {0,2}, {1,0}, {1,1}, {1,2}, {1,3}, {2,0}, {2,1}, {2,2}, {2,3}, {3,1}, {3,2}
		}
	};
	OBJECT ball = {
200000f6:	003b      	movs	r3, r7
200000f8:	2224      	movs	r2, #36	; 0x24
200000fa:	18ba      	adds	r2, r7, r2
200000fc:	601a      	str	r2, [r3, #0]
200000fe:	003b      	movs	r3, r7
20000100:	2200      	movs	r2, #0
20000102:	605a      	str	r2, [r3, #4]
20000104:	003b      	movs	r3, r7
20000106:	2200      	movs	r2, #0
20000108:	609a      	str	r2, [r3, #8]
2000010a:	003b      	movs	r3, r7
2000010c:	2201      	movs	r2, #1
2000010e:	60da      	str	r2, [r3, #12]
20000110:	003b      	movs	r3, r7
20000112:	2201      	movs	r2, #1
20000114:	611a      	str	r2, [r3, #16]
20000116:	003b      	movs	r3, r7
20000118:	4a2a      	ldr	r2, [pc, #168]	; (200001c4 <main+0x1b4>)
2000011a:	615a      	str	r2, [r3, #20]
2000011c:	003b      	movs	r3, r7
2000011e:	4a2a      	ldr	r2, [pc, #168]	; (200001c8 <main+0x1b8>)
20000120:	619a      	str	r2, [r3, #24]
20000122:	003b      	movs	r3, r7
20000124:	4a29      	ldr	r2, [pc, #164]	; (200001cc <main+0x1bc>)
20000126:	61da      	str	r2, [r3, #28]
20000128:	003b      	movs	r3, r7
2000012a:	4a29      	ldr	r2, [pc, #164]	; (200001d0 <main+0x1c0>)
2000012c:	621a      	str	r2, [r3, #32]
		clear_object,
		move_object,
		set_object_speed
	};
	
	POBJECT p = &ball;
2000012e:	003b      	movs	r3, r7
20000130:	65fb      	str	r3, [r7, #92]	; 0x5c
	
	p->set_speed(p, 4, 1);
20000132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000134:	6a1b      	ldr	r3, [r3, #32]
20000136:	6df8      	ldr	r0, [r7, #92]	; 0x5c
20000138:	2201      	movs	r2, #1
2000013a:	2104      	movs	r1, #4
2000013c:	4798      	blx	r3
	uint8_t keyboard_val;
	while(1){
		p->move(p);
2000013e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000140:	69db      	ldr	r3, [r3, #28]
20000142:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
20000144:	0010      	movs	r0, r2
20000146:	4798      	blx	r3
		graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000148:	2118      	movs	r1, #24
2000014a:	203f      	movs	r0, #63	; 0x3f
2000014c:	f000 f9e6 	bl	2000051c <graphic_write_command>
		graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000150:	2118      	movs	r1, #24
20000152:	20c0      	movs	r0, #192	; 0xc0
20000154:	f000 f9e2 	bl	2000051c <graphic_write_command>
		keyboard_val = keyb();
20000158:	235b      	movs	r3, #91	; 0x5b
2000015a:	18fc      	adds	r4, r7, r3
2000015c:	f000 fc5e 	bl	20000a1c <keyb>
20000160:	0003      	movs	r3, r0
20000162:	7023      	strb	r3, [r4, #0]
		switch (keyboard_val){
20000164:	235b      	movs	r3, #91	; 0x5b
20000166:	18fb      	adds	r3, r7, r3
20000168:	781b      	ldrb	r3, [r3, #0]
2000016a:	2b04      	cmp	r3, #4
2000016c:	d00f      	beq.n	2000018e <main+0x17e>
2000016e:	dc02      	bgt.n	20000176 <main+0x166>
20000170:	2b02      	cmp	r3, #2
20000172:	d014      	beq.n	2000019e <main+0x18e>
20000174:	e022      	b.n	200001bc <main+0x1ac>
20000176:	2b06      	cmp	r3, #6
20000178:	d002      	beq.n	20000180 <main+0x170>
2000017a:	2b08      	cmp	r3, #8
2000017c:	d017      	beq.n	200001ae <main+0x19e>
2000017e:	e01d      	b.n	200001bc <main+0x1ac>
			case 6: p->set_speed(p, 2, 0); break;
20000180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000182:	6a1b      	ldr	r3, [r3, #32]
20000184:	6df8      	ldr	r0, [r7, #92]	; 0x5c
20000186:	2200      	movs	r2, #0
20000188:	2102      	movs	r1, #2
2000018a:	4798      	blx	r3
2000018c:	e016      	b.n	200001bc <main+0x1ac>
			case 4: p->set_speed(p, -2, 0); break;
2000018e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000190:	6a1b      	ldr	r3, [r3, #32]
20000192:	2202      	movs	r2, #2
20000194:	4251      	negs	r1, r2
20000196:	6df8      	ldr	r0, [r7, #92]	; 0x5c
20000198:	2200      	movs	r2, #0
2000019a:	4798      	blx	r3
2000019c:	e00e      	b.n	200001bc <main+0x1ac>
			case 2: p->set_speed(p, 0, -2); break;
2000019e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
200001a0:	6a1b      	ldr	r3, [r3, #32]
200001a2:	2202      	movs	r2, #2
200001a4:	4252      	negs	r2, r2
200001a6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
200001a8:	2100      	movs	r1, #0
200001aa:	4798      	blx	r3
200001ac:	e006      	b.n	200001bc <main+0x1ac>
			case 8: p->set_speed(p, 0, 2); break;
200001ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
200001b0:	6a1b      	ldr	r3, [r3, #32]
200001b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
200001b4:	2202      	movs	r2, #2
200001b6:	2100      	movs	r1, #0
200001b8:	4798      	blx	r3
200001ba:	46c0      	nop			; (mov r8, r8)
		}
		delay_milli(40);
200001bc:	2028      	movs	r0, #40	; 0x28
200001be:	f000 f859 	bl	20000274 <delay_milli>
		p->move(p);
200001c2:	e7bc      	b.n	2000013e <main+0x12e>
200001c4:	20000835 	andcs	r0, r0, r5, lsr r8
200001c8:	20000899 	mulcs	r0, r9, r8
200001cc:	200008fd 	strdcs	r0, [r0], -sp
200001d0:	2000097d 	andcs	r0, r0, sp, ror r9

200001d4 <delay_250ns>:
#include "delay.h"

void delay_250ns(void){
200001d4:	b580      	push	{r7, lr}
200001d6:	af00      	add	r7, sp, #0
    STK_CTRL &= 0xFFFEFFF8;
200001d8:	4b13      	ldr	r3, [pc, #76]	; (20000228 <delay_250ns+0x54>)
200001da:	4a13      	ldr	r2, [pc, #76]	; (20000228 <delay_250ns+0x54>)
200001dc:	6812      	ldr	r2, [r2, #0]
200001de:	4913      	ldr	r1, [pc, #76]	; (2000022c <delay_250ns+0x58>)
200001e0:	400a      	ands	r2, r1
200001e2:	601a      	str	r2, [r3, #0]
    STK_LOAD &= 0xFF000000;
200001e4:	4b12      	ldr	r3, [pc, #72]	; (20000230 <delay_250ns+0x5c>)
200001e6:	4a12      	ldr	r2, [pc, #72]	; (20000230 <delay_250ns+0x5c>)
200001e8:	6812      	ldr	r2, [r2, #0]
200001ea:	0e12      	lsrs	r2, r2, #24
200001ec:	0612      	lsls	r2, r2, #24
200001ee:	601a      	str	r2, [r3, #0]
    STK_LOAD |= COUNT_VAL-1;
200001f0:	4b0f      	ldr	r3, [pc, #60]	; (20000230 <delay_250ns+0x5c>)
200001f2:	4a0f      	ldr	r2, [pc, #60]	; (20000230 <delay_250ns+0x5c>)
200001f4:	6812      	ldr	r2, [r2, #0]
200001f6:	2129      	movs	r1, #41	; 0x29
200001f8:	430a      	orrs	r2, r1
200001fa:	601a      	str	r2, [r3, #0]
    STK_VAL = 0;
200001fc:	4b0d      	ldr	r3, [pc, #52]	; (20000234 <delay_250ns+0x60>)
200001fe:	2200      	movs	r2, #0
20000200:	601a      	str	r2, [r3, #0]
    STK_CTRL |= 0x5;
20000202:	4b09      	ldr	r3, [pc, #36]	; (20000228 <delay_250ns+0x54>)
20000204:	4a08      	ldr	r2, [pc, #32]	; (20000228 <delay_250ns+0x54>)
20000206:	6812      	ldr	r2, [r2, #0]
20000208:	2105      	movs	r1, #5
2000020a:	430a      	orrs	r2, r1
2000020c:	601a      	str	r2, [r3, #0]
    
    while(STK_CTRL & 0x00010000 == 0);
2000020e:	46c0      	nop			; (mov r8, r8)
20000210:	4b05      	ldr	r3, [pc, #20]	; (20000228 <delay_250ns+0x54>)
20000212:	681b      	ldr	r3, [r3, #0]
    
    STK_CTRL &= 0xFFFEFFF8;
20000214:	4b04      	ldr	r3, [pc, #16]	; (20000228 <delay_250ns+0x54>)
20000216:	4a04      	ldr	r2, [pc, #16]	; (20000228 <delay_250ns+0x54>)
20000218:	6812      	ldr	r2, [r2, #0]
2000021a:	4904      	ldr	r1, [pc, #16]	; (2000022c <delay_250ns+0x58>)
2000021c:	400a      	ands	r2, r1
2000021e:	601a      	str	r2, [r3, #0]
}
20000220:	46c0      	nop			; (mov r8, r8)
20000222:	46bd      	mov	sp, r7
20000224:	bd80      	pop	{r7, pc}
20000226:	46c0      	nop			; (mov r8, r8)
20000228:	e000e010 	and	lr, r0, r0, lsl r0
2000022c:	fffefff8 			; <UNDEFINED> instruction: 0xfffefff8
20000230:	e000e014 	and	lr, r0, r4, lsl r0
20000234:	e000e018 	and	lr, r0, r8, lsl r0

20000238 <delay_500ns>:

void delay_500ns(void){
20000238:	b580      	push	{r7, lr}
2000023a:	af00      	add	r7, sp, #0
    delay_250ns();
2000023c:	f7ff ffca 	bl	200001d4 <delay_250ns>
    delay_250ns();
20000240:	f7ff ffc8 	bl	200001d4 <delay_250ns>
}
20000244:	46c0      	nop			; (mov r8, r8)
20000246:	46bd      	mov	sp, r7
20000248:	bd80      	pop	{r7, pc}

2000024a <delay_mikro>:

void delay_mikro(unsigned int us){
2000024a:	b580      	push	{r7, lr}
2000024c:	b084      	sub	sp, #16
2000024e:	af00      	add	r7, sp, #0
20000250:	6078      	str	r0, [r7, #4]
    for(int i=0; i < us*2; i++){
20000252:	2300      	movs	r3, #0
20000254:	60fb      	str	r3, [r7, #12]
20000256:	e004      	b.n	20000262 <delay_mikro+0x18>
        delay_500ns();
20000258:	f7ff ffee 	bl	20000238 <delay_500ns>
    for(int i=0; i < us*2; i++){
2000025c:	68fb      	ldr	r3, [r7, #12]
2000025e:	3301      	adds	r3, #1
20000260:	60fb      	str	r3, [r7, #12]
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	005a      	lsls	r2, r3, #1
20000266:	68fb      	ldr	r3, [r7, #12]
20000268:	429a      	cmp	r2, r3
2000026a:	d8f5      	bhi.n	20000258 <delay_mikro+0xe>
    }
}
2000026c:	46c0      	nop			; (mov r8, r8)
2000026e:	46bd      	mov	sp, r7
20000270:	b004      	add	sp, #16
20000272:	bd80      	pop	{r7, pc}

20000274 <delay_milli>:

void delay_milli(unsigned int ms){
20000274:	b580      	push	{r7, lr}
20000276:	b082      	sub	sp, #8
20000278:	af00      	add	r7, sp, #0
2000027a:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
	delay_mikro(ms*MILLI_TO_MIKRO);
2000027c:	687b      	ldr	r3, [r7, #4]
2000027e:	22fa      	movs	r2, #250	; 0xfa
20000280:	0092      	lsls	r2, r2, #2
20000282:	4353      	muls	r3, r2
20000284:	0018      	movs	r0, r3
20000286:	f7ff ffe0 	bl	2000024a <delay_mikro>
	return;
2000028a:	46c0      	nop			; (mov r8, r8)
#endif // For simulator
    delay_mikro(ms);
}
2000028c:	46bd      	mov	sp, r7
2000028e:	b002      	add	sp, #8
20000290:	bd80      	pop	{r7, pc}
20000292:	46c0      	nop			; (mov r8, r8)

20000294 <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"

void graphic_ctrl_bit_set(uint8_t x){
20000294:	b580      	push	{r7, lr}
20000296:	b084      	sub	sp, #16
20000298:	af00      	add	r7, sp, #0
2000029a:	0002      	movs	r2, r0
2000029c:	1dfb      	adds	r3, r7, #7
2000029e:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
200002a0:	4a0f      	ldr	r2, [pc, #60]	; (200002e0 <graphic_ctrl_bit_set+0x4c>)
200002a2:	230f      	movs	r3, #15
200002a4:	18fb      	adds	r3, r7, r3
200002a6:	7d12      	ldrb	r2, [r2, #20]
200002a8:	701a      	strb	r2, [r3, #0]
    control_register |= x;
200002aa:	230f      	movs	r3, #15
200002ac:	18fb      	adds	r3, r7, r3
200002ae:	220f      	movs	r2, #15
200002b0:	18b9      	adds	r1, r7, r2
200002b2:	1dfa      	adds	r2, r7, #7
200002b4:	7809      	ldrb	r1, [r1, #0]
200002b6:	7812      	ldrb	r2, [r2, #0]
200002b8:	430a      	orrs	r2, r1
200002ba:	701a      	strb	r2, [r3, #0]
	control_register &= ~B_SELECT;
200002bc:	230f      	movs	r3, #15
200002be:	18fb      	adds	r3, r7, r3
200002c0:	220f      	movs	r2, #15
200002c2:	18ba      	adds	r2, r7, r2
200002c4:	7812      	ldrb	r2, [r2, #0]
200002c6:	2104      	movs	r1, #4
200002c8:	438a      	bics	r2, r1
200002ca:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
200002cc:	4a04      	ldr	r2, [pc, #16]	; (200002e0 <graphic_ctrl_bit_set+0x4c>)
200002ce:	230f      	movs	r3, #15
200002d0:	18fb      	adds	r3, r7, r3
200002d2:	781b      	ldrb	r3, [r3, #0]
200002d4:	7513      	strb	r3, [r2, #20]
}
200002d6:	46c0      	nop			; (mov r8, r8)
200002d8:	46bd      	mov	sp, r7
200002da:	b004      	add	sp, #16
200002dc:	bd80      	pop	{r7, pc}
200002de:	46c0      	nop			; (mov r8, r8)
200002e0:	40021000 	andmi	r1, r2, r0

200002e4 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
200002e4:	b580      	push	{r7, lr}
200002e6:	b084      	sub	sp, #16
200002e8:	af00      	add	r7, sp, #0
200002ea:	0002      	movs	r2, r0
200002ec:	1dfb      	adds	r3, r7, #7
200002ee:	701a      	strb	r2, [r3, #0]
    uint8_t control_register = GPIO_E.odrLow;
200002f0:	4a11      	ldr	r2, [pc, #68]	; (20000338 <graphic_ctrl_bit_clear+0x54>)
200002f2:	230f      	movs	r3, #15
200002f4:	18fb      	adds	r3, r7, r3
200002f6:	7d12      	ldrb	r2, [r2, #20]
200002f8:	701a      	strb	r2, [r3, #0]
    control_register &= (~x);
200002fa:	1dfb      	adds	r3, r7, #7
200002fc:	781b      	ldrb	r3, [r3, #0]
200002fe:	b25b      	sxtb	r3, r3
20000300:	43db      	mvns	r3, r3
20000302:	b25b      	sxtb	r3, r3
20000304:	220f      	movs	r2, #15
20000306:	18ba      	adds	r2, r7, r2
20000308:	7812      	ldrb	r2, [r2, #0]
2000030a:	b252      	sxtb	r2, r2
2000030c:	4013      	ands	r3, r2
2000030e:	b25a      	sxtb	r2, r3
20000310:	230f      	movs	r3, #15
20000312:	18fb      	adds	r3, r7, r3
20000314:	701a      	strb	r2, [r3, #0]
    control_register &= ~B_SELECT;
20000316:	230f      	movs	r3, #15
20000318:	18fb      	adds	r3, r7, r3
2000031a:	220f      	movs	r2, #15
2000031c:	18ba      	adds	r2, r7, r2
2000031e:	7812      	ldrb	r2, [r2, #0]
20000320:	2104      	movs	r1, #4
20000322:	438a      	bics	r2, r1
20000324:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
20000326:	4a04      	ldr	r2, [pc, #16]	; (20000338 <graphic_ctrl_bit_clear+0x54>)
20000328:	230f      	movs	r3, #15
2000032a:	18fb      	adds	r3, r7, r3
2000032c:	781b      	ldrb	r3, [r3, #0]
2000032e:	7513      	strb	r3, [r2, #20]
}
20000330:	46c0      	nop			; (mov r8, r8)
20000332:	46bd      	mov	sp, r7
20000334:	b004      	add	sp, #16
20000336:	bd80      	pop	{r7, pc}
20000338:	40021000 	andmi	r1, r2, r0

2000033c <select_controller>:

void select_controller(uint8_t controller){
2000033c:	b580      	push	{r7, lr}
2000033e:	b082      	sub	sp, #8
20000340:	af00      	add	r7, sp, #0
20000342:	0002      	movs	r2, r0
20000344:	1dfb      	adds	r3, r7, #7
20000346:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000348:	1dfb      	adds	r3, r7, #7
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	2b08      	cmp	r3, #8
2000034e:	d00c      	beq.n	2000036a <select_controller+0x2e>
20000350:	dc02      	bgt.n	20000358 <select_controller+0x1c>
20000352:	2b00      	cmp	r3, #0
20000354:	d005      	beq.n	20000362 <select_controller+0x26>
            break;
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
    }
}
20000356:	e01a      	b.n	2000038e <select_controller+0x52>
    switch(controller){
20000358:	2b10      	cmp	r3, #16
2000035a:	d00d      	beq.n	20000378 <select_controller+0x3c>
2000035c:	2b18      	cmp	r3, #24
2000035e:	d012      	beq.n	20000386 <select_controller+0x4a>
}
20000360:	e015      	b.n	2000038e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
20000362:	2018      	movs	r0, #24
20000364:	f7ff ffbe 	bl	200002e4 <graphic_ctrl_bit_clear>
            break;
20000368:	e011      	b.n	2000038e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS2);
2000036a:	2010      	movs	r0, #16
2000036c:	f7ff ffba 	bl	200002e4 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS1);
20000370:	2008      	movs	r0, #8
20000372:	f7ff ff8f 	bl	20000294 <graphic_ctrl_bit_set>
            break;
20000376:	e00a      	b.n	2000038e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000378:	2008      	movs	r0, #8
2000037a:	f7ff ffb3 	bl	200002e4 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
2000037e:	2010      	movs	r0, #16
20000380:	f7ff ff88 	bl	20000294 <graphic_ctrl_bit_set>
            break;
20000384:	e003      	b.n	2000038e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
20000386:	2018      	movs	r0, #24
20000388:	f7ff ff84 	bl	20000294 <graphic_ctrl_bit_set>
            break;
2000038c:	46c0      	nop			; (mov r8, r8)
}
2000038e:	46c0      	nop			; (mov r8, r8)
20000390:	46bd      	mov	sp, r7
20000392:	b002      	add	sp, #8
20000394:	bd80      	pop	{r7, pc}

20000396 <graphic_wait_ready>:

void graphic_wait_ready(void){
20000396:	b580      	push	{r7, lr}
20000398:	b082      	sub	sp, #8
2000039a:	af00      	add	r7, sp, #0
    uint8_t display_busy_status;
    // Enable = 0
    graphic_ctrl_bit_clear(B_E);
2000039c:	2040      	movs	r0, #64	; 0x40
2000039e:	f7ff ffa1 	bl	200002e4 <graphic_ctrl_bit_clear>
    // E: 15-8 = input, 7-0 = output
    GPIO_E.moder = 0x00005555;
200003a2:	4b17      	ldr	r3, [pc, #92]	; (20000400 <graphic_wait_ready+0x6a>)
200003a4:	4a17      	ldr	r2, [pc, #92]	; (20000404 <graphic_wait_ready+0x6e>)
200003a6:	601a      	str	r2, [r3, #0]
    
    // RS = 0, RW = 1
    graphic_ctrl_bit_clear(B_RS);
200003a8:	2001      	movs	r0, #1
200003aa:	f7ff ff9b 	bl	200002e4 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
200003ae:	2002      	movs	r0, #2
200003b0:	f7ff ff70 	bl	20000294 <graphic_ctrl_bit_set>
    delay_500ns();
200003b4:	f7ff ff40 	bl	20000238 <delay_500ns>
    
    while(1){
        // Enable = 1
        graphic_ctrl_bit_set(B_E);
200003b8:	2040      	movs	r0, #64	; 0x40
200003ba:	f7ff ff6b 	bl	20000294 <graphic_ctrl_bit_set>
        delay_500ns();
200003be:	f7ff ff3b 	bl	20000238 <delay_500ns>
        // Enable = 0
		display_busy_status = GPIO_E.idrHigh;
200003c2:	4a0f      	ldr	r2, [pc, #60]	; (20000400 <graphic_wait_ready+0x6a>)
200003c4:	1dfb      	adds	r3, r7, #7
200003c6:	7c52      	ldrb	r2, [r2, #17]
200003c8:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
200003ca:	2040      	movs	r0, #64	; 0x40
200003cc:	f7ff ff8a 	bl	200002e4 <graphic_ctrl_bit_clear>
        delay_500ns();
200003d0:	f7ff ff32 	bl	20000238 <delay_500ns>
        // Exit loop if not busy
        
		display_busy_status &= LCD_BUSY;
200003d4:	1dfb      	adds	r3, r7, #7
200003d6:	1dfa      	adds	r2, r7, #7
200003d8:	7812      	ldrb	r2, [r2, #0]
200003da:	217f      	movs	r1, #127	; 0x7f
200003dc:	438a      	bics	r2, r1
200003de:	701a      	strb	r2, [r3, #0]
        if(display_busy_status == 0){
200003e0:	1dfb      	adds	r3, r7, #7
200003e2:	781b      	ldrb	r3, [r3, #0]
200003e4:	2b00      	cmp	r3, #0
200003e6:	d000      	beq.n	200003ea <graphic_wait_ready+0x54>
        graphic_ctrl_bit_set(B_E);
200003e8:	e7e6      	b.n	200003b8 <graphic_wait_ready+0x22>
            break;
200003ea:	46c0      	nop			; (mov r8, r8)
        } 
    }
    
    // Enable = 1
    graphic_ctrl_bit_set(B_E); // Commented out to check if this works because it works for NaN
200003ec:	2040      	movs	r0, #64	; 0x40
200003ee:	f7ff ff51 	bl	20000294 <graphic_ctrl_bit_set>
    // E: 15-0 = output
    GPIO_E.moder = 0x55555555;
200003f2:	4b03      	ldr	r3, [pc, #12]	; (20000400 <graphic_wait_ready+0x6a>)
200003f4:	4a04      	ldr	r2, [pc, #16]	; (20000408 <graphic_wait_ready+0x72>)
200003f6:	601a      	str	r2, [r3, #0]
}
200003f8:	46c0      	nop			; (mov r8, r8)
200003fa:	46bd      	mov	sp, r7
200003fc:	b002      	add	sp, #8
200003fe:	bd80      	pop	{r7, pc}
20000400:	40021000 	andmi	r1, r2, r0
20000404:	00005555 	andeq	r5, r0, r5, asr r5
20000408:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000040c <graphic_read>:

uint8_t graphic_read(uint8_t controller){
2000040c:	b580      	push	{r7, lr}
2000040e:	b084      	sub	sp, #16
20000410:	af00      	add	r7, sp, #0
20000412:	0002      	movs	r2, r0
20000414:	1dfb      	adds	r3, r7, #7
20000416:	701a      	strb	r2, [r3, #0]
	//Set enable to 0
	graphic_ctrl_bit_clear(B_E);
20000418:	2040      	movs	r0, #64	; 0x40
2000041a:	f7ff ff63 	bl	200002e4 <graphic_ctrl_bit_clear>
	
	//set E to input high byte / output low byte
	GPIO_E.moder = 0x00005555;
2000041e:	4b1c      	ldr	r3, [pc, #112]	; (20000490 <graphic_read+0x84>)
20000420:	4a1c      	ldr	r2, [pc, #112]	; (20000494 <graphic_read+0x88>)
20000422:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_RS | B_RW);
20000424:	2003      	movs	r0, #3
20000426:	f7ff ff35 	bl	20000294 <graphic_ctrl_bit_set>
	
	select_controller(controller);
2000042a:	1dfb      	adds	r3, r7, #7
2000042c:	781b      	ldrb	r3, [r3, #0]
2000042e:	0018      	movs	r0, r3
20000430:	f7ff ff84 	bl	2000033c <select_controller>
	delay_500ns();
20000434:	f7ff ff00 	bl	20000238 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
20000438:	2040      	movs	r0, #64	; 0x40
2000043a:	f7ff ff2b 	bl	20000294 <graphic_ctrl_bit_set>
	delay_500ns();
2000043e:	f7ff fefb 	bl	20000238 <delay_500ns>
	
	// set return value to what is on the data register
	uint8_t RV = GPIO_E.idrHigh;
20000442:	4a13      	ldr	r2, [pc, #76]	; (20000490 <graphic_read+0x84>)
20000444:	230f      	movs	r3, #15
20000446:	18fb      	adds	r3, r7, r3
20000448:	7c52      	ldrb	r2, [r2, #17]
2000044a:	701a      	strb	r2, [r3, #0]
	
	graphic_ctrl_bit_clear(B_E);
2000044c:	2040      	movs	r0, #64	; 0x40
2000044e:	f7ff ff49 	bl	200002e4 <graphic_ctrl_bit_clear>
	
	//set E to output
	GPIO_E.moder = 0x55555555;
20000452:	4b0f      	ldr	r3, [pc, #60]	; (20000490 <graphic_read+0x84>)
20000454:	4a10      	ldr	r2, [pc, #64]	; (20000498 <graphic_read+0x8c>)
20000456:	601a      	str	r2, [r3, #0]
	
	if((controller & B_CS1) != 0) {
20000458:	1dfb      	adds	r3, r7, #7
2000045a:	781b      	ldrb	r3, [r3, #0]
2000045c:	2208      	movs	r2, #8
2000045e:	4013      	ands	r3, r2
20000460:	d004      	beq.n	2000046c <graphic_read+0x60>
		select_controller(B_CS1);
20000462:	2008      	movs	r0, #8
20000464:	f7ff ff6a 	bl	2000033c <select_controller>
		graphic_wait_ready();
20000468:	f7ff ff95 	bl	20000396 <graphic_wait_ready>
	}
	if((controller & B_CS2) != 0){
2000046c:	1dfb      	adds	r3, r7, #7
2000046e:	781b      	ldrb	r3, [r3, #0]
20000470:	2210      	movs	r2, #16
20000472:	4013      	ands	r3, r2
20000474:	d004      	beq.n	20000480 <graphic_read+0x74>
		select_controller(B_CS2);
20000476:	2010      	movs	r0, #16
20000478:	f7ff ff60 	bl	2000033c <select_controller>
		graphic_wait_ready();
2000047c:	f7ff ff8b 	bl	20000396 <graphic_wait_ready>
		//case B_CS1 | B_CS2: select_controller(B_CS1 | B_CS2); break;
		//default: select_controller(0);
	}*/
	//graphic_wait_ready();
	
	return RV;
20000480:	230f      	movs	r3, #15
20000482:	18fb      	adds	r3, r7, r3
20000484:	781b      	ldrb	r3, [r3, #0]
}
20000486:	0018      	movs	r0, r3
20000488:	46bd      	mov	sp, r7
2000048a:	b004      	add	sp, #16
2000048c:	bd80      	pop	{r7, pc}
2000048e:	46c0      	nop			; (mov r8, r8)
20000490:	40021000 	andmi	r1, r2, r0
20000494:	00005555 	andeq	r5, r0, r5, asr r5
20000498:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000049c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
2000049c:	b580      	push	{r7, lr}
2000049e:	b082      	sub	sp, #8
200004a0:	af00      	add	r7, sp, #0
200004a2:	0002      	movs	r2, r0
200004a4:	1dfb      	adds	r3, r7, #7
200004a6:	701a      	strb	r2, [r3, #0]
200004a8:	1dbb      	adds	r3, r7, #6
200004aa:	1c0a      	adds	r2, r1, #0
200004ac:	701a      	strb	r2, [r3, #0]
	//datareg to value
	GPIO_E.odrHigh = value;
200004ae:	4a1a      	ldr	r2, [pc, #104]	; (20000518 <graphic_write+0x7c>)
200004b0:	1dfb      	adds	r3, r7, #7
200004b2:	781b      	ldrb	r3, [r3, #0]
200004b4:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
200004b6:	1dbb      	adds	r3, r7, #6
200004b8:	781b      	ldrb	r3, [r3, #0]
200004ba:	0018      	movs	r0, r3
200004bc:	f7ff ff3e 	bl	2000033c <select_controller>
	delay_500ns();
200004c0:	f7ff feba 	bl	20000238 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
200004c4:	2040      	movs	r0, #64	; 0x40
200004c6:	f7ff fee5 	bl	20000294 <graphic_ctrl_bit_set>
	delay_500ns();
200004ca:	f7ff feb5 	bl	20000238 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200004ce:	2040      	movs	r0, #64	; 0x40
200004d0:	f7ff ff08 	bl	200002e4 <graphic_ctrl_bit_clear>
	
	//select actual controller, wait while we read
	if (controller & B_CS1){
200004d4:	1dbb      	adds	r3, r7, #6
200004d6:	781b      	ldrb	r3, [r3, #0]
200004d8:	2208      	movs	r2, #8
200004da:	4013      	ands	r3, r2
200004dc:	d004      	beq.n	200004e8 <graphic_write+0x4c>
		select_controller(B_CS1);
200004de:	2008      	movs	r0, #8
200004e0:	f7ff ff2c 	bl	2000033c <select_controller>
		graphic_wait_ready();
200004e4:	f7ff ff57 	bl	20000396 <graphic_wait_ready>
	}
	if (controller & B_CS2){
200004e8:	1dbb      	adds	r3, r7, #6
200004ea:	781b      	ldrb	r3, [r3, #0]
200004ec:	2210      	movs	r2, #16
200004ee:	4013      	ands	r3, r2
200004f0:	d004      	beq.n	200004fc <graphic_write+0x60>
		select_controller(B_CS2);
200004f2:	2010      	movs	r0, #16
200004f4:	f7ff ff22 	bl	2000033c <select_controller>
		graphic_wait_ready();
200004f8:	f7ff ff4d 	bl	20000396 <graphic_wait_ready>
	}
	
	//datareg to 0
	GPIO_E.odrHigh = 0;
200004fc:	4b06      	ldr	r3, [pc, #24]	; (20000518 <graphic_write+0x7c>)
200004fe:	2200      	movs	r2, #0
20000500:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
20000502:	2040      	movs	r0, #64	; 0x40
20000504:	f7ff fec6 	bl	20000294 <graphic_ctrl_bit_set>
	
	//set controller to 0
	select_controller(0);
20000508:	2000      	movs	r0, #0
2000050a:	f7ff ff17 	bl	2000033c <select_controller>
}
2000050e:	46c0      	nop			; (mov r8, r8)
20000510:	46bd      	mov	sp, r7
20000512:	b002      	add	sp, #8
20000514:	bd80      	pop	{r7, pc}
20000516:	46c0      	nop			; (mov r8, r8)
20000518:	40021000 	andmi	r1, r2, r0

2000051c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000051c:	b580      	push	{r7, lr}
2000051e:	b082      	sub	sp, #8
20000520:	af00      	add	r7, sp, #0
20000522:	0002      	movs	r2, r0
20000524:	1dfb      	adds	r3, r7, #7
20000526:	701a      	strb	r2, [r3, #0]
20000528:	1dbb      	adds	r3, r7, #6
2000052a:	1c0a      	adds	r2, r1, #0
2000052c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000052e:	2040      	movs	r0, #64	; 0x40
20000530:	f7ff fed8 	bl	200002e4 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000534:	1dbb      	adds	r3, r7, #6
20000536:	781b      	ldrb	r3, [r3, #0]
20000538:	0018      	movs	r0, r3
2000053a:	f7ff feff 	bl	2000033c <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000053e:	2003      	movs	r0, #3
20000540:	f7ff fed0 	bl	200002e4 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000544:	1dbb      	adds	r3, r7, #6
20000546:	781a      	ldrb	r2, [r3, #0]
20000548:	1dfb      	adds	r3, r7, #7
2000054a:	781b      	ldrb	r3, [r3, #0]
2000054c:	0011      	movs	r1, r2
2000054e:	0018      	movs	r0, r3
20000550:	f7ff ffa4 	bl	2000049c <graphic_write>
}
20000554:	46c0      	nop			; (mov r8, r8)
20000556:	46bd      	mov	sp, r7
20000558:	b002      	add	sp, #8
2000055a:	bd80      	pop	{r7, pc}

2000055c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000055c:	b580      	push	{r7, lr}
2000055e:	b082      	sub	sp, #8
20000560:	af00      	add	r7, sp, #0
20000562:	0002      	movs	r2, r0
20000564:	1dfb      	adds	r3, r7, #7
20000566:	701a      	strb	r2, [r3, #0]
20000568:	1dbb      	adds	r3, r7, #6
2000056a:	1c0a      	adds	r2, r1, #0
2000056c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000056e:	2040      	movs	r0, #64	; 0x40
20000570:	f7ff feb8 	bl	200002e4 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000574:	1dbb      	adds	r3, r7, #6
20000576:	781b      	ldrb	r3, [r3, #0]
20000578:	0018      	movs	r0, r3
2000057a:	f7ff fedf 	bl	2000033c <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000057e:	2001      	movs	r0, #1
20000580:	f7ff fe88 	bl	20000294 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000584:	2002      	movs	r0, #2
20000586:	f7ff fead 	bl	200002e4 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000058a:	1dbb      	adds	r3, r7, #6
2000058c:	781a      	ldrb	r2, [r3, #0]
2000058e:	1dfb      	adds	r3, r7, #7
20000590:	781b      	ldrb	r3, [r3, #0]
20000592:	0011      	movs	r1, r2
20000594:	0018      	movs	r0, r3
20000596:	f7ff ff81 	bl	2000049c <graphic_write>
}
2000059a:	46c0      	nop			; (mov r8, r8)
2000059c:	46bd      	mov	sp, r7
2000059e:	b002      	add	sp, #8
200005a0:	bd80      	pop	{r7, pc}

200005a2 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200005a2:	b580      	push	{r7, lr}
200005a4:	b082      	sub	sp, #8
200005a6:	af00      	add	r7, sp, #0
200005a8:	0002      	movs	r2, r0
200005aa:	1dfb      	adds	r3, r7, #7
200005ac:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
200005ae:	1dfb      	adds	r3, r7, #7
200005b0:	781b      	ldrb	r3, [r3, #0]
200005b2:	0018      	movs	r0, r3
200005b4:	f7ff ff2a 	bl	2000040c <graphic_read>
	return graphic_read(controller);
200005b8:	1dfb      	adds	r3, r7, #7
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	0018      	movs	r0, r3
200005be:	f7ff ff25 	bl	2000040c <graphic_read>
200005c2:	0003      	movs	r3, r0
}
200005c4:	0018      	movs	r0, r3
200005c6:	46bd      	mov	sp, r7
200005c8:	b002      	add	sp, #8
200005ca:	bd80      	pop	{r7, pc}

200005cc <graphic_initialize>:

void graphic_initialize(void){
200005cc:	b580      	push	{r7, lr}
200005ce:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200005d0:	2040      	movs	r0, #64	; 0x40
200005d2:	f7ff fe5f 	bl	20000294 <graphic_ctrl_bit_set>
	
	delay_mikro(10);
200005d6:	200a      	movs	r0, #10
200005d8:	f7ff fe37 	bl	2000024a <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200005dc:	2078      	movs	r0, #120	; 0x78
200005de:	f7ff fe81 	bl	200002e4 <graphic_ctrl_bit_clear>
	
	delay_milli(30);
200005e2:	201e      	movs	r0, #30
200005e4:	f7ff fe46 	bl	20000274 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200005e8:	2020      	movs	r0, #32
200005ea:	f7ff fe53 	bl	20000294 <graphic_ctrl_bit_set>
	
	delay_milli(100); // Added because NaN has it
200005ee:	2064      	movs	r0, #100	; 0x64
200005f0:	f7ff fe40 	bl	20000274 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200005f4:	2118      	movs	r1, #24
200005f6:	203e      	movs	r0, #62	; 0x3e
200005f8:	f7ff ff90 	bl	2000051c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200005fc:	2118      	movs	r1, #24
200005fe:	203f      	movs	r0, #63	; 0x3f
20000600:	f7ff ff8c 	bl	2000051c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000604:	2118      	movs	r1, #24
20000606:	20c0      	movs	r0, #192	; 0xc0
20000608:	f7ff ff88 	bl	2000051c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000060c:	2118      	movs	r1, #24
2000060e:	2040      	movs	r0, #64	; 0x40
20000610:	f7ff ff84 	bl	2000051c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000614:	2118      	movs	r1, #24
20000616:	20b8      	movs	r0, #184	; 0xb8
20000618:	f7ff ff80 	bl	2000051c <graphic_write_command>
	
	select_controller(0);
2000061c:	2000      	movs	r0, #0
2000061e:	f7ff fe8d 	bl	2000033c <select_controller>
}
20000622:	46c0      	nop			; (mov r8, r8)
20000624:	46bd      	mov	sp, r7
20000626:	bd80      	pop	{r7, pc}

20000628 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000628:	b580      	push	{r7, lr}
2000062a:	b082      	sub	sp, #8
2000062c:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++){
2000062e:	1dfb      	adds	r3, r7, #7
20000630:	2200      	movs	r2, #0
20000632:	701a      	strb	r2, [r3, #0]
20000634:	e023      	b.n	2000067e <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000636:	1dfb      	adds	r3, r7, #7
20000638:	781b      	ldrb	r3, [r3, #0]
2000063a:	2248      	movs	r2, #72	; 0x48
2000063c:	4252      	negs	r2, r2
2000063e:	4313      	orrs	r3, r2
20000640:	b2db      	uxtb	r3, r3
20000642:	2118      	movs	r1, #24
20000644:	0018      	movs	r0, r3
20000646:	f7ff ff69 	bl	2000051c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000064a:	2118      	movs	r1, #24
2000064c:	2040      	movs	r0, #64	; 0x40
2000064e:	f7ff ff65 	bl	2000051c <graphic_write_command>
		
		for(uint8_t add = 0; add < 64; add++){
20000652:	1dbb      	adds	r3, r7, #6
20000654:	2200      	movs	r2, #0
20000656:	701a      	strb	r2, [r3, #0]
20000658:	e008      	b.n	2000066c <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
2000065a:	2118      	movs	r1, #24
2000065c:	2000      	movs	r0, #0
2000065e:	f7ff ff7d 	bl	2000055c <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
20000662:	1dbb      	adds	r3, r7, #6
20000664:	781a      	ldrb	r2, [r3, #0]
20000666:	1dbb      	adds	r3, r7, #6
20000668:	3201      	adds	r2, #1
2000066a:	701a      	strb	r2, [r3, #0]
2000066c:	1dbb      	adds	r3, r7, #6
2000066e:	781b      	ldrb	r3, [r3, #0]
20000670:	2b3f      	cmp	r3, #63	; 0x3f
20000672:	d9f2      	bls.n	2000065a <graphic_clear_screen+0x32>
	for(uint8_t page = 0; page < 8; page++){
20000674:	1dfb      	adds	r3, r7, #7
20000676:	781a      	ldrb	r2, [r3, #0]
20000678:	1dfb      	adds	r3, r7, #7
2000067a:	3201      	adds	r2, #1
2000067c:	701a      	strb	r2, [r3, #0]
2000067e:	1dfb      	adds	r3, r7, #7
20000680:	781b      	ldrb	r3, [r3, #0]
20000682:	2b07      	cmp	r3, #7
20000684:	d9d7      	bls.n	20000636 <graphic_clear_screen+0xe>
		}
	}
}
20000686:	46c0      	nop			; (mov r8, r8)
20000688:	46bd      	mov	sp, r7
2000068a:	b002      	add	sp, #8
2000068c:	bd80      	pop	{r7, pc}

2000068e <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
2000068e:	b590      	push	{r4, r7, lr}
20000690:	b085      	sub	sp, #20
20000692:	af00      	add	r7, sp, #0
20000694:	0004      	movs	r4, r0
20000696:	0008      	movs	r0, r1
20000698:	0011      	movs	r1, r2
2000069a:	1dfb      	adds	r3, r7, #7
2000069c:	1c22      	adds	r2, r4, #0
2000069e:	701a      	strb	r2, [r3, #0]
200006a0:	1dbb      	adds	r3, r7, #6
200006a2:	1c02      	adds	r2, r0, #0
200006a4:	701a      	strb	r2, [r3, #0]
200006a6:	1d7b      	adds	r3, r7, #5
200006a8:	1c0a      	adds	r2, r1, #0
200006aa:	701a      	strb	r2, [r3, #0]
    // Validate values for input variables
    if(x < 1 || x > 128){
200006ac:	1dfb      	adds	r3, r7, #7
200006ae:	781b      	ldrb	r3, [r3, #0]
200006b0:	2b00      	cmp	r3, #0
200006b2:	d100      	bne.n	200006b6 <pixel+0x28>
200006b4:	e0b4      	b.n	20000820 <pixel+0x192>
200006b6:	1dfb      	adds	r3, r7, #7
200006b8:	781b      	ldrb	r3, [r3, #0]
200006ba:	2b80      	cmp	r3, #128	; 0x80
200006bc:	d900      	bls.n	200006c0 <pixel+0x32>
200006be:	e0af      	b.n	20000820 <pixel+0x192>
        return;
    }
    if(y < 1 || y > 64){
200006c0:	1dbb      	adds	r3, r7, #6
200006c2:	781b      	ldrb	r3, [r3, #0]
200006c4:	2b00      	cmp	r3, #0
200006c6:	d100      	bne.n	200006ca <pixel+0x3c>
200006c8:	e0ac      	b.n	20000824 <pixel+0x196>
200006ca:	1dbb      	adds	r3, r7, #6
200006cc:	781b      	ldrb	r3, [r3, #0]
200006ce:	2b40      	cmp	r3, #64	; 0x40
200006d0:	d900      	bls.n	200006d4 <pixel+0x46>
200006d2:	e0a7      	b.n	20000824 <pixel+0x196>
        return;
    }
    if(set != 1 && set != 0){
200006d4:	1d7b      	adds	r3, r7, #5
200006d6:	781b      	ldrb	r3, [r3, #0]
200006d8:	2b01      	cmp	r3, #1
200006da:	d004      	beq.n	200006e6 <pixel+0x58>
200006dc:	1d7b      	adds	r3, r7, #5
200006de:	781b      	ldrb	r3, [r3, #0]
200006e0:	2b00      	cmp	r3, #0
200006e2:	d000      	beq.n	200006e6 <pixel+0x58>
200006e4:	e0a0      	b.n	20000828 <pixel+0x19a>
        return;
    }
    
    uint8_t index = (y-1)/8;
200006e6:	1dbb      	adds	r3, r7, #6
200006e8:	781b      	ldrb	r3, [r3, #0]
200006ea:	3b01      	subs	r3, #1
200006ec:	2b00      	cmp	r3, #0
200006ee:	da00      	bge.n	200006f2 <pixel+0x64>
200006f0:	3307      	adds	r3, #7
200006f2:	10db      	asrs	r3, r3, #3
200006f4:	001a      	movs	r2, r3
200006f6:	230c      	movs	r3, #12
200006f8:	18fb      	adds	r3, r7, r3
200006fa:	701a      	strb	r2, [r3, #0]
    // Create mask for y, works as well as switch from book, but with less code
    uint8_t mask = 1;
200006fc:	230f      	movs	r3, #15
200006fe:	18fb      	adds	r3, r7, r3
20000700:	2201      	movs	r2, #1
20000702:	701a      	strb	r2, [r3, #0]
    mask = mask << ((y-1)%8);
20000704:	230f      	movs	r3, #15
20000706:	18fb      	adds	r3, r7, r3
20000708:	781a      	ldrb	r2, [r3, #0]
2000070a:	1dbb      	adds	r3, r7, #6
2000070c:	781b      	ldrb	r3, [r3, #0]
2000070e:	3b01      	subs	r3, #1
20000710:	4947      	ldr	r1, [pc, #284]	; (20000830 <pixel+0x1a2>)
20000712:	400b      	ands	r3, r1
20000714:	d504      	bpl.n	20000720 <pixel+0x92>
20000716:	3b01      	subs	r3, #1
20000718:	2108      	movs	r1, #8
2000071a:	4249      	negs	r1, r1
2000071c:	430b      	orrs	r3, r1
2000071e:	3301      	adds	r3, #1
20000720:	409a      	lsls	r2, r3
20000722:	230f      	movs	r3, #15
20000724:	18fb      	adds	r3, r7, r3
20000726:	701a      	strb	r2, [r3, #0]
		case 6: mask = 0x40; break;
		case 7: mask = 0x80; break;
	}*/
    
    // Invert mask if the bit is going to get cleared
    if(set == 0){
20000728:	1d7b      	adds	r3, r7, #5
2000072a:	781b      	ldrb	r3, [r3, #0]
2000072c:	2b00      	cmp	r3, #0
2000072e:	d106      	bne.n	2000073e <pixel+0xb0>
        mask = ~mask;
20000730:	230f      	movs	r3, #15
20000732:	18fb      	adds	r3, r7, r3
20000734:	220f      	movs	r2, #15
20000736:	18ba      	adds	r2, r7, r2
20000738:	7812      	ldrb	r2, [r2, #0]
2000073a:	43d2      	mvns	r2, r2
2000073c:	701a      	strb	r2, [r3, #0]
    }
    
    uint8_t x_actual;
    uint8_t controller;
    // Select applicable chip (screen half), and store the actual value of x
    if(x > 64){
2000073e:	1dfb      	adds	r3, r7, #7
20000740:	781b      	ldrb	r3, [r3, #0]
20000742:	2b40      	cmp	r3, #64	; 0x40
20000744:	d90a      	bls.n	2000075c <pixel+0xce>
        controller = B_CS2;
20000746:	230d      	movs	r3, #13
20000748:	18fb      	adds	r3, r7, r3
2000074a:	2210      	movs	r2, #16
2000074c:	701a      	strb	r2, [r3, #0]
        x_actual = x - 65;
2000074e:	230e      	movs	r3, #14
20000750:	18fb      	adds	r3, r7, r3
20000752:	1dfa      	adds	r2, r7, #7
20000754:	7812      	ldrb	r2, [r2, #0]
20000756:	3a41      	subs	r2, #65	; 0x41
20000758:	701a      	strb	r2, [r3, #0]
2000075a:	e009      	b.n	20000770 <pixel+0xe2>
    } else {
        controller = B_CS1;
2000075c:	230d      	movs	r3, #13
2000075e:	18fb      	adds	r3, r7, r3
20000760:	2208      	movs	r2, #8
20000762:	701a      	strb	r2, [r3, #0]
        x_actual = x - 1;
20000764:	230e      	movs	r3, #14
20000766:	18fb      	adds	r3, r7, r3
20000768:	1dfa      	adds	r2, r7, #7
2000076a:	7812      	ldrb	r2, [r2, #0]
2000076c:	3a01      	subs	r2, #1
2000076e:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000770:	230e      	movs	r3, #14
20000772:	18fb      	adds	r3, r7, r3
20000774:	781b      	ldrb	r3, [r3, #0]
20000776:	2240      	movs	r2, #64	; 0x40
20000778:	4313      	orrs	r3, r2
2000077a:	b2da      	uxtb	r2, r3
2000077c:	230d      	movs	r3, #13
2000077e:	18fb      	adds	r3, r7, r3
20000780:	781b      	ldrb	r3, [r3, #0]
20000782:	0019      	movs	r1, r3
20000784:	0010      	movs	r0, r2
20000786:	f7ff fec9 	bl	2000051c <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
2000078a:	230c      	movs	r3, #12
2000078c:	18fb      	adds	r3, r7, r3
2000078e:	781b      	ldrb	r3, [r3, #0]
20000790:	2248      	movs	r2, #72	; 0x48
20000792:	4252      	negs	r2, r2
20000794:	4313      	orrs	r3, r2
20000796:	b2da      	uxtb	r2, r3
20000798:	230d      	movs	r3, #13
2000079a:	18fb      	adds	r3, r7, r3
2000079c:	781b      	ldrb	r3, [r3, #0]
2000079e:	0019      	movs	r1, r3
200007a0:	0010      	movs	r0, r2
200007a2:	f7ff febb 	bl	2000051c <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
200007a6:	230b      	movs	r3, #11
200007a8:	18fc      	adds	r4, r7, r3
200007aa:	230d      	movs	r3, #13
200007ac:	18fb      	adds	r3, r7, r3
200007ae:	781b      	ldrb	r3, [r3, #0]
200007b0:	0018      	movs	r0, r3
200007b2:	f7ff fef6 	bl	200005a2 <graphic_read_data>
200007b6:	0003      	movs	r3, r0
200007b8:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
200007ba:	230e      	movs	r3, #14
200007bc:	18fb      	adds	r3, r7, r3
200007be:	781b      	ldrb	r3, [r3, #0]
200007c0:	2240      	movs	r2, #64	; 0x40
200007c2:	4313      	orrs	r3, r2
200007c4:	b2da      	uxtb	r2, r3
200007c6:	230d      	movs	r3, #13
200007c8:	18fb      	adds	r3, r7, r3
200007ca:	781b      	ldrb	r3, [r3, #0]
200007cc:	0019      	movs	r1, r3
200007ce:	0010      	movs	r0, r2
200007d0:	f7ff fea4 	bl	2000051c <graphic_write_command>
    if(set == 1){
200007d4:	1d7b      	adds	r3, r7, #5
200007d6:	781b      	ldrb	r3, [r3, #0]
200007d8:	2b01      	cmp	r3, #1
200007da:	d10a      	bne.n	200007f2 <pixel+0x164>
        mask |= temp;
200007dc:	230f      	movs	r3, #15
200007de:	18fb      	adds	r3, r7, r3
200007e0:	220f      	movs	r2, #15
200007e2:	18b9      	adds	r1, r7, r2
200007e4:	220b      	movs	r2, #11
200007e6:	18ba      	adds	r2, r7, r2
200007e8:	7809      	ldrb	r1, [r1, #0]
200007ea:	7812      	ldrb	r2, [r2, #0]
200007ec:	430a      	orrs	r2, r1
200007ee:	701a      	strb	r2, [r3, #0]
200007f0:	e009      	b.n	20000806 <pixel+0x178>
    } else {
        mask &= temp;
200007f2:	230f      	movs	r3, #15
200007f4:	18fb      	adds	r3, r7, r3
200007f6:	220f      	movs	r2, #15
200007f8:	18ba      	adds	r2, r7, r2
200007fa:	210b      	movs	r1, #11
200007fc:	1879      	adds	r1, r7, r1
200007fe:	7812      	ldrb	r2, [r2, #0]
20000800:	7809      	ldrb	r1, [r1, #0]
20000802:	400a      	ands	r2, r1
20000804:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
20000806:	230d      	movs	r3, #13
20000808:	18fb      	adds	r3, r7, r3
2000080a:	781a      	ldrb	r2, [r3, #0]
2000080c:	230f      	movs	r3, #15
2000080e:	18fb      	adds	r3, r7, r3
20000810:	781b      	ldrb	r3, [r3, #0]
20000812:	0011      	movs	r1, r2
20000814:	0018      	movs	r0, r3
20000816:	f7ff fea1 	bl	2000055c <graphic_write_data>
	delay_500ns();
2000081a:	f7ff fd0d 	bl	20000238 <delay_500ns>
2000081e:	e004      	b.n	2000082a <pixel+0x19c>
        return;
20000820:	46c0      	nop			; (mov r8, r8)
20000822:	e002      	b.n	2000082a <pixel+0x19c>
        return;
20000824:	46c0      	nop			; (mov r8, r8)
20000826:	e000      	b.n	2000082a <pixel+0x19c>
        return;
20000828:	46c0      	nop			; (mov r8, r8)
}
2000082a:	46bd      	mov	sp, r7
2000082c:	b005      	add	sp, #20
2000082e:	bd90      	pop	{r4, r7, pc}
20000830:	80000007 	andhi	r0, r0, r7

20000834 <draw_object>:

void draw_object(POBJECT object){
20000834:	b580      	push	{r7, lr}
20000836:	b084      	sub	sp, #16
20000838:	af00      	add	r7, sp, #0
2000083a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
2000083c:	2300      	movs	r3, #0
2000083e:	60fb      	str	r3, [r7, #12]
20000840:	e020      	b.n	20000884 <draw_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 1);
20000842:	687b      	ldr	r3, [r7, #4]
20000844:	681a      	ldr	r2, [r3, #0]
20000846:	68fb      	ldr	r3, [r7, #12]
20000848:	3304      	adds	r3, #4
2000084a:	005b      	lsls	r3, r3, #1
2000084c:	18d3      	adds	r3, r2, r3
2000084e:	3304      	adds	r3, #4
20000850:	781a      	ldrb	r2, [r3, #0]
20000852:	687b      	ldr	r3, [r7, #4]
20000854:	68db      	ldr	r3, [r3, #12]
20000856:	b2db      	uxtb	r3, r3
20000858:	18d3      	adds	r3, r2, r3
2000085a:	b2d8      	uxtb	r0, r3
2000085c:	687b      	ldr	r3, [r7, #4]
2000085e:	681a      	ldr	r2, [r3, #0]
20000860:	68fb      	ldr	r3, [r7, #12]
20000862:	3304      	adds	r3, #4
20000864:	005b      	lsls	r3, r3, #1
20000866:	18d3      	adds	r3, r2, r3
20000868:	3305      	adds	r3, #5
2000086a:	781a      	ldrb	r2, [r3, #0]
2000086c:	687b      	ldr	r3, [r7, #4]
2000086e:	691b      	ldr	r3, [r3, #16]
20000870:	b2db      	uxtb	r3, r3
20000872:	18d3      	adds	r3, r2, r3
20000874:	b2db      	uxtb	r3, r3
20000876:	2201      	movs	r2, #1
20000878:	0019      	movs	r1, r3
2000087a:	f7ff ff08 	bl	2000068e <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
2000087e:	68fb      	ldr	r3, [r7, #12]
20000880:	3301      	adds	r3, #1
20000882:	60fb      	str	r3, [r7, #12]
20000884:	687b      	ldr	r3, [r7, #4]
20000886:	681b      	ldr	r3, [r3, #0]
20000888:	681a      	ldr	r2, [r3, #0]
2000088a:	68fb      	ldr	r3, [r7, #12]
2000088c:	429a      	cmp	r2, r3
2000088e:	dcd8      	bgt.n	20000842 <draw_object+0xe>
	}
}
20000890:	46c0      	nop			; (mov r8, r8)
20000892:	46bd      	mov	sp, r7
20000894:	b004      	add	sp, #16
20000896:	bd80      	pop	{r7, pc}

20000898 <clear_object>:

void clear_object(POBJECT object){
20000898:	b580      	push	{r7, lr}
2000089a:	b084      	sub	sp, #16
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
200008a0:	2300      	movs	r3, #0
200008a2:	60fb      	str	r3, [r7, #12]
200008a4:	e020      	b.n	200008e8 <clear_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 0);
200008a6:	687b      	ldr	r3, [r7, #4]
200008a8:	681a      	ldr	r2, [r3, #0]
200008aa:	68fb      	ldr	r3, [r7, #12]
200008ac:	3304      	adds	r3, #4
200008ae:	005b      	lsls	r3, r3, #1
200008b0:	18d3      	adds	r3, r2, r3
200008b2:	3304      	adds	r3, #4
200008b4:	781a      	ldrb	r2, [r3, #0]
200008b6:	687b      	ldr	r3, [r7, #4]
200008b8:	68db      	ldr	r3, [r3, #12]
200008ba:	b2db      	uxtb	r3, r3
200008bc:	18d3      	adds	r3, r2, r3
200008be:	b2d8      	uxtb	r0, r3
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	681a      	ldr	r2, [r3, #0]
200008c4:	68fb      	ldr	r3, [r7, #12]
200008c6:	3304      	adds	r3, #4
200008c8:	005b      	lsls	r3, r3, #1
200008ca:	18d3      	adds	r3, r2, r3
200008cc:	3305      	adds	r3, #5
200008ce:	781a      	ldrb	r2, [r3, #0]
200008d0:	687b      	ldr	r3, [r7, #4]
200008d2:	691b      	ldr	r3, [r3, #16]
200008d4:	b2db      	uxtb	r3, r3
200008d6:	18d3      	adds	r3, r2, r3
200008d8:	b2db      	uxtb	r3, r3
200008da:	2200      	movs	r2, #0
200008dc:	0019      	movs	r1, r3
200008de:	f7ff fed6 	bl	2000068e <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
200008e2:	68fb      	ldr	r3, [r7, #12]
200008e4:	3301      	adds	r3, #1
200008e6:	60fb      	str	r3, [r7, #12]
200008e8:	687b      	ldr	r3, [r7, #4]
200008ea:	681b      	ldr	r3, [r3, #0]
200008ec:	681a      	ldr	r2, [r3, #0]
200008ee:	68fb      	ldr	r3, [r7, #12]
200008f0:	429a      	cmp	r2, r3
200008f2:	dcd8      	bgt.n	200008a6 <clear_object+0xe>
	}
}
200008f4:	46c0      	nop			; (mov r8, r8)
200008f6:	46bd      	mov	sp, r7
200008f8:	b004      	add	sp, #16
200008fa:	bd80      	pop	{r7, pc}

200008fc <move_object>:

void move_object(POBJECT object){
200008fc:	b580      	push	{r7, lr}
200008fe:	b082      	sub	sp, #8
20000900:	af00      	add	r7, sp, #0
20000902:	6078      	str	r0, [r7, #4]
	clear_object(object);
20000904:	687b      	ldr	r3, [r7, #4]
20000906:	0018      	movs	r0, r3
20000908:	f7ff ffc6 	bl	20000898 <clear_object>
	object->pos_x += object->dir_x;
2000090c:	687b      	ldr	r3, [r7, #4]
2000090e:	68da      	ldr	r2, [r3, #12]
20000910:	687b      	ldr	r3, [r7, #4]
20000912:	685b      	ldr	r3, [r3, #4]
20000914:	18d2      	adds	r2, r2, r3
20000916:	687b      	ldr	r3, [r7, #4]
20000918:	60da      	str	r2, [r3, #12]
	object->pos_y += object->dir_y;
2000091a:	687b      	ldr	r3, [r7, #4]
2000091c:	691a      	ldr	r2, [r3, #16]
2000091e:	687b      	ldr	r3, [r7, #4]
20000920:	689b      	ldr	r3, [r3, #8]
20000922:	18d2      	adds	r2, r2, r3
20000924:	687b      	ldr	r3, [r7, #4]
20000926:	611a      	str	r2, [r3, #16]
	
	//bounce if object reaches edges of screen
	if (object->pos_x < 1 || (object->pos_x + object->geo->size_x) > 128){
20000928:	687b      	ldr	r3, [r7, #4]
2000092a:	68db      	ldr	r3, [r3, #12]
2000092c:	2b00      	cmp	r3, #0
2000092e:	dd07      	ble.n	20000940 <move_object+0x44>
20000930:	687b      	ldr	r3, [r7, #4]
20000932:	68da      	ldr	r2, [r3, #12]
20000934:	687b      	ldr	r3, [r7, #4]
20000936:	681b      	ldr	r3, [r3, #0]
20000938:	685b      	ldr	r3, [r3, #4]
2000093a:	18d3      	adds	r3, r2, r3
2000093c:	2b80      	cmp	r3, #128	; 0x80
2000093e:	dd04      	ble.n	2000094a <move_object+0x4e>
		object->dir_x = -object->dir_x;
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	685b      	ldr	r3, [r3, #4]
20000944:	425a      	negs	r2, r3
20000946:	687b      	ldr	r3, [r7, #4]
20000948:	605a      	str	r2, [r3, #4]
	}
	if (object->pos_y < 1 || (object->pos_y + object->geo->size_y) > 64){
2000094a:	687b      	ldr	r3, [r7, #4]
2000094c:	691b      	ldr	r3, [r3, #16]
2000094e:	2b00      	cmp	r3, #0
20000950:	dd07      	ble.n	20000962 <move_object+0x66>
20000952:	687b      	ldr	r3, [r7, #4]
20000954:	691a      	ldr	r2, [r3, #16]
20000956:	687b      	ldr	r3, [r7, #4]
20000958:	681b      	ldr	r3, [r3, #0]
2000095a:	689b      	ldr	r3, [r3, #8]
2000095c:	18d3      	adds	r3, r2, r3
2000095e:	2b40      	cmp	r3, #64	; 0x40
20000960:	dd04      	ble.n	2000096c <move_object+0x70>
		object->dir_y = -object->dir_y;
20000962:	687b      	ldr	r3, [r7, #4]
20000964:	689b      	ldr	r3, [r3, #8]
20000966:	425a      	negs	r2, r3
20000968:	687b      	ldr	r3, [r7, #4]
2000096a:	609a      	str	r2, [r3, #8]
	}
	
	draw_object(object);
2000096c:	687b      	ldr	r3, [r7, #4]
2000096e:	0018      	movs	r0, r3
20000970:	f7ff ff60 	bl	20000834 <draw_object>
}
20000974:	46c0      	nop			; (mov r8, r8)
20000976:	46bd      	mov	sp, r7
20000978:	b002      	add	sp, #8
2000097a:	bd80      	pop	{r7, pc}

2000097c <set_object_speed>:

void set_object_speed(POBJECT object, int x, int y){
2000097c:	b580      	push	{r7, lr}
2000097e:	b084      	sub	sp, #16
20000980:	af00      	add	r7, sp, #0
20000982:	60f8      	str	r0, [r7, #12]
20000984:	60b9      	str	r1, [r7, #8]
20000986:	607a      	str	r2, [r7, #4]
	object->dir_x = x;
20000988:	68fb      	ldr	r3, [r7, #12]
2000098a:	68ba      	ldr	r2, [r7, #8]
2000098c:	605a      	str	r2, [r3, #4]
	object->dir_y = y;
2000098e:	68fb      	ldr	r3, [r7, #12]
20000990:	687a      	ldr	r2, [r7, #4]
20000992:	609a      	str	r2, [r3, #8]
}
20000994:	46c0      	nop			; (mov r8, r8)
20000996:	46bd      	mov	sp, r7
20000998:	b004      	add	sp, #16
2000099a:	bd80      	pop	{r7, pc}

2000099c <init_app>:

void init_app(void){
2000099c:	b580      	push	{r7, lr}
2000099e:	af00      	add	r7, sp, #0
	#ifdef USBDM
	*((unsigned long*) 0x40023830) = 0x18;
200009a0:	4b06      	ldr	r3, [pc, #24]	; (200009bc <init_app+0x20>)
200009a2:	2218      	movs	r2, #24
200009a4:	601a      	str	r2, [r3, #0]
	__asm volatile( 
200009a6:	4808      	ldr	r0, [pc, #32]	; (200009c8 <init_app+0x2c>)
200009a8:	4780      	blx	r0
		" LDR R0, =0x08000209\n"
		" BLX R0\n"
		);
#endif
	//port E is output
	GPIO_E.moder = 0x55555555;
200009aa:	4b05      	ldr	r3, [pc, #20]	; (200009c0 <init_app+0x24>)
200009ac:	4a05      	ldr	r2, [pc, #20]	; (200009c4 <init_app+0x28>)
200009ae:	601a      	str	r2, [r3, #0]
	GPIO_E.ospeedr = 0x55555555;
200009b0:	4b03      	ldr	r3, [pc, #12]	; (200009c0 <init_app+0x24>)
200009b2:	4a04      	ldr	r2, [pc, #16]	; (200009c4 <init_app+0x28>)
200009b4:	609a      	str	r2, [r3, #8]
200009b6:	46c0      	nop			; (mov r8, r8)
200009b8:	46bd      	mov	sp, r7
200009ba:	bd80      	pop	{r7, pc}
200009bc:	40023830 	andmi	r3, r2, r0, lsr r8
200009c0:	40021000 	andmi	r1, r2, r0
200009c4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200009c8:	08000209 	stmdaeq	r0, {r0, r3, r9}

200009cc <keyboard_init>:
200009cc:	b580      	push	{r7, lr}
200009ce:	af00      	add	r7, sp, #0
200009d0:	4b10      	ldr	r3, [pc, #64]	; (20000a14 <keyboard_init+0x48>)
200009d2:	4a11      	ldr	r2, [pc, #68]	; (20000a18 <keyboard_init+0x4c>)
200009d4:	601a      	str	r2, [r3, #0]
200009d6:	4b0f      	ldr	r3, [pc, #60]	; (20000a14 <keyboard_init+0x48>)
200009d8:	4a0e      	ldr	r2, [pc, #56]	; (20000a14 <keyboard_init+0x48>)
200009da:	6852      	ldr	r2, [r2, #4]
200009dc:	21ff      	movs	r1, #255	; 0xff
200009de:	400a      	ands	r2, r1
200009e0:	605a      	str	r2, [r3, #4]
200009e2:	4b0c      	ldr	r3, [pc, #48]	; (20000a14 <keyboard_init+0x48>)
200009e4:	4a0b      	ldr	r2, [pc, #44]	; (20000a14 <keyboard_init+0x48>)
200009e6:	6852      	ldr	r2, [r2, #4]
200009e8:	605a      	str	r2, [r3, #4]
200009ea:	4b0a      	ldr	r3, [pc, #40]	; (20000a14 <keyboard_init+0x48>)
200009ec:	4a09      	ldr	r2, [pc, #36]	; (20000a14 <keyboard_init+0x48>)
200009ee:	68d2      	ldr	r2, [r2, #12]
200009f0:	0412      	lsls	r2, r2, #16
200009f2:	0c12      	lsrs	r2, r2, #16
200009f4:	60da      	str	r2, [r3, #12]
200009f6:	4b07      	ldr	r3, [pc, #28]	; (20000a14 <keyboard_init+0x48>)
200009f8:	4a06      	ldr	r2, [pc, #24]	; (20000a14 <keyboard_init+0x48>)
200009fa:	68d2      	ldr	r2, [r2, #12]
200009fc:	21aa      	movs	r1, #170	; 0xaa
200009fe:	0409      	lsls	r1, r1, #16
20000a00:	430a      	orrs	r2, r1
20000a02:	60da      	str	r2, [r3, #12]
20000a04:	4b03      	ldr	r3, [pc, #12]	; (20000a14 <keyboard_init+0x48>)
20000a06:	4a03      	ldr	r2, [pc, #12]	; (20000a14 <keyboard_init+0x48>)
20000a08:	7d52      	ldrb	r2, [r2, #21]
20000a0a:	b2d2      	uxtb	r2, r2
20000a0c:	755a      	strb	r2, [r3, #21]
20000a0e:	46c0      	nop			; (mov r8, r8)
20000a10:	46bd      	mov	sp, r7
20000a12:	bd80      	pop	{r7, pc}
20000a14:	40020c00 	andmi	r0, r2, r0, lsl #24
20000a18:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab

20000a1c <keyb>:
20000a1c:	b580      	push	{r7, lr}
20000a1e:	b082      	sub	sp, #8
20000a20:	af00      	add	r7, sp, #0
20000a22:	1dfb      	adds	r3, r7, #7
20000a24:	2201      	movs	r2, #1
20000a26:	701a      	strb	r2, [r3, #0]
20000a28:	e020      	b.n	20000a6c <keyb+0x50>
20000a2a:	1dfb      	adds	r3, r7, #7
20000a2c:	781b      	ldrb	r3, [r3, #0]
20000a2e:	0018      	movs	r0, r3
20000a30:	f000 f82a 	bl	20000a88 <ActivateRow>
20000a34:	f000 f854 	bl	20000ae0 <ReadColumn>
20000a38:	0002      	movs	r2, r0
20000a3a:	1dbb      	adds	r3, r7, #6
20000a3c:	701a      	strb	r2, [r3, #0]
20000a3e:	1dbb      	adds	r3, r7, #6
20000a40:	781b      	ldrb	r3, [r3, #0]
20000a42:	2b00      	cmp	r3, #0
20000a44:	d00d      	beq.n	20000a62 <keyb+0x46>
20000a46:	2000      	movs	r0, #0
20000a48:	f000 f81e 	bl	20000a88 <ActivateRow>
20000a4c:	1dfb      	adds	r3, r7, #7
20000a4e:	781b      	ldrb	r3, [r3, #0]
20000a50:	1e5a      	subs	r2, r3, #1
20000a52:	1dbb      	adds	r3, r7, #6
20000a54:	781b      	ldrb	r3, [r3, #0]
20000a56:	3b01      	subs	r3, #1
20000a58:	490a      	ldr	r1, [pc, #40]	; (20000a84 <keyb+0x68>)
20000a5a:	0092      	lsls	r2, r2, #2
20000a5c:	188a      	adds	r2, r1, r2
20000a5e:	5cd3      	ldrb	r3, [r2, r3]
20000a60:	e00c      	b.n	20000a7c <keyb+0x60>
20000a62:	1dfb      	adds	r3, r7, #7
20000a64:	781a      	ldrb	r2, [r3, #0]
20000a66:	1dfb      	adds	r3, r7, #7
20000a68:	3201      	adds	r2, #1
20000a6a:	701a      	strb	r2, [r3, #0]
20000a6c:	1dfb      	adds	r3, r7, #7
20000a6e:	781b      	ldrb	r3, [r3, #0]
20000a70:	2b04      	cmp	r3, #4
20000a72:	d9da      	bls.n	20000a2a <keyb+0xe>
20000a74:	2000      	movs	r0, #0
20000a76:	f000 f807 	bl	20000a88 <ActivateRow>
20000a7a:	23ff      	movs	r3, #255	; 0xff
20000a7c:	0018      	movs	r0, r3
20000a7e:	46bd      	mov	sp, r7
20000a80:	b002      	add	sp, #8
20000a82:	bd80      	pop	{r7, pc}
20000a84:	20000b54 	andcs	r0, r0, r4, asr fp

20000a88 <ActivateRow>:
20000a88:	b580      	push	{r7, lr}
20000a8a:	b082      	sub	sp, #8
20000a8c:	af00      	add	r7, sp, #0
20000a8e:	0002      	movs	r2, r0
20000a90:	1dfb      	adds	r3, r7, #7
20000a92:	701a      	strb	r2, [r3, #0]
20000a94:	1dfb      	adds	r3, r7, #7
20000a96:	781b      	ldrb	r3, [r3, #0]
20000a98:	2b04      	cmp	r3, #4
20000a9a:	d818      	bhi.n	20000ace <ActivateRow+0x46>
20000a9c:	009a      	lsls	r2, r3, #2
20000a9e:	4b0e      	ldr	r3, [pc, #56]	; (20000ad8 <ActivateRow+0x50>)
20000aa0:	18d3      	adds	r3, r2, r3
20000aa2:	681b      	ldr	r3, [r3, #0]
20000aa4:	469f      	mov	pc, r3
20000aa6:	4b0d      	ldr	r3, [pc, #52]	; (20000adc <ActivateRow+0x54>)
20000aa8:	2200      	movs	r2, #0
20000aaa:	755a      	strb	r2, [r3, #21]
20000aac:	e00f      	b.n	20000ace <ActivateRow+0x46>
20000aae:	4b0b      	ldr	r3, [pc, #44]	; (20000adc <ActivateRow+0x54>)
20000ab0:	2210      	movs	r2, #16
20000ab2:	755a      	strb	r2, [r3, #21]
20000ab4:	e00b      	b.n	20000ace <ActivateRow+0x46>
20000ab6:	4b09      	ldr	r3, [pc, #36]	; (20000adc <ActivateRow+0x54>)
20000ab8:	2220      	movs	r2, #32
20000aba:	755a      	strb	r2, [r3, #21]
20000abc:	e007      	b.n	20000ace <ActivateRow+0x46>
20000abe:	4b07      	ldr	r3, [pc, #28]	; (20000adc <ActivateRow+0x54>)
20000ac0:	2240      	movs	r2, #64	; 0x40
20000ac2:	755a      	strb	r2, [r3, #21]
20000ac4:	e003      	b.n	20000ace <ActivateRow+0x46>
20000ac6:	4b05      	ldr	r3, [pc, #20]	; (20000adc <ActivateRow+0x54>)
20000ac8:	2280      	movs	r2, #128	; 0x80
20000aca:	755a      	strb	r2, [r3, #21]
20000acc:	46c0      	nop			; (mov r8, r8)
20000ace:	46c0      	nop			; (mov r8, r8)
20000ad0:	46bd      	mov	sp, r7
20000ad2:	b002      	add	sp, #8
20000ad4:	bd80      	pop	{r7, pc}
20000ad6:	46c0      	nop			; (mov r8, r8)
20000ad8:	20000b64 	andcs	r0, r0, r4, ror #22
20000adc:	40020c00 	andmi	r0, r2, r0, lsl #24

20000ae0 <ReadColumn>:
20000ae0:	b580      	push	{r7, lr}
20000ae2:	b082      	sub	sp, #8
20000ae4:	af00      	add	r7, sp, #0
20000ae6:	4a12      	ldr	r2, [pc, #72]	; (20000b30 <ReadColumn+0x50>)
20000ae8:	1dfb      	adds	r3, r7, #7
20000aea:	7c52      	ldrb	r2, [r2, #17]
20000aec:	701a      	strb	r2, [r3, #0]
20000aee:	1dfb      	adds	r3, r7, #7
20000af0:	781b      	ldrb	r3, [r3, #0]
20000af2:	2208      	movs	r2, #8
20000af4:	4013      	ands	r3, r2
20000af6:	d001      	beq.n	20000afc <ReadColumn+0x1c>
20000af8:	2304      	movs	r3, #4
20000afa:	e015      	b.n	20000b28 <ReadColumn+0x48>
20000afc:	1dfb      	adds	r3, r7, #7
20000afe:	781b      	ldrb	r3, [r3, #0]
20000b00:	2204      	movs	r2, #4
20000b02:	4013      	ands	r3, r2
20000b04:	d001      	beq.n	20000b0a <ReadColumn+0x2a>
20000b06:	2303      	movs	r3, #3
20000b08:	e00e      	b.n	20000b28 <ReadColumn+0x48>
20000b0a:	1dfb      	adds	r3, r7, #7
20000b0c:	781b      	ldrb	r3, [r3, #0]
20000b0e:	2202      	movs	r2, #2
20000b10:	4013      	ands	r3, r2
20000b12:	d001      	beq.n	20000b18 <ReadColumn+0x38>
20000b14:	2302      	movs	r3, #2
20000b16:	e007      	b.n	20000b28 <ReadColumn+0x48>
20000b18:	1dfb      	adds	r3, r7, #7
20000b1a:	781b      	ldrb	r3, [r3, #0]
20000b1c:	2201      	movs	r2, #1
20000b1e:	4013      	ands	r3, r2
20000b20:	d001      	beq.n	20000b26 <ReadColumn+0x46>
20000b22:	2301      	movs	r3, #1
20000b24:	e000      	b.n	20000b28 <ReadColumn+0x48>
20000b26:	2300      	movs	r3, #0
20000b28:	0018      	movs	r0, r3
20000b2a:	46bd      	mov	sp, r7
20000b2c:	b002      	add	sp, #8
20000b2e:	bd80      	pop	{r7, pc}
20000b30:	40020c00 	andmi	r0, r2, r0, lsl #24

20000b34 <memset>:
20000b34:	0003      	movs	r3, r0
20000b36:	1882      	adds	r2, r0, r2
20000b38:	4293      	cmp	r3, r2
20000b3a:	d100      	bne.n	20000b3e <memset+0xa>
20000b3c:	4770      	bx	lr
20000b3e:	7019      	strb	r1, [r3, #0]
20000b40:	3301      	adds	r3, #1
20000b42:	e7f9      	b.n	20000b38 <memset+0x4>

20000b44 <key>:
20000b44:	0a030201 	beq	200c1350 <key+0xc07fc>
20000b48:	0b060504 	bleq	20181f60 <key+0x18140c>
20000b4c:	0c090807 	stceq	8, cr0, [r9], {7}
20000b50:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000b20 <ReadColumn+0x40>

20000b54 <key>:
20000b54:	0a030201 	beq	200c1360 <key+0xc080c>
20000b58:	0b060504 	bleq	20181f70 <key+0x18141c>
20000b5c:	0c090807 	stceq	8, cr0, [r9], {7}
20000b60:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000b30 <ReadColumn+0x50>
20000b64:	20000aa6 	andcs	r0, r0, r6, lsr #21
20000b68:	20000aae 	andcs	r0, r0, lr, lsr #21
20000b6c:	20000ab6 			; <UNDEFINED> instruction: 0x20000ab6
20000b70:	20000abe 			; <UNDEFINED> instruction: 0x20000abe
20000b74:	20000ac6 	andcs	r0, r0, r6, asr #21

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000251 	andeq	r0, r0, r1, asr r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	0001640c 	andeq	r6, r1, ip, lsl #8
	...
  20:	08010200 	stmdaeq	r1, {r9}
  24:	0000010f 	andeq	r0, r0, pc, lsl #2
  28:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
  2c:	03000001 	movweq	r0, #1
  30:	00000021 	andeq	r0, r0, r1, lsr #32
  34:	00000045 	andeq	r0, r0, r5, asr #32
  38:	00004504 	andeq	r4, r0, r4, lsl #10
  3c:	45040300 	strmi	r0, [r4, #-768]	; 0xfffffd00
  40:	03000000 	movweq	r0, #0
  44:	07040200 	streq	r0, [r4, -r0, lsl #4]
  48:	000000a7 	andeq	r0, r0, r7, lsr #1
  4c:	79656b05 	stmdbvc	r5!, {r0, r2, r8, r9, fp, sp, lr}^
  50:	2f060300 	svccs	0x00060300
  54:	05000000 	streq	r0, [r0, #-0]
  58:	000b4403 	andeq	r4, fp, r3, lsl #8
  5c:	00e40620 	rsceq	r0, r4, r0, lsr #12
  60:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
  64:	00000021 	andeq	r0, r0, r1, lsr #32
  68:	00011d07 	andeq	r1, r1, r7, lsl #26
  6c:	1a020200 	bne	80874 <startup-0x1ff7f78c>
  70:	00000089 	andeq	r0, r0, r9, lsl #1
  74:	02007808 	andeq	r7, r0, #8, 16	; 0x80000
  78:	00005d1b 	andeq	r5, r0, fp, lsl sp
  7c:	79080000 	stmdbvc	r8, {}	; <UNPREDICTABLE>
  80:	5d1c0200 	lfmpl	f0, 4, [ip, #-0]
  84:	01000000 	mrseq	r0, (UNDEF: 0)
  88:	00ec0600 	rsceq	r0, ip, r0, lsl #12
  8c:	1d020000 	stcne	0, cr0, [r2, #-0]
  90:	00000068 	andeq	r0, r0, r8, rrx
  94:	00009d07 	andeq	r9, r0, r7, lsl #26
  98:	1f023400 	svcne	0x00023400
  9c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  a0:	00010509 	andeq	r0, r1, r9, lsl #10
  a4:	d0200200 	eorle	r0, r0, r0, lsl #4
  a8:	00000000 	andeq	r0, r0, r0
  ac:	0000b009 	andeq	fp, r0, r9
  b0:	d0210200 	eorle	r0, r1, r0, lsl #4
  b4:	04000000 	streq	r0, [r0], #-0
  b8:	0000b709 	andeq	fp, r0, r9, lsl #14
  bc:	d0220200 	eorle	r0, r2, r0, lsl #4
  c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  c4:	00787008 	rsbseq	r7, r8, r8
  c8:	00d72302 	sbcseq	r2, r7, r2, lsl #6
  cc:	000c0000 	andeq	r0, ip, r0
  d0:	6905040a 	stmdbvs	r5, {r1, r3, sl}
  d4:	0300746e 	movweq	r7, #1134	; 0x46e
  d8:	00000089 	andeq	r0, r0, r9, lsl #1
  dc:	000000e7 	andeq	r0, r0, r7, ror #1
  e0:	00004504 	andeq	r4, r0, r4, lsl #10
  e4:	06001300 	streq	r1, [r0], -r0, lsl #6
  e8:	000000db 	ldrdeq	r0, [r0], -fp
  ec:	00942402 	addseq	r2, r4, r2, lsl #8
  f0:	da060000 	ble	1800f8 <startup-0x1fe7ff08>
  f4:	02000000 	andeq	r0, r0, #0
  f8:	0000fd24 	andeq	pc, r0, r4, lsr #26
  fc:	94040b00 	strls	r0, [r4], #-2816	; 0xfffff500
 100:	07000000 	streq	r0, [r0, -r0]
 104:	0000015a 	andeq	r0, r0, sl, asr r1
 108:	7c260224 	sfmvc	f0, 4, [r6], #-144	; 0xffffff70
 10c:	08000001 	stmdaeq	r0, {r0}
 110:	006f6567 	rsbeq	r6, pc, r7, ror #10
 114:	00f22702 	rscseq	r2, r2, r2, lsl #14
 118:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 11c:	000001db 	ldrdeq	r0, [r0], -fp
 120:	00d02802 	sbcseq	r2, r0, r2, lsl #16
 124:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
 128:	000001e1 	andeq	r0, r0, r1, ror #3
 12c:	00d02802 	sbcseq	r2, r0, r2, lsl #16
 130:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
 134:	0000014e 	andeq	r0, r0, lr, asr #2
 138:	00d02902 	sbcseq	r2, r0, r2, lsl #18
 13c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
 140:	00000154 	andeq	r0, r0, r4, asr r1
 144:	00d02902 	sbcseq	r2, r0, r2, lsl #18
 148:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
 14c:	0000015f 	andeq	r0, r0, pc, asr r1
 150:	018d2a02 	orreq	r2, sp, r2, lsl #20
 154:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
 158:	000002e6 	andeq	r0, r0, r6, ror #5
 15c:	018d2b02 	orreq	r2, sp, r2, lsl #22
 160:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
 164:	000000f2 	strdeq	r0, [r0], -r2
 168:	018d2c02 	orreq	r2, sp, r2, lsl #24
 16c:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
 170:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
 174:	01a82d02 			; <UNDEFINED> instruction: 0x01a82d02
 178:	00200000 	eoreq	r0, r0, r0
 17c:	0001870c 	andeq	r8, r1, ip, lsl #14
 180:	01870d00 	orreq	r0, r7, r0, lsl #26
 184:	0b000000 	bleq	18c <startup-0x1ffffe74>
 188:	00010304 	andeq	r0, r1, r4, lsl #6
 18c:	7c040b00 			; <UNDEFINED> instruction: 0x7c040b00
 190:	0c000001 	stceq	0, cr0, [r0], {1}
 194:	000001a8 	andeq	r0, r0, r8, lsr #3
 198:	0001870d 	andeq	r8, r1, sp, lsl #14
 19c:	00d00d00 	sbcseq	r0, r0, r0, lsl #26
 1a0:	d00d0000 	andle	r0, sp, r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	0193040b 	orrseq	r0, r3, fp, lsl #8
 1ac:	d4060000 	strle	r0, [r6], #-0
 1b0:	02000001 	andeq	r0, r0, #1
 1b4:	0001032e 	andeq	r0, r1, lr, lsr #6
 1b8:	01d30600 	bicseq	r0, r3, r0, lsl #12
 1bc:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
 1c0:	00000187 	andeq	r0, r0, r7, lsl #3
 1c4:	11060102 	tstne	r6, r2, lsl #2
 1c8:	02000001 	andeq	r0, r0, #1
 1cc:	00d00502 	sbcseq	r0, r0, r2, lsl #10
 1d0:	02020000 	andeq	r0, r2, #0
 1d4:	00013b07 	andeq	r3, r1, r7, lsl #22
 1d8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 1dc:	000000fc 	strdeq	r0, [r0], -ip
 1e0:	29070402 	stmdbcs	r7, {r1, sl}
 1e4:	02000001 	andeq	r0, r0, #1
 1e8:	00f70508 	rscseq	r0, r7, r8, lsl #10
 1ec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 1f0:	00012407 	andeq	r2, r1, r7, lsl #8
 1f4:	00be0e00 	adcseq	r0, lr, r0, lsl #28
 1f8:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 1fc:	20000010 	andcs	r0, r0, r0, lsl r0
 200:	000001c4 	andeq	r0, r0, r4, asr #3
 204:	02439c01 	subeq	r9, r3, #256	; 0x100
 208:	bd0f0000 	stclt	0, cr0, [pc, #-0]	; 210 <startup-0x1ffffdf0>
 20c:	01000001 	tsteq	r0, r1
 210:	0000e74c 	andeq	lr, r0, ip, asr #14
 214:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
 218:	00980f7f 	addseq	r0, r8, pc, ror pc
 21c:	54010000 	strpl	r0, [r1], #-0
 220:	000001ae 	andeq	r0, r0, lr, lsr #3
 224:	7f909103 	svcvc	0x00909103
 228:	01007005 	tsteq	r0, r5
 22c:	0001b95e 	andeq	fp, r1, lr, asr r9
 230:	6c910200 	lfmvs	f0, 4, [r1], {0}
 234:	0000c30f 	andeq	ip, r0, pc, lsl #6
 238:	5d610100 	stfple	f0, [r1, #-0]
 23c:	02000000 	andeq	r0, r0, #0
 240:	10006b91 	mulne	r0, r1, fp
 244:	000001cb 	andeq	r0, r0, fp, asr #3
 248:	00001001 	andeq	r1, r0, r1
 24c:	000c2000 	andeq	r2, ip, r0
 250:	9c010000 	stcls	0, cr0, [r1], {-0}
 254:	0000aa00 	andeq	sl, r0, r0, lsl #20
 258:	dd000400 	cfstrsle	mvf0, [r0, #-0]
 25c:	04000000 	streq	r0, [r0], #-0
 260:	00000001 	andeq	r0, r0, r1
 264:	01ff0c00 	mvnseq	r0, r0, lsl #24
 268:	01d40000 	bicseq	r0, r4, r0
 26c:	00be2000 	adcseq	r2, lr, r0
 270:	00cb0000 	sbceq	r0, fp, r0
 274:	4c020000 	stcmi	0, cr0, [r2], {-0}
 278:	01000002 	tsteq	r0, r2
 27c:	0002741a 	andeq	r7, r2, sl, lsl r4
 280:	00001e20 	andeq	r1, r0, r0, lsr #28
 284:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
 288:	03000000 	movweq	r0, #0
 28c:	0100736d 	tsteq	r0, sp, ror #6
 290:	0000441a 	andeq	r4, r0, sl, lsl r4
 294:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 298:	07040400 	streq	r0, [r4, -r0, lsl #8]
 29c:	0000012e 	andeq	r0, r0, lr, lsr #2
 2a0:	0001e702 	andeq	lr, r1, r2, lsl #14
 2a4:	4a140100 	bmi	5006ac <startup-0x1faff954>
 2a8:	2a200002 	bcs	8002b8 <startup-0x1f7ffd48>
 2ac:	01000000 	mrseq	r0, (UNDEF: 0)
 2b0:	0000849c 	muleq	r0, ip, r4
 2b4:	73750300 	cmnvc	r5, #0, 6
 2b8:	44140100 	ldrmi	r0, [r4], #-256	; 0xffffff00
 2bc:	02000000 	andeq	r0, r0, #0
 2c0:	52056c91 	andpl	r6, r5, #37120	; 0x9100
 2c4:	1a200002 	bne	8002d4 <startup-0x1f7ffd2c>
 2c8:	06000000 	streq	r0, [r0], -r0
 2cc:	15010069 	strne	r0, [r1, #-105]	; 0xffffff97
 2d0:	00000084 	andeq	r0, r0, r4, lsl #1
 2d4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 2d8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
 2dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2e0:	0001f308 	andeq	pc, r1, r8, lsl #6
 2e4:	380f0100 	stmdacc	pc, {r8}	; <UNPREDICTABLE>
 2e8:	12200002 	eorne	r0, r0, #2
 2ec:	01000000 	mrseq	r0, (UNDEF: 0)
 2f0:	0258099c 	subseq	r0, r8, #156, 18	; 0x270000
 2f4:	03010000 	movweq	r0, #4096	; 0x1000
 2f8:	200001d4 	ldrdcs	r0, [r0], -r4
 2fc:	00000064 	andeq	r0, r0, r4, rrx
 300:	a9009c01 	stmdbge	r0, {r0, sl, fp, ip, pc}
 304:	04000005 	streq	r0, [r0], #-5
 308:	00017600 	andeq	r7, r1, r0, lsl #12
 30c:	00010400 	andeq	r0, r1, r0, lsl #8
 310:	0c000000 	stceq	0, cr0, [r0], {-0}
 314:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 318:	20000294 	mulcs	r0, r4, r2
 31c:	00000734 	andeq	r0, r0, r4, lsr r7
 320:	00000169 	andeq	r0, r0, r9, ror #2
 324:	0b020202 	bleq	80b34 <startup-0x1ff7f4cc>
 328:	00000042 	andeq	r0, r0, r2, asr #32
 32c:	00036403 	andeq	r6, r3, r3, lsl #8
 330:	420c0200 	andmi	r0, ip, #0, 4
 334:	00000000 	andeq	r0, r0, r0
 338:	00034f03 	andeq	r4, r3, r3, lsl #30
 33c:	420d0200 	andmi	r0, sp, #0, 4
 340:	01000000 	mrseq	r0, (UNDEF: 0)
 344:	08010400 	stmdaeq	r1, {sl}
 348:	0000010f 	andeq	r0, r0, pc, lsl #2
 34c:	09020405 	stmdbeq	r2, {r0, r2, sl}
 350:	00000062 	andeq	r0, r0, r2, rrx
 354:	72646906 	rsbvc	r6, r4, #98304	; 0x18000
 358:	620a0200 	andvs	r0, sl, #0, 4
 35c:	07000000 	streq	r0, [r0, -r0]
 360:	00000021 	andeq	r0, r0, r1, lsr #32
 364:	07040400 	streq	r0, [r4, -r0, lsl #8]
 368:	0000012e 	andeq	r0, r0, lr, lsr #2
 36c:	12020202 	andne	r0, r2, #536870912	; 0x20000000
 370:	0000008a 	andeq	r0, r0, sl, lsl #1
 374:	00033403 	andeq	r3, r3, r3, lsl #8
 378:	42130200 	andsmi	r0, r3, #0, 4
 37c:	00000000 	andeq	r0, r0, r0
 380:	0002ac03 	andeq	sl, r2, r3, lsl #24
 384:	42140200 	andsmi	r0, r4, #0, 4
 388:	01000000 	mrseq	r0, (UNDEF: 0)
 38c:	02040500 	andeq	r0, r4, #0, 10
 390:	0000a310 	andeq	sl, r0, r0, lsl r3
 394:	646f0600 	strbtvs	r0, [pc], #-1536	; 39c <startup-0x1ffffc64>
 398:	11020072 	tstne	r2, r2, ror r0
 39c:	00000062 	andeq	r0, r0, r2, rrx
 3a0:	00006907 	andeq	r6, r0, r7, lsl #18
 3a4:	64080000 	strvs	r0, [r8], #-0
 3a8:	18000002 	stmdane	r0, {r1}
 3ac:	00ec0402 	rsceq	r0, ip, r2, lsl #8
 3b0:	bb030000 	bllt	c03b8 <startup-0x1ff3fc48>
 3b4:	02000003 	andeq	r0, r0, #3
 3b8:	00006205 	andeq	r6, r0, r5, lsl #4
 3bc:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
 3c0:	02000002 	andeq	r0, r0, #2
 3c4:	00006206 	andeq	r6, r0, r6, lsl #4
 3c8:	57030400 	strpl	r0, [r3, -r0, lsl #8]
 3cc:	02000003 	andeq	r0, r0, #3
 3d0:	00006207 	andeq	r6, r0, r7, lsl #4
 3d4:	10030800 	andne	r0, r3, r0, lsl #16
 3d8:	02000003 	andeq	r0, r0, #3
 3dc:	00006208 	andeq	r6, r0, r8, lsl #4
 3e0:	49090c00 	stmdbmi	r9, {sl, fp}
 3e4:	10000000 	andne	r0, r0, r0
 3e8:	00008a09 	andeq	r8, r0, r9, lsl #20
 3ec:	0a001400 	beq	53f4 <startup-0x1fffac0c>
 3f0:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3f4:	00a31702 	adceq	r1, r3, r2, lsl #14
 3f8:	e40a0000 	str	r0, [sl], #-0
 3fc:	03000000 	movweq	r0, #0
 400:	00004218 	andeq	r4, r0, r8, lsl r2
 404:	011d0800 	tsteq	sp, r0, lsl #16
 408:	03020000 	movweq	r0, #8192	; 0x2000
 40c:	0001231a 	andeq	r2, r1, sl, lsl r3
 410:	00780b00 	rsbseq	r0, r8, r0, lsl #22
 414:	00f71b03 	rscseq	r1, r7, r3, lsl #22
 418:	0b000000 	bleq	420 <startup-0x1ffffbe0>
 41c:	1c030079 	stcne	0, cr0, [r3], {121}	; 0x79
 420:	000000f7 	strdeq	r0, [r0], -r7
 424:	ec0a0001 	stc	0, cr0, [sl], {1}
 428:	03000000 	movweq	r0, #0
 42c:	0001021d 	andeq	r0, r1, sp, lsl r2
 430:	009d0800 	addseq	r0, sp, r0, lsl #16
 434:	03340000 	teqeq	r4, #0
 438:	00016a1f 	andeq	r6, r1, pc, lsl sl
 43c:	01050300 	mrseq	r0, SP_abt
 440:	20030000 	andcs	r0, r3, r0
 444:	0000016a 	andeq	r0, r0, sl, ror #2
 448:	00b00300 	adcseq	r0, r0, r0, lsl #6
 44c:	21030000 	mrscs	r0, (UNDEF: 3)
 450:	0000016a 	andeq	r0, r0, sl, ror #2
 454:	00b70304 	adcseq	r0, r7, r4, lsl #6
 458:	22030000 	andcs	r0, r3, #0
 45c:	0000016a 	andeq	r0, r0, sl, ror #2
 460:	78700b08 	ldmdavc	r0!, {r3, r8, r9, fp}^
 464:	71230300 			; <UNDEFINED> instruction: 0x71230300
 468:	0c000001 	stceq	0, cr0, [r0], {1}
 46c:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
 470:	00746e69 	rsbseq	r6, r4, r9, ror #28
 474:	0001230d 	andeq	r2, r1, sp, lsl #6
 478:	00018100 	andeq	r8, r1, r0, lsl #2
 47c:	01810e00 	orreq	r0, r1, r0, lsl #28
 480:	00130000 	andseq	r0, r3, r0
 484:	a7070404 	strge	r0, [r7, -r4, lsl #8]
 488:	0a000000 	beq	490 <startup-0x1ffffb70>
 48c:	000000da 	ldrdeq	r0, [r0], -sl
 490:	01932403 	orrseq	r2, r3, r3, lsl #8
 494:	040f0000 	streq	r0, [pc], #-0	; 49c <startup-0x1ffffb64>
 498:	0000012e 	andeq	r0, r0, lr, lsr #2
 49c:	00015a08 	andeq	r5, r1, r8, lsl #20
 4a0:	26032400 	strcs	r2, [r3], -r0, lsl #8
 4a4:	00000212 	andeq	r0, r0, r2, lsl r2
 4a8:	6f65670b 	svcvs	0x0065670b
 4ac:	88270300 	stmdahi	r7!, {r8, r9}
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	0001db03 	andeq	sp, r1, r3, lsl #22
 4b8:	6a280300 	bvs	a010c0 <startup-0x1f5fef40>
 4bc:	04000001 	streq	r0, [r0], #-1
 4c0:	0001e103 	andeq	lr, r1, r3, lsl #2
 4c4:	6a280300 	bvs	a010cc <startup-0x1f5fef34>
 4c8:	08000001 	stmdaeq	r0, {r0}
 4cc:	00014e03 	andeq	r4, r1, r3, lsl #28
 4d0:	6a290300 	bvs	a410d8 <startup-0x1f5bef28>
 4d4:	0c000001 	stceq	0, cr0, [r0], {1}
 4d8:	00015403 	andeq	r5, r1, r3, lsl #8
 4dc:	6a290300 	bvs	a410e4 <startup-0x1f5bef1c>
 4e0:	10000001 	andne	r0, r0, r1
 4e4:	00015f03 	andeq	r5, r1, r3, lsl #30
 4e8:	232a0300 			; <UNDEFINED> instruction: 0x232a0300
 4ec:	14000002 	strne	r0, [r0], #-2
 4f0:	0002e603 	andeq	lr, r2, r3, lsl #12
 4f4:	232b0300 			; <UNDEFINED> instruction: 0x232b0300
 4f8:	18000002 	stmdane	r0, {r1}
 4fc:	0000f203 	andeq	pc, r0, r3, lsl #4
 500:	232c0300 			; <UNDEFINED> instruction: 0x232c0300
 504:	1c000002 	stcne	0, cr0, [r0], {2}
 508:	0001b303 	andeq	fp, r1, r3, lsl #6
 50c:	3e2d0300 	cdpcc	3, 2, cr0, cr13, cr0, {0}
 510:	20000002 	andcs	r0, r0, r2
 514:	021d1000 	andseq	r1, sp, #0
 518:	1d110000 	ldcne	0, cr0, [r1, #-0]
 51c:	00000002 	andeq	r0, r0, r2
 520:	0199040f 	orrseq	r0, r9, pc, lsl #8
 524:	040f0000 	streq	r0, [pc], #-0	; 52c <startup-0x1ffffad4>
 528:	00000212 	andeq	r0, r0, r2, lsl r2
 52c:	00023e10 	andeq	r3, r2, r0, lsl lr
 530:	021d1100 	andseq	r1, sp, #0, 2
 534:	6a110000 	bvs	44053c <startup-0x1fbbfac4>
 538:	11000001 	tstne	r0, r1
 53c:	0000016a 	andeq	r0, r0, sl, ror #2
 540:	29040f00 	stmdbcs	r4, {r8, r9, sl, fp}
 544:	0a000002 	beq	554 <startup-0x1ffffaac>
 548:	000001d3 	ldrdeq	r0, [r0], -r3
 54c:	021d2e03 	andseq	r2, sp, #3, 28	; 0x30
 550:	2b120000 	blcs	480558 <startup-0x1fb7faa8>
 554:	01000003 	tsteq	r0, r3
 558:	099c011a 	ldmibeq	ip, {r1, r3, r4, r8}
 55c:	002c2000 	eoreq	r2, ip, r0
 560:	9c010000 	stcls	0, cr0, [r1], {-0}
 564:	00038413 	andeq	r8, r3, r3, lsl r4
 568:	01150100 	tsteq	r5, r0, lsl #2
 56c:	2000097c 	andcs	r0, r0, ip, ror r9
 570:	00000020 	andeq	r0, r0, r0, lsr #32
 574:	02a19c01 	adceq	r9, r1, #256	; 0x100
 578:	d3140000 	tstle	r4, #0
 57c:	01000003 	tsteq	r0, r3
 580:	02440115 	subeq	r0, r4, #1073741829	; 0x40000005
 584:	91020000 	mrsls	r0, (UNDEF: 2)
 588:	00781574 	rsbseq	r1, r8, r4, ror r5
 58c:	6a011501 	bvs	45998 <startup-0x1ffba668>
 590:	02000001 	andeq	r0, r0, #1
 594:	79157091 	ldmdbvc	r5, {r0, r4, r7, ip, sp, lr}
 598:	01150100 	tsteq	r5, r0, lsl #2
 59c:	0000016a 	andeq	r0, r0, sl, ror #2
 5a0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 5a4:	0003ce16 	andeq	ip, r3, r6, lsl lr
 5a8:	01050100 	mrseq	r0, (UNDEF: 21)
 5ac:	200008fc 	strdcs	r0, [r0], -ip
 5b0:	00000080 	andeq	r0, r0, r0, lsl #1
 5b4:	02c79c01 	sbceq	r9, r7, #256	; 0x100
 5b8:	d3140000 	tstle	r4, #0
 5bc:	01000003 	tsteq	r0, r3
 5c0:	02440105 	subeq	r0, r4, #1073741825	; 0x40000001
 5c4:	91020000 	mrsls	r0, (UNDEF: 2)
 5c8:	ae170074 	mrcge	0, 0, r0, cr7, cr4, {3}
 5cc:	01000003 	tsteq	r0, r3
 5d0:	000898ff 	strdeq	r9, [r8], -pc	; <UNPREDICTABLE>
 5d4:	00006420 	andeq	r6, r0, r0, lsr #8
 5d8:	029c0100 	addseq	r0, ip, #0, 2
 5dc:	18000003 	stmdane	r0, {r0, r1}
 5e0:	000003d3 	ldrdeq	r0, [r0], -r3
 5e4:	0244ff01 	subeq	pc, r4, #1, 30
 5e8:	91020000 	mrsls	r0, (UNDEF: 2)
 5ec:	08a0196c 	stmiaeq	r0!, {r2, r3, r5, r6, r8, fp, ip}
 5f0:	00542000 	subseq	r2, r4, r0
 5f4:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
 5f8:	01000100 	mrseq	r0, (UNDEF: 16)
 5fc:	0000016a 	andeq	r0, r0, sl, ror #2
 600:	00749102 	rsbseq	r9, r4, r2, lsl #2
 604:	026a1700 	rsbeq	r1, sl, #0, 14
 608:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
 60c:	20000834 	andcs	r0, r0, r4, lsr r8
 610:	00000064 	andeq	r0, r0, r4, rrx
 614:	033c9c01 	teqeq	ip, #256	; 0x100
 618:	d3180000 	tstle	r8, #0
 61c:	01000003 	tsteq	r0, r3
 620:	000244f9 	strdeq	r4, [r2], -r9
 624:	6c910200 	lfmvs	f0, 4, [r1], {0}
 628:	00083c19 	andeq	r3, r8, r9, lsl ip
 62c:	00005420 	andeq	r5, r0, r0, lsr #8
 630:	00691b00 	rsbeq	r1, r9, r0, lsl #22
 634:	016afa01 	msreq	(UNDEF: 106), r1
 638:	91020000 	mrsls	r0, (UNDEF: 2)
 63c:	17000074 	smlsdxne	r0, r4, r0, r0
 640:	000002a6 	andeq	r0, r0, r6, lsr #5
 644:	068ec101 	streq	ip, [lr], r1, lsl #2
 648:	01a62000 			; <UNDEFINED> instruction: 0x01a62000
 64c:	9c010000 	stcls	0, cr0, [r1], {-0}
 650:	000003be 			; <UNDEFINED> instruction: 0x000003be
 654:	0100781c 	tsteq	r0, ip, lsl r8
 658:	0000f7c1 	andeq	pc, r0, r1, asr #15
 65c:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 660:	0100791c 	tsteq	r0, ip, lsl r9
 664:	0000f7c1 	andeq	pc, r0, r1, asr #15
 668:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 66c:	7465731c 	strbtvc	r7, [r5], #-796	; 0xfffffce4
 670:	f7c10100 			; <UNDEFINED> instruction: 0xf7c10100
 674:	02000000 	andeq	r0, r0, #0
 678:	a81d6591 	ldmdage	sp, {r0, r4, r7, r8, sl, sp, lr}
 67c:	01000003 	tsteq	r0, r3
 680:	0000f7cd 	andeq	pc, r0, sp, asr #15
 684:	6c910200 	lfmvs	f0, 4, [r1], {0}
 688:	00035f1d 	andeq	r5, r3, sp, lsl pc
 68c:	f7cf0100 			; <UNDEFINED> instruction: 0xf7cf0100
 690:	02000000 	andeq	r0, r0, #0
 694:	b41d6f91 	ldrlt	r6, [sp], #-3985	; 0xfffff06f
 698:	01000002 	tsteq	r0, r2
 69c:	0000f7e1 	andeq	pc, r0, r1, ror #15
 6a0:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 6a4:	00027d1d 	andeq	r7, r2, sp, lsl sp
 6a8:	f7e20100 			; <UNDEFINED> instruction: 0xf7e20100
 6ac:	02000000 	andeq	r0, r0, #0
 6b0:	cb1d6d91 	blgt	75bcfc <startup-0x1f8a4304>
 6b4:	01000002 	tsteq	r0, r2
 6b8:	0000f7ee 	andeq	pc, r0, lr, ror #15
 6bc:	6b910200 	blvs	fe440ec4 <key+0xde440370>
 6c0:	04461700 	strbeq	r1, [r6], #-1792	; 0xfffff900
 6c4:	b6010000 	strlt	r0, [r1], -r0
 6c8:	20000628 	andcs	r0, r0, r8, lsr #12
 6cc:	00000066 	andeq	r0, r0, r6, rrx
 6d0:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
 6d4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 6d8:	58200006 	stmdapl	r0!, {r1, r2}
 6dc:	1d000000 	stcne	0, cr0, [r0, #-0]
 6e0:	000002a1 	andeq	r0, r0, r1, lsr #5
 6e4:	00f7b701 	rscseq	fp, r7, r1, lsl #14
 6e8:	91020000 	mrsls	r0, (UNDEF: 2)
 6ec:	06521977 			; <UNDEFINED> instruction: 0x06521977
 6f0:	00222000 	eoreq	r2, r2, r0
 6f4:	611b0000 	tstvs	fp, r0
 6f8:	01006464 	tsteq	r0, r4, ror #8
 6fc:	0000f7bb 			; <UNDEFINED> instruction: 0x0000f7bb
 700:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 704:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
 708:	000002fd 	strdeq	r0, [r0], -sp
 70c:	05cca101 	strbeq	sl, [ip, #257]	; 0x101
 710:	005c2000 	subseq	r2, ip, r0
 714:	9c010000 	stcls	0, cr0, [r1], {-0}
 718:	00028f1f 	andeq	r8, r2, pc, lsl pc
 71c:	f79c0100 			; <UNDEFINED> instruction: 0xf79c0100
 720:	a2000000 	andge	r0, r0, #0
 724:	2a200005 	bcs	800740 <startup-0x1f7ff8c0>
 728:	01000000 	mrseq	r0, (UNDEF: 0)
 72c:	00043d9c 	muleq	r4, ip, sp
 730:	027d1800 	rsbseq	r1, sp, #0, 16
 734:	9c010000 	stcls	0, cr0, [r1], {-0}
 738:	000000f7 	strdeq	r0, [r0], -r7
 73c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 740:	00037117 	andeq	r7, r3, r7, lsl r1
 744:	5c940100 	ldfpls	f0, [r4], {0}
 748:	46200005 	strtmi	r0, [r0], -r5
 74c:	01000000 	mrseq	r0, (UNDEF: 0)
 750:	00046f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
 754:	029c1800 	addseq	r1, ip, #0, 16
 758:	94010000 	strls	r0, [r1], #-0
 75c:	000000f7 	strdeq	r0, [r0], -r7
 760:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
 764:	0000027d 	andeq	r0, r0, sp, ror r2
 768:	00f79401 	rscseq	r9, r7, r1, lsl #8
 76c:	91020000 	mrsls	r0, (UNDEF: 2)
 770:	da170076 	ble	5c0950 <startup-0x1fa3f6b0>
 774:	01000003 	tsteq	r0, r3
 778:	00051c8d 	andeq	r1, r5, sp, lsl #25
 77c:	00004020 	andeq	r4, r0, r0, lsr #32
 780:	a19c0100 	orrsge	r0, ip, r0, lsl #2
 784:	18000004 	stmdane	r0, {r2}
 788:	000003e8 	andeq	r0, r0, r8, ror #7
 78c:	00f78d01 	rscseq	r8, r7, r1, lsl #26
 790:	91020000 	mrsls	r0, (UNDEF: 2)
 794:	027d1877 	rsbseq	r1, sp, #7798784	; 0x770000
 798:	8d010000 	stchi	0, cr0, [r1, #-0]
 79c:	000000f7 	strdeq	r0, [r0], -r7
 7a0:	00769102 	rsbseq	r9, r6, r2, lsl #2
 7a4:	0002bd17 	andeq	fp, r2, r7, lsl sp
 7a8:	9c710100 	ldflse	f0, [r1], #-0
 7ac:	80200004 	eorhi	r0, r0, r4
 7b0:	01000000 	mrseq	r0, (UNDEF: 0)
 7b4:	0004d39c 	muleq	r4, ip, r3
 7b8:	036b1800 	cmneq	fp, #0, 16
 7bc:	71010000 	mrsvc	r0, (UNDEF: 1)
 7c0:	000000f7 	strdeq	r0, [r0], -r7
 7c4:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
 7c8:	0000027d 	andeq	r0, r0, sp, ror r2
 7cc:	00f77101 	rscseq	r7, r7, r1, lsl #2
 7d0:	91020000 	mrsls	r0, (UNDEF: 2)
 7d4:	c11f0076 	tstgt	pc, r6, ror r0	; <UNPREDICTABLE>
 7d8:	01000003 	tsteq	r0, r3
 7dc:	0000f746 	andeq	pc, r0, r6, asr #14
 7e0:	00040c00 	andeq	r0, r4, r0, lsl #24
 7e4:	00009020 	andeq	r9, r0, r0, lsr #32
 7e8:	089c0100 	ldmeq	ip, {r8}
 7ec:	18000005 	stmdane	r0, {r0, r2}
 7f0:	0000027d 	andeq	r0, r0, sp, ror r2
 7f4:	00f74601 	rscseq	r4, r7, r1, lsl #12
 7f8:	91020000 	mrsls	r0, (UNDEF: 2)
 7fc:	56521b6f 	ldrbpl	r1, [r2], -pc, ror #22
 800:	f7560100 			; <UNDEFINED> instruction: 0xf7560100
 804:	02000000 	andeq	r0, r0, #0
 808:	17007791 			; <UNDEFINED> instruction: 0x17007791
 80c:	00000395 	muleq	r0, r5, r3
 810:	03962401 	orrseq	r2, r6, #16777216	; 0x1000000
 814:	00762000 	rsbseq	r2, r6, r0
 818:	9c010000 	stcls	0, cr0, [r1], {-0}
 81c:	0000052c 	andeq	r0, r0, ip, lsr #10
 820:	00033b1d 	andeq	r3, r3, sp, lsl fp
 824:	f7250100 			; <UNDEFINED> instruction: 0xf7250100
 828:	02000000 	andeq	r0, r0, #0
 82c:	17007791 			; <UNDEFINED> instruction: 0x17007791
 830:	00000276 	andeq	r0, r0, r6, ror r2
 834:	033c1101 	teqeq	ip, #1073741824	; 0x40000000
 838:	005a2000 	subseq	r2, sl, r0
 83c:	9c010000 	stcls	0, cr0, [r1], {-0}
 840:	00000550 	andeq	r0, r0, r0, asr r5
 844:	00027d18 	andeq	r7, r2, r8, lsl sp
 848:	f7110100 			; <UNDEFINED> instruction: 0xf7110100
 84c:	02000000 	andeq	r0, r0, #0
 850:	20007791 	mulcs	r0, r1, r7
 854:	000002d5 	ldrdeq	r0, [r0], -r5
 858:	02e40a01 	rsceq	r0, r4, #4096	; 0x1000
 85c:	00582000 	subseq	r2, r8, r0
 860:	9c010000 	stcls	0, cr0, [r1], {-0}
 864:	00000580 	andeq	r0, r0, r0, lsl #11
 868:	0100781c 	tsteq	r0, ip, lsl r8
 86c:	0000f70a 	andeq	pc, r0, sl, lsl #14
 870:	6f910200 	svcvs	0x00910200
 874:	0002ec1d 	andeq	lr, r2, sp, lsl ip
 878:	f70b0100 			; <UNDEFINED> instruction: 0xf70b0100
 87c:	02000000 	andeq	r0, r0, #0
 880:	21007791 			; <UNDEFINED> instruction: 0x21007791
 884:	00000316 	andeq	r0, r0, r6, lsl r3
 888:	02940301 	addseq	r0, r4, #67108864	; 0x4000000
 88c:	00502000 	subseq	r2, r0, r0
 890:	9c010000 	stcls	0, cr0, [r1], {-0}
 894:	0100781c 	tsteq	r0, ip, lsl r8
 898:	0000f703 	andeq	pc, r0, r3, lsl #14
 89c:	6f910200 	svcvs	0x00910200
 8a0:	0002ec1d 	andeq	lr, r2, sp, lsl ip
 8a4:	f7040100 			; <UNDEFINED> instruction: 0xf7040100
 8a8:	02000000 	andeq	r0, r0, #0
 8ac:	00007791 	muleq	r0, r1, r7
 8b0:	000001cf 	andeq	r0, r0, pc, asr #3
 8b4:	03780004 	cmneq	r8, #4
 8b8:	01040000 	mrseq	r0, (UNDEF: 4)
 8bc:	00000000 	andeq	r0, r0, r0
 8c0:	00045b0c 	andeq	r5, r4, ip, lsl #22
 8c4:	0009cc00 	andeq	ip, r9, r0, lsl #24
 8c8:	00016820 	andeq	r6, r1, r0, lsr #16
 8cc:	00032e00 	andeq	r2, r3, r0, lsl #28
 8d0:	02020200 	andeq	r0, r2, #0, 4
 8d4:	0000420b 	andeq	r4, r0, fp, lsl #4
 8d8:	03640300 	cmneq	r4, #0, 6
 8dc:	0c020000 	stceq	0, cr0, [r2], {-0}
 8e0:	00000042 	andeq	r0, r0, r2, asr #32
 8e4:	034f0300 	movteq	r0, #62208	; 0xf300
 8e8:	0d020000 	stceq	0, cr0, [r2, #-0]
 8ec:	00000042 	andeq	r0, r0, r2, asr #32
 8f0:	01040001 	tsteq	r4, r1
 8f4:	00010f08 	andeq	r0, r1, r8, lsl #30
 8f8:	02040500 	andeq	r0, r4, #0, 10
 8fc:	00006209 	andeq	r6, r0, r9, lsl #4
 900:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
 904:	0a020072 	beq	80ad4 <startup-0x1ff7f52c>
 908:	00000062 	andeq	r0, r0, r2, rrx
 90c:	00002107 	andeq	r2, r0, r7, lsl #2
 910:	04040000 	streq	r0, [r4], #-0
 914:	00012e07 	andeq	r2, r1, r7, lsl #28
 918:	02020200 	andeq	r0, r2, #0, 4
 91c:	00008a12 	andeq	r8, r0, r2, lsl sl
 920:	03340300 	teqeq	r4, #0, 6
 924:	13020000 	movwne	r0, #8192	; 0x2000
 928:	00000042 	andeq	r0, r0, r2, asr #32
 92c:	02ac0300 	adceq	r0, ip, #0, 6
 930:	14020000 	strne	r0, [r2], #-0
 934:	00000042 	andeq	r0, r0, r2, asr #32
 938:	04050001 	streq	r0, [r5], #-1
 93c:	00a31002 	adceq	r1, r3, r2
 940:	6f060000 	svcvs	0x00060000
 944:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
 948:	00006211 	andeq	r6, r0, r1, lsl r2
 94c:	00690700 	rsbeq	r0, r9, r0, lsl #14
 950:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 954:	00000264 	andeq	r0, r0, r4, ror #4
 958:	ec040218 	sfm	f0, 4, [r4], {24}
 95c:	03000000 	movweq	r0, #0
 960:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
 964:	00620502 	rsbeq	r0, r2, r2, lsl #10
 968:	03000000 	movweq	r0, #0
 96c:	00000288 	andeq	r0, r0, r8, lsl #5
 970:	00620602 	rsbeq	r0, r2, r2, lsl #12
 974:	03040000 	movweq	r0, #16384	; 0x4000
 978:	00000357 	andeq	r0, r0, r7, asr r3
 97c:	00620702 	rsbeq	r0, r2, r2, lsl #14
 980:	03080000 	movweq	r0, #32768	; 0x8000
 984:	00000310 	andeq	r0, r0, r0, lsl r3
 988:	00620802 	rsbeq	r0, r2, r2, lsl #16
 98c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
 990:	00000049 	andeq	r0, r0, r9, asr #32
 994:	008a0910 	addeq	r0, sl, r0, lsl r9
 998:	00140000 	andseq	r0, r4, r0
 99c:	0002d00a 	andeq	sp, r2, sl
 9a0:	a3170200 	tstge	r7, #0, 4
 9a4:	0b000000 	bleq	9ac <startup-0x1ffff654>
 9a8:	00000042 	andeq	r0, r0, r2, asr #32
 9ac:	0000010d 	andeq	r0, r0, sp, lsl #2
 9b0:	00010d0c 	andeq	r0, r1, ip, lsl #26
 9b4:	0d0c0300 	stceq	3, cr0, [ip, #-0]
 9b8:	03000001 	movweq	r0, #1
 9bc:	07040400 	streq	r0, [r4, -r0, lsl #8]
 9c0:	000000a7 	andeq	r0, r0, r7, lsr #1
 9c4:	79656b0d 	stmdbvc	r5!, {r0, r2, r3, r8, r9, fp, sp, lr}^
 9c8:	f7060300 			; <UNDEFINED> instruction: 0xf7060300
 9cc:	05000000 	streq	r0, [r0, #-0]
 9d0:	000b5403 	andeq	r5, fp, r3, lsl #8
 9d4:	04ca0e20 	strbeq	r0, [sl], #3616	; 0xe20
 9d8:	27010000 	strcs	r0, [r1, -r0]
 9dc:	0000014b 	andeq	r0, r0, fp, asr #2
 9e0:	20000ae0 	andcs	r0, r0, r0, ror #21
 9e4:	00000054 	andeq	r0, r0, r4, asr r0
 9e8:	014b9c01 	cmpeq	fp, r1, lsl #24
 9ec:	630d0000 	movwvs	r0, #53248	; 0xd000
 9f0:	42290100 	eormi	r0, r9, #0, 2
 9f4:	02000000 	andeq	r0, r0, #0
 9f8:	0f007791 	svceq	0x00007791
 9fc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 a00:	b7100074 			; <UNDEFINED> instruction: 0xb7100074
 a04:	01000004 	tsteq	r0, r4
 a08:	000a881d 	andeq	r8, sl, sp, lsl r8
 a0c:	00005820 	andeq	r5, r0, r0, lsr #16
 a10:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
 a14:	11000001 	tstne	r0, r1
 a18:	00776f72 	rsbseq	r6, r7, r2, ror pc
 a1c:	00421d01 	subeq	r1, r2, r1, lsl #26
 a20:	91020000 	mrsls	r0, (UNDEF: 2)
 a24:	b2120077 	andslt	r0, r2, #119	; 0x77
 a28:	01000004 	tsteq	r0, r4
 a2c:	0000420c 	andeq	r4, r0, ip, lsl #4
 a30:	000a1c00 	andeq	r1, sl, r0, lsl #24
 a34:	00006c20 	andeq	r6, r0, r0, lsr #24
 a38:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
 a3c:	13000001 	movwne	r0, #1
 a40:	00776f72 	rsbseq	r6, r7, r2, ror pc
 a44:	00420d01 	subeq	r0, r2, r1, lsl #26
 a48:	c3140000 	tstgt	r4, #0
 a4c:	01000004 	tsteq	r0, r4
 a50:	0000420d 	andeq	r4, r0, sp, lsl #4
 a54:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 a58:	000a2215 	andeq	r2, sl, r5, lsl r2
 a5c:	00005220 	andeq	r5, r0, r0, lsr #4
 a60:	6f720d00 	svcvs	0x00720d00
 a64:	0f010077 	svceq	0x00010077
 a68:	00000042 	andeq	r0, r0, r2, asr #32
 a6c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a70:	04d51600 	ldrbeq	r1, [r5], #1536	; 0x600
 a74:	03010000 	movweq	r0, #4096	; 0x1000
 a78:	200009cc 	andcs	r0, r0, ip, asr #19
 a7c:	00000050 	andeq	r0, r0, r0, asr r0
 a80:	Address 0x00000a80 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	49010103 	stmdbmi	r1, {r0, r1, r8}
  20:	00130113 	andseq	r0, r3, r3, lsl r1
  24:	00210400 	eoreq	r0, r1, r0, lsl #8
  28:	0b2f1349 	bleq	bc4d54 <startup-0x1f43b2ac>
  2c:	34050000 	strcc	r0, [r5], #-0
  30:	3a080300 	bcc	200c38 <startup-0x1fdff3c8>
  34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  38:	00180213 	andseq	r0, r8, r3, lsl r2
  3c:	00160600 	andseq	r0, r6, r0, lsl #12
  40:	0b3a0e03 	bleq	e83854 <startup-0x1f17c7ac>
  44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  48:	13070000 	movwne	r0, #28672	; 0x7000
  4c:	0b0e0301 	bleq	380c58 <startup-0x1fc7f3a8>
  50:	3b0b3a0b 	blcc	2ce884 <startup-0x1fd3177c>
  54:	0013010b 	andseq	r0, r3, fp, lsl #2
  58:	000d0800 	andeq	r0, sp, r0, lsl #16
  5c:	0b3a0803 	bleq	e82070 <startup-0x1f17df90>
  60:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  64:	00000b38 	andeq	r0, r0, r8, lsr fp
  68:	03000d09 	movweq	r0, #3337	; 0xd09
  6c:	3b0b3a0e 	blcc	2ce8ac <startup-0x1fd31754>
  70:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  74:	0a00000b 	beq	a8 <startup-0x1fffff58>
  78:	0b0b0024 	bleq	2c0110 <startup-0x1fd3fef0>
  7c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  80:	0f0b0000 	svceq	0x000b0000
  84:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  88:	0c000013 	stceq	0, cr0, [r0], {19}
  8c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  90:	00001301 	andeq	r1, r0, r1, lsl #6
  94:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
  98:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  9c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  a0:	0b3a0e03 	bleq	e838b4 <startup-0x1f17c74c>
  a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  b0:	00130119 	andseq	r0, r3, r9, lsl r1
  b4:	00340f00 	eorseq	r0, r4, r0, lsl #30
  b8:	0b3a0e03 	bleq	e838cc <startup-0x1f17c734>
  bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  c0:	00001802 	andeq	r1, r0, r2, lsl #16
  c4:	3f002e10 	svccc	0x00002e10
  c8:	3a0e0319 	bcc	380d34 <startup-0x1fc7f2cc>
  cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  d4:	97184006 	ldrls	r4, [r8, -r6]
  d8:	00001942 	andeq	r1, r0, r2, asr #18
  dc:	01110100 	tsteq	r1, r0, lsl #2
  e0:	0b130e25 	bleq	4c397c <startup-0x1fb3c684>
  e4:	01110e03 	tsteq	r1, r3, lsl #28
  e8:	17100612 			; <UNDEFINED> instruction: 0x17100612
  ec:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
  f0:	03193f01 	tsteq	r9, #1, 30
  f4:	3b0b3a0e 	blcc	2ce934 <startup-0x1fd316cc>
  f8:	1119270b 	tstne	r9, fp, lsl #14
  fc:	40061201 	andmi	r1, r6, r1, lsl #4
 100:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 104:	00001301 	andeq	r1, r0, r1, lsl #6
 108:	03000503 	movweq	r0, #1283	; 0x503
 10c:	3b0b3a08 	blcc	2ce934 <startup-0x1fd316cc>
 110:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 114:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
 118:	0b0b0024 	bleq	2c01b0 <startup-0x1fd3fe50>
 11c:	0e030b3e 	vmoveq.16	d3[0], r0
 120:	0b050000 	bleq	140128 <startup-0x1febfed8>
 124:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 128:	06000006 	streq	r0, [r0], -r6
 12c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 130:	0b3b0b3a 	bleq	ec2e20 <startup-0x1f13d1e0>
 134:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 138:	24070000 	strcs	r0, [r7], #-0
 13c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 140:	0008030b 	andeq	r0, r8, fp, lsl #6
 144:	002e0800 	eoreq	r0, lr, r0, lsl #16
 148:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 14c:	0b3b0b3a 	bleq	ec2e3c <startup-0x1f13d1c4>
 150:	01111927 	tsteq	r1, r7, lsr #18
 154:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 158:	00194296 	mulseq	r9, r6, r2
 15c:	002e0900 	eoreq	r0, lr, r0, lsl #18
 160:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 164:	0b3b0b3a 	bleq	ec2e54 <startup-0x1f13d1ac>
 168:	01111927 	tsteq	r1, r7, lsr #18
 16c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 170:	00194297 	mulseq	r9, r7, r2
 174:	11010000 	mrsne	r0, (UNDEF: 1)
 178:	130e2501 	movwne	r2, #58625	; 0xe501
 17c:	110e030b 	tstne	lr, fp, lsl #6
 180:	10061201 	andne	r1, r6, r1, lsl #4
 184:	02000017 	andeq	r0, r0, #23
 188:	0b0b0113 	bleq	2c05dc <startup-0x1fd3fa24>
 18c:	0b3b0b3a 	bleq	ec2e7c <startup-0x1f13d184>
 190:	00001301 	andeq	r1, r0, r1, lsl #6
 194:	03000d03 	movweq	r0, #3331	; 0xd03
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1a0:	0400000b 	streq	r0, [r0], #-11
 1a4:	0b0b0024 	bleq	2c023c <startup-0x1fd3fdc4>
 1a8:	0e030b3e 	vmoveq.16	d3[0], r0
 1ac:	17050000 	strne	r0, [r5, -r0]
 1b0:	3a0b0b01 	bcc	2c2dbc <startup-0x1fd3d244>
 1b4:	010b3b0b 	tsteq	fp, fp, lsl #22
 1b8:	06000013 			; <UNDEFINED> instruction: 0x06000013
 1bc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 1c0:	0b3b0b3a 	bleq	ec2eb0 <startup-0x1f13d150>
 1c4:	00001349 	andeq	r1, r0, r9, asr #6
 1c8:	49000d07 	stmdbmi	r0, {r0, r1, r2, r8, sl, fp}
 1cc:	08000013 	stmdaeq	r0, {r0, r1, r4}
 1d0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 1d4:	0b3a0b0b 	bleq	e82e08 <startup-0x1f17d1f8>
 1d8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 1dc:	0d090000 	stceq	0, cr0, [r9, #-0]
 1e0:	38134900 	ldmdacc	r3, {r8, fp, lr}
 1e4:	0a00000b 	beq	218 <startup-0x1ffffde8>
 1e8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 1ec:	0b3b0b3a 	bleq	ec2edc <startup-0x1f13d124>
 1f0:	00001349 	andeq	r1, r0, r9, asr #6
 1f4:	03000d0b 	movweq	r0, #3339	; 0xd0b
 1f8:	3b0b3a08 	blcc	2cea20 <startup-0x1fd315e0>
 1fc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 200:	0c00000b 	stceq	0, cr0, [r0], {11}
 204:	0b0b0024 	bleq	2c029c <startup-0x1fd3fd64>
 208:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 20c:	010d0000 	mrseq	r0, (UNDEF: 13)
 210:	01134901 	tsteq	r3, r1, lsl #18
 214:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 218:	13490021 	movtne	r0, #36897	; 0x9021
 21c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 220:	0b000f0f 	bleq	3e64 <startup-0x1fffc19c>
 224:	0013490b 	andseq	r4, r3, fp, lsl #18
 228:	01151000 	tsteq	r5, r0
 22c:	13011927 	movwne	r1, #6439	; 0x1927
 230:	05110000 	ldreq	r0, [r1, #-0]
 234:	00134900 	andseq	r4, r3, r0, lsl #18
 238:	002e1200 	eoreq	r1, lr, r0, lsl #4
 23c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 240:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 244:	01111927 	tsteq	r1, r7, lsr #18
 248:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 24c:	00194297 	mulseq	r9, r7, r2
 250:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 254:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 258:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 25c:	01111927 	tsteq	r1, r7, lsr #18
 260:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 264:	01194297 			; <UNDEFINED> instruction: 0x01194297
 268:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 26c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 270:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 274:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 278:	05150000 	ldreq	r0, [r5, #-0]
 27c:	3a080300 	bcc	200e84 <startup-0x1fdff17c>
 280:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 284:	00180213 	andseq	r0, r8, r3, lsl r2
 288:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 28c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 290:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 294:	01111927 	tsteq	r1, r7, lsr #18
 298:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 29c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2a0:	17000013 	smladne	r0, r3, r0, r0
 2a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2a8:	0b3a0e03 	bleq	e83abc <startup-0x1f17c544>
 2ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2b4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2b8:	00130119 	andseq	r0, r3, r9, lsl r1
 2bc:	00051800 	andeq	r1, r5, r0, lsl #16
 2c0:	0b3a0e03 	bleq	e83ad4 <startup-0x1f17c52c>
 2c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2c8:	00001802 	andeq	r1, r0, r2, lsl #16
 2cc:	11010b19 	tstne	r1, r9, lsl fp
 2d0:	00061201 	andeq	r1, r6, r1, lsl #4
 2d4:	00341a00 	eorseq	r1, r4, r0, lsl #20
 2d8:	0b3a0803 	bleq	e822ec <startup-0x1f17dd14>
 2dc:	1349053b 	movtne	r0, #38203	; 0x953b
 2e0:	00001802 	andeq	r1, r0, r2, lsl #16
 2e4:	0300341b 	movweq	r3, #1051	; 0x41b
 2e8:	3b0b3a08 	blcc	2ceb10 <startup-0x1fd314f0>
 2ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2f0:	1c000018 	stcne	0, cr0, [r0], {24}
 2f4:	08030005 	stmdaeq	r3, {r0, r2}
 2f8:	0b3b0b3a 	bleq	ec2fe8 <startup-0x1f13d018>
 2fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 300:	341d0000 	ldrcc	r0, [sp], #-0
 304:	3a0e0300 	bcc	380f0c <startup-0x1fc7f0f4>
 308:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 30c:	00180213 	andseq	r0, r8, r3, lsl r2
 310:	002e1e00 	eoreq	r1, lr, r0, lsl #28
 314:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 318:	0b3b0b3a 	bleq	ec3008 <startup-0x1f13cff8>
 31c:	01111927 	tsteq	r1, r7, lsr #18
 320:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 324:	00194296 	mulseq	r9, r6, r2
 328:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
 32c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 330:	0b3b0b3a 	bleq	ec3020 <startup-0x1f13cfe0>
 334:	13491927 	movtne	r1, #39207	; 0x9927
 338:	06120111 			; <UNDEFINED> instruction: 0x06120111
 33c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 340:	00130119 	andseq	r0, r3, r9, lsl r1
 344:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 348:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 34c:	0b3b0b3a 	bleq	ec303c <startup-0x1f13cfc4>
 350:	01111927 	tsteq	r1, r7, lsr #18
 354:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 358:	01194297 			; <UNDEFINED> instruction: 0x01194297
 35c:	21000013 	tstcs	r0, r3, lsl r0
 360:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 364:	0b3a0e03 	bleq	e83b78 <startup-0x1f17c488>
 368:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 36c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 370:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 374:	00000019 	andeq	r0, r0, r9, lsl r0
 378:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 37c:	030b130e 	movweq	r1, #45838	; 0xb30e
 380:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 384:	00171006 	andseq	r1, r7, r6
 388:	01130200 	tsteq	r3, r0, lsl #4
 38c:	0b3a0b0b 	bleq	e82fc0 <startup-0x1f17d040>
 390:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 394:	0d030000 	stceq	0, cr0, [r3, #-0]
 398:	3a0e0300 	bcc	380fa0 <startup-0x1fc7f060>
 39c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a0:	000b3813 	andeq	r3, fp, r3, lsl r8
 3a4:	00240400 	eoreq	r0, r4, r0, lsl #8
 3a8:	0b3e0b0b 	bleq	f82fdc <startup-0x1f07d024>
 3ac:	00000e03 	andeq	r0, r0, r3, lsl #28
 3b0:	0b011705 	bleq	45fcc <startup-0x1ffba034>
 3b4:	3b0b3a0b 	blcc	2cebe8 <startup-0x1fd31418>
 3b8:	0013010b 	andseq	r0, r3, fp, lsl #2
 3bc:	000d0600 	andeq	r0, sp, r0, lsl #12
 3c0:	0b3a0803 	bleq	e823d4 <startup-0x1f17dc2c>
 3c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3c8:	0d070000 	stceq	0, cr0, [r7, #-0]
 3cc:	00134900 	andseq	r4, r3, r0, lsl #18
 3d0:	01130800 	tsteq	r3, r0, lsl #16
 3d4:	0b0b0e03 	bleq	2c3be8 <startup-0x1fd3c418>
 3d8:	0b3b0b3a 	bleq	ec30c8 <startup-0x1f13cf38>
 3dc:	00001301 	andeq	r1, r0, r1, lsl #6
 3e0:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 3e4:	000b3813 	andeq	r3, fp, r3, lsl r8
 3e8:	00160a00 	andseq	r0, r6, r0, lsl #20
 3ec:	0b3a0e03 	bleq	e83c00 <startup-0x1f17c400>
 3f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3f4:	010b0000 	mrseq	r0, (UNDEF: 11)
 3f8:	01134901 	tsteq	r3, r1, lsl #18
 3fc:	0c000013 	stceq	0, cr0, [r0], {19}
 400:	13490021 	movtne	r0, #36897	; 0x9021
 404:	00000b2f 	andeq	r0, r0, pc, lsr #22
 408:	0300340d 	movweq	r3, #1037	; 0x40d
 40c:	3b0b3a08 	blcc	2cec34 <startup-0x1fd313cc>
 410:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 414:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 418:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 41c:	0b3a0e03 	bleq	e83c30 <startup-0x1f17c3d0>
 420:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 424:	01111349 	tsteq	r1, r9, asr #6
 428:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 42c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 430:	0f000013 	svceq	0x00000013
 434:	0b0b0024 	bleq	2c04cc <startup-0x1fd3fb34>
 438:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 43c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 440:	03193f01 	tsteq	r9, #1, 30
 444:	3b0b3a0e 	blcc	2cec84 <startup-0x1fd3137c>
 448:	1119270b 	tstne	r9, fp, lsl #14
 44c:	40061201 	andmi	r1, r6, r1, lsl #4
 450:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 454:	00001301 	andeq	r1, r0, r1, lsl #6
 458:	03000511 	movweq	r0, #1297	; 0x511
 45c:	3b0b3a08 	blcc	2cec84 <startup-0x1fd3137c>
 460:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 464:	12000018 	andne	r0, r0, #24
 468:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 46c:	0b3a0e03 	bleq	e83c80 <startup-0x1f17c380>
 470:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 474:	01111349 	tsteq	r1, r9, asr #6
 478:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 47c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 480:	13000013 	movwne	r0, #19
 484:	08030034 	stmdaeq	r3, {r2, r4, r5}
 488:	0b3b0b3a 	bleq	ec3178 <startup-0x1f13ce88>
 48c:	00001349 	andeq	r1, r0, r9, asr #6
 490:	03003414 	movweq	r3, #1044	; 0x414
 494:	3b0b3a0e 	blcc	2cecd4 <startup-0x1fd3132c>
 498:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 49c:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 4a0:	0111010b 	tsteq	r1, fp, lsl #2
 4a4:	00000612 	andeq	r0, r0, r2, lsl r6
 4a8:	3f002e16 	svccc	0x00002e16
 4ac:	3a0e0319 	bcc	381118 <startup-0x1fc7eee8>
 4b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4b4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4b8:	97184006 	ldrls	r4, [r8, -r6]
 4bc:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000001c4 	andeq	r0, r0, r4, asr #3
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02550002 	subseq	r0, r5, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200001d4 	ldrdcs	r0, [r0], -r4
  3c:	000000be 	strheq	r0, [r0], -lr
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	03030002 	movweq	r0, #12290	; 0x3002
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000294 	mulcs	r0, r4, r2
  5c:	00000734 	andeq	r0, r0, r4, lsr r7
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	08b00002 	ldmeq	r0!, {r1}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200009cc 	andcs	r0, r0, ip, asr #19
  7c:	00000168 	andeq	r0, r0, r8, ror #2
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200001d4 	ldrdcs	r0, [r0], -r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000c7 	andeq	r0, r0, r7, asr #1
   4:	00850002 	addeq	r0, r5, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6f6d754c 	svcvs	0x006d754c
  28:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  2c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  30:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; fffffe68 <key+0xdffff314>
  34:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
  38:	31305441 	teqcc	r0, r1, asr #8
  3c:	614c2f37 	cmpvs	ip, r7, lsr pc
  40:	61207362 			; <UNDEFINED> instruction: 0x61207362
  44:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
  48:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
  4c:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
  50:	6172672f 	cmnvs	r2, pc, lsr #14
  54:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  58:	70736964 	rsbsvc	r6, r3, r4, ror #18
  5c:	0079616c 	rsbseq	r6, r9, ip, ror #2
  60:	61747300 	cmnvs	r4, r0, lsl #6
  64:	70757472 	rsbsvc	r7, r5, r2, ror r4
  68:	0100632e 	tsteq	r0, lr, lsr #6
  6c:	72670000 	rsbvc	r0, r7, #0
  70:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  74:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  78:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  7c:	0100682e 	tsteq	r0, lr, lsr #16
  80:	656b0000 	strbvs	r0, [fp, #-0]!
  84:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
  88:	0100682e 	tsteq	r0, lr, lsr #16
  8c:	00000000 	andeq	r0, r0, r0
  90:	00000205 	andeq	r0, r0, r5, lsl #4
  94:	0f032000 	svceq	0x00032000
  98:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  9c:	01010003 	tsteq	r1, r3
  a0:	10020500 	andne	r0, r2, r0, lsl #10
  a4:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  a8:	2f3d0118 	svccs	0x003d0118
  ac:	2e2e0330 	mcrcs	3, 1, r0, cr14, cr0, {1}
  b0:	1a68022f 	bne	1a00974 <startup-0x1e5ff68c>
  b4:	ac080a03 			; <UNDEFINED> instruction: 0xac080a03
  b8:	4b596930 	blmi	165a580 <startup-0x1e9a5a80>
  bc:	75d7674b 	ldrbvc	r6, [r7, #1867]	; 0x74b
  c0:	03768383 	cmneq	r6, #201326594	; 0xc000002
  c4:	09023c76 	stmdbeq	r2, {r1, r2, r4, r5, r6, sl, fp, ip, sp}
  c8:	9a010100 	bls	404d0 <startup-0x1ffbfb30>
  cc:	02000000 	andeq	r0, r0, #0
  d0:	00006300 	andeq	r6, r0, r0, lsl #6
  d4:	fb010200 	blx	408de <startup-0x1ffbf722>
  d8:	01000d0e 	tsteq	r0, lr, lsl #26
  dc:	00010101 	andeq	r0, r1, r1, lsl #2
  e0:	00010000 	andeq	r0, r1, r0
  e4:	3a430100 	bcc	10c04ec <startup-0x1ef3fb14>
  e8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  ec:	4c2f7372 	stcmi	3, cr7, [pc], #-456	; ffffff2c <key+0xdffff3d8>
  f0:	2f6f6d75 	svccs	0x006f6d75
  f4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
  f8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  fc:	6f4d2f73 	svcvs	0x004d2f73
 100:	41442d70 	hvcmi	17104	; 0x42d0
 104:	37313054 			; <UNDEFINED> instruction: 0x37313054
 108:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 10c:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 110:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 114:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 118:	2f736573 	svccs	0x00736573
 11c:	70617267 	rsbvc	r7, r1, r7, ror #4
 120:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 124:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 128:	00007961 	andeq	r7, r0, r1, ror #18
 12c:	616c6564 	cmnvs	ip, r4, ror #10
 130:	00632e79 	rsbeq	r2, r3, r9, ror lr
 134:	00000001 	andeq	r0, r0, r1
 138:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
 13c:	14200001 	strtne	r0, [r0], #-1
 140:	6767672f 	strbvs	r6, [r7, -pc, lsr #14]!
 144:	673e683d 			; <UNDEFINED> instruction: 0x673e683d
 148:	2f2f2fbc 	svccs	0x002f2fbc
 14c:	02004b3e 	andeq	r4, r0, #63488	; 0xf800
 150:	003d0304 	eorseq	r0, sp, r4, lsl #6
 154:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 158:	01040200 	mrseq	r0, R12_usr
 15c:	5b063c06 	blpl	18f17c <startup-0x1fe70e84>
 160:	23754c4c 	cmncs	r5, #76, 24	; 0x4c00
 164:	01000302 	tsteq	r0, r2, lsl #6
 168:	0001c101 	andeq	ip, r1, r1, lsl #2
 16c:	8a000200 	bhi	974 <startup-0x1ffff68c>
 170:	02000000 	andeq	r0, r0, #0
 174:	0d0efb01 	vstreq	d15, [lr, #-4]
 178:	01010100 	mrseq	r0, (UNDEF: 17)
 17c:	00000001 	andeq	r0, r0, r1
 180:	01000001 	tsteq	r0, r1
 184:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff749 <key+0xdfffebf5>
 188:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 18c:	6d754c2f 	ldclvs	12, cr4, [r5, #-188]!	; 0xffffff44
 190:	6f442f6f 	svcvs	0x00442f6f
 194:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 198:	2f73746e 	svccs	0x0073746e
 19c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 1a0:	30544144 	subscc	r4, r4, r4, asr #2
 1a4:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; e8 <startup-0x1fffff18>
 1a8:	20736261 	rsbscs	r6, r3, r1, ror #4
 1ac:	20646e61 	rsbcs	r6, r4, r1, ror #28
 1b0:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 1b4:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 1b8:	72672f73 	rsbvc	r2, r7, #460	; 0x1cc
 1bc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1c0:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 1c4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1c8:	72670000 	rsbvc	r0, r7, #0
 1cc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1d0:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 1d4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1d8:	0100632e 	tsteq	r0, lr, lsr #6
 1dc:	70670000 	rsbvc	r0, r7, r0
 1e0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 1e4:	00000100 	andeq	r0, r0, r0, lsl #2
 1e8:	70617267 	rsbvc	r7, r1, r7, ror #4
 1ec:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 1f0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 1f4:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 1f8:	00000100 	andeq	r0, r0, r0, lsl #2
 1fc:	02050000 	andeq	r0, r5, #0
 200:	20000294 	mulcs	r0, r4, r2
 204:	91596714 	cmpls	r9, r4, lsl r7
 208:	67765983 	ldrbvs	r5, [r6, -r3, lsl #19]!
 20c:	5983d759 	stmibpl	r3, {r0, r3, r4, r6, r8, r9, sl, ip, lr, pc}
 210:	10036768 	andne	r6, r3, r8, ror #14
 214:	20700374 	rsbscs	r0, r0, r4, ror r3
 218:	034a1003 	movteq	r1, #40963	; 0xa003
 21c:	223d2072 	eorscs	r2, sp, #114	; 0x72
 220:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 224:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 228:	3f3e3f4c 	svccc	0x003e3f4c
 22c:	3d323d3d 	ldccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 230:	313d4b30 	teqcc	sp, r0, lsr fp
 234:	4a770367 	bmi	1dc0fd8 <startup-0x1e23f028>
 238:	25200a03 	strcs	r0, [r0, #-2563]!	; 0xfffff5fd
 23c:	68a03d3e 	stmiavs	r0!, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 240:	593e3e3f 	ldmdbpl	lr!, {r0, r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 244:	5a313d30 	bpl	c4f70c <startup-0x1f3b08f4>
 248:	3d593e3f 	ldclcc	14, cr3, [r9, #-252]	; 0xffffff04
 24c:	033d5930 	teqeq	sp, #48, 18	; 0xc0000
 250:	ae3d2e0b 	cdpge	14, 3, cr2, cr13, cr11, {0}
 254:	30594b92 			; <UNDEFINED> instruction: 0x30594b92
 258:	593f2f3d 	ldmdbpl	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
 25c:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 260:	3d3f3d32 	ldccc	13, cr3, [pc, #-200]!	; 1a0 <startup-0x1ffffe60>
 264:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
 268:	914c833d 	cmpls	ip, sp, lsr r3
 26c:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 270:	59674c83 	stmdbpl	r7!, {r0, r1, r7, sl, fp, lr}^
 274:	3e2f4c67 	cdpcc	12, 2, cr4, cr15, cr7, {3}
 278:	3e3d3e3e 	mrccc	14, 1, r3, cr13, cr14, {1}
 27c:	4b4b4b3e 	blmi	12d2f7c <startup-0x1ed2d084>
 280:	3e3d4c4b 	cdpcc	12, 3, cr4, cr13, cr11, {2}
 284:	4c9f4b3d 	fldmiaxmi	pc, {d4-d33}	;@ Deprecated
 288:	03040200 	movweq	r0, #16896	; 0x4200
 28c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 290:	02004903 	andeq	r4, r0, #49152	; 0xc000
 294:	58060104 	stmdapl	r6, {r2, r8}
 298:	02040200 	andeq	r0, r4, #0, 4
 29c:	02004606 	andeq	r4, r0, #6291456	; 0x600000
 2a0:	58060104 	stmdapl	r6, {r2, r8}
 2a4:	e64c5206 	strb	r5, [ip], -r6, lsl #4
 2a8:	01040200 	mrseq	r0, R12_usr
 2ac:	5b065806 	blpl	1962cc <startup-0x1fe69d34>
 2b0:	01040200 	mrseq	r0, R12_usr
 2b4:	5b065806 	blpl	1962d4 <startup-0x1fe69d2c>
 2b8:	01040200 	mrseq	r0, R12_usr
 2bc:	5c064a06 			; <UNDEFINED> instruction: 0x5c064a06
 2c0:	0d034bae 	vstreq	d4, [r3, #-696]	; 0xfffffd48
 2c4:	7a4b2008 	bvc	12c82ec <startup-0x1ed37d14>
 2c8:	4b764b4b 	blmi	1d92ffc <startup-0x1e26d004>
 2cc:	9fd7c969 	svcls	0x00d7c969
 2d0:	a0ae4bc9 	adcge	r4, lr, r9, asr #23
 2d4:	3c4e039f 	mcrrcc	3, 9, r0, lr, cr15
 2d8:	2d033131 	stfcss	f3, [r3, #-196]	; 0xffffff3c
 2dc:	004b5a20 	subeq	r5, fp, r0, lsr #20
 2e0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 2e4:	03040200 	movweq	r0, #16896	; 0x4200
 2e8:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 2ec:	3c060104 	stfccs	f0, [r6], {4}
 2f0:	4b4c6906 	blmi	131a710 <startup-0x1ece58f0>
 2f4:	03040200 	movweq	r0, #16896	; 0x4200
 2f8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2fc:	00c70803 	sbceq	r0, r7, r3, lsl #16
 300:	06010402 	streq	r0, [r1], -r2, lsl #8
 304:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 308:	77754b4b 	ldrbvc	r4, [r5, -fp, asr #22]!
 30c:	01040200 	mrseq	r0, R12_usr
 310:	83064a06 	movwhi	r4, #27142	; 0x6a06
 314:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
 318:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 31c:	4c4b5b83 	mcrrmi	11, 8, r5, fp, cr3
 320:	4c3d3d67 	ldcmi	13, cr3, [sp], #-412	; 0xfffffe64
 324:	3d343d30 	ldccc	13, cr3, [r4, #-192]!	; 0xffffff40
 328:	000b023d 	andeq	r0, fp, sp, lsr r2
 32c:	00e30101 	rsceq	r0, r3, r1, lsl #2
 330:	00020000 	andeq	r0, r2, r0
 334:	00000083 	andeq	r0, r0, r3, lsl #1
 338:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 33c:	0101000d 	tsteq	r1, sp
 340:	00000101 	andeq	r0, r0, r1, lsl #2
 344:	00000100 	andeq	r0, r0, r0, lsl #2
 348:	2f3a4301 	svccs	0x003a4301
 34c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 350:	6f6c2f73 	svcvs	0x006c2f73
 354:	6e616c76 	mcrvs	12, 3, r6, cr1, cr6, {3}
 358:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 35c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 360:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 198 <startup-0x1ffffe68>
 364:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 368:	31305441 	teqcc	r0, r1, asr #8
 36c:	616d2d37 	cmnvs	sp, r7, lsr sp
 370:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 374:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 378:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 37c:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 380:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 384:	2f736573 	svccs	0x00736573
 388:	70617267 	rsbvc	r7, r1, r7, ror #4
 38c:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 390:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 394:	00007961 	andeq	r7, r0, r1, ror #18
 398:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 39c:	632e6461 			; <UNDEFINED> instruction: 0x632e6461
 3a0:	00000100 	andeq	r0, r0, r0, lsl #2
 3a4:	6f697067 	svcvs	0x00697067
 3a8:	0100682e 	tsteq	r0, lr, lsr #16
 3ac:	656b0000 	strbvs	r0, [fp, #-0]!
 3b0:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 3b4:	0100682e 	tsteq	r0, lr, lsr #16
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	09cc0205 	stmibeq	ip, {r0, r2, r9}^
 3c0:	2f142000 	svccs	0x00142000
 3c4:	674b673d 	smlaldxvs	r6, fp, sp, r7
 3c8:	3f765975 	svccc	0x00765975
 3cc:	4b59594c 	blmi	1656904 <startup-0x1e9a96fc>
 3d0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 3d4:	ac7a0302 	ldclge	3, cr0, [sl], #-8
 3d8:	01040200 	mrseq	r0, R12_usr
 3dc:	03065806 	movweq	r5, #26630	; 0x6806
 3e0:	213d4a0a 	teqcs	sp, sl, lsl #20
 3e4:	4b916768 	blmi	fe45a18c <key+0xde459638>
 3e8:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 3ec:	004b3f92 	umaaleq	r3, fp, r2, pc	; <UNPREDICTABLE>
 3f0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3f4:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 3f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 3fc:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 400:	06010402 	streq	r0, [r1], -r2, lsl #8
 404:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 408:	06010402 	streq	r0, [r1], -r2, lsl #8
 40c:	212f0658 			; <UNDEFINED> instruction: 0x212f0658
 410:	01000602 	tsteq	r0, r2, lsl #12
 414:	Address 0x00000414 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20393943 	eorscs	r3, r9, r3, asr #18
   8:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
   c:	30322031 	eorscc	r2, r2, r1, lsr r0
  10:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  14:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  18:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  1c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  24:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  28:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  2c:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  30:	6172622d 	cmnvs	r2, sp, lsr #4
  34:	2068636e 	rsbcs	r6, r8, lr, ror #6
  38:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  3c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  40:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  44:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  48:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  4c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  50:	616d2d20 	cmnvs	sp, r0, lsr #26
  54:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  58:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  5c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  60:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  64:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  68:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  6c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  70:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  74:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  78:	616d2d20 	cmnvs	sp, r0, lsr #26
  7c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  80:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  84:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  88:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  8c:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  90:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  94:	00393963 	eorseq	r3, r9, r3, ror #18
  98:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  9c:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
  a0:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  a4:	73007972 	movwvc	r7, #2418	; 0x972
  a8:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
  ac:	00657079 	rsbeq	r7, r5, r9, ror r0
  b0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  b4:	7300785f 	movwvc	r7, #2143	; 0x85f
  b8:	5f657a69 	svcpl	0x00657a69
  bc:	616d0079 	smcvs	53257	; 0xd009
  c0:	6b006e69 	blvs	1ba6c <startup-0x1ffe4594>
  c4:	6f627965 	svcvs	0x00627965
  c8:	5f647261 	svcpl	0x00647261
  cc:	006c6176 	rsbeq	r6, ip, r6, ror r1
  d0:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  d4:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
  d8:	47500074 			; <UNDEFINED> instruction: 0x47500074
  dc:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
  e0:	00595254 	subseq	r5, r9, r4, asr r2
  e4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
  e8:	00745f38 	rsbseq	r5, r4, r8, lsr pc
  ec:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
  f0:	6f6d0054 	svcvs	0x006d0054
  f4:	6c006576 	cfstr32vs	mvfx6, [r0], {118}	; 0x76
  f8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  fc:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 100:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 104:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 108:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 10c:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
 110:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 114:	2064656e 	rsbcs	r6, r4, lr, ror #10
 118:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 11c:	6f507400 	svcvs	0x00507400
 120:	00746e69 	rsbseq	r6, r4, r9, ror #28
 124:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 128:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 12c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 130:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 134:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 138:	7300746e 	movwvc	r7, #1134	; 0x46e
 13c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 140:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 144:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 148:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 14c:	6f700074 	svcvs	0x00700074
 150:	00785f73 	rsbseq	r5, r8, r3, ror pc
 154:	5f736f70 	svcpl	0x00736f70
 158:	4f740079 	svcmi	0x00740079
 15c:	64006a62 	strvs	r6, [r0], #-2658	; 0xfffff59e
 160:	00776172 	rsbseq	r6, r7, r2, ror r1
 164:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff729 <key+0xdfffebd5>
 168:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 16c:	6d754c2f 	ldclvs	12, cr4, [r5, #-188]!	; 0xffffff44
 170:	6f442f6f 	svcvs	0x00442f6f
 174:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 178:	2f73746e 	svccs	0x0073746e
 17c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 180:	30544144 	subscc	r4, r4, r4, asr #2
 184:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; c8 <startup-0x1fffff38>
 188:	20736261 	rsbscs	r6, r3, r1, ror #4
 18c:	20646e61 	rsbcs	r6, r4, r1, ror #28
 190:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 194:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 198:	72672f73 	rsbvc	r2, r7, #460	; 0x1cc
 19c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1a0:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 1a4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1a8:	6174732f 	cmnvs	r4, pc, lsr #6
 1ac:	70757472 	rsbsvc	r7, r5, r2, ror r4
 1b0:	7300632e 	movwvc	r6, #814	; 0x32e
 1b4:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 1b8:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 1bc:	6c616200 	sfmvs	f6, 2, [r1], #-0
 1c0:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 1c4:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 1c8:	73007972 	movwvc	r7, #2418	; 0x972
 1cc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 1d0:	50007075 	andpl	r7, r0, r5, ror r0
 1d4:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 1d8:	64005443 	strvs	r5, [r0], #-1091	; 0xfffffbbd
 1dc:	785f7269 	ldmdavc	pc, {r0, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 1e0:	72696400 	rsbvc	r6, r9, #0, 8
 1e4:	6400795f 	strvs	r7, [r0], #-2399	; 0xfffff6a1
 1e8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1ec:	6b696d5f 	blvs	1a5b770 <startup-0x1e5a4890>
 1f0:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
 1f4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1f8:	3030355f 	eorscc	r3, r0, pc, asr r5
 1fc:	4300736e 	movwmi	r7, #878	; 0x36e
 200:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 204:	2f737265 	svccs	0x00737265
 208:	6f6d754c 	svcvs	0x006d754c
 20c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 210:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 214:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 4c <startup-0x1fffffb4>
 218:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 21c:	31305441 	teqcc	r0, r1, asr #8
 220:	614c2f37 	cmpvs	ip, r7, lsr pc
 224:	61207362 			; <UNDEFINED> instruction: 0x61207362
 228:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 22c:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 230:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 234:	6172672f 	cmnvs	r2, pc, lsr #14
 238:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 23c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 240:	2f79616c 	svccs	0x0079616c
 244:	616c6564 	cmnvs	ip, r4, ror #10
 248:	00632e79 	rsbeq	r2, r3, r9, ror lr
 24c:	616c6564 	cmnvs	ip, r4, ror #10
 250:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 254:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 258:	616c6564 	cmnvs	ip, r4, ror #10
 25c:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 260:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 264:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 268:	7264006f 	rsbvc	r0, r4, #111	; 0x6f
 26c:	6f5f7761 	svcvs	0x005f7761
 270:	63656a62 	cmnvs	r5, #401408	; 0x62000
 274:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 278:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 27c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 280:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; b8 <startup-0x1fffff48>
 284:	0072656c 	rsbseq	r6, r2, ip, ror #10
 288:	7079746f 	rsbsvc	r7, r9, pc, ror #8
 28c:	67007265 	strvs	r7, [r0, -r5, ror #4]
 290:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 294:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 298:	5f646165 	svcpl	0x00646165
 29c:	61746164 	cmnvs	r4, r4, ror #2
 2a0:	67617000 	strbvs	r7, [r1, -r0]!
 2a4:	69700065 	ldmdbvs	r0!, {r0, r2, r5, r6}^
 2a8:	006c6578 	rsbeq	r6, ip, r8, ror r5
 2ac:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
 2b0:	00686769 	rsbeq	r6, r8, r9, ror #14
 2b4:	63615f78 	cmnvs	r1, #120, 30	; 0x1e0
 2b8:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
 2bc:	61726700 	cmnvs	r2, r0, lsl #14
 2c0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2c4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2c8:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
 2cc:	00706d65 	rsbseq	r6, r0, r5, ror #26
 2d0:	4f495047 	svcmi	0x00495047
 2d4:	61726700 	cmnvs	r2, r0, lsl #14
 2d8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2dc:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2e0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2e4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 2e8:	00726165 	rsbseq	r6, r2, r5, ror #2
 2ec:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 2f0:	5f6c6f72 	svcpl	0x006c6f72
 2f4:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 2f8:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 2fc:	61726700 	cmnvs	r2, r0, lsl #14
 300:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 304:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 308:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 30c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 310:	64707570 	ldrbtvs	r7, [r0], #-1392	; 0xfffffa90
 314:	72670072 	rsbvc	r0, r7, #114	; 0x72
 318:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 31c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 320:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 324:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 328:	69007465 	stmdbvs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
 32c:	5f74696e 	svcpl	0x0074696e
 330:	00707061 	rsbseq	r7, r0, r1, rrx
 334:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 338:	6400776f 	strvs	r7, [r0], #-1903	; 0xfffff891
 33c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 340:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
 344:	5f797375 	svcpl	0x00797375
 348:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 34c:	69007375 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
 350:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 354:	6f006867 	svcvs	0x00006867
 358:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 35c:	6d007264 	sfmvs	f7, 4, [r0, #-400]	; 0xfffffe70
 360:	006b7361 	rsbeq	r7, fp, r1, ror #6
 364:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
 368:	7600776f 	strvc	r7, [r0], -pc, ror #14
 36c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 370:	61726700 	cmnvs	r2, r0, lsl #14
 374:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 378:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 37c:	645f6574 	ldrbvs	r6, [pc], #-1396	; 384 <startup-0x1ffffc7c>
 380:	00617461 	rsbeq	r7, r1, r1, ror #8
 384:	5f746573 	svcpl	0x00746573
 388:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 38c:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 390:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 394:	61726700 	cmnvs	r2, r0, lsl #14
 398:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 39c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3a0:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 3a4:	00796461 	rsbseq	r6, r9, r1, ror #8
 3a8:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 3ac:	6c630078 	stclvs	0, cr0, [r3], #-480	; 0xfffffe20
 3b0:	5f726165 	svcpl	0x00726165
 3b4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3b8:	6d007463 	cfstrsvs	mvf7, [r0, #-396]	; 0xfffffe74
 3bc:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 3c0:	61726700 	cmnvs	r2, r0, lsl #14
 3c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3c8:	6165725f 	cmnvs	r5, pc, asr r2
 3cc:	6f6d0064 	svcvs	0x006d0064
 3d0:	6f5f6576 	svcvs	0x005f6576
 3d4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 3d8:	72670074 	rsbvc	r0, r7, #116	; 0x74
 3dc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3e0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 3e4:	5f657469 	svcpl	0x00657469
 3e8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 3ec:	00646e61 	rsbeq	r6, r4, r1, ror #28
 3f0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9b5 <key+0xdfffee61>
 3f4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3f8:	6d754c2f 	ldclvs	12, cr4, [r5, #-188]!	; 0xffffff44
 3fc:	6f442f6f 	svcvs	0x00442f6f
 400:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 404:	2f73746e 	svccs	0x0073746e
 408:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 40c:	30544144 	subscc	r4, r4, r4, asr #2
 410:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; 354 <startup-0x1ffffcac>
 414:	20736261 	rsbscs	r6, r3, r1, ror #4
 418:	20646e61 	rsbcs	r6, r4, r1, ror #28
 41c:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 420:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 424:	72672f73 	rsbvc	r2, r7, #460	; 0x1cc
 428:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 42c:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 430:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 434:	6172672f 	cmnvs	r2, pc, lsr #14
 438:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 43c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 440:	2e79616c 	rpwcsez	f6, f1, #4.0
 444:	72670063 	rsbvc	r0, r7, #99	; 0x63
 448:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 44c:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 450:	5f726165 	svcpl	0x00726165
 454:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 458:	43006e65 	movwmi	r6, #3685	; 0xe65
 45c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 460:	2f737265 	svccs	0x00737265
 464:	6c766f6c 	ldclvs	15, cr6, [r6], #-432	; 0xfffffe50
 468:	442f6e61 	strtmi	r6, [pc], #-3681	; 470 <startup-0x1ffffb90>
 46c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 470:	73746e65 	cmnvc	r4, #1616	; 0x650
 474:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 478:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 47c:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
 480:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
 484:	4c2f7265 	sfmmi	f7, 4, [pc], #-404	; 2f8 <startup-0x1ffffd08>
 488:	20736261 	rsbscs	r6, r3, r1, ror #4
 48c:	20646e61 	rsbcs	r6, r4, r1, ror #28
 490:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 494:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 498:	72672f73 	rsbvc	r2, r7, #460	; 0x1cc
 49c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4a0:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 4a4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 4a8:	79656b2f 	stmdbvc	r5!, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 4ac:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 4b0:	656b0063 	strbvs	r0, [fp, #-99]!	; 0xffffff9d
 4b4:	41006279 	tstmi	r0, r9, ror r2
 4b8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 4bc:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
 4c0:	6300776f 	movwvs	r7, #1903	; 0x76f
 4c4:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 4c8:	6552006e 	ldrbvs	r0, [r2, #-110]	; 0xffffff92
 4cc:	6f436461 	svcvs	0x00436461
 4d0:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 4d4:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 4d8:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 4dc:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
 4e0:	Address 0x000004e0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000001c4 	andeq	r0, r0, r4, asr #3
  30:	400c0e41 	andmi	r0, ip, r1, asr #28
  34:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  38:	018e4002 	orreq	r4, lr, r2
  3c:	41700e41 	cmnmi	r0, r1, asr #28
  40:	0000070d 	andeq	r0, r0, sp, lsl #14
  44:	0000000c 	andeq	r0, r0, ip
  48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  4c:	7c020001 	stcvc	0, cr0, [r2], {1}
  50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	00000044 	andeq	r0, r0, r4, asr #32
  5c:	200001d4 	ldrdcs	r0, [r0], -r4
  60:	00000064 	andeq	r0, r0, r4, rrx
  64:	40080e41 	andmi	r0, r8, r1, asr #28
  68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  6c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000044 	andeq	r0, r0, r4, asr #32
  78:	20000238 	andcs	r0, r0, r8, lsr r2
  7c:	00000012 	andeq	r0, r0, r2, lsl r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000044 	andeq	r0, r0, r4, asr #32
  94:	2000024a 	andcs	r0, r0, sl, asr #4
  98:	0000002a 	andeq	r0, r0, sl, lsr #32
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	180e4101 	stmdane	lr, {r0, r8, lr}
  a8:	00070d41 	andeq	r0, r7, r1, asr #26
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000044 	andeq	r0, r0, r4, asr #32
  b4:	20000274 	andcs	r0, r0, r4, ror r2
  b8:	0000001e 	andeq	r0, r0, lr, lsl r0
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	100e4101 	andne	r4, lr, r1, lsl #2
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d4:	7c020001 	stcvc	0, cr0, [r2], {1}
  d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	000000cc 	andeq	r0, r0, ip, asr #1
  e4:	20000294 	mulcs	r0, r4, r2
  e8:	00000050 	andeq	r0, r0, r0, asr r0
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	180e4101 	stmdane	lr, {r0, r8, lr}
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	000000cc 	andeq	r0, r0, ip, asr #1
 104:	200002e4 	andcs	r0, r0, r4, ror #5
 108:	00000058 	andeq	r0, r0, r8, asr r0
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	180e4101 	stmdane	lr, {r0, r8, lr}
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	000000cc 	andeq	r0, r0, ip, asr #1
 124:	2000033c 	andcs	r0, r0, ip, lsr r3
 128:	0000005a 	andeq	r0, r0, sl, asr r0
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	100e4101 	andne	r4, lr, r1, lsl #2
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	000000cc 	andeq	r0, r0, ip, asr #1
 144:	20000396 	mulcs	r0, r6, r3
 148:	00000076 	andeq	r0, r0, r6, ror r0
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	000000cc 	andeq	r0, r0, ip, asr #1
 164:	2000040c 	andcs	r0, r0, ip, lsl #8
 168:	00000090 	muleq	r0, r0, r0
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	180e4101 	stmdane	lr, {r0, r8, lr}
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	000000cc 	andeq	r0, r0, ip, asr #1
 184:	2000049c 	mulcs	r0, ip, r4
 188:	00000080 	andeq	r0, r0, r0, lsl #1
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	100e4101 	andne	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	000000cc 	andeq	r0, r0, ip, asr #1
 1a4:	2000051c 	andcs	r0, r0, ip, lsl r5
 1a8:	00000040 	andeq	r0, r0, r0, asr #32
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	000000cc 	andeq	r0, r0, ip, asr #1
 1c4:	2000055c 	andcs	r0, r0, ip, asr r5
 1c8:	00000046 	andeq	r0, r0, r6, asr #32
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	100e4101 	andne	r4, lr, r1, lsl #2
 1d8:	00070d41 	andeq	r0, r7, r1, asr #26
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	000000cc 	andeq	r0, r0, ip, asr #1
 1e4:	200005a2 	andcs	r0, r0, r2, lsr #11
 1e8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	100e4101 	andne	r4, lr, r1, lsl #2
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	00000018 	andeq	r0, r0, r8, lsl r0
 200:	000000cc 	andeq	r0, r0, ip, asr #1
 204:	200005cc 	andcs	r0, r0, ip, asr #11
 208:	0000005c 	andeq	r0, r0, ip, asr r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	000000cc 	andeq	r0, r0, ip, asr #1
 220:	20000628 	andcs	r0, r0, r8, lsr #12
 224:	00000066 	andeq	r0, r0, r6, rrx
 228:	40080e41 	andmi	r0, r8, r1, asr #28
 22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 230:	100e4101 	andne	r4, lr, r1, lsl #2
 234:	00070d41 	andeq	r0, r7, r1, asr #26
 238:	00000020 	andeq	r0, r0, r0, lsr #32
 23c:	000000cc 	andeq	r0, r0, ip, asr #1
 240:	2000068e 	andcs	r0, r0, lr, lsl #13
 244:	000001a6 	andeq	r0, r0, r6, lsr #3
 248:	400c0e41 	andmi	r0, ip, r1, asr #28
 24c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 250:	018e4002 	orreq	r4, lr, r2
 254:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 258:	0000070d 	andeq	r0, r0, sp, lsl #14
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	000000cc 	andeq	r0, r0, ip, asr #1
 264:	20000834 	andcs	r0, r0, r4, lsr r8
 268:	00000064 	andeq	r0, r0, r4, rrx
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	180e4101 	stmdane	lr, {r0, r8, lr}
 278:	00070d41 	andeq	r0, r7, r1, asr #26
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	000000cc 	andeq	r0, r0, ip, asr #1
 284:	20000898 	mulcs	r0, r8, r8
 288:	00000064 	andeq	r0, r0, r4, rrx
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	180e4101 	stmdane	lr, {r0, r8, lr}
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	000000cc 	andeq	r0, r0, ip, asr #1
 2a4:	200008fc 	strdcs	r0, [r0], -ip
 2a8:	00000080 	andeq	r0, r0, r0, lsl #1
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	100e4101 	andne	r4, lr, r1, lsl #2
 2b8:	00070d41 	andeq	r0, r7, r1, asr #26
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	000000cc 	andeq	r0, r0, ip, asr #1
 2c4:	2000097c 	andcs	r0, r0, ip, ror r9
 2c8:	00000020 	andeq	r0, r0, r0, lsr #32
 2cc:	40080e41 	andmi	r0, r8, r1, asr #28
 2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d8:	00070d41 	andeq	r0, r7, r1, asr #26
 2dc:	00000018 	andeq	r0, r0, r8, lsl r0
 2e0:	000000cc 	andeq	r0, r0, ip, asr #1
 2e4:	2000099c 	mulcs	r0, ip, r9
 2e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2f8:	0000000c 	andeq	r0, r0, ip
 2fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 300:	7c020001 	stcvc	0, cr0, [r2], {1}
 304:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 308:	00000018 	andeq	r0, r0, r8, lsl r0
 30c:	000002f8 	strdeq	r0, [r0], -r8
 310:	200009cc 	andcs	r0, r0, ip, asr #19
 314:	00000050 	andeq	r0, r0, r0, asr r0
 318:	40080e41 	andmi	r0, r8, r1, asr #28
 31c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 320:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	000002f8 	strdeq	r0, [r0], -r8
 32c:	20000a1c 	andcs	r0, r0, ip, lsl sl
 330:	0000006c 	andeq	r0, r0, ip, rrx
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	100e4101 	andne	r4, lr, r1, lsl #2
 340:	00070d41 	andeq	r0, r7, r1, asr #26
 344:	0000001c 	andeq	r0, r0, ip, lsl r0
 348:	000002f8 	strdeq	r0, [r0], -r8
 34c:	20000a88 	andcs	r0, r0, r8, lsl #21
 350:	00000058 	andeq	r0, r0, r8, asr r0
 354:	40080e41 	andmi	r0, r8, r1, asr #28
 358:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 35c:	100e4101 	andne	r4, lr, r1, lsl #2
 360:	00070d41 	andeq	r0, r7, r1, asr #26
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
 368:	000002f8 	strdeq	r0, [r0], -r8
 36c:	20000ae0 	andcs	r0, r0, r0, ror #21
 370:	00000054 	andeq	r0, r0, r4, asr r0
 374:	40080e41 	andmi	r0, r8, r1, asr #28
 378:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 37c:	100e4101 	andne	r4, lr, r1, lsl #2
 380:	00070d41 	andeq	r0, r7, r1, asr #26
 384:	0000000c 	andeq	r0, r0, ip
 388:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 38c:	7c020001 	stcvc	0, cr0, [r2], {1}
 390:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 394:	0000000c 	andeq	r0, r0, ip
 398:	00000384 	andeq	r0, r0, r4, lsl #7
 39c:	20000b34 	andcs	r0, r0, r4, lsr fp
 3a0:	00000010 	andeq	r0, r0, r0, lsl r0
