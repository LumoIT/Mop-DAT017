
./Debug/spoopy_v2.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

unsigned char victory_message1[] = "Congratulations!";
unsigned char victory_message2[] = "You win!";

void startup(void){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:

void main(void){
20000010:	b580      	push	{r7, lr}
20000012:	b0a4      	sub	sp, #144	; 0x90
20000014:	af00      	add	r7, sp, #0
    app_init();
20000016:	f000 f9f5 	bl	20000404 <app_init>
		set_sprite_object_speed
	};
	POBJECT p = &spoopy;*/
    
    // Initiate objects
    PSPRITE_OBJECT spoopy_pointer = init_spoopy();
2000001a:	f000 fb4f 	bl	200006bc <init_spoopy>
2000001e:	0003      	movs	r3, r0
20000020:	2284      	movs	r2, #132	; 0x84
20000022:	18ba      	adds	r2, r7, r2
20000024:	6013      	str	r3, [r2, #0]
    PSPRITE_OBJECT exit_pointer = init_exit();
20000026:	f000 fbd1 	bl	200007cc <init_exit>
2000002a:	0003      	movs	r3, r0
2000002c:	2280      	movs	r2, #128	; 0x80
2000002e:	18ba      	adds	r2, r7, r2
20000030:	6013      	str	r3, [r2, #0]
    PSPRITE_OBJECT wall_pointers[WALL_AMOUNT];
    for(int i = 0; i < WALL_AMOUNT; i++){
20000032:	2300      	movs	r3, #0
20000034:	228c      	movs	r2, #140	; 0x8c
20000036:	18ba      	adds	r2, r7, r2
20000038:	6013      	str	r3, [r2, #0]
2000003a:	e00f      	b.n	2000005c <main+0x4c>
        wall_pointers[i] = init_wall();
2000003c:	f000 fb82 	bl	20000744 <init_wall>
20000040:	0001      	movs	r1, r0
20000042:	003b      	movs	r3, r7
20000044:	228c      	movs	r2, #140	; 0x8c
20000046:	18ba      	adds	r2, r7, r2
20000048:	6812      	ldr	r2, [r2, #0]
2000004a:	0092      	lsls	r2, r2, #2
2000004c:	50d1      	str	r1, [r2, r3]
    for(int i = 0; i < WALL_AMOUNT; i++){
2000004e:	238c      	movs	r3, #140	; 0x8c
20000050:	18fb      	adds	r3, r7, r3
20000052:	681b      	ldr	r3, [r3, #0]
20000054:	3301      	adds	r3, #1
20000056:	228c      	movs	r2, #140	; 0x8c
20000058:	18ba      	adds	r2, r7, r2
2000005a:	6013      	str	r3, [r2, #0]
2000005c:	238c      	movs	r3, #140	; 0x8c
2000005e:	18fb      	adds	r3, r7, r3
20000060:	681b      	ldr	r3, [r3, #0]
20000062:	2b1f      	cmp	r3, #31
20000064:	ddea      	ble.n	2000003c <main+0x2c>
    }
    
    init_map_grid(spoopy_pointer, exit_pointer, wall_pointers);
20000066:	003a      	movs	r2, r7
20000068:	2380      	movs	r3, #128	; 0x80
2000006a:	18fb      	adds	r3, r7, r3
2000006c:	6819      	ldr	r1, [r3, #0]
2000006e:	2384      	movs	r3, #132	; 0x84
20000070:	18fb      	adds	r3, r7, r3
20000072:	681b      	ldr	r3, [r3, #0]
20000074:	0018      	movs	r0, r3
20000076:	f000 f92d 	bl	200002d4 <init_map_grid>
	
    // Draw pointers
    spoopy_pointer->draw(spoopy_pointer);
2000007a:	2384      	movs	r3, #132	; 0x84
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	681b      	ldr	r3, [r3, #0]
20000080:	695b      	ldr	r3, [r3, #20]
20000082:	2284      	movs	r2, #132	; 0x84
20000084:	18ba      	adds	r2, r7, r2
20000086:	6812      	ldr	r2, [r2, #0]
20000088:	0010      	movs	r0, r2
2000008a:	4798      	blx	r3
    exit_pointer->draw(exit_pointer);
2000008c:	2380      	movs	r3, #128	; 0x80
2000008e:	18fb      	adds	r3, r7, r3
20000090:	681b      	ldr	r3, [r3, #0]
20000092:	695b      	ldr	r3, [r3, #20]
20000094:	2280      	movs	r2, #128	; 0x80
20000096:	18ba      	adds	r2, r7, r2
20000098:	6812      	ldr	r2, [r2, #0]
2000009a:	0010      	movs	r0, r2
2000009c:	4798      	blx	r3
    for(int i = 0; i < WALL_AMOUNT; i++){
2000009e:	2300      	movs	r3, #0
200000a0:	2288      	movs	r2, #136	; 0x88
200000a2:	18ba      	adds	r2, r7, r2
200000a4:	6013      	str	r3, [r2, #0]
200000a6:	e015      	b.n	200000d4 <main+0xc4>
        wall_pointers[i]->draw(wall_pointers[i]);
200000a8:	003b      	movs	r3, r7
200000aa:	2288      	movs	r2, #136	; 0x88
200000ac:	18ba      	adds	r2, r7, r2
200000ae:	6812      	ldr	r2, [r2, #0]
200000b0:	0092      	lsls	r2, r2, #2
200000b2:	58d3      	ldr	r3, [r2, r3]
200000b4:	695b      	ldr	r3, [r3, #20]
200000b6:	003a      	movs	r2, r7
200000b8:	2188      	movs	r1, #136	; 0x88
200000ba:	1879      	adds	r1, r7, r1
200000bc:	6809      	ldr	r1, [r1, #0]
200000be:	0089      	lsls	r1, r1, #2
200000c0:	588a      	ldr	r2, [r1, r2]
200000c2:	0010      	movs	r0, r2
200000c4:	4798      	blx	r3
    for(int i = 0; i < WALL_AMOUNT; i++){
200000c6:	2388      	movs	r3, #136	; 0x88
200000c8:	18fb      	adds	r3, r7, r3
200000ca:	681b      	ldr	r3, [r3, #0]
200000cc:	3301      	adds	r3, #1
200000ce:	2288      	movs	r2, #136	; 0x88
200000d0:	18ba      	adds	r2, r7, r2
200000d2:	6013      	str	r3, [r2, #0]
200000d4:	2388      	movs	r3, #136	; 0x88
200000d6:	18fb      	adds	r3, r7, r3
200000d8:	681b      	ldr	r3, [r3, #0]
200000da:	2b1f      	cmp	r3, #31
200000dc:	dde4      	ble.n	200000a8 <main+0x98>
    }
    
    gotoxy(1, 1);
200000de:	2101      	movs	r1, #1
200000e0:	2001      	movs	r0, #1
200000e2:	f001 fa58 	bl	20001596 <gotoxy>
    ascii_write_string(start_message1);
200000e6:	4b41      	ldr	r3, [pc, #260]	; (200001ec <main+0x1dc>)
200000e8:	0018      	movs	r0, r3
200000ea:	f001 fa88 	bl	200015fe <ascii_write_string>
    gotoxy(1, 2);
200000ee:	2102      	movs	r1, #2
200000f0:	2001      	movs	r0, #1
200000f2:	f001 fa50 	bl	20001596 <gotoxy>
    ascii_write_string(start_message2);
200000f6:	4b3e      	ldr	r3, [pc, #248]	; (200001f0 <main+0x1e0>)
200000f8:	0018      	movs	r0, r3
200000fa:	f001 fa80 	bl	200015fe <ascii_write_string>
    
	while(1){
		//keyboard_val = keyb();
		switch (keyboard_val){
200000fe:	4b3d      	ldr	r3, [pc, #244]	; (200001f4 <main+0x1e4>)
20000100:	781b      	ldrb	r3, [r3, #0]
20000102:	2b04      	cmp	r3, #4
20000104:	d013      	beq.n	2000012e <main+0x11e>
20000106:	dc02      	bgt.n	2000010e <main+0xfe>
20000108:	2b02      	cmp	r3, #2
2000010a:	d01c      	beq.n	20000146 <main+0x136>
2000010c:	e032      	b.n	20000174 <main+0x164>
2000010e:	2b06      	cmp	r3, #6
20000110:	d002      	beq.n	20000118 <main+0x108>
20000112:	2b08      	cmp	r3, #8
20000114:	d023      	beq.n	2000015e <main+0x14e>
20000116:	e02d      	b.n	20000174 <main+0x164>
			case 6: spoopy_pointer->set_speed(spoopy_pointer, 1, 0); break;
20000118:	2384      	movs	r3, #132	; 0x84
2000011a:	18fb      	adds	r3, r7, r3
2000011c:	681b      	ldr	r3, [r3, #0]
2000011e:	6a1b      	ldr	r3, [r3, #32]
20000120:	2284      	movs	r2, #132	; 0x84
20000122:	18ba      	adds	r2, r7, r2
20000124:	6810      	ldr	r0, [r2, #0]
20000126:	2200      	movs	r2, #0
20000128:	2101      	movs	r1, #1
2000012a:	4798      	blx	r3
2000012c:	e02d      	b.n	2000018a <main+0x17a>
			case 4: spoopy_pointer->set_speed(spoopy_pointer, -1, 0); break;
2000012e:	2384      	movs	r3, #132	; 0x84
20000130:	18fb      	adds	r3, r7, r3
20000132:	681b      	ldr	r3, [r3, #0]
20000134:	6a1b      	ldr	r3, [r3, #32]
20000136:	2201      	movs	r2, #1
20000138:	4251      	negs	r1, r2
2000013a:	2284      	movs	r2, #132	; 0x84
2000013c:	18ba      	adds	r2, r7, r2
2000013e:	6810      	ldr	r0, [r2, #0]
20000140:	2200      	movs	r2, #0
20000142:	4798      	blx	r3
20000144:	e021      	b.n	2000018a <main+0x17a>
			case 2: spoopy_pointer->set_speed(spoopy_pointer, 0, -1); break;
20000146:	2384      	movs	r3, #132	; 0x84
20000148:	18fb      	adds	r3, r7, r3
2000014a:	681b      	ldr	r3, [r3, #0]
2000014c:	6a1b      	ldr	r3, [r3, #32]
2000014e:	2201      	movs	r2, #1
20000150:	4252      	negs	r2, r2
20000152:	2184      	movs	r1, #132	; 0x84
20000154:	1879      	adds	r1, r7, r1
20000156:	6808      	ldr	r0, [r1, #0]
20000158:	2100      	movs	r1, #0
2000015a:	4798      	blx	r3
2000015c:	e015      	b.n	2000018a <main+0x17a>
			case 8: spoopy_pointer->set_speed(spoopy_pointer, 0, 1); break;
2000015e:	2384      	movs	r3, #132	; 0x84
20000160:	18fb      	adds	r3, r7, r3
20000162:	681b      	ldr	r3, [r3, #0]
20000164:	6a1b      	ldr	r3, [r3, #32]
20000166:	2284      	movs	r2, #132	; 0x84
20000168:	18ba      	adds	r2, r7, r2
2000016a:	6810      	ldr	r0, [r2, #0]
2000016c:	2201      	movs	r2, #1
2000016e:	2100      	movs	r1, #0
20000170:	4798      	blx	r3
20000172:	e00a      	b.n	2000018a <main+0x17a>
            default: spoopy_pointer->set_speed(spoopy_pointer, 0, 0); break;
20000174:	2384      	movs	r3, #132	; 0x84
20000176:	18fb      	adds	r3, r7, r3
20000178:	681b      	ldr	r3, [r3, #0]
2000017a:	6a1b      	ldr	r3, [r3, #32]
2000017c:	2284      	movs	r2, #132	; 0x84
2000017e:	18ba      	adds	r2, r7, r2
20000180:	6810      	ldr	r0, [r2, #0]
20000182:	2200      	movs	r2, #0
20000184:	2100      	movs	r1, #0
20000186:	4798      	blx	r3
20000188:	46c0      	nop			; (mov r8, r8)
		}
        position_checking(spoopy_pointer);
2000018a:	2384      	movs	r3, #132	; 0x84
2000018c:	18fb      	adds	r3, r7, r3
2000018e:	681b      	ldr	r3, [r3, #0]
20000190:	0018      	movs	r0, r3
20000192:	f000 f85d 	bl	20000250 <position_checking>
        update_sprite_object(spoopy_pointer);
20000196:	2384      	movs	r3, #132	; 0x84
20000198:	18fb      	adds	r3, r7, r3
2000019a:	681b      	ldr	r3, [r3, #0]
2000019c:	0018      	movs	r0, r3
2000019e:	f000 fb59 	bl	20000854 <update_sprite_object>
		graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200001a2:	2118      	movs	r1, #24
200001a4:	203f      	movs	r0, #63	; 0x3f
200001a6:	f000 fd7d 	bl	20000ca4 <graphic_write_command>
		graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200001aa:	2118      	movs	r1, #24
200001ac:	20c0      	movs	r0, #192	; 0xc0
200001ae:	f000 fd79 	bl	20000ca4 <graphic_write_command>
		delay_milli(250);
200001b2:	20fa      	movs	r0, #250	; 0xfa
200001b4:	f001 f81a 	bl	200011ec <delay_milli>
        if(win_state){
200001b8:	4b0f      	ldr	r3, [pc, #60]	; (200001f8 <main+0x1e8>)
200001ba:	781b      	ldrb	r3, [r3, #0]
200001bc:	2b00      	cmp	r3, #0
200001be:	d100      	bne.n	200001c2 <main+0x1b2>
		switch (keyboard_val){
200001c0:	e79d      	b.n	200000fe <main+0xee>
            break;
200001c2:	46c0      	nop			; (mov r8, r8)
        }
	}
    
    gotoxy(1, 1);
200001c4:	2101      	movs	r1, #1
200001c6:	2001      	movs	r0, #1
200001c8:	f001 f9e5 	bl	20001596 <gotoxy>
    ascii_write_string(victory_message1);
200001cc:	4b0b      	ldr	r3, [pc, #44]	; (200001fc <main+0x1ec>)
200001ce:	0018      	movs	r0, r3
200001d0:	f001 fa15 	bl	200015fe <ascii_write_string>
    gotoxy(1, 2);
200001d4:	2102      	movs	r1, #2
200001d6:	2001      	movs	r0, #1
200001d8:	f001 f9dd 	bl	20001596 <gotoxy>
    ascii_write_string(victory_message2);
200001dc:	4b08      	ldr	r3, [pc, #32]	; (20000200 <main+0x1f0>)
200001de:	0018      	movs	r0, r3
200001e0:	f001 fa0d 	bl	200015fe <ascii_write_string>
}
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	46bd      	mov	sp, r7
200001e8:	b024      	add	sp, #144	; 0x90
200001ea:	bd80      	pop	{r7, pc}
200001ec:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
200001f0:	200016c0 	andcs	r1, r0, r0, asr #13
200001f4:	20001628 	andcs	r1, r0, r8, lsr #12
200001f8:	20001629 	andcs	r1, r0, r9, lsr #12
200001fc:	200016d4 	ldrdcs	r1, [r0], -r4
20000200:	200016e8 	andcs	r1, r0, r8, ror #13

20000204 <keyboard_interrupt_handler>:

void keyboard_interrupt_handler(void){
20000204:	b580      	push	{r7, lr}
20000206:	af00      	add	r7, sp, #0
    if(EXTI.pr & 0x0F00){
20000208:	4b0e      	ldr	r3, [pc, #56]	; (20000244 <keyboard_interrupt_handler+0x40>)
2000020a:	695a      	ldr	r2, [r3, #20]
2000020c:	23f0      	movs	r3, #240	; 0xf0
2000020e:	011b      	lsls	r3, r3, #4
20000210:	4013      	ands	r3, r2
20000212:	d013      	beq.n	2000023c <keyboard_interrupt_handler+0x38>
        keyboard_val = keyb();
20000214:	f000 fb66 	bl	200008e4 <keyb>
20000218:	0003      	movs	r3, r0
2000021a:	b2da      	uxtb	r2, r3
2000021c:	4b0a      	ldr	r3, [pc, #40]	; (20000248 <keyboard_interrupt_handler+0x44>)
2000021e:	701a      	strb	r2, [r3, #0]
        GPIO_D.odrHigh = 0xF0;
20000220:	4b0a      	ldr	r3, [pc, #40]	; (2000024c <keyboard_interrupt_handler+0x48>)
20000222:	22f0      	movs	r2, #240	; 0xf0
20000224:	755a      	strb	r2, [r3, #21]
        
        EXTI.pr |= (EXTI.pr & 0x0F00);
20000226:	4b07      	ldr	r3, [pc, #28]	; (20000244 <keyboard_interrupt_handler+0x40>)
20000228:	695a      	ldr	r2, [r3, #20]
2000022a:	23f0      	movs	r3, #240	; 0xf0
2000022c:	011b      	lsls	r3, r3, #4
2000022e:	401a      	ands	r2, r3
20000230:	0011      	movs	r1, r2
20000232:	4b04      	ldr	r3, [pc, #16]	; (20000244 <keyboard_interrupt_handler+0x40>)
20000234:	4a03      	ldr	r2, [pc, #12]	; (20000244 <keyboard_interrupt_handler+0x40>)
20000236:	6952      	ldr	r2, [r2, #20]
20000238:	430a      	orrs	r2, r1
2000023a:	615a      	str	r2, [r3, #20]
    }
}
2000023c:	46c0      	nop			; (mov r8, r8)
2000023e:	46bd      	mov	sp, r7
20000240:	bd80      	pop	{r7, pc}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	40013c00 	andmi	r3, r1, r0, lsl #24
20000248:	20001628 	andcs	r1, r0, r8, lsr #12
2000024c:	40020c00 	andmi	r0, r2, r0, lsl #24

20000250 <position_checking>:

void position_checking(PSPRITE_OBJECT spoopy_pointer){
20000250:	b590      	push	{r4, r7, lr}
20000252:	b087      	sub	sp, #28
20000254:	af00      	add	r7, sp, #0
20000256:	6078      	str	r0, [r7, #4]
    int spoopy_current_x = spoopy_pointer->pos_x / GRID_WIDTH;
20000258:	687b      	ldr	r3, [r7, #4]
2000025a:	68db      	ldr	r3, [r3, #12]
2000025c:	2b00      	cmp	r3, #0
2000025e:	da00      	bge.n	20000262 <position_checking+0x12>
20000260:	330f      	adds	r3, #15
20000262:	111b      	asrs	r3, r3, #4
20000264:	617b      	str	r3, [r7, #20]
    int spoopy_current_y = spoopy_pointer->pos_y / GRID_HEIGHT;
20000266:	687b      	ldr	r3, [r7, #4]
20000268:	691b      	ldr	r3, [r3, #16]
2000026a:	2b00      	cmp	r3, #0
2000026c:	da00      	bge.n	20000270 <position_checking+0x20>
2000026e:	330f      	adds	r3, #15
20000270:	111b      	asrs	r3, r3, #4
20000272:	613b      	str	r3, [r7, #16]
    
    int next_space = map_grid[spoopy_current_x + spoopy_pointer->dir_x][spoopy_current_y + spoopy_pointer->dir_y];
20000274:	687b      	ldr	r3, [r7, #4]
20000276:	685a      	ldr	r2, [r3, #4]
20000278:	697b      	ldr	r3, [r7, #20]
2000027a:	18d2      	adds	r2, r2, r3
2000027c:	687b      	ldr	r3, [r7, #4]
2000027e:	6899      	ldr	r1, [r3, #8]
20000280:	693b      	ldr	r3, [r7, #16]
20000282:	18cb      	adds	r3, r1, r3
20000284:	4911      	ldr	r1, [pc, #68]	; (200002cc <position_checking+0x7c>)
20000286:	0092      	lsls	r2, r2, #2
20000288:	188a      	adds	r2, r1, r2
2000028a:	5cd3      	ldrb	r3, [r2, r3]
2000028c:	60fb      	str	r3, [r7, #12]
    
    // Set velocity to 0 if Spoopy is about to mave into a wall, otherwise multiply it by an apropriate amount
    switch(next_space){
2000028e:	68fb      	ldr	r3, [r7, #12]
20000290:	2b02      	cmp	r3, #2
20000292:	d008      	beq.n	200002a6 <position_checking+0x56>
20000294:	2b03      	cmp	r3, #3
20000296:	d109      	bne.n	200002ac <position_checking+0x5c>
        case WALL_SPACE: spoopy_pointer->set_speed(spoopy_pointer, 0, 0); break;
20000298:	687b      	ldr	r3, [r7, #4]
2000029a:	6a1b      	ldr	r3, [r3, #32]
2000029c:	6878      	ldr	r0, [r7, #4]
2000029e:	2200      	movs	r2, #0
200002a0:	2100      	movs	r1, #0
200002a2:	4798      	blx	r3
200002a4:	e00e      	b.n	200002c4 <position_checking+0x74>
        case EXIT_SPACE: win_state = 1;
200002a6:	4b0a      	ldr	r3, [pc, #40]	; (200002d0 <position_checking+0x80>)
200002a8:	2201      	movs	r2, #1
200002aa:	701a      	strb	r2, [r3, #0]
        default: spoopy_pointer->set_speed(spoopy_pointer, spoopy_pointer->dir_x * GRID_WIDTH, spoopy_pointer->dir_y * GRID_HEIGHT); break;
200002ac:	687b      	ldr	r3, [r7, #4]
200002ae:	6a1c      	ldr	r4, [r3, #32]
200002b0:	687b      	ldr	r3, [r7, #4]
200002b2:	685b      	ldr	r3, [r3, #4]
200002b4:	0119      	lsls	r1, r3, #4
200002b6:	687b      	ldr	r3, [r7, #4]
200002b8:	689b      	ldr	r3, [r3, #8]
200002ba:	011a      	lsls	r2, r3, #4
200002bc:	687b      	ldr	r3, [r7, #4]
200002be:	0018      	movs	r0, r3
200002c0:	47a0      	blx	r4
200002c2:	46c0      	nop			; (mov r8, r8)
    }
}
200002c4:	46c0      	nop			; (mov r8, r8)
200002c6:	46bd      	mov	sp, r7
200002c8:	b007      	add	sp, #28
200002ca:	bd90      	pop	{r4, r7, pc}
200002cc:	20001634 	andcs	r1, r0, r4, lsr r6
200002d0:	20001629 	andcs	r1, r0, r9, lsr #12

200002d4 <init_map_grid>:

void init_map_grid(PSPRITE_OBJECT spoopy, PSPRITE_OBJECT exit, PSPRITE_OBJECT walls[]){
200002d4:	b590      	push	{r4, r7, lr}
200002d6:	b0a1      	sub	sp, #132	; 0x84
200002d8:	af00      	add	r7, sp, #0
200002da:	60f8      	str	r0, [r7, #12]
200002dc:	60b9      	str	r1, [r7, #8]
200002de:	607a      	str	r2, [r7, #4]
    for(int x = 0; x < MAP_WIDTH; x++){
200002e0:	2300      	movs	r3, #0
200002e2:	67fb      	str	r3, [r7, #124]	; 0x7c
200002e4:	e013      	b.n	2000030e <init_map_grid+0x3a>
        for(int y = 0; y < MAP_HEIGHT; y++){
200002e6:	2300      	movs	r3, #0
200002e8:	67bb      	str	r3, [r7, #120]	; 0x78
200002ea:	e00a      	b.n	20000302 <init_map_grid+0x2e>
            map_grid[x][y] = EMPTY_SPACE;
200002ec:	4a42      	ldr	r2, [pc, #264]	; (200003f8 <init_map_grid+0x124>)
200002ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
200002f0:	009b      	lsls	r3, r3, #2
200002f2:	18d2      	adds	r2, r2, r3
200002f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
200002f6:	18d3      	adds	r3, r2, r3
200002f8:	2200      	movs	r2, #0
200002fa:	701a      	strb	r2, [r3, #0]
        for(int y = 0; y < MAP_HEIGHT; y++){
200002fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
200002fe:	3301      	adds	r3, #1
20000300:	67bb      	str	r3, [r7, #120]	; 0x78
20000302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
20000304:	2b03      	cmp	r3, #3
20000306:	ddf1      	ble.n	200002ec <init_map_grid+0x18>
    for(int x = 0; x < MAP_WIDTH; x++){
20000308:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
2000030a:	3301      	adds	r3, #1
2000030c:	67fb      	str	r3, [r7, #124]	; 0x7c
2000030e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
20000310:	2b07      	cmp	r3, #7
20000312:	dde8      	ble.n	200002e6 <init_map_grid+0x12>
        }
    }
    
    // Set Spoopy's starting position
    int spoopy_x = 0;
20000314:	2300      	movs	r3, #0
20000316:	673b      	str	r3, [r7, #112]	; 0x70
    int spoopy_y = 0;
20000318:	2300      	movs	r3, #0
2000031a:	66fb      	str	r3, [r7, #108]	; 0x6c
    map_grid[spoopy_x][spoopy_y] = SPOOPY_SPACE;
2000031c:	4a36      	ldr	r2, [pc, #216]	; (200003f8 <init_map_grid+0x124>)
2000031e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
20000320:	009b      	lsls	r3, r3, #2
20000322:	18d2      	adds	r2, r2, r3
20000324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
20000326:	18d3      	adds	r3, r2, r3
20000328:	2201      	movs	r2, #1
2000032a:	701a      	strb	r2, [r3, #0]
    spoopy->pos_x = spoopy_x * GRID_WIDTH;
2000032c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
2000032e:	011a      	lsls	r2, r3, #4
20000330:	68fb      	ldr	r3, [r7, #12]
20000332:	60da      	str	r2, [r3, #12]
    spoopy->pos_y = spoopy_y * GRID_HEIGHT;
20000334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
20000336:	011a      	lsls	r2, r3, #4
20000338:	68fb      	ldr	r3, [r7, #12]
2000033a:	611a      	str	r2, [r3, #16]
    
    // Set exit's starting position
    int exit_x = MAP_WIDTH - 1;
2000033c:	2307      	movs	r3, #7
2000033e:	66bb      	str	r3, [r7, #104]	; 0x68
    int exit_y = MAP_HEIGHT - 1;
20000340:	2303      	movs	r3, #3
20000342:	667b      	str	r3, [r7, #100]	; 0x64
    map_grid[exit_x][exit_y] = EXIT_SPACE;
20000344:	4a2c      	ldr	r2, [pc, #176]	; (200003f8 <init_map_grid+0x124>)
20000346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
20000348:	009b      	lsls	r3, r3, #2
2000034a:	18d2      	adds	r2, r2, r3
2000034c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
2000034e:	18d3      	adds	r3, r2, r3
20000350:	2202      	movs	r2, #2
20000352:	701a      	strb	r2, [r3, #0]
    exit->pos_x = exit_x * GRID_WIDTH;
20000354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
20000356:	011a      	lsls	r2, r3, #4
20000358:	68bb      	ldr	r3, [r7, #8]
2000035a:	60da      	str	r2, [r3, #12]
    exit->pos_y = exit_y * GRID_HEIGHT;
2000035c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
2000035e:	011a      	lsls	r2, r3, #4
20000360:	68bb      	ldr	r3, [r7, #8]
20000362:	611a      	str	r2, [r3, #16]
    
    // Set walls' starting positions
    int wall_x[] = {1, 1, 1, 3, 3, 3, 5, 5, 5, 6};
20000364:	233c      	movs	r3, #60	; 0x3c
20000366:	18fb      	adds	r3, r7, r3
20000368:	4a24      	ldr	r2, [pc, #144]	; (200003fc <init_map_grid+0x128>)
2000036a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000036c:	c313      	stmia	r3!, {r0, r1, r4}
2000036e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000370:	c313      	stmia	r3!, {r0, r1, r4}
20000372:	ca13      	ldmia	r2!, {r0, r1, r4}
20000374:	c313      	stmia	r3!, {r0, r1, r4}
20000376:	6812      	ldr	r2, [r2, #0]
20000378:	601a      	str	r2, [r3, #0]
    int wall_y[] = {0, 1, 2, 3, 2, 1, 0, 1, 2, 2};
2000037a:	2314      	movs	r3, #20
2000037c:	18fb      	adds	r3, r7, r3
2000037e:	4a20      	ldr	r2, [pc, #128]	; (20000400 <init_map_grid+0x12c>)
20000380:	ca13      	ldmia	r2!, {r0, r1, r4}
20000382:	c313      	stmia	r3!, {r0, r1, r4}
20000384:	ca13      	ldmia	r2!, {r0, r1, r4}
20000386:	c313      	stmia	r3!, {r0, r1, r4}
20000388:	ca13      	ldmia	r2!, {r0, r1, r4}
2000038a:	c313      	stmia	r3!, {r0, r1, r4}
2000038c:	6812      	ldr	r2, [r2, #0]
2000038e:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < sizeof(wall_x); i++){
20000390:	2300      	movs	r3, #0
20000392:	677b      	str	r3, [r7, #116]	; 0x74
20000394:	e029      	b.n	200003ea <init_map_grid+0x116>
        map_grid[wall_x[i]][wall_y[i]] = WALL_SPACE;
20000396:	233c      	movs	r3, #60	; 0x3c
20000398:	18fb      	adds	r3, r7, r3
2000039a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
2000039c:	0092      	lsls	r2, r2, #2
2000039e:	58d2      	ldr	r2, [r2, r3]
200003a0:	2314      	movs	r3, #20
200003a2:	18fb      	adds	r3, r7, r3
200003a4:	6f79      	ldr	r1, [r7, #116]	; 0x74
200003a6:	0089      	lsls	r1, r1, #2
200003a8:	58cb      	ldr	r3, [r1, r3]
200003aa:	4913      	ldr	r1, [pc, #76]	; (200003f8 <init_map_grid+0x124>)
200003ac:	0092      	lsls	r2, r2, #2
200003ae:	188a      	adds	r2, r1, r2
200003b0:	2103      	movs	r1, #3
200003b2:	54d1      	strb	r1, [r2, r3]
        walls[i]->pos_x = wall_x[i] * GRID_WIDTH;
200003b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
200003b6:	009b      	lsls	r3, r3, #2
200003b8:	687a      	ldr	r2, [r7, #4]
200003ba:	18d3      	adds	r3, r2, r3
200003bc:	681b      	ldr	r3, [r3, #0]
200003be:	223c      	movs	r2, #60	; 0x3c
200003c0:	18ba      	adds	r2, r7, r2
200003c2:	6f79      	ldr	r1, [r7, #116]	; 0x74
200003c4:	0089      	lsls	r1, r1, #2
200003c6:	588a      	ldr	r2, [r1, r2]
200003c8:	0112      	lsls	r2, r2, #4
200003ca:	60da      	str	r2, [r3, #12]
        walls[i]->pos_y = wall_y[i] * GRID_HEIGHT;
200003cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
200003ce:	009b      	lsls	r3, r3, #2
200003d0:	687a      	ldr	r2, [r7, #4]
200003d2:	18d3      	adds	r3, r2, r3
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	2214      	movs	r2, #20
200003d8:	18ba      	adds	r2, r7, r2
200003da:	6f79      	ldr	r1, [r7, #116]	; 0x74
200003dc:	0089      	lsls	r1, r1, #2
200003de:	588a      	ldr	r2, [r1, r2]
200003e0:	0112      	lsls	r2, r2, #4
200003e2:	611a      	str	r2, [r3, #16]
    for(int i = 0; i < sizeof(wall_x); i++){
200003e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
200003e6:	3301      	adds	r3, #1
200003e8:	677b      	str	r3, [r7, #116]	; 0x74
200003ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
200003ec:	2b27      	cmp	r3, #39	; 0x27
200003ee:	d9d2      	bls.n	20000396 <init_map_grid+0xc2>
    }
}
200003f0:	46c0      	nop			; (mov r8, r8)
200003f2:	46bd      	mov	sp, r7
200003f4:	b021      	add	sp, #132	; 0x84
200003f6:	bd90      	pop	{r4, r7, pc}
200003f8:	20001634 	andcs	r1, r0, r4, lsr r6
200003fc:	20001768 	andcs	r1, r0, r8, ror #14
20000400:	20001790 	mulcs	r0, r0, r7

20000404 <app_init>:

void app_init(void){
20000404:	b580      	push	{r7, lr}
20000406:	af00      	add	r7, sp, #0
		" LDR R0, =0x08000209\n"
		" BLX R0\n"
		);
#endif

    asciidisplay_init();
20000408:	f000 ff58 	bl	200012bc <asciidisplay_init>
    graphicdisplay_init();
2000040c:	f000 fe8a 	bl	20001124 <graphicdisplay_init>
    delay_interrupt_init();
20000410:	f000 fe98 	bl	20001144 <delay_interrupt_init>
    keyboard_init();
20000414:	f000 fa36 	bl	20000884 <keyboard_init>
    
    // *** Interrupt init ***
    // Set port D pin 8-11 as interrupts
    SYSCFG.exticr3 = 0x3333;
20000418:	4b15      	ldr	r3, [pc, #84]	; (20000470 <app_init+0x6c>)
2000041a:	4a16      	ldr	r2, [pc, #88]	; (20000474 <app_init+0x70>)
2000041c:	611a      	str	r2, [r3, #16]
    
    // Set pin 8-11 as interrupts on both flanks
    EXTI.imr = INTERRUPT_TARGET_PINS;
2000041e:	4b16      	ldr	r3, [pc, #88]	; (20000478 <app_init+0x74>)
20000420:	22f0      	movs	r2, #240	; 0xf0
20000422:	0512      	lsls	r2, r2, #20
20000424:	601a      	str	r2, [r3, #0]
    EXTI.ftsr |= INTERRUPT_TARGET_PINS;
20000426:	4b14      	ldr	r3, [pc, #80]	; (20000478 <app_init+0x74>)
20000428:	4a13      	ldr	r2, [pc, #76]	; (20000478 <app_init+0x74>)
2000042a:	68d2      	ldr	r2, [r2, #12]
2000042c:	21f0      	movs	r1, #240	; 0xf0
2000042e:	0509      	lsls	r1, r1, #20
20000430:	430a      	orrs	r2, r1
20000432:	60da      	str	r2, [r3, #12]
    EXTI.rtsr |= INTERRUPT_TARGET_PINS;
20000434:	4b10      	ldr	r3, [pc, #64]	; (20000478 <app_init+0x74>)
20000436:	4a10      	ldr	r2, [pc, #64]	; (20000478 <app_init+0x74>)
20000438:	6892      	ldr	r2, [r2, #8]
2000043a:	21f0      	movs	r1, #240	; 0xf0
2000043c:	0509      	lsls	r1, r1, #20
2000043e:	430a      	orrs	r2, r1
20000440:	609a      	str	r2, [r3, #8]
    
    // Set up interrupt vector
    *((void (**) (void))0x2001C09C) = keyboard_interrupt_handler;
20000442:	4b0e      	ldr	r3, [pc, #56]	; (2000047c <app_init+0x78>)
20000444:	4a0e      	ldr	r2, [pc, #56]	; (20000480 <app_init+0x7c>)
20000446:	601a      	str	r2, [r3, #0]
    *((void (**) (void))0x2001C0E0) = keyboard_interrupt_handler;
20000448:	4b0e      	ldr	r3, [pc, #56]	; (20000484 <app_init+0x80>)
2000044a:	4a0d      	ldr	r2, [pc, #52]	; (20000480 <app_init+0x7c>)
2000044c:	601a      	str	r2, [r3, #0]
    
    // Enable interrupt vectors
    NVIC_ISER0 |= (1 << 23);
2000044e:	4b0e      	ldr	r3, [pc, #56]	; (20000488 <app_init+0x84>)
20000450:	4a0d      	ldr	r2, [pc, #52]	; (20000488 <app_init+0x84>)
20000452:	6812      	ldr	r2, [r2, #0]
20000454:	2180      	movs	r1, #128	; 0x80
20000456:	0409      	lsls	r1, r1, #16
20000458:	430a      	orrs	r2, r1
2000045a:	601a      	str	r2, [r3, #0]
    NVIC_ISER1 |= (1 << (40 - 32));
2000045c:	4b0b      	ldr	r3, [pc, #44]	; (2000048c <app_init+0x88>)
2000045e:	4a0b      	ldr	r2, [pc, #44]	; (2000048c <app_init+0x88>)
20000460:	6812      	ldr	r2, [r2, #0]
20000462:	2180      	movs	r1, #128	; 0x80
20000464:	0049      	lsls	r1, r1, #1
20000466:	430a      	orrs	r2, r1
20000468:	601a      	str	r2, [r3, #0]
}
2000046a:	46c0      	nop			; (mov r8, r8)
2000046c:	46bd      	mov	sp, r7
2000046e:	bd80      	pop	{r7, pc}
20000470:	40013800 	andmi	r3, r1, r0, lsl #16
20000474:	00003333 	andeq	r3, r0, r3, lsr r3
20000478:	40013c00 	andmi	r3, r1, r0, lsl #24
2000047c:	2001c09c 	mulcs	r1, ip, r0
20000480:	20000205 	andcs	r0, r0, r5, lsl #4
20000484:	2001c0e0 	andcs	ip, r1, r0, ror #1
20000488:	e000e100 	and	lr, r0, r0, lsl #2
2000048c:	e000e104 	and	lr, r0, r4, lsl #2

20000490 <load_sprite>:
#include "sprites.h"

void load_sprite(SPRITE* s, unsigned char* data, int width, int height){
20000490:	b580      	push	{r7, lr}
20000492:	b084      	sub	sp, #16
20000494:	af00      	add	r7, sp, #0
20000496:	60f8      	str	r0, [r7, #12]
20000498:	60b9      	str	r1, [r7, #8]
2000049a:	607a      	str	r2, [r7, #4]
2000049c:	603b      	str	r3, [r7, #0]
    s->width = width;
2000049e:	687b      	ldr	r3, [r7, #4]
200004a0:	b2da      	uxtb	r2, r3
200004a2:	68fb      	ldr	r3, [r7, #12]
200004a4:	701a      	strb	r2, [r3, #0]
    s->height = height;
200004a6:	683b      	ldr	r3, [r7, #0]
200004a8:	b2da      	uxtb	r2, r3
200004aa:	68fb      	ldr	r3, [r7, #12]
200004ac:	705a      	strb	r2, [r3, #1]
    s->data = data;
200004ae:	68fb      	ldr	r3, [r7, #12]
200004b0:	68ba      	ldr	r2, [r7, #8]
200004b2:	605a      	str	r2, [r3, #4]
}
200004b4:	46c0      	nop			; (mov r8, r8)
200004b6:	46bd      	mov	sp, r7
200004b8:	b004      	add	sp, #16
200004ba:	bd80      	pop	{r7, pc}

200004bc <draw_sprite>:

void draw_sprite(SPRITE* s, int x, int y, int set){
200004bc:	b580      	push	{r7, lr}
200004be:	b08a      	sub	sp, #40	; 0x28
200004c0:	af00      	add	r7, sp, #0
200004c2:	60f8      	str	r0, [r7, #12]
200004c4:	60b9      	str	r1, [r7, #8]
200004c6:	607a      	str	r2, [r7, #4]
200004c8:	603b      	str	r3, [r7, #0]
    int width_in_bytes;
    
    if(s->width % 8 == 0){
200004ca:	68fb      	ldr	r3, [r7, #12]
200004cc:	781b      	ldrb	r3, [r3, #0]
200004ce:	2207      	movs	r2, #7
200004d0:	4013      	ands	r3, r2
200004d2:	b2db      	uxtb	r3, r3
200004d4:	2b00      	cmp	r3, #0
200004d6:	d105      	bne.n	200004e4 <draw_sprite+0x28>
        width_in_bytes = s->width / 8;
200004d8:	68fb      	ldr	r3, [r7, #12]
200004da:	781b      	ldrb	r3, [r3, #0]
200004dc:	08db      	lsrs	r3, r3, #3
200004de:	b2db      	uxtb	r3, r3
200004e0:	627b      	str	r3, [r7, #36]	; 0x24
200004e2:	e005      	b.n	200004f0 <draw_sprite+0x34>
    } else {
        width_in_bytes = s->width / 8 + 1;
200004e4:	68fb      	ldr	r3, [r7, #12]
200004e6:	781b      	ldrb	r3, [r3, #0]
200004e8:	08db      	lsrs	r3, r3, #3
200004ea:	b2db      	uxtb	r3, r3
200004ec:	3301      	adds	r3, #1
200004ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    for(int i = 0; i < s->height; i++){
200004f0:	2300      	movs	r3, #0
200004f2:	623b      	str	r3, [r7, #32]
200004f4:	e045      	b.n	20000582 <draw_sprite+0xc6>
        for(int j = 0; j < width_in_bytes; j++){
200004f6:	2300      	movs	r3, #0
200004f8:	61fb      	str	r3, [r7, #28]
200004fa:	e03b      	b.n	20000574 <draw_sprite+0xb8>
            unsigned char byte = s->data[i * width_in_bytes + j];
200004fc:	68fb      	ldr	r3, [r7, #12]
200004fe:	685b      	ldr	r3, [r3, #4]
20000500:	6a3a      	ldr	r2, [r7, #32]
20000502:	6a79      	ldr	r1, [r7, #36]	; 0x24
20000504:	4351      	muls	r1, r2
20000506:	69fa      	ldr	r2, [r7, #28]
20000508:	188a      	adds	r2, r1, r2
2000050a:	189a      	adds	r2, r3, r2
2000050c:	2317      	movs	r3, #23
2000050e:	18fb      	adds	r3, r7, r3
20000510:	7812      	ldrb	r2, [r2, #0]
20000512:	701a      	strb	r2, [r3, #0]
            for(int k = 0; k < 8; k++){
20000514:	2300      	movs	r3, #0
20000516:	61bb      	str	r3, [r7, #24]
20000518:	e026      	b.n	20000568 <draw_sprite+0xac>
                if(byte & (1 << k)){
2000051a:	2317      	movs	r3, #23
2000051c:	18fb      	adds	r3, r7, r3
2000051e:	781a      	ldrb	r2, [r3, #0]
20000520:	69bb      	ldr	r3, [r7, #24]
20000522:	411a      	asrs	r2, r3
20000524:	0013      	movs	r3, r2
20000526:	2201      	movs	r2, #1
20000528:	4013      	ands	r3, r2
2000052a:	d01a      	beq.n	20000562 <draw_sprite+0xa6>
                    pixel(8 * j + k + x + 1, i + y + 1, set);
2000052c:	69fb      	ldr	r3, [r7, #28]
2000052e:	b2db      	uxtb	r3, r3
20000530:	00db      	lsls	r3, r3, #3
20000532:	b2da      	uxtb	r2, r3
20000534:	69bb      	ldr	r3, [r7, #24]
20000536:	b2db      	uxtb	r3, r3
20000538:	18d3      	adds	r3, r2, r3
2000053a:	b2da      	uxtb	r2, r3
2000053c:	68bb      	ldr	r3, [r7, #8]
2000053e:	b2db      	uxtb	r3, r3
20000540:	18d3      	adds	r3, r2, r3
20000542:	b2db      	uxtb	r3, r3
20000544:	3301      	adds	r3, #1
20000546:	b2d8      	uxtb	r0, r3
20000548:	6a3b      	ldr	r3, [r7, #32]
2000054a:	b2da      	uxtb	r2, r3
2000054c:	687b      	ldr	r3, [r7, #4]
2000054e:	b2db      	uxtb	r3, r3
20000550:	18d3      	adds	r3, r2, r3
20000552:	b2db      	uxtb	r3, r3
20000554:	3301      	adds	r3, #1
20000556:	b2db      	uxtb	r3, r3
20000558:	683a      	ldr	r2, [r7, #0]
2000055a:	b2d2      	uxtb	r2, r2
2000055c:	0019      	movs	r1, r3
2000055e:	f000 fc5a 	bl	20000e16 <pixel>
            for(int k = 0; k < 8; k++){
20000562:	69bb      	ldr	r3, [r7, #24]
20000564:	3301      	adds	r3, #1
20000566:	61bb      	str	r3, [r7, #24]
20000568:	69bb      	ldr	r3, [r7, #24]
2000056a:	2b07      	cmp	r3, #7
2000056c:	ddd5      	ble.n	2000051a <draw_sprite+0x5e>
        for(int j = 0; j < width_in_bytes; j++){
2000056e:	69fb      	ldr	r3, [r7, #28]
20000570:	3301      	adds	r3, #1
20000572:	61fb      	str	r3, [r7, #28]
20000574:	69fa      	ldr	r2, [r7, #28]
20000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000578:	429a      	cmp	r2, r3
2000057a:	dbbf      	blt.n	200004fc <draw_sprite+0x40>
    for(int i = 0; i < s->height; i++){
2000057c:	6a3b      	ldr	r3, [r7, #32]
2000057e:	3301      	adds	r3, #1
20000580:	623b      	str	r3, [r7, #32]
20000582:	68fb      	ldr	r3, [r7, #12]
20000584:	785b      	ldrb	r3, [r3, #1]
20000586:	001a      	movs	r2, r3
20000588:	6a3b      	ldr	r3, [r7, #32]
2000058a:	429a      	cmp	r2, r3
2000058c:	dcb3      	bgt.n	200004f6 <draw_sprite+0x3a>
                }
            }
        }
    }
}
2000058e:	46c0      	nop			; (mov r8, r8)
20000590:	46bd      	mov	sp, r7
20000592:	b00a      	add	sp, #40	; 0x28
20000594:	bd80      	pop	{r7, pc}

20000596 <draw_sprite_object>:

void draw_sprite_object(PSPRITE_OBJECT p){
20000596:	b580      	push	{r7, lr}
20000598:	b082      	sub	sp, #8
2000059a:	af00      	add	r7, sp, #0
2000059c:	6078      	str	r0, [r7, #4]
    draw_sprite(p->sprt, p->pos_x, p->pos_y, 1);
2000059e:	687b      	ldr	r3, [r7, #4]
200005a0:	6818      	ldr	r0, [r3, #0]
200005a2:	687b      	ldr	r3, [r7, #4]
200005a4:	68d9      	ldr	r1, [r3, #12]
200005a6:	687b      	ldr	r3, [r7, #4]
200005a8:	691a      	ldr	r2, [r3, #16]
200005aa:	2301      	movs	r3, #1
200005ac:	f7ff ff86 	bl	200004bc <draw_sprite>
}
200005b0:	46c0      	nop			; (mov r8, r8)
200005b2:	46bd      	mov	sp, r7
200005b4:	b002      	add	sp, #8
200005b6:	bd80      	pop	{r7, pc}

200005b8 <clear_sprite_object>:

void clear_sprite_object(PSPRITE_OBJECT p){
200005b8:	b580      	push	{r7, lr}
200005ba:	b082      	sub	sp, #8
200005bc:	af00      	add	r7, sp, #0
200005be:	6078      	str	r0, [r7, #4]
    draw_sprite(p->sprt, p->pos_x, p->pos_y, 0);
200005c0:	687b      	ldr	r3, [r7, #4]
200005c2:	6818      	ldr	r0, [r3, #0]
200005c4:	687b      	ldr	r3, [r7, #4]
200005c6:	68d9      	ldr	r1, [r3, #12]
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	691a      	ldr	r2, [r3, #16]
200005cc:	2300      	movs	r3, #0
200005ce:	f7ff ff75 	bl	200004bc <draw_sprite>
}
200005d2:	46c0      	nop			; (mov r8, r8)
200005d4:	46bd      	mov	sp, r7
200005d6:	b002      	add	sp, #8
200005d8:	bd80      	pop	{r7, pc}

200005da <move_sprite_object>:

void move_sprite_object(PSPRITE_OBJECT p){
200005da:	b580      	push	{r7, lr}
200005dc:	b082      	sub	sp, #8
200005de:	af00      	add	r7, sp, #0
200005e0:	6078      	str	r0, [r7, #4]
    p->clear(p);
200005e2:	687b      	ldr	r3, [r7, #4]
200005e4:	699b      	ldr	r3, [r3, #24]
200005e6:	687a      	ldr	r2, [r7, #4]
200005e8:	0010      	movs	r0, r2
200005ea:	4798      	blx	r3
    p->pos_x += p->dir_x;
200005ec:	687b      	ldr	r3, [r7, #4]
200005ee:	68da      	ldr	r2, [r3, #12]
200005f0:	687b      	ldr	r3, [r7, #4]
200005f2:	685b      	ldr	r3, [r3, #4]
200005f4:	18d2      	adds	r2, r2, r3
200005f6:	687b      	ldr	r3, [r7, #4]
200005f8:	60da      	str	r2, [r3, #12]
    p->pos_y += p->dir_y;
200005fa:	687b      	ldr	r3, [r7, #4]
200005fc:	691a      	ldr	r2, [r3, #16]
200005fe:	687b      	ldr	r3, [r7, #4]
20000600:	689b      	ldr	r3, [r3, #8]
20000602:	18d2      	adds	r2, r2, r3
20000604:	687b      	ldr	r3, [r7, #4]
20000606:	611a      	str	r2, [r3, #16]
    
    if(p->pos_x < 0){
20000608:	687b      	ldr	r3, [r7, #4]
2000060a:	68db      	ldr	r3, [r3, #12]
2000060c:	2b00      	cmp	r3, #0
2000060e:	da05      	bge.n	2000061c <move_sprite_object+0x42>
        p->pos_x = 0;
20000610:	687b      	ldr	r3, [r7, #4]
20000612:	2200      	movs	r2, #0
20000614:	60da      	str	r2, [r3, #12]
        p->dir_x = 0;
20000616:	687b      	ldr	r3, [r7, #4]
20000618:	2200      	movs	r2, #0
2000061a:	605a      	str	r2, [r3, #4]
    }
    if(p->pos_x + p->sprt->width > 127){
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	68da      	ldr	r2, [r3, #12]
20000620:	687b      	ldr	r3, [r7, #4]
20000622:	681b      	ldr	r3, [r3, #0]
20000624:	781b      	ldrb	r3, [r3, #0]
20000626:	18d3      	adds	r3, r2, r3
20000628:	2b7f      	cmp	r3, #127	; 0x7f
2000062a:	dd07      	ble.n	2000063c <move_sprite_object+0x62>
        p->pos_x = 127 - p->sprt->width;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	681b      	ldr	r3, [r3, #0]
20000630:	781b      	ldrb	r3, [r3, #0]
20000632:	001a      	movs	r2, r3
20000634:	237f      	movs	r3, #127	; 0x7f
20000636:	1a9a      	subs	r2, r3, r2
20000638:	687b      	ldr	r3, [r7, #4]
2000063a:	60da      	str	r2, [r3, #12]
    }
    
    if(p->pos_y < 0){
2000063c:	687b      	ldr	r3, [r7, #4]
2000063e:	691b      	ldr	r3, [r3, #16]
20000640:	2b00      	cmp	r3, #0
20000642:	da05      	bge.n	20000650 <move_sprite_object+0x76>
        p->pos_y = 0;
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	2200      	movs	r2, #0
20000648:	611a      	str	r2, [r3, #16]
        p->dir_y = 0;
2000064a:	687b      	ldr	r3, [r7, #4]
2000064c:	2200      	movs	r2, #0
2000064e:	609a      	str	r2, [r3, #8]
    }
    if(p->pos_y + p->sprt->height > 63){
20000650:	687b      	ldr	r3, [r7, #4]
20000652:	691a      	ldr	r2, [r3, #16]
20000654:	687b      	ldr	r3, [r7, #4]
20000656:	681b      	ldr	r3, [r3, #0]
20000658:	785b      	ldrb	r3, [r3, #1]
2000065a:	18d3      	adds	r3, r2, r3
2000065c:	2b3f      	cmp	r3, #63	; 0x3f
2000065e:	dd07      	ble.n	20000670 <move_sprite_object+0x96>
        p->pos_y = 63 -p->sprt->height;
20000660:	687b      	ldr	r3, [r7, #4]
20000662:	681b      	ldr	r3, [r3, #0]
20000664:	785b      	ldrb	r3, [r3, #1]
20000666:	001a      	movs	r2, r3
20000668:	233f      	movs	r3, #63	; 0x3f
2000066a:	1a9a      	subs	r2, r3, r2
2000066c:	687b      	ldr	r3, [r7, #4]
2000066e:	611a      	str	r2, [r3, #16]
    }
}
20000670:	46c0      	nop			; (mov r8, r8)
20000672:	46bd      	mov	sp, r7
20000674:	b002      	add	sp, #8
20000676:	bd80      	pop	{r7, pc}

20000678 <set_sprite_object_speed>:

void set_sprite_object_speed(PSPRITE_OBJECT p, int x, int y){
20000678:	b580      	push	{r7, lr}
2000067a:	b084      	sub	sp, #16
2000067c:	af00      	add	r7, sp, #0
2000067e:	60f8      	str	r0, [r7, #12]
20000680:	60b9      	str	r1, [r7, #8]
20000682:	607a      	str	r2, [r7, #4]
    p->dir_x = x;
20000684:	68fb      	ldr	r3, [r7, #12]
20000686:	68ba      	ldr	r2, [r7, #8]
20000688:	605a      	str	r2, [r3, #4]
    p->dir_y = y;
2000068a:	68fb      	ldr	r3, [r7, #12]
2000068c:	687a      	ldr	r2, [r7, #4]
2000068e:	609a      	str	r2, [r3, #8]
}
20000690:	46c0      	nop			; (mov r8, r8)
20000692:	46bd      	mov	sp, r7
20000694:	b004      	add	sp, #16
20000696:	bd80      	pop	{r7, pc}

20000698 <dummy_function1>:

void dummy_function1(PSPRITE_OBJECT p){
20000698:	b580      	push	{r7, lr}
2000069a:	b082      	sub	sp, #8
2000069c:	af00      	add	r7, sp, #0
2000069e:	6078      	str	r0, [r7, #4]
    return;
200006a0:	46c0      	nop			; (mov r8, r8)
}
200006a2:	46bd      	mov	sp, r7
200006a4:	b002      	add	sp, #8
200006a6:	bd80      	pop	{r7, pc}

200006a8 <dummy_function2>:

void dummy_function2(PSPRITE_OBJECT p, int x, int y){
200006a8:	b580      	push	{r7, lr}
200006aa:	b084      	sub	sp, #16
200006ac:	af00      	add	r7, sp, #0
200006ae:	60f8      	str	r0, [r7, #12]
200006b0:	60b9      	str	r1, [r7, #8]
200006b2:	607a      	str	r2, [r7, #4]
    return;
200006b4:	46c0      	nop			; (mov r8, r8)
}
200006b6:	46bd      	mov	sp, r7
200006b8:	b004      	add	sp, #16
200006ba:	bd80      	pop	{r7, pc}

200006bc <init_spoopy>:

PSPRITE_OBJECT init_spoopy(void){
200006bc:	b580      	push	{r7, lr}
200006be:	b08c      	sub	sp, #48	; 0x30
200006c0:	af00      	add	r7, sp, #0
    SPRITE spoopy_sprite = {
200006c2:	2324      	movs	r3, #36	; 0x24
200006c4:	18fb      	adds	r3, r7, r3
200006c6:	2200      	movs	r2, #0
200006c8:	701a      	strb	r2, [r3, #0]
200006ca:	2324      	movs	r3, #36	; 0x24
200006cc:	18fb      	adds	r3, r7, r3
200006ce:	2200      	movs	r2, #0
200006d0:	705a      	strb	r2, [r3, #1]
200006d2:	2324      	movs	r3, #36	; 0x24
200006d4:	18fb      	adds	r3, r7, r3
200006d6:	2200      	movs	r2, #0
200006d8:	605a      	str	r2, [r3, #4]
        0, // Init values, disregard these as these will be set later
        0,
        {0}
    };
    
    PSPRITE spoopy_sprite_pointer = &spoopy_sprite;
200006da:	2324      	movs	r3, #36	; 0x24
200006dc:	18fb      	adds	r3, r7, r3
200006de:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    // Load default sprite for Spoopy
    load_sprite(spoopy_sprite_pointer, spoop_bits, spoop_width, spoop_height);
200006e0:	4913      	ldr	r1, [pc, #76]	; (20000730 <init_spoopy+0x74>)
200006e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200006e4:	2310      	movs	r3, #16
200006e6:	2210      	movs	r2, #16
200006e8:	f7ff fed2 	bl	20000490 <load_sprite>
    
    // Initiate Spoopy
    SPRITE_OBJECT spoopy = {
200006ec:	003b      	movs	r3, r7
200006ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200006f0:	601a      	str	r2, [r3, #0]
200006f2:	003b      	movs	r3, r7
200006f4:	2200      	movs	r2, #0
200006f6:	605a      	str	r2, [r3, #4]
200006f8:	003b      	movs	r3, r7
200006fa:	2200      	movs	r2, #0
200006fc:	609a      	str	r2, [r3, #8]
200006fe:	003b      	movs	r3, r7
20000700:	22fa      	movs	r2, #250	; 0xfa
20000702:	0052      	lsls	r2, r2, #1
20000704:	60da      	str	r2, [r3, #12]
20000706:	003b      	movs	r3, r7
20000708:	22fa      	movs	r2, #250	; 0xfa
2000070a:	0052      	lsls	r2, r2, #1
2000070c:	611a      	str	r2, [r3, #16]
2000070e:	003b      	movs	r3, r7
20000710:	4a08      	ldr	r2, [pc, #32]	; (20000734 <init_spoopy+0x78>)
20000712:	615a      	str	r2, [r3, #20]
20000714:	003b      	movs	r3, r7
20000716:	4a08      	ldr	r2, [pc, #32]	; (20000738 <init_spoopy+0x7c>)
20000718:	619a      	str	r2, [r3, #24]
2000071a:	003b      	movs	r3, r7
2000071c:	4a07      	ldr	r2, [pc, #28]	; (2000073c <init_spoopy+0x80>)
2000071e:	61da      	str	r2, [r3, #28]
20000720:	003b      	movs	r3, r7
20000722:	4a07      	ldr	r2, [pc, #28]	; (20000740 <init_spoopy+0x84>)
20000724:	621a      	str	r2, [r3, #32]
        clear_sprite_object,
        move_sprite_object,
        set_sprite_object_speed,
    };
    
    return &spoopy;
20000726:	2300      	movs	r3, #0
}
20000728:	0018      	movs	r0, r3
2000072a:	46bd      	mov	sp, r7
2000072c:	b00c      	add	sp, #48	; 0x30
2000072e:	bd80      	pop	{r7, pc}
20000730:	200016f4 	strdcs	r1, [r0], -r4
20000734:	20000597 	mulcs	r0, r7, r5
20000738:	200005b9 			; <UNDEFINED> instruction: 0x200005b9
2000073c:	200005db 	ldrdcs	r0, [r0], -fp
20000740:	20000679 	andcs	r0, r0, r9, ror r6

20000744 <init_wall>:

PSPRITE_OBJECT init_wall(void){
20000744:	b580      	push	{r7, lr}
20000746:	b08c      	sub	sp, #48	; 0x30
20000748:	af00      	add	r7, sp, #0
    SPRITE wall_sprite = {
2000074a:	2324      	movs	r3, #36	; 0x24
2000074c:	18fb      	adds	r3, r7, r3
2000074e:	2200      	movs	r2, #0
20000750:	701a      	strb	r2, [r3, #0]
20000752:	2324      	movs	r3, #36	; 0x24
20000754:	18fb      	adds	r3, r7, r3
20000756:	2200      	movs	r2, #0
20000758:	705a      	strb	r2, [r3, #1]
2000075a:	2324      	movs	r3, #36	; 0x24
2000075c:	18fb      	adds	r3, r7, r3
2000075e:	2200      	movs	r2, #0
20000760:	605a      	str	r2, [r3, #4]
        0,
        0,
        {0}
    };
    
    PSPRITE wall_sprite_pointer = &wall_sprite;
20000762:	2324      	movs	r3, #36	; 0x24
20000764:	18fb      	adds	r3, r7, r3
20000766:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    load_sprite(wall_sprite_pointer, wall_bits, wall_width, wall_height);
20000768:	4913      	ldr	r1, [pc, #76]	; (200007b8 <init_wall+0x74>)
2000076a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
2000076c:	2310      	movs	r3, #16
2000076e:	2210      	movs	r2, #16
20000770:	f7ff fe8e 	bl	20000490 <load_sprite>
    
    SPRITE_OBJECT wall = {
20000774:	003b      	movs	r3, r7
20000776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000778:	601a      	str	r2, [r3, #0]
2000077a:	003b      	movs	r3, r7
2000077c:	2200      	movs	r2, #0
2000077e:	605a      	str	r2, [r3, #4]
20000780:	003b      	movs	r3, r7
20000782:	2200      	movs	r2, #0
20000784:	609a      	str	r2, [r3, #8]
20000786:	003b      	movs	r3, r7
20000788:	22fa      	movs	r2, #250	; 0xfa
2000078a:	0052      	lsls	r2, r2, #1
2000078c:	60da      	str	r2, [r3, #12]
2000078e:	003b      	movs	r3, r7
20000790:	22fa      	movs	r2, #250	; 0xfa
20000792:	0052      	lsls	r2, r2, #1
20000794:	611a      	str	r2, [r3, #16]
20000796:	003b      	movs	r3, r7
20000798:	4a08      	ldr	r2, [pc, #32]	; (200007bc <init_wall+0x78>)
2000079a:	615a      	str	r2, [r3, #20]
2000079c:	003b      	movs	r3, r7
2000079e:	4a08      	ldr	r2, [pc, #32]	; (200007c0 <init_wall+0x7c>)
200007a0:	619a      	str	r2, [r3, #24]
200007a2:	003b      	movs	r3, r7
200007a4:	4a07      	ldr	r2, [pc, #28]	; (200007c4 <init_wall+0x80>)
200007a6:	61da      	str	r2, [r3, #28]
200007a8:	003b      	movs	r3, r7
200007aa:	4a07      	ldr	r2, [pc, #28]	; (200007c8 <init_wall+0x84>)
200007ac:	621a      	str	r2, [r3, #32]
        clear_sprite_object,
        dummy_function1,
        dummy_function2
    };
    
    return &wall;
200007ae:	2300      	movs	r3, #0
}
200007b0:	0018      	movs	r0, r3
200007b2:	46bd      	mov	sp, r7
200007b4:	b00c      	add	sp, #48	; 0x30
200007b6:	bd80      	pop	{r7, pc}
200007b8:	20001714 	andcs	r1, r0, r4, lsl r7
200007bc:	20000597 	mulcs	r0, r7, r5
200007c0:	200005b9 			; <UNDEFINED> instruction: 0x200005b9
200007c4:	20000699 	mulcs	r0, r9, r6
200007c8:	200006a9 	andcs	r0, r0, r9, lsr #13

200007cc <init_exit>:

PSPRITE_OBJECT init_exit(void){
200007cc:	b580      	push	{r7, lr}
200007ce:	b08c      	sub	sp, #48	; 0x30
200007d0:	af00      	add	r7, sp, #0
    SPRITE exit_sprite = {
200007d2:	2324      	movs	r3, #36	; 0x24
200007d4:	18fb      	adds	r3, r7, r3
200007d6:	2200      	movs	r2, #0
200007d8:	701a      	strb	r2, [r3, #0]
200007da:	2324      	movs	r3, #36	; 0x24
200007dc:	18fb      	adds	r3, r7, r3
200007de:	2200      	movs	r2, #0
200007e0:	705a      	strb	r2, [r3, #1]
200007e2:	2324      	movs	r3, #36	; 0x24
200007e4:	18fb      	adds	r3, r7, r3
200007e6:	2200      	movs	r2, #0
200007e8:	605a      	str	r2, [r3, #4]
        0,
        0,
        {0}
    };
    
    PSPRITE exit_sprite_pointer = &exit_sprite;
200007ea:	2324      	movs	r3, #36	; 0x24
200007ec:	18fb      	adds	r3, r7, r3
200007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    load_sprite(exit_sprite_pointer, exit_bits, exit_width, exit_height);
200007f0:	4913      	ldr	r1, [pc, #76]	; (20000840 <init_exit+0x74>)
200007f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200007f4:	2310      	movs	r3, #16
200007f6:	2210      	movs	r2, #16
200007f8:	f7ff fe4a 	bl	20000490 <load_sprite>
    
    SPRITE_OBJECT exit = {
200007fc:	003b      	movs	r3, r7
200007fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000800:	601a      	str	r2, [r3, #0]
20000802:	003b      	movs	r3, r7
20000804:	2200      	movs	r2, #0
20000806:	605a      	str	r2, [r3, #4]
20000808:	003b      	movs	r3, r7
2000080a:	2200      	movs	r2, #0
2000080c:	609a      	str	r2, [r3, #8]
2000080e:	003b      	movs	r3, r7
20000810:	22fa      	movs	r2, #250	; 0xfa
20000812:	0052      	lsls	r2, r2, #1
20000814:	60da      	str	r2, [r3, #12]
20000816:	003b      	movs	r3, r7
20000818:	22fa      	movs	r2, #250	; 0xfa
2000081a:	0052      	lsls	r2, r2, #1
2000081c:	611a      	str	r2, [r3, #16]
2000081e:	003b      	movs	r3, r7
20000820:	4a08      	ldr	r2, [pc, #32]	; (20000844 <init_exit+0x78>)
20000822:	615a      	str	r2, [r3, #20]
20000824:	003b      	movs	r3, r7
20000826:	4a08      	ldr	r2, [pc, #32]	; (20000848 <init_exit+0x7c>)
20000828:	619a      	str	r2, [r3, #24]
2000082a:	003b      	movs	r3, r7
2000082c:	4a07      	ldr	r2, [pc, #28]	; (2000084c <init_exit+0x80>)
2000082e:	61da      	str	r2, [r3, #28]
20000830:	003b      	movs	r3, r7
20000832:	4a07      	ldr	r2, [pc, #28]	; (20000850 <init_exit+0x84>)
20000834:	621a      	str	r2, [r3, #32]
        clear_sprite_object,
        dummy_function1,
        dummy_function2
    };
    
    return &exit;
20000836:	2300      	movs	r3, #0
}
20000838:	0018      	movs	r0, r3
2000083a:	46bd      	mov	sp, r7
2000083c:	b00c      	add	sp, #48	; 0x30
2000083e:	bd80      	pop	{r7, pc}
20000840:	20001734 	andcs	r1, r0, r4, lsr r7
20000844:	20000597 	mulcs	r0, r7, r5
20000848:	200005b9 			; <UNDEFINED> instruction: 0x200005b9
2000084c:	20000699 	mulcs	r0, r9, r6
20000850:	200006a9 	andcs	r0, r0, r9, lsr #13

20000854 <update_sprite_object>:

void update_sprite_object(PSPRITE_OBJECT obj){
20000854:	b580      	push	{r7, lr}
20000856:	b082      	sub	sp, #8
20000858:	af00      	add	r7, sp, #0
2000085a:	6078      	str	r0, [r7, #4]
    obj->clear(obj);
2000085c:	687b      	ldr	r3, [r7, #4]
2000085e:	699b      	ldr	r3, [r3, #24]
20000860:	687a      	ldr	r2, [r7, #4]
20000862:	0010      	movs	r0, r2
20000864:	4798      	blx	r3
    obj->move(obj);
20000866:	687b      	ldr	r3, [r7, #4]
20000868:	69db      	ldr	r3, [r3, #28]
2000086a:	687a      	ldr	r2, [r7, #4]
2000086c:	0010      	movs	r0, r2
2000086e:	4798      	blx	r3
    obj->draw(obj);
20000870:	687b      	ldr	r3, [r7, #4]
20000872:	695b      	ldr	r3, [r3, #20]
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	0010      	movs	r0, r2
20000878:	4798      	blx	r3
}
2000087a:	46c0      	nop			; (mov r8, r8)
2000087c:	46bd      	mov	sp, r7
2000087e:	b002      	add	sp, #8
20000880:	bd80      	pop	{r7, pc}
20000882:	46c0      	nop			; (mov r8, r8)

20000884 <keyboard_init>:
#include "keypad.h"

void keyboard_init (void) {
20000884:	b580      	push	{r7, lr}
20000886:	af00      	add	r7, sp, #0
    GPIO_D.moder &= 0x0000FFFF;
20000888:	4b15      	ldr	r3, [pc, #84]	; (200008e0 <keyboard_init+0x5c>)
2000088a:	4a15      	ldr	r2, [pc, #84]	; (200008e0 <keyboard_init+0x5c>)
2000088c:	6812      	ldr	r2, [r2, #0]
2000088e:	0412      	lsls	r2, r2, #16
20000890:	0c12      	lsrs	r2, r2, #16
20000892:	601a      	str	r2, [r3, #0]
	GPIO_D.moder |= 0x55000000;
20000894:	4b12      	ldr	r3, [pc, #72]	; (200008e0 <keyboard_init+0x5c>)
20000896:	4a12      	ldr	r2, [pc, #72]	; (200008e0 <keyboard_init+0x5c>)
20000898:	6812      	ldr	r2, [r2, #0]
2000089a:	21aa      	movs	r1, #170	; 0xaa
2000089c:	05c9      	lsls	r1, r1, #23
2000089e:	430a      	orrs	r2, r1
200008a0:	601a      	str	r2, [r3, #0]
	GPIO_D.otyper &= 0x00FF;
200008a2:	4b0f      	ldr	r3, [pc, #60]	; (200008e0 <keyboard_init+0x5c>)
200008a4:	4a0e      	ldr	r2, [pc, #56]	; (200008e0 <keyboard_init+0x5c>)
200008a6:	6852      	ldr	r2, [r2, #4]
200008a8:	21ff      	movs	r1, #255	; 0xff
200008aa:	400a      	ands	r2, r1
200008ac:	605a      	str	r2, [r3, #4]
	GPIO_D.otyper |= 0x0000;
200008ae:	4b0c      	ldr	r3, [pc, #48]	; (200008e0 <keyboard_init+0x5c>)
200008b0:	4a0b      	ldr	r2, [pc, #44]	; (200008e0 <keyboard_init+0x5c>)
200008b2:	6852      	ldr	r2, [r2, #4]
200008b4:	605a      	str	r2, [r3, #4]
	GPIO_D.pupdr &= 0x0000FFFF;
200008b6:	4b0a      	ldr	r3, [pc, #40]	; (200008e0 <keyboard_init+0x5c>)
200008b8:	4a09      	ldr	r2, [pc, #36]	; (200008e0 <keyboard_init+0x5c>)
200008ba:	68d2      	ldr	r2, [r2, #12]
200008bc:	0412      	lsls	r2, r2, #16
200008be:	0c12      	lsrs	r2, r2, #16
200008c0:	60da      	str	r2, [r3, #12]
	GPIO_D.pupdr |= 0x00AA0000;
200008c2:	4b07      	ldr	r3, [pc, #28]	; (200008e0 <keyboard_init+0x5c>)
200008c4:	4a06      	ldr	r2, [pc, #24]	; (200008e0 <keyboard_init+0x5c>)
200008c6:	68d2      	ldr	r2, [r2, #12]
200008c8:	21aa      	movs	r1, #170	; 0xaa
200008ca:	0409      	lsls	r1, r1, #16
200008cc:	430a      	orrs	r2, r1
200008ce:	60da      	str	r2, [r3, #12]
	GPIO_D.odrHigh &= 0x00FF;
200008d0:	4b03      	ldr	r3, [pc, #12]	; (200008e0 <keyboard_init+0x5c>)
200008d2:	4a03      	ldr	r2, [pc, #12]	; (200008e0 <keyboard_init+0x5c>)
200008d4:	7d52      	ldrb	r2, [r2, #21]
200008d6:	b2d2      	uxtb	r2, r2
200008d8:	755a      	strb	r2, [r3, #21]
}
200008da:	46c0      	nop			; (mov r8, r8)
200008dc:	46bd      	mov	sp, r7
200008de:	bd80      	pop	{r7, pc}
200008e0:	40020c00 	andmi	r0, r2, r0, lsl #24

200008e4 <keyb>:

unsigned char keyb(void){
200008e4:	b580      	push	{r7, lr}
200008e6:	b082      	sub	sp, #8
200008e8:	af00      	add	r7, sp, #0
	unsigned char row, column;
	
	for (unsigned char row = 1; row <= 4; row++) {
200008ea:	1dfb      	adds	r3, r7, #7
200008ec:	2201      	movs	r2, #1
200008ee:	701a      	strb	r2, [r3, #0]
200008f0:	e020      	b.n	20000934 <keyb+0x50>
		// mind the one indexing of rows and columns, to simplify resetting of values
		ActivateRow(row);
200008f2:	1dfb      	adds	r3, r7, #7
200008f4:	781b      	ldrb	r3, [r3, #0]
200008f6:	0018      	movs	r0, r3
200008f8:	f000 f82a 	bl	20000950 <ActivateRow>
		column = ReadColumn();
200008fc:	f000 f854 	bl	200009a8 <ReadColumn>
20000900:	0002      	movs	r2, r0
20000902:	1dbb      	adds	r3, r7, #6
20000904:	701a      	strb	r2, [r3, #0]
		if (column > 0){
20000906:	1dbb      	adds	r3, r7, #6
20000908:	781b      	ldrb	r3, [r3, #0]
2000090a:	2b00      	cmp	r3, #0
2000090c:	d00d      	beq.n	2000092a <keyb+0x46>
			ActivateRow(0);
2000090e:	2000      	movs	r0, #0
20000910:	f000 f81e 	bl	20000950 <ActivateRow>
			return key[row - 1][column - 1];
20000914:	1dfb      	adds	r3, r7, #7
20000916:	781b      	ldrb	r3, [r3, #0]
20000918:	1e5a      	subs	r2, r3, #1
2000091a:	1dbb      	adds	r3, r7, #6
2000091c:	781b      	ldrb	r3, [r3, #0]
2000091e:	3b01      	subs	r3, #1
20000920:	490a      	ldr	r1, [pc, #40]	; (2000094c <keyb+0x68>)
20000922:	0092      	lsls	r2, r2, #2
20000924:	188a      	adds	r2, r1, r2
20000926:	5cd3      	ldrb	r3, [r2, r3]
20000928:	e00c      	b.n	20000944 <keyb+0x60>
	for (unsigned char row = 1; row <= 4; row++) {
2000092a:	1dfb      	adds	r3, r7, #7
2000092c:	781a      	ldrb	r2, [r3, #0]
2000092e:	1dfb      	adds	r3, r7, #7
20000930:	3201      	adds	r2, #1
20000932:	701a      	strb	r2, [r3, #0]
20000934:	1dfb      	adds	r3, r7, #7
20000936:	781b      	ldrb	r3, [r3, #0]
20000938:	2b04      	cmp	r3, #4
2000093a:	d9da      	bls.n	200008f2 <keyb+0xe>
			//return decode7segMatrix[row - 1][column - 1];
		}
	}
	ActivateRow(0);
2000093c:	2000      	movs	r0, #0
2000093e:	f000 f807 	bl	20000950 <ActivateRow>
	return 0xFF;
20000942:	23ff      	movs	r3, #255	; 0xff
}
20000944:	0018      	movs	r0, r3
20000946:	46bd      	mov	sp, r7
20000948:	b002      	add	sp, #8
2000094a:	bd80      	pop	{r7, pc}
2000094c:	20001754 	andcs	r1, r0, r4, asr r7

20000950 <ActivateRow>:

void ActivateRow(unsigned char row) {
20000950:	b580      	push	{r7, lr}
20000952:	b082      	sub	sp, #8
20000954:	af00      	add	r7, sp, #0
20000956:	0002      	movs	r2, r0
20000958:	1dfb      	adds	r3, r7, #7
2000095a:	701a      	strb	r2, [r3, #0]
	switch(row){
2000095c:	1dfb      	adds	r3, r7, #7
2000095e:	781b      	ldrb	r3, [r3, #0]
20000960:	2b04      	cmp	r3, #4
20000962:	d818      	bhi.n	20000996 <ActivateRow+0x46>
20000964:	009a      	lsls	r2, r3, #2
20000966:	4b0e      	ldr	r3, [pc, #56]	; (200009a0 <ActivateRow+0x50>)
20000968:	18d3      	adds	r3, r2, r3
2000096a:	681b      	ldr	r3, [r3, #0]
2000096c:	469f      	mov	pc, r3
		case 0: GPIO_D.odrHigh = 0x0; break; //0 to reset
2000096e:	4b0d      	ldr	r3, [pc, #52]	; (200009a4 <ActivateRow+0x54>)
20000970:	2200      	movs	r2, #0
20000972:	755a      	strb	r2, [r3, #21]
20000974:	e00f      	b.n	20000996 <ActivateRow+0x46>
		case 1: GPIO_D.odrHigh = 0x10; break;
20000976:	4b0b      	ldr	r3, [pc, #44]	; (200009a4 <ActivateRow+0x54>)
20000978:	2210      	movs	r2, #16
2000097a:	755a      	strb	r2, [r3, #21]
2000097c:	e00b      	b.n	20000996 <ActivateRow+0x46>
		case 2: GPIO_D.odrHigh = 0x20; break;
2000097e:	4b09      	ldr	r3, [pc, #36]	; (200009a4 <ActivateRow+0x54>)
20000980:	2220      	movs	r2, #32
20000982:	755a      	strb	r2, [r3, #21]
20000984:	e007      	b.n	20000996 <ActivateRow+0x46>
		case 3: GPIO_D.odrHigh = 0x40; break;
20000986:	4b07      	ldr	r3, [pc, #28]	; (200009a4 <ActivateRow+0x54>)
20000988:	2240      	movs	r2, #64	; 0x40
2000098a:	755a      	strb	r2, [r3, #21]
2000098c:	e003      	b.n	20000996 <ActivateRow+0x46>
		case 4: GPIO_D.odrHigh = 0x80; break;
2000098e:	4b05      	ldr	r3, [pc, #20]	; (200009a4 <ActivateRow+0x54>)
20000990:	2280      	movs	r2, #128	; 0x80
20000992:	755a      	strb	r2, [r3, #21]
20000994:	46c0      	nop			; (mov r8, r8)
	}
}
20000996:	46c0      	nop			; (mov r8, r8)
20000998:	46bd      	mov	sp, r7
2000099a:	b002      	add	sp, #8
2000099c:	bd80      	pop	{r7, pc}
2000099e:	46c0      	nop			; (mov r8, r8)
200009a0:	200017b8 			; <UNDEFINED> instruction: 0x200017b8
200009a4:	40020c00 	andmi	r0, r2, r0, lsl #24

200009a8 <ReadColumn>:

int ReadColumn(void) {
200009a8:	b580      	push	{r7, lr}
200009aa:	b082      	sub	sp, #8
200009ac:	af00      	add	r7, sp, #0
	// Returns column number of pressed key, observe that the columns of the keyboard are read from right to left!
	unsigned char c;
	c = GPIO_D.idrHigh;
200009ae:	4a12      	ldr	r2, [pc, #72]	; (200009f8 <ReadColumn+0x50>)
200009b0:	1dfb      	adds	r3, r7, #7
200009b2:	7c52      	ldrb	r2, [r2, #17]
200009b4:	701a      	strb	r2, [r3, #0]
	if (c & 0x8){return 4;}
200009b6:	1dfb      	adds	r3, r7, #7
200009b8:	781b      	ldrb	r3, [r3, #0]
200009ba:	2208      	movs	r2, #8
200009bc:	4013      	ands	r3, r2
200009be:	d001      	beq.n	200009c4 <ReadColumn+0x1c>
200009c0:	2304      	movs	r3, #4
200009c2:	e015      	b.n	200009f0 <ReadColumn+0x48>
	if (c & 0x4){return 3;}
200009c4:	1dfb      	adds	r3, r7, #7
200009c6:	781b      	ldrb	r3, [r3, #0]
200009c8:	2204      	movs	r2, #4
200009ca:	4013      	ands	r3, r2
200009cc:	d001      	beq.n	200009d2 <ReadColumn+0x2a>
200009ce:	2303      	movs	r3, #3
200009d0:	e00e      	b.n	200009f0 <ReadColumn+0x48>
	if (c & 0x2){return 2;}
200009d2:	1dfb      	adds	r3, r7, #7
200009d4:	781b      	ldrb	r3, [r3, #0]
200009d6:	2202      	movs	r2, #2
200009d8:	4013      	ands	r3, r2
200009da:	d001      	beq.n	200009e0 <ReadColumn+0x38>
200009dc:	2302      	movs	r3, #2
200009de:	e007      	b.n	200009f0 <ReadColumn+0x48>
	if (c & 0x1){return 1;}
200009e0:	1dfb      	adds	r3, r7, #7
200009e2:	781b      	ldrb	r3, [r3, #0]
200009e4:	2201      	movs	r2, #1
200009e6:	4013      	ands	r3, r2
200009e8:	d001      	beq.n	200009ee <ReadColumn+0x46>
200009ea:	2301      	movs	r3, #1
200009ec:	e000      	b.n	200009f0 <ReadColumn+0x48>
	return 0;
200009ee:	2300      	movs	r3, #0
200009f0:	0018      	movs	r0, r3
200009f2:	46bd      	mov	sp, r7
200009f4:	b002      	add	sp, #8
200009f6:	bd80      	pop	{r7, pc}
200009f8:	40020c00 	andmi	r0, r2, r0, lsl #24

200009fc <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"

void graphic_ctrl_bit_set(uint8_t x){
200009fc:	b580      	push	{r7, lr}
200009fe:	b084      	sub	sp, #16
20000a00:	af00      	add	r7, sp, #0
20000a02:	0002      	movs	r2, r0
20000a04:	1dfb      	adds	r3, r7, #7
20000a06:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow &= ~B_E;
20000a08:	4a13      	ldr	r2, [pc, #76]	; (20000a58 <graphic_ctrl_bit_set+0x5c>)
20000a0a:	4b13      	ldr	r3, [pc, #76]	; (20000a58 <graphic_ctrl_bit_set+0x5c>)
20000a0c:	7d1b      	ldrb	r3, [r3, #20]
20000a0e:	b2db      	uxtb	r3, r3
20000a10:	2140      	movs	r1, #64	; 0x40
20000a12:	438b      	bics	r3, r1
20000a14:	b2db      	uxtb	r3, r3
20000a16:	7513      	strb	r3, [r2, #20]
    uint8_t control_register = GPIO_E.odrLow;
20000a18:	4a0f      	ldr	r2, [pc, #60]	; (20000a58 <graphic_ctrl_bit_set+0x5c>)
20000a1a:	230f      	movs	r3, #15
20000a1c:	18fb      	adds	r3, r7, r3
20000a1e:	7d12      	ldrb	r2, [r2, #20]
20000a20:	701a      	strb	r2, [r3, #0]
    control_register |= x;
20000a22:	230f      	movs	r3, #15
20000a24:	18fb      	adds	r3, r7, r3
20000a26:	220f      	movs	r2, #15
20000a28:	18b9      	adds	r1, r7, r2
20000a2a:	1dfa      	adds	r2, r7, #7
20000a2c:	7809      	ldrb	r1, [r1, #0]
20000a2e:	7812      	ldrb	r2, [r2, #0]
20000a30:	430a      	orrs	r2, r1
20000a32:	701a      	strb	r2, [r3, #0]
	control_register &= ~B_SELECT;
20000a34:	230f      	movs	r3, #15
20000a36:	18fb      	adds	r3, r7, r3
20000a38:	220f      	movs	r2, #15
20000a3a:	18ba      	adds	r2, r7, r2
20000a3c:	7812      	ldrb	r2, [r2, #0]
20000a3e:	2104      	movs	r1, #4
20000a40:	438a      	bics	r2, r1
20000a42:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
20000a44:	4a04      	ldr	r2, [pc, #16]	; (20000a58 <graphic_ctrl_bit_set+0x5c>)
20000a46:	230f      	movs	r3, #15
20000a48:	18fb      	adds	r3, r7, r3
20000a4a:	781b      	ldrb	r3, [r3, #0]
20000a4c:	7513      	strb	r3, [r2, #20]
}
20000a4e:	46c0      	nop			; (mov r8, r8)
20000a50:	46bd      	mov	sp, r7
20000a52:	b004      	add	sp, #16
20000a54:	bd80      	pop	{r7, pc}
20000a56:	46c0      	nop			; (mov r8, r8)
20000a58:	40021000 	andmi	r1, r2, r0

20000a5c <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000a5c:	b580      	push	{r7, lr}
20000a5e:	b084      	sub	sp, #16
20000a60:	af00      	add	r7, sp, #0
20000a62:	0002      	movs	r2, r0
20000a64:	1dfb      	adds	r3, r7, #7
20000a66:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow &= ~B_E;
20000a68:	4a15      	ldr	r2, [pc, #84]	; (20000ac0 <graphic_ctrl_bit_clear+0x64>)
20000a6a:	4b15      	ldr	r3, [pc, #84]	; (20000ac0 <graphic_ctrl_bit_clear+0x64>)
20000a6c:	7d1b      	ldrb	r3, [r3, #20]
20000a6e:	b2db      	uxtb	r3, r3
20000a70:	2140      	movs	r1, #64	; 0x40
20000a72:	438b      	bics	r3, r1
20000a74:	b2db      	uxtb	r3, r3
20000a76:	7513      	strb	r3, [r2, #20]
    uint8_t control_register = GPIO_E.odrLow;
20000a78:	4a11      	ldr	r2, [pc, #68]	; (20000ac0 <graphic_ctrl_bit_clear+0x64>)
20000a7a:	230f      	movs	r3, #15
20000a7c:	18fb      	adds	r3, r7, r3
20000a7e:	7d12      	ldrb	r2, [r2, #20]
20000a80:	701a      	strb	r2, [r3, #0]
    control_register &= (~x);
20000a82:	1dfb      	adds	r3, r7, #7
20000a84:	781b      	ldrb	r3, [r3, #0]
20000a86:	b25b      	sxtb	r3, r3
20000a88:	43db      	mvns	r3, r3
20000a8a:	b25b      	sxtb	r3, r3
20000a8c:	220f      	movs	r2, #15
20000a8e:	18ba      	adds	r2, r7, r2
20000a90:	7812      	ldrb	r2, [r2, #0]
20000a92:	b252      	sxtb	r2, r2
20000a94:	4013      	ands	r3, r2
20000a96:	b25a      	sxtb	r2, r3
20000a98:	230f      	movs	r3, #15
20000a9a:	18fb      	adds	r3, r7, r3
20000a9c:	701a      	strb	r2, [r3, #0]
    control_register &= ~B_SELECT;
20000a9e:	230f      	movs	r3, #15
20000aa0:	18fb      	adds	r3, r7, r3
20000aa2:	220f      	movs	r2, #15
20000aa4:	18ba      	adds	r2, r7, r2
20000aa6:	7812      	ldrb	r2, [r2, #0]
20000aa8:	2104      	movs	r1, #4
20000aaa:	438a      	bics	r2, r1
20000aac:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = control_register;
20000aae:	4a04      	ldr	r2, [pc, #16]	; (20000ac0 <graphic_ctrl_bit_clear+0x64>)
20000ab0:	230f      	movs	r3, #15
20000ab2:	18fb      	adds	r3, r7, r3
20000ab4:	781b      	ldrb	r3, [r3, #0]
20000ab6:	7513      	strb	r3, [r2, #20]
}
20000ab8:	46c0      	nop			; (mov r8, r8)
20000aba:	46bd      	mov	sp, r7
20000abc:	b004      	add	sp, #16
20000abe:	bd80      	pop	{r7, pc}
20000ac0:	40021000 	andmi	r1, r2, r0

20000ac4 <select_controller>:

void select_controller(uint8_t controller){
20000ac4:	b580      	push	{r7, lr}
20000ac6:	b082      	sub	sp, #8
20000ac8:	af00      	add	r7, sp, #0
20000aca:	0002      	movs	r2, r0
20000acc:	1dfb      	adds	r3, r7, #7
20000ace:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000ad0:	1dfb      	adds	r3, r7, #7
20000ad2:	781b      	ldrb	r3, [r3, #0]
20000ad4:	2b08      	cmp	r3, #8
20000ad6:	d00c      	beq.n	20000af2 <select_controller+0x2e>
20000ad8:	dc02      	bgt.n	20000ae0 <select_controller+0x1c>
20000ada:	2b00      	cmp	r3, #0
20000adc:	d005      	beq.n	20000aea <select_controller+0x26>
            break;
        case B_CS1 | B_CS2:
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
    }
}
20000ade:	e01a      	b.n	20000b16 <select_controller+0x52>
    switch(controller){
20000ae0:	2b10      	cmp	r3, #16
20000ae2:	d00d      	beq.n	20000b00 <select_controller+0x3c>
20000ae4:	2b18      	cmp	r3, #24
20000ae6:	d012      	beq.n	20000b0e <select_controller+0x4a>
}
20000ae8:	e015      	b.n	20000b16 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
20000aea:	2018      	movs	r0, #24
20000aec:	f7ff ffb6 	bl	20000a5c <graphic_ctrl_bit_clear>
            break;
20000af0:	e011      	b.n	20000b16 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS2);
20000af2:	2010      	movs	r0, #16
20000af4:	f7ff ffb2 	bl	20000a5c <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS1);
20000af8:	2008      	movs	r0, #8
20000afa:	f7ff ff7f 	bl	200009fc <graphic_ctrl_bit_set>
            break;
20000afe:	e00a      	b.n	20000b16 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000b00:	2008      	movs	r0, #8
20000b02:	f7ff ffab 	bl	20000a5c <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000b06:	2010      	movs	r0, #16
20000b08:	f7ff ff78 	bl	200009fc <graphic_ctrl_bit_set>
            break;
20000b0c:	e003      	b.n	20000b16 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
20000b0e:	2018      	movs	r0, #24
20000b10:	f7ff ff74 	bl	200009fc <graphic_ctrl_bit_set>
            break;
20000b14:	46c0      	nop			; (mov r8, r8)
}
20000b16:	46c0      	nop			; (mov r8, r8)
20000b18:	46bd      	mov	sp, r7
20000b1a:	b002      	add	sp, #8
20000b1c:	bd80      	pop	{r7, pc}

20000b1e <graphic_wait_ready>:

void graphic_wait_ready(void){
20000b1e:	b580      	push	{r7, lr}
20000b20:	b082      	sub	sp, #8
20000b22:	af00      	add	r7, sp, #0
    uint8_t display_busy_status;
    // Enable = 0
    graphic_ctrl_bit_clear(B_E);
20000b24:	2040      	movs	r0, #64	; 0x40
20000b26:	f7ff ff99 	bl	20000a5c <graphic_ctrl_bit_clear>
    // E: 15-8 = input, 7-0 = output
    GPIO_E.moder = 0x00005555;
20000b2a:	4b17      	ldr	r3, [pc, #92]	; (20000b88 <graphic_wait_ready+0x6a>)
20000b2c:	4a17      	ldr	r2, [pc, #92]	; (20000b8c <graphic_wait_ready+0x6e>)
20000b2e:	601a      	str	r2, [r3, #0]
    
    // RS = 0, RW = 1
    graphic_ctrl_bit_clear(B_RS);
20000b30:	2001      	movs	r0, #1
20000b32:	f7ff ff93 	bl	20000a5c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000b36:	2002      	movs	r0, #2
20000b38:	f7ff ff60 	bl	200009fc <graphic_ctrl_bit_set>
    delay_500ns();
20000b3c:	f000 fb16 	bl	2000116c <delay_500ns>
    
    while(1){
        // Enable = 1
        graphic_ctrl_bit_set(B_E);
20000b40:	2040      	movs	r0, #64	; 0x40
20000b42:	f7ff ff5b 	bl	200009fc <graphic_ctrl_bit_set>
        delay_500ns();
20000b46:	f000 fb11 	bl	2000116c <delay_500ns>
        // Enable = 0
		display_busy_status = GPIO_E.idrHigh;
20000b4a:	4a0f      	ldr	r2, [pc, #60]	; (20000b88 <graphic_wait_ready+0x6a>)
20000b4c:	1dfb      	adds	r3, r7, #7
20000b4e:	7c52      	ldrb	r2, [r2, #17]
20000b50:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
20000b52:	2040      	movs	r0, #64	; 0x40
20000b54:	f7ff ff82 	bl	20000a5c <graphic_ctrl_bit_clear>
        delay_500ns();
20000b58:	f000 fb08 	bl	2000116c <delay_500ns>
        // Exit loop if not busy
        
		display_busy_status &= LCD_BUSY;
20000b5c:	1dfb      	adds	r3, r7, #7
20000b5e:	1dfa      	adds	r2, r7, #7
20000b60:	7812      	ldrb	r2, [r2, #0]
20000b62:	217f      	movs	r1, #127	; 0x7f
20000b64:	438a      	bics	r2, r1
20000b66:	701a      	strb	r2, [r3, #0]
        if(display_busy_status == 0){
20000b68:	1dfb      	adds	r3, r7, #7
20000b6a:	781b      	ldrb	r3, [r3, #0]
20000b6c:	2b00      	cmp	r3, #0
20000b6e:	d000      	beq.n	20000b72 <graphic_wait_ready+0x54>
        graphic_ctrl_bit_set(B_E);
20000b70:	e7e6      	b.n	20000b40 <graphic_wait_ready+0x22>
            break;
20000b72:	46c0      	nop			; (mov r8, r8)
        } 
    }
    
    // Enable = 1
    graphic_ctrl_bit_set(B_E); // Commented out to check if this works because it works for NaN
20000b74:	2040      	movs	r0, #64	; 0x40
20000b76:	f7ff ff41 	bl	200009fc <graphic_ctrl_bit_set>
    // E: 15-0 = output
    GPIO_E.moder = 0x55555555;
20000b7a:	4b03      	ldr	r3, [pc, #12]	; (20000b88 <graphic_wait_ready+0x6a>)
20000b7c:	4a04      	ldr	r2, [pc, #16]	; (20000b90 <graphic_wait_ready+0x72>)
20000b7e:	601a      	str	r2, [r3, #0]
}
20000b80:	46c0      	nop			; (mov r8, r8)
20000b82:	46bd      	mov	sp, r7
20000b84:	b002      	add	sp, #8
20000b86:	bd80      	pop	{r7, pc}
20000b88:	40021000 	andmi	r1, r2, r0
20000b8c:	00005555 	andeq	r5, r0, r5, asr r5
20000b90:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000b94 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000b94:	b580      	push	{r7, lr}
20000b96:	b084      	sub	sp, #16
20000b98:	af00      	add	r7, sp, #0
20000b9a:	0002      	movs	r2, r0
20000b9c:	1dfb      	adds	r3, r7, #7
20000b9e:	701a      	strb	r2, [r3, #0]
	//Set enable to 0
	graphic_ctrl_bit_clear(B_E);
20000ba0:	2040      	movs	r0, #64	; 0x40
20000ba2:	f7ff ff5b 	bl	20000a5c <graphic_ctrl_bit_clear>
	
	//set E to input high byte / output low byte
	GPIO_E.moder = 0x00005555;
20000ba6:	4b1c      	ldr	r3, [pc, #112]	; (20000c18 <graphic_read+0x84>)
20000ba8:	4a1c      	ldr	r2, [pc, #112]	; (20000c1c <graphic_read+0x88>)
20000baa:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_RS | B_RW);
20000bac:	2003      	movs	r0, #3
20000bae:	f7ff ff25 	bl	200009fc <graphic_ctrl_bit_set>
	
	select_controller(controller);
20000bb2:	1dfb      	adds	r3, r7, #7
20000bb4:	781b      	ldrb	r3, [r3, #0]
20000bb6:	0018      	movs	r0, r3
20000bb8:	f7ff ff84 	bl	20000ac4 <select_controller>
	delay_500ns();
20000bbc:	f000 fad6 	bl	2000116c <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
20000bc0:	2040      	movs	r0, #64	; 0x40
20000bc2:	f7ff ff1b 	bl	200009fc <graphic_ctrl_bit_set>
	delay_500ns();
20000bc6:	f000 fad1 	bl	2000116c <delay_500ns>
	
	// set return value to what is on the data register
	uint8_t RV = GPIO_E.idrHigh;
20000bca:	4a13      	ldr	r2, [pc, #76]	; (20000c18 <graphic_read+0x84>)
20000bcc:	230f      	movs	r3, #15
20000bce:	18fb      	adds	r3, r7, r3
20000bd0:	7c52      	ldrb	r2, [r2, #17]
20000bd2:	701a      	strb	r2, [r3, #0]
	
	graphic_ctrl_bit_clear(B_E);
20000bd4:	2040      	movs	r0, #64	; 0x40
20000bd6:	f7ff ff41 	bl	20000a5c <graphic_ctrl_bit_clear>
	
	//set E to output
	GPIO_E.moder = 0x55555555;
20000bda:	4b0f      	ldr	r3, [pc, #60]	; (20000c18 <graphic_read+0x84>)
20000bdc:	4a10      	ldr	r2, [pc, #64]	; (20000c20 <graphic_read+0x8c>)
20000bde:	601a      	str	r2, [r3, #0]
	
	if((controller & B_CS1) != 0) {
20000be0:	1dfb      	adds	r3, r7, #7
20000be2:	781b      	ldrb	r3, [r3, #0]
20000be4:	2208      	movs	r2, #8
20000be6:	4013      	ands	r3, r2
20000be8:	d004      	beq.n	20000bf4 <graphic_read+0x60>
		select_controller(B_CS1);
20000bea:	2008      	movs	r0, #8
20000bec:	f7ff ff6a 	bl	20000ac4 <select_controller>
		graphic_wait_ready();
20000bf0:	f7ff ff95 	bl	20000b1e <graphic_wait_ready>
	}
	if((controller & B_CS2) != 0){
20000bf4:	1dfb      	adds	r3, r7, #7
20000bf6:	781b      	ldrb	r3, [r3, #0]
20000bf8:	2210      	movs	r2, #16
20000bfa:	4013      	ands	r3, r2
20000bfc:	d004      	beq.n	20000c08 <graphic_read+0x74>
		select_controller(B_CS2);
20000bfe:	2010      	movs	r0, #16
20000c00:	f7ff ff60 	bl	20000ac4 <select_controller>
		graphic_wait_ready();
20000c04:	f7ff ff8b 	bl	20000b1e <graphic_wait_ready>
		//case B_CS1 | B_CS2: select_controller(B_CS1 | B_CS2); break;
		//default: select_controller(0);
	}*/
	//graphic_wait_ready();
	
	return RV;
20000c08:	230f      	movs	r3, #15
20000c0a:	18fb      	adds	r3, r7, r3
20000c0c:	781b      	ldrb	r3, [r3, #0]
}
20000c0e:	0018      	movs	r0, r3
20000c10:	46bd      	mov	sp, r7
20000c12:	b004      	add	sp, #16
20000c14:	bd80      	pop	{r7, pc}
20000c16:	46c0      	nop			; (mov r8, r8)
20000c18:	40021000 	andmi	r1, r2, r0
20000c1c:	00005555 	andeq	r5, r0, r5, asr r5
20000c20:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000c24 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000c24:	b580      	push	{r7, lr}
20000c26:	b082      	sub	sp, #8
20000c28:	af00      	add	r7, sp, #0
20000c2a:	0002      	movs	r2, r0
20000c2c:	1dfb      	adds	r3, r7, #7
20000c2e:	701a      	strb	r2, [r3, #0]
20000c30:	1dbb      	adds	r3, r7, #6
20000c32:	1c0a      	adds	r2, r1, #0
20000c34:	701a      	strb	r2, [r3, #0]
	//datareg to value
	GPIO_E.odrHigh = value;
20000c36:	4a1a      	ldr	r2, [pc, #104]	; (20000ca0 <graphic_write+0x7c>)
20000c38:	1dfb      	adds	r3, r7, #7
20000c3a:	781b      	ldrb	r3, [r3, #0]
20000c3c:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
20000c3e:	1dbb      	adds	r3, r7, #6
20000c40:	781b      	ldrb	r3, [r3, #0]
20000c42:	0018      	movs	r0, r3
20000c44:	f7ff ff3e 	bl	20000ac4 <select_controller>
	delay_500ns();
20000c48:	f000 fa90 	bl	2000116c <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);
20000c4c:	2040      	movs	r0, #64	; 0x40
20000c4e:	f7ff fed5 	bl	200009fc <graphic_ctrl_bit_set>
	delay_500ns();
20000c52:	f000 fa8b 	bl	2000116c <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000c56:	2040      	movs	r0, #64	; 0x40
20000c58:	f7ff ff00 	bl	20000a5c <graphic_ctrl_bit_clear>
	
	//select actual controller, wait while we read
	if (controller & B_CS1){
20000c5c:	1dbb      	adds	r3, r7, #6
20000c5e:	781b      	ldrb	r3, [r3, #0]
20000c60:	2208      	movs	r2, #8
20000c62:	4013      	ands	r3, r2
20000c64:	d004      	beq.n	20000c70 <graphic_write+0x4c>
		select_controller(B_CS1);
20000c66:	2008      	movs	r0, #8
20000c68:	f7ff ff2c 	bl	20000ac4 <select_controller>
		graphic_wait_ready();
20000c6c:	f7ff ff57 	bl	20000b1e <graphic_wait_ready>
	}
	if (controller & B_CS2){
20000c70:	1dbb      	adds	r3, r7, #6
20000c72:	781b      	ldrb	r3, [r3, #0]
20000c74:	2210      	movs	r2, #16
20000c76:	4013      	ands	r3, r2
20000c78:	d004      	beq.n	20000c84 <graphic_write+0x60>
		select_controller(B_CS2);
20000c7a:	2010      	movs	r0, #16
20000c7c:	f7ff ff22 	bl	20000ac4 <select_controller>
		graphic_wait_ready();
20000c80:	f7ff ff4d 	bl	20000b1e <graphic_wait_ready>
	}
	
	//datareg to 0
	GPIO_E.odrHigh = 0;
20000c84:	4b06      	ldr	r3, [pc, #24]	; (20000ca0 <graphic_write+0x7c>)
20000c86:	2200      	movs	r2, #0
20000c88:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
20000c8a:	2040      	movs	r0, #64	; 0x40
20000c8c:	f7ff feb6 	bl	200009fc <graphic_ctrl_bit_set>
	
	//set controller to 0
	select_controller(0);
20000c90:	2000      	movs	r0, #0
20000c92:	f7ff ff17 	bl	20000ac4 <select_controller>
}
20000c96:	46c0      	nop			; (mov r8, r8)
20000c98:	46bd      	mov	sp, r7
20000c9a:	b002      	add	sp, #8
20000c9c:	bd80      	pop	{r7, pc}
20000c9e:	46c0      	nop			; (mov r8, r8)
20000ca0:	40021000 	andmi	r1, r2, r0

20000ca4 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b082      	sub	sp, #8
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
20000cb0:	1dbb      	adds	r3, r7, #6
20000cb2:	1c0a      	adds	r2, r1, #0
20000cb4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000cb6:	2040      	movs	r0, #64	; 0x40
20000cb8:	f7ff fed0 	bl	20000a5c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000cbc:	1dbb      	adds	r3, r7, #6
20000cbe:	781b      	ldrb	r3, [r3, #0]
20000cc0:	0018      	movs	r0, r3
20000cc2:	f7ff feff 	bl	20000ac4 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000cc6:	2003      	movs	r0, #3
20000cc8:	f7ff fec8 	bl	20000a5c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000ccc:	1dbb      	adds	r3, r7, #6
20000cce:	781a      	ldrb	r2, [r3, #0]
20000cd0:	1dfb      	adds	r3, r7, #7
20000cd2:	781b      	ldrb	r3, [r3, #0]
20000cd4:	0011      	movs	r1, r2
20000cd6:	0018      	movs	r0, r3
20000cd8:	f7ff ffa4 	bl	20000c24 <graphic_write>
}
20000cdc:	46c0      	nop			; (mov r8, r8)
20000cde:	46bd      	mov	sp, r7
20000ce0:	b002      	add	sp, #8
20000ce2:	bd80      	pop	{r7, pc}

20000ce4 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000ce4:	b580      	push	{r7, lr}
20000ce6:	b082      	sub	sp, #8
20000ce8:	af00      	add	r7, sp, #0
20000cea:	0002      	movs	r2, r0
20000cec:	1dfb      	adds	r3, r7, #7
20000cee:	701a      	strb	r2, [r3, #0]
20000cf0:	1dbb      	adds	r3, r7, #6
20000cf2:	1c0a      	adds	r2, r1, #0
20000cf4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000cf6:	2040      	movs	r0, #64	; 0x40
20000cf8:	f7ff feb0 	bl	20000a5c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000cfc:	1dbb      	adds	r3, r7, #6
20000cfe:	781b      	ldrb	r3, [r3, #0]
20000d00:	0018      	movs	r0, r3
20000d02:	f7ff fedf 	bl	20000ac4 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000d06:	2001      	movs	r0, #1
20000d08:	f7ff fe78 	bl	200009fc <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000d0c:	2002      	movs	r0, #2
20000d0e:	f7ff fea5 	bl	20000a5c <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000d12:	1dbb      	adds	r3, r7, #6
20000d14:	781a      	ldrb	r2, [r3, #0]
20000d16:	1dfb      	adds	r3, r7, #7
20000d18:	781b      	ldrb	r3, [r3, #0]
20000d1a:	0011      	movs	r1, r2
20000d1c:	0018      	movs	r0, r3
20000d1e:	f7ff ff81 	bl	20000c24 <graphic_write>
}
20000d22:	46c0      	nop			; (mov r8, r8)
20000d24:	46bd      	mov	sp, r7
20000d26:	b002      	add	sp, #8
20000d28:	bd80      	pop	{r7, pc}

20000d2a <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000d2a:	b580      	push	{r7, lr}
20000d2c:	b082      	sub	sp, #8
20000d2e:	af00      	add	r7, sp, #0
20000d30:	0002      	movs	r2, r0
20000d32:	1dfb      	adds	r3, r7, #7
20000d34:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
20000d36:	1dfb      	adds	r3, r7, #7
20000d38:	781b      	ldrb	r3, [r3, #0]
20000d3a:	0018      	movs	r0, r3
20000d3c:	f7ff ff2a 	bl	20000b94 <graphic_read>
	return graphic_read(controller);
20000d40:	1dfb      	adds	r3, r7, #7
20000d42:	781b      	ldrb	r3, [r3, #0]
20000d44:	0018      	movs	r0, r3
20000d46:	f7ff ff25 	bl	20000b94 <graphic_read>
20000d4a:	0003      	movs	r3, r0
}
20000d4c:	0018      	movs	r0, r3
20000d4e:	46bd      	mov	sp, r7
20000d50:	b002      	add	sp, #8
20000d52:	bd80      	pop	{r7, pc}

20000d54 <graphic_initialize>:

void graphic_initialize(void){
20000d54:	b580      	push	{r7, lr}
20000d56:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000d58:	2040      	movs	r0, #64	; 0x40
20000d5a:	f7ff fe4f 	bl	200009fc <graphic_ctrl_bit_set>
	
	delay_mikro(10);
20000d5e:	200a      	movs	r0, #10
20000d60:	f000 fa26 	bl	200011b0 <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000d64:	2078      	movs	r0, #120	; 0x78
20000d66:	f7ff fe79 	bl	20000a5c <graphic_ctrl_bit_clear>
	
	delay_milli(30);
20000d6a:	201e      	movs	r0, #30
20000d6c:	f000 fa3e 	bl	200011ec <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000d70:	2020      	movs	r0, #32
20000d72:	f7ff fe43 	bl	200009fc <graphic_ctrl_bit_set>
	
	delay_milli(100); // Added because NaN has it
20000d76:	2064      	movs	r0, #100	; 0x64
20000d78:	f000 fa38 	bl	200011ec <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000d7c:	2118      	movs	r1, #24
20000d7e:	203e      	movs	r0, #62	; 0x3e
20000d80:	f7ff ff90 	bl	20000ca4 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000d84:	2118      	movs	r1, #24
20000d86:	203f      	movs	r0, #63	; 0x3f
20000d88:	f7ff ff8c 	bl	20000ca4 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000d8c:	2118      	movs	r1, #24
20000d8e:	20c0      	movs	r0, #192	; 0xc0
20000d90:	f7ff ff88 	bl	20000ca4 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000d94:	2118      	movs	r1, #24
20000d96:	2040      	movs	r0, #64	; 0x40
20000d98:	f7ff ff84 	bl	20000ca4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000d9c:	2118      	movs	r1, #24
20000d9e:	20b8      	movs	r0, #184	; 0xb8
20000da0:	f7ff ff80 	bl	20000ca4 <graphic_write_command>
	
	select_controller(0);
20000da4:	2000      	movs	r0, #0
20000da6:	f7ff fe8d 	bl	20000ac4 <select_controller>
}
20000daa:	46c0      	nop			; (mov r8, r8)
20000dac:	46bd      	mov	sp, r7
20000dae:	bd80      	pop	{r7, pc}

20000db0 <graphic_clear_screen>:

void graphic_clear_screen(void){
20000db0:	b580      	push	{r7, lr}
20000db2:	b082      	sub	sp, #8
20000db4:	af00      	add	r7, sp, #0
	for(uint8_t page = 0; page < 8; page++){
20000db6:	1dfb      	adds	r3, r7, #7
20000db8:	2200      	movs	r2, #0
20000dba:	701a      	strb	r2, [r3, #0]
20000dbc:	e023      	b.n	20000e06 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000dbe:	1dfb      	adds	r3, r7, #7
20000dc0:	781b      	ldrb	r3, [r3, #0]
20000dc2:	2248      	movs	r2, #72	; 0x48
20000dc4:	4252      	negs	r2, r2
20000dc6:	4313      	orrs	r3, r2
20000dc8:	b2db      	uxtb	r3, r3
20000dca:	2118      	movs	r1, #24
20000dcc:	0018      	movs	r0, r3
20000dce:	f7ff ff69 	bl	20000ca4 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000dd2:	2118      	movs	r1, #24
20000dd4:	2040      	movs	r0, #64	; 0x40
20000dd6:	f7ff ff65 	bl	20000ca4 <graphic_write_command>
		
		for(uint8_t add = 0; add < 64; add++){
20000dda:	1dbb      	adds	r3, r7, #6
20000ddc:	2200      	movs	r2, #0
20000dde:	701a      	strb	r2, [r3, #0]
20000de0:	e008      	b.n	20000df4 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000de2:	2118      	movs	r1, #24
20000de4:	2000      	movs	r0, #0
20000de6:	f7ff ff7d 	bl	20000ce4 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
20000dea:	1dbb      	adds	r3, r7, #6
20000dec:	781a      	ldrb	r2, [r3, #0]
20000dee:	1dbb      	adds	r3, r7, #6
20000df0:	3201      	adds	r2, #1
20000df2:	701a      	strb	r2, [r3, #0]
20000df4:	1dbb      	adds	r3, r7, #6
20000df6:	781b      	ldrb	r3, [r3, #0]
20000df8:	2b3f      	cmp	r3, #63	; 0x3f
20000dfa:	d9f2      	bls.n	20000de2 <graphic_clear_screen+0x32>
	for(uint8_t page = 0; page < 8; page++){
20000dfc:	1dfb      	adds	r3, r7, #7
20000dfe:	781a      	ldrb	r2, [r3, #0]
20000e00:	1dfb      	adds	r3, r7, #7
20000e02:	3201      	adds	r2, #1
20000e04:	701a      	strb	r2, [r3, #0]
20000e06:	1dfb      	adds	r3, r7, #7
20000e08:	781b      	ldrb	r3, [r3, #0]
20000e0a:	2b07      	cmp	r3, #7
20000e0c:	d9d7      	bls.n	20000dbe <graphic_clear_screen+0xe>
		}
	}
}
20000e0e:	46c0      	nop			; (mov r8, r8)
20000e10:	46bd      	mov	sp, r7
20000e12:	b002      	add	sp, #8
20000e14:	bd80      	pop	{r7, pc}

20000e16 <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
20000e16:	b590      	push	{r4, r7, lr}
20000e18:	b085      	sub	sp, #20
20000e1a:	af00      	add	r7, sp, #0
20000e1c:	0004      	movs	r4, r0
20000e1e:	0008      	movs	r0, r1
20000e20:	0011      	movs	r1, r2
20000e22:	1dfb      	adds	r3, r7, #7
20000e24:	1c22      	adds	r2, r4, #0
20000e26:	701a      	strb	r2, [r3, #0]
20000e28:	1dbb      	adds	r3, r7, #6
20000e2a:	1c02      	adds	r2, r0, #0
20000e2c:	701a      	strb	r2, [r3, #0]
20000e2e:	1d7b      	adds	r3, r7, #5
20000e30:	1c0a      	adds	r2, r1, #0
20000e32:	701a      	strb	r2, [r3, #0]
    // Validate values for input variables
    if(x < 1 || x > 128){
20000e34:	1dfb      	adds	r3, r7, #7
20000e36:	781b      	ldrb	r3, [r3, #0]
20000e38:	2b00      	cmp	r3, #0
20000e3a:	d100      	bne.n	20000e3e <pixel+0x28>
20000e3c:	e0b4      	b.n	20000fa8 <pixel+0x192>
20000e3e:	1dfb      	adds	r3, r7, #7
20000e40:	781b      	ldrb	r3, [r3, #0]
20000e42:	2b80      	cmp	r3, #128	; 0x80
20000e44:	d900      	bls.n	20000e48 <pixel+0x32>
20000e46:	e0af      	b.n	20000fa8 <pixel+0x192>
        return;
    }
    if(y < 1 || y > 64){
20000e48:	1dbb      	adds	r3, r7, #6
20000e4a:	781b      	ldrb	r3, [r3, #0]
20000e4c:	2b00      	cmp	r3, #0
20000e4e:	d100      	bne.n	20000e52 <pixel+0x3c>
20000e50:	e0ac      	b.n	20000fac <pixel+0x196>
20000e52:	1dbb      	adds	r3, r7, #6
20000e54:	781b      	ldrb	r3, [r3, #0]
20000e56:	2b40      	cmp	r3, #64	; 0x40
20000e58:	d900      	bls.n	20000e5c <pixel+0x46>
20000e5a:	e0a7      	b.n	20000fac <pixel+0x196>
        return;
    }
    if(set != 1 && set != 0){
20000e5c:	1d7b      	adds	r3, r7, #5
20000e5e:	781b      	ldrb	r3, [r3, #0]
20000e60:	2b01      	cmp	r3, #1
20000e62:	d004      	beq.n	20000e6e <pixel+0x58>
20000e64:	1d7b      	adds	r3, r7, #5
20000e66:	781b      	ldrb	r3, [r3, #0]
20000e68:	2b00      	cmp	r3, #0
20000e6a:	d000      	beq.n	20000e6e <pixel+0x58>
20000e6c:	e0a0      	b.n	20000fb0 <pixel+0x19a>
        return;
    }
    
    uint8_t index = (y-1)/8;
20000e6e:	1dbb      	adds	r3, r7, #6
20000e70:	781b      	ldrb	r3, [r3, #0]
20000e72:	3b01      	subs	r3, #1
20000e74:	2b00      	cmp	r3, #0
20000e76:	da00      	bge.n	20000e7a <pixel+0x64>
20000e78:	3307      	adds	r3, #7
20000e7a:	10db      	asrs	r3, r3, #3
20000e7c:	001a      	movs	r2, r3
20000e7e:	230c      	movs	r3, #12
20000e80:	18fb      	adds	r3, r7, r3
20000e82:	701a      	strb	r2, [r3, #0]
    // Create mask for y, works as well as switch from book, but with less code
    uint8_t mask = 1;
20000e84:	230f      	movs	r3, #15
20000e86:	18fb      	adds	r3, r7, r3
20000e88:	2201      	movs	r2, #1
20000e8a:	701a      	strb	r2, [r3, #0]
    mask = mask << ((y-1)%8);
20000e8c:	230f      	movs	r3, #15
20000e8e:	18fb      	adds	r3, r7, r3
20000e90:	781a      	ldrb	r2, [r3, #0]
20000e92:	1dbb      	adds	r3, r7, #6
20000e94:	781b      	ldrb	r3, [r3, #0]
20000e96:	3b01      	subs	r3, #1
20000e98:	4947      	ldr	r1, [pc, #284]	; (20000fb8 <pixel+0x1a2>)
20000e9a:	400b      	ands	r3, r1
20000e9c:	d504      	bpl.n	20000ea8 <pixel+0x92>
20000e9e:	3b01      	subs	r3, #1
20000ea0:	2108      	movs	r1, #8
20000ea2:	4249      	negs	r1, r1
20000ea4:	430b      	orrs	r3, r1
20000ea6:	3301      	adds	r3, #1
20000ea8:	409a      	lsls	r2, r3
20000eaa:	230f      	movs	r3, #15
20000eac:	18fb      	adds	r3, r7, r3
20000eae:	701a      	strb	r2, [r3, #0]
		case 6: mask = 0x40; break;
		case 7: mask = 0x80; break;
	}*/
    
    // Invert mask if the bit is going to get cleared
    if(set == 0){
20000eb0:	1d7b      	adds	r3, r7, #5
20000eb2:	781b      	ldrb	r3, [r3, #0]
20000eb4:	2b00      	cmp	r3, #0
20000eb6:	d106      	bne.n	20000ec6 <pixel+0xb0>
        mask = ~mask;
20000eb8:	230f      	movs	r3, #15
20000eba:	18fb      	adds	r3, r7, r3
20000ebc:	220f      	movs	r2, #15
20000ebe:	18ba      	adds	r2, r7, r2
20000ec0:	7812      	ldrb	r2, [r2, #0]
20000ec2:	43d2      	mvns	r2, r2
20000ec4:	701a      	strb	r2, [r3, #0]
    }
    
    uint8_t x_actual;
    uint8_t controller;
    // Select applicable chip (screen half), and store the actual value of x
    if(x > 64){
20000ec6:	1dfb      	adds	r3, r7, #7
20000ec8:	781b      	ldrb	r3, [r3, #0]
20000eca:	2b40      	cmp	r3, #64	; 0x40
20000ecc:	d90a      	bls.n	20000ee4 <pixel+0xce>
        controller = B_CS2;
20000ece:	230d      	movs	r3, #13
20000ed0:	18fb      	adds	r3, r7, r3
20000ed2:	2210      	movs	r2, #16
20000ed4:	701a      	strb	r2, [r3, #0]
        x_actual = x - 65;
20000ed6:	230e      	movs	r3, #14
20000ed8:	18fb      	adds	r3, r7, r3
20000eda:	1dfa      	adds	r2, r7, #7
20000edc:	7812      	ldrb	r2, [r2, #0]
20000ede:	3a41      	subs	r2, #65	; 0x41
20000ee0:	701a      	strb	r2, [r3, #0]
20000ee2:	e009      	b.n	20000ef8 <pixel+0xe2>
    } else {
        controller = B_CS1;
20000ee4:	230d      	movs	r3, #13
20000ee6:	18fb      	adds	r3, r7, r3
20000ee8:	2208      	movs	r2, #8
20000eea:	701a      	strb	r2, [r3, #0]
        x_actual = x - 1;
20000eec:	230e      	movs	r3, #14
20000eee:	18fb      	adds	r3, r7, r3
20000ef0:	1dfa      	adds	r2, r7, #7
20000ef2:	7812      	ldrb	r2, [r2, #0]
20000ef4:	3a01      	subs	r2, #1
20000ef6:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000ef8:	230e      	movs	r3, #14
20000efa:	18fb      	adds	r3, r7, r3
20000efc:	781b      	ldrb	r3, [r3, #0]
20000efe:	2240      	movs	r2, #64	; 0x40
20000f00:	4313      	orrs	r3, r2
20000f02:	b2da      	uxtb	r2, r3
20000f04:	230d      	movs	r3, #13
20000f06:	18fb      	adds	r3, r7, r3
20000f08:	781b      	ldrb	r3, [r3, #0]
20000f0a:	0019      	movs	r1, r3
20000f0c:	0010      	movs	r0, r2
20000f0e:	f7ff fec9 	bl	20000ca4 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
20000f12:	230c      	movs	r3, #12
20000f14:	18fb      	adds	r3, r7, r3
20000f16:	781b      	ldrb	r3, [r3, #0]
20000f18:	2248      	movs	r2, #72	; 0x48
20000f1a:	4252      	negs	r2, r2
20000f1c:	4313      	orrs	r3, r2
20000f1e:	b2da      	uxtb	r2, r3
20000f20:	230d      	movs	r3, #13
20000f22:	18fb      	adds	r3, r7, r3
20000f24:	781b      	ldrb	r3, [r3, #0]
20000f26:	0019      	movs	r1, r3
20000f28:	0010      	movs	r0, r2
20000f2a:	f7ff febb 	bl	20000ca4 <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
20000f2e:	230b      	movs	r3, #11
20000f30:	18fc      	adds	r4, r7, r3
20000f32:	230d      	movs	r3, #13
20000f34:	18fb      	adds	r3, r7, r3
20000f36:	781b      	ldrb	r3, [r3, #0]
20000f38:	0018      	movs	r0, r3
20000f3a:	f7ff fef6 	bl	20000d2a <graphic_read_data>
20000f3e:	0003      	movs	r3, r0
20000f40:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x_actual, controller);
20000f42:	230e      	movs	r3, #14
20000f44:	18fb      	adds	r3, r7, r3
20000f46:	781b      	ldrb	r3, [r3, #0]
20000f48:	2240      	movs	r2, #64	; 0x40
20000f4a:	4313      	orrs	r3, r2
20000f4c:	b2da      	uxtb	r2, r3
20000f4e:	230d      	movs	r3, #13
20000f50:	18fb      	adds	r3, r7, r3
20000f52:	781b      	ldrb	r3, [r3, #0]
20000f54:	0019      	movs	r1, r3
20000f56:	0010      	movs	r0, r2
20000f58:	f7ff fea4 	bl	20000ca4 <graphic_write_command>
    if(set == 1){
20000f5c:	1d7b      	adds	r3, r7, #5
20000f5e:	781b      	ldrb	r3, [r3, #0]
20000f60:	2b01      	cmp	r3, #1
20000f62:	d10a      	bne.n	20000f7a <pixel+0x164>
        mask |= temp;
20000f64:	230f      	movs	r3, #15
20000f66:	18fb      	adds	r3, r7, r3
20000f68:	220f      	movs	r2, #15
20000f6a:	18b9      	adds	r1, r7, r2
20000f6c:	220b      	movs	r2, #11
20000f6e:	18ba      	adds	r2, r7, r2
20000f70:	7809      	ldrb	r1, [r1, #0]
20000f72:	7812      	ldrb	r2, [r2, #0]
20000f74:	430a      	orrs	r2, r1
20000f76:	701a      	strb	r2, [r3, #0]
20000f78:	e009      	b.n	20000f8e <pixel+0x178>
    } else {
        mask &= temp;
20000f7a:	230f      	movs	r3, #15
20000f7c:	18fb      	adds	r3, r7, r3
20000f7e:	220f      	movs	r2, #15
20000f80:	18ba      	adds	r2, r7, r2
20000f82:	210b      	movs	r1, #11
20000f84:	1879      	adds	r1, r7, r1
20000f86:	7812      	ldrb	r2, [r2, #0]
20000f88:	7809      	ldrb	r1, [r1, #0]
20000f8a:	400a      	ands	r2, r1
20000f8c:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
20000f8e:	230d      	movs	r3, #13
20000f90:	18fb      	adds	r3, r7, r3
20000f92:	781a      	ldrb	r2, [r3, #0]
20000f94:	230f      	movs	r3, #15
20000f96:	18fb      	adds	r3, r7, r3
20000f98:	781b      	ldrb	r3, [r3, #0]
20000f9a:	0011      	movs	r1, r2
20000f9c:	0018      	movs	r0, r3
20000f9e:	f7ff fea1 	bl	20000ce4 <graphic_write_data>
	delay_500ns();
20000fa2:	f000 f8e3 	bl	2000116c <delay_500ns>
20000fa6:	e004      	b.n	20000fb2 <pixel+0x19c>
        return;
20000fa8:	46c0      	nop			; (mov r8, r8)
20000faa:	e002      	b.n	20000fb2 <pixel+0x19c>
        return;
20000fac:	46c0      	nop			; (mov r8, r8)
20000fae:	e000      	b.n	20000fb2 <pixel+0x19c>
        return;
20000fb0:	46c0      	nop			; (mov r8, r8)
}
20000fb2:	46bd      	mov	sp, r7
20000fb4:	b005      	add	sp, #20
20000fb6:	bd90      	pop	{r4, r7, pc}
20000fb8:	80000007 	andhi	r0, r0, r7

20000fbc <draw_object>:

void draw_object(POBJECT object){
20000fbc:	b580      	push	{r7, lr}
20000fbe:	b084      	sub	sp, #16
20000fc0:	af00      	add	r7, sp, #0
20000fc2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
20000fc4:	2300      	movs	r3, #0
20000fc6:	60fb      	str	r3, [r7, #12]
20000fc8:	e020      	b.n	2000100c <draw_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 1);
20000fca:	687b      	ldr	r3, [r7, #4]
20000fcc:	681a      	ldr	r2, [r3, #0]
20000fce:	68fb      	ldr	r3, [r7, #12]
20000fd0:	3304      	adds	r3, #4
20000fd2:	005b      	lsls	r3, r3, #1
20000fd4:	18d3      	adds	r3, r2, r3
20000fd6:	3304      	adds	r3, #4
20000fd8:	781a      	ldrb	r2, [r3, #0]
20000fda:	687b      	ldr	r3, [r7, #4]
20000fdc:	68db      	ldr	r3, [r3, #12]
20000fde:	b2db      	uxtb	r3, r3
20000fe0:	18d3      	adds	r3, r2, r3
20000fe2:	b2d8      	uxtb	r0, r3
20000fe4:	687b      	ldr	r3, [r7, #4]
20000fe6:	681a      	ldr	r2, [r3, #0]
20000fe8:	68fb      	ldr	r3, [r7, #12]
20000fea:	3304      	adds	r3, #4
20000fec:	005b      	lsls	r3, r3, #1
20000fee:	18d3      	adds	r3, r2, r3
20000ff0:	3305      	adds	r3, #5
20000ff2:	781a      	ldrb	r2, [r3, #0]
20000ff4:	687b      	ldr	r3, [r7, #4]
20000ff6:	691b      	ldr	r3, [r3, #16]
20000ff8:	b2db      	uxtb	r3, r3
20000ffa:	18d3      	adds	r3, r2, r3
20000ffc:	b2db      	uxtb	r3, r3
20000ffe:	2201      	movs	r2, #1
20001000:	0019      	movs	r1, r3
20001002:	f7ff ff08 	bl	20000e16 <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
20001006:	68fb      	ldr	r3, [r7, #12]
20001008:	3301      	adds	r3, #1
2000100a:	60fb      	str	r3, [r7, #12]
2000100c:	687b      	ldr	r3, [r7, #4]
2000100e:	681b      	ldr	r3, [r3, #0]
20001010:	681a      	ldr	r2, [r3, #0]
20001012:	68fb      	ldr	r3, [r7, #12]
20001014:	429a      	cmp	r2, r3
20001016:	dcd8      	bgt.n	20000fca <draw_object+0xe>
	}
}
20001018:	46c0      	nop			; (mov r8, r8)
2000101a:	46bd      	mov	sp, r7
2000101c:	b004      	add	sp, #16
2000101e:	bd80      	pop	{r7, pc}

20001020 <clear_object>:

void clear_object(POBJECT object){
20001020:	b580      	push	{r7, lr}
20001022:	b084      	sub	sp, #16
20001024:	af00      	add	r7, sp, #0
20001026:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < object->geo->numpoints; i++){
20001028:	2300      	movs	r3, #0
2000102a:	60fb      	str	r3, [r7, #12]
2000102c:	e020      	b.n	20001070 <clear_object+0x50>
		pixel(object->geo->px[i].x + object->pos_x, object->geo->px[i].y + object->pos_y, 0);
2000102e:	687b      	ldr	r3, [r7, #4]
20001030:	681a      	ldr	r2, [r3, #0]
20001032:	68fb      	ldr	r3, [r7, #12]
20001034:	3304      	adds	r3, #4
20001036:	005b      	lsls	r3, r3, #1
20001038:	18d3      	adds	r3, r2, r3
2000103a:	3304      	adds	r3, #4
2000103c:	781a      	ldrb	r2, [r3, #0]
2000103e:	687b      	ldr	r3, [r7, #4]
20001040:	68db      	ldr	r3, [r3, #12]
20001042:	b2db      	uxtb	r3, r3
20001044:	18d3      	adds	r3, r2, r3
20001046:	b2d8      	uxtb	r0, r3
20001048:	687b      	ldr	r3, [r7, #4]
2000104a:	681a      	ldr	r2, [r3, #0]
2000104c:	68fb      	ldr	r3, [r7, #12]
2000104e:	3304      	adds	r3, #4
20001050:	005b      	lsls	r3, r3, #1
20001052:	18d3      	adds	r3, r2, r3
20001054:	3305      	adds	r3, #5
20001056:	781a      	ldrb	r2, [r3, #0]
20001058:	687b      	ldr	r3, [r7, #4]
2000105a:	691b      	ldr	r3, [r3, #16]
2000105c:	b2db      	uxtb	r3, r3
2000105e:	18d3      	adds	r3, r2, r3
20001060:	b2db      	uxtb	r3, r3
20001062:	2200      	movs	r2, #0
20001064:	0019      	movs	r1, r3
20001066:	f7ff fed6 	bl	20000e16 <pixel>
	for(int i = 0; i < object->geo->numpoints; i++){
2000106a:	68fb      	ldr	r3, [r7, #12]
2000106c:	3301      	adds	r3, #1
2000106e:	60fb      	str	r3, [r7, #12]
20001070:	687b      	ldr	r3, [r7, #4]
20001072:	681b      	ldr	r3, [r3, #0]
20001074:	681a      	ldr	r2, [r3, #0]
20001076:	68fb      	ldr	r3, [r7, #12]
20001078:	429a      	cmp	r2, r3
2000107a:	dcd8      	bgt.n	2000102e <clear_object+0xe>
	}
}
2000107c:	46c0      	nop			; (mov r8, r8)
2000107e:	46bd      	mov	sp, r7
20001080:	b004      	add	sp, #16
20001082:	bd80      	pop	{r7, pc}

20001084 <move_object>:

void move_object(POBJECT object){
20001084:	b580      	push	{r7, lr}
20001086:	b082      	sub	sp, #8
20001088:	af00      	add	r7, sp, #0
2000108a:	6078      	str	r0, [r7, #4]
	clear_object(object);
2000108c:	687b      	ldr	r3, [r7, #4]
2000108e:	0018      	movs	r0, r3
20001090:	f7ff ffc6 	bl	20001020 <clear_object>
	object->pos_x += object->dir_x;
20001094:	687b      	ldr	r3, [r7, #4]
20001096:	68da      	ldr	r2, [r3, #12]
20001098:	687b      	ldr	r3, [r7, #4]
2000109a:	685b      	ldr	r3, [r3, #4]
2000109c:	18d2      	adds	r2, r2, r3
2000109e:	687b      	ldr	r3, [r7, #4]
200010a0:	60da      	str	r2, [r3, #12]
	object->pos_y += object->dir_y;
200010a2:	687b      	ldr	r3, [r7, #4]
200010a4:	691a      	ldr	r2, [r3, #16]
200010a6:	687b      	ldr	r3, [r7, #4]
200010a8:	689b      	ldr	r3, [r3, #8]
200010aa:	18d2      	adds	r2, r2, r3
200010ac:	687b      	ldr	r3, [r7, #4]
200010ae:	611a      	str	r2, [r3, #16]
	
	//bounce if object reaches edges of screen
	if (object->pos_x < 1 || (object->pos_x + object->geo->size_x) > 128){
200010b0:	687b      	ldr	r3, [r7, #4]
200010b2:	68db      	ldr	r3, [r3, #12]
200010b4:	2b00      	cmp	r3, #0
200010b6:	dd07      	ble.n	200010c8 <move_object+0x44>
200010b8:	687b      	ldr	r3, [r7, #4]
200010ba:	68da      	ldr	r2, [r3, #12]
200010bc:	687b      	ldr	r3, [r7, #4]
200010be:	681b      	ldr	r3, [r3, #0]
200010c0:	685b      	ldr	r3, [r3, #4]
200010c2:	18d3      	adds	r3, r2, r3
200010c4:	2b80      	cmp	r3, #128	; 0x80
200010c6:	dd04      	ble.n	200010d2 <move_object+0x4e>
		object->dir_x = -object->dir_x;
200010c8:	687b      	ldr	r3, [r7, #4]
200010ca:	685b      	ldr	r3, [r3, #4]
200010cc:	425a      	negs	r2, r3
200010ce:	687b      	ldr	r3, [r7, #4]
200010d0:	605a      	str	r2, [r3, #4]
	}
	if (object->pos_y < 1 || (object->pos_y + object->geo->size_y) > 64){
200010d2:	687b      	ldr	r3, [r7, #4]
200010d4:	691b      	ldr	r3, [r3, #16]
200010d6:	2b00      	cmp	r3, #0
200010d8:	dd07      	ble.n	200010ea <move_object+0x66>
200010da:	687b      	ldr	r3, [r7, #4]
200010dc:	691a      	ldr	r2, [r3, #16]
200010de:	687b      	ldr	r3, [r7, #4]
200010e0:	681b      	ldr	r3, [r3, #0]
200010e2:	689b      	ldr	r3, [r3, #8]
200010e4:	18d3      	adds	r3, r2, r3
200010e6:	2b40      	cmp	r3, #64	; 0x40
200010e8:	dd04      	ble.n	200010f4 <move_object+0x70>
		object->dir_y = -object->dir_y;
200010ea:	687b      	ldr	r3, [r7, #4]
200010ec:	689b      	ldr	r3, [r3, #8]
200010ee:	425a      	negs	r2, r3
200010f0:	687b      	ldr	r3, [r7, #4]
200010f2:	609a      	str	r2, [r3, #8]
	}
	
	draw_object(object);
200010f4:	687b      	ldr	r3, [r7, #4]
200010f6:	0018      	movs	r0, r3
200010f8:	f7ff ff60 	bl	20000fbc <draw_object>
}
200010fc:	46c0      	nop			; (mov r8, r8)
200010fe:	46bd      	mov	sp, r7
20001100:	b002      	add	sp, #8
20001102:	bd80      	pop	{r7, pc}

20001104 <set_object_speed>:

void set_object_speed(POBJECT object, int x, int y){
20001104:	b580      	push	{r7, lr}
20001106:	b084      	sub	sp, #16
20001108:	af00      	add	r7, sp, #0
2000110a:	60f8      	str	r0, [r7, #12]
2000110c:	60b9      	str	r1, [r7, #8]
2000110e:	607a      	str	r2, [r7, #4]
	object->dir_x = x;
20001110:	68fb      	ldr	r3, [r7, #12]
20001112:	68ba      	ldr	r2, [r7, #8]
20001114:	605a      	str	r2, [r3, #4]
	object->dir_y = y;
20001116:	68fb      	ldr	r3, [r7, #12]
20001118:	687a      	ldr	r2, [r7, #4]
2000111a:	609a      	str	r2, [r3, #8]
}
2000111c:	46c0      	nop			; (mov r8, r8)
2000111e:	46bd      	mov	sp, r7
20001120:	b004      	add	sp, #16
20001122:	bd80      	pop	{r7, pc}

20001124 <graphicdisplay_init>:

void graphicdisplay_init(void){
20001124:	b580      	push	{r7, lr}
20001126:	af00      	add	r7, sp, #0
	//port E is output
	GPIO_E.moder = 0x55555555;
20001128:	4b04      	ldr	r3, [pc, #16]	; (2000113c <graphicdisplay_init+0x18>)
2000112a:	4a05      	ldr	r2, [pc, #20]	; (20001140 <graphicdisplay_init+0x1c>)
2000112c:	601a      	str	r2, [r3, #0]
	GPIO_E.ospeedr = 0x55555555;
2000112e:	4b03      	ldr	r3, [pc, #12]	; (2000113c <graphicdisplay_init+0x18>)
20001130:	4a03      	ldr	r2, [pc, #12]	; (20001140 <graphicdisplay_init+0x1c>)
20001132:	609a      	str	r2, [r3, #8]
20001134:	46c0      	nop			; (mov r8, r8)
20001136:	46bd      	mov	sp, r7
20001138:	bd80      	pop	{r7, pc}
2000113a:	46c0      	nop			; (mov r8, r8)
2000113c:	40021000 	andmi	r1, r2, r0
20001140:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001144 <delay_interrupt_init>:

volatile int systick_flag = 1;
static volatile int delay_counter = 0;
static int mikro;

void delay_interrupt_init(void){
20001144:	b580      	push	{r7, lr}
20001146:	af00      	add	r7, sp, #0
    init_systick_interrupt_handler();
20001148:	f000 f886 	bl	20001258 <init_systick_interrupt_handler>
}
2000114c:	46c0      	nop			; (mov r8, r8)
2000114e:	46bd      	mov	sp, r7
20001150:	bd80      	pop	{r7, pc}

20001152 <delay_250ns>:

void delay_250ns(void){
20001152:	b580      	push	{r7, lr}
20001154:	af00      	add	r7, sp, #0
    systick_flag = 0;
20001156:	4b04      	ldr	r3, [pc, #16]	; (20001168 <delay_250ns+0x16>)
20001158:	2200      	movs	r2, #0
2000115a:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 4);   
2000115c:	202a      	movs	r0, #42	; 0x2a
2000115e:	f000 f863 	bl	20001228 <start_delay>
}
20001162:	46c0      	nop			; (mov r8, r8)
20001164:	46bd      	mov	sp, r7
20001166:	bd80      	pop	{r7, pc}
20001168:	20001764 	andcs	r1, r0, r4, ror #14

2000116c <delay_500ns>:

void delay_500ns(void){
2000116c:	b580      	push	{r7, lr}
2000116e:	af00      	add	r7, sp, #0
    systick_flag = 0;
20001170:	4b04      	ldr	r3, [pc, #16]	; (20001184 <delay_500ns+0x18>)
20001172:	2200      	movs	r2, #0
20001174:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 2);   
20001176:	2054      	movs	r0, #84	; 0x54
20001178:	f000 f856 	bl	20001228 <start_delay>
}
2000117c:	46c0      	nop			; (mov r8, r8)
2000117e:	46bd      	mov	sp, r7
20001180:	bd80      	pop	{r7, pc}
20001182:	46c0      	nop			; (mov r8, r8)
20001184:	20001764 	andcs	r1, r0, r4, ror #14

20001188 <delay_1mikro>:

void delay_1mikro(void){
20001188:	b580      	push	{r7, lr}
2000118a:	af00      	add	r7, sp, #0
    start_delay(MIKRO_SECOND_PULSES);
2000118c:	20a8      	movs	r0, #168	; 0xa8
2000118e:	f000 f84b 	bl	20001228 <start_delay>
}
20001192:	46c0      	nop			; (mov r8, r8)
20001194:	46bd      	mov	sp, r7
20001196:	bd80      	pop	{r7, pc}

20001198 <delay_1milli>:

void delay_1milli(void){
20001198:	b580      	push	{r7, lr}
2000119a:	af00      	add	r7, sp, #0
#ifndef SIMULATOR
    start_delay(MIKRO_SECOND_PULSES * 1000);
2000119c:	4b03      	ldr	r3, [pc, #12]	; (200011ac <delay_1milli+0x14>)
2000119e:	0018      	movs	r0, r3
200011a0:	f000 f842 	bl	20001228 <start_delay>
#else
    start_delay(MIKRO_SECOND_PULSES);
#endif
}
200011a4:	46c0      	nop			; (mov r8, r8)
200011a6:	46bd      	mov	sp, r7
200011a8:	bd80      	pop	{r7, pc}
200011aa:	46c0      	nop			; (mov r8, r8)
200011ac:	00029040 	andeq	r9, r2, r0, asr #32

200011b0 <delay_mikro>:

void delay_mikro(unsigned int count){
200011b0:	b580      	push	{r7, lr}
200011b2:	b082      	sub	sp, #8
200011b4:	af00      	add	r7, sp, #0
200011b6:	6078      	str	r0, [r7, #4]
    if(count == 0)return;
200011b8:	687b      	ldr	r3, [r7, #4]
200011ba:	2b00      	cmp	r3, #0
200011bc:	d00b      	beq.n	200011d6 <delay_mikro+0x26>
    delay_counter = count;
200011be:	687a      	ldr	r2, [r7, #4]
200011c0:	4b07      	ldr	r3, [pc, #28]	; (200011e0 <delay_mikro+0x30>)
200011c2:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
200011c4:	4b07      	ldr	r3, [pc, #28]	; (200011e4 <delay_mikro+0x34>)
200011c6:	2200      	movs	r2, #0
200011c8:	601a      	str	r2, [r3, #0]
    mikro = 1;
200011ca:	4b07      	ldr	r3, [pc, #28]	; (200011e8 <delay_mikro+0x38>)
200011cc:	2201      	movs	r2, #1
200011ce:	601a      	str	r2, [r3, #0]
    delay_1mikro();
200011d0:	f7ff ffda 	bl	20001188 <delay_1mikro>
200011d4:	e000      	b.n	200011d8 <delay_mikro+0x28>
    if(count == 0)return;
200011d6:	46c0      	nop			; (mov r8, r8)
}
200011d8:	46bd      	mov	sp, r7
200011da:	b002      	add	sp, #8
200011dc:	bd80      	pop	{r7, pc}
200011de:	46c0      	nop			; (mov r8, r8)
200011e0:	2000162c 	andcs	r1, r0, ip, lsr #12
200011e4:	20001764 	andcs	r1, r0, r4, ror #14
200011e8:	20001630 	andcs	r1, r0, r0, lsr r6

200011ec <delay_milli>:

void delay_milli(unsigned int count){
200011ec:	b580      	push	{r7, lr}
200011ee:	b082      	sub	sp, #8
200011f0:	af00      	add	r7, sp, #0
200011f2:	6078      	str	r0, [r7, #4]
    if(count == 0) return;
200011f4:	687b      	ldr	r3, [r7, #4]
200011f6:	2b00      	cmp	r3, #0
200011f8:	d00b      	beq.n	20001212 <delay_milli+0x26>
    delay_counter = count;
200011fa:	687a      	ldr	r2, [r7, #4]
200011fc:	4b07      	ldr	r3, [pc, #28]	; (2000121c <delay_milli+0x30>)
200011fe:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
20001200:	4b07      	ldr	r3, [pc, #28]	; (20001220 <delay_milli+0x34>)
20001202:	2200      	movs	r2, #0
20001204:	601a      	str	r2, [r3, #0]
    mikro = 0;
20001206:	4b07      	ldr	r3, [pc, #28]	; (20001224 <delay_milli+0x38>)
20001208:	2200      	movs	r2, #0
2000120a:	601a      	str	r2, [r3, #0]
    delay_1milli();
2000120c:	f7ff ffc4 	bl	20001198 <delay_1milli>
20001210:	e000      	b.n	20001214 <delay_milli+0x28>
    if(count == 0) return;
20001212:	46c0      	nop			; (mov r8, r8)
}
20001214:	46bd      	mov	sp, r7
20001216:	b002      	add	sp, #8
20001218:	bd80      	pop	{r7, pc}
2000121a:	46c0      	nop			; (mov r8, r8)
2000121c:	2000162c 	andcs	r1, r0, ip, lsr #12
20001220:	20001764 	andcs	r1, r0, r4, ror #14
20001224:	20001630 	andcs	r1, r0, r0, lsr r6

20001228 <start_delay>:

void start_delay(unsigned int pulses){
20001228:	b580      	push	{r7, lr}
2000122a:	b082      	sub	sp, #8
2000122c:	af00      	add	r7, sp, #0
2000122e:	6078      	str	r0, [r7, #4]
    SYSTICK.ctrl = 0;
20001230:	4b08      	ldr	r3, [pc, #32]	; (20001254 <start_delay+0x2c>)
20001232:	2200      	movs	r2, #0
20001234:	601a      	str	r2, [r3, #0]
    SYSTICK.load = pulses-1;
20001236:	4b07      	ldr	r3, [pc, #28]	; (20001254 <start_delay+0x2c>)
20001238:	687a      	ldr	r2, [r7, #4]
2000123a:	3a01      	subs	r2, #1
2000123c:	605a      	str	r2, [r3, #4]
    SYSTICK.val = 0;
2000123e:	4b05      	ldr	r3, [pc, #20]	; (20001254 <start_delay+0x2c>)
20001240:	2200      	movs	r2, #0
20001242:	609a      	str	r2, [r3, #8]
    SYSTICK.ctrlFirstByte = 7;
20001244:	4b03      	ldr	r3, [pc, #12]	; (20001254 <start_delay+0x2c>)
20001246:	2207      	movs	r2, #7
20001248:	701a      	strb	r2, [r3, #0]
}
2000124a:	46c0      	nop			; (mov r8, r8)
2000124c:	46bd      	mov	sp, r7
2000124e:	b002      	add	sp, #8
20001250:	bd80      	pop	{r7, pc}
20001252:	46c0      	nop			; (mov r8, r8)
20001254:	e000e010 	and	lr, r0, r0, lsl r0

20001258 <init_systick_interrupt_handler>:

void init_systick_interrupt_handler(void){
20001258:	b580      	push	{r7, lr}
2000125a:	af00      	add	r7, sp, #0
    *((void(**)(void))0x2001C03C) = systick_interrupt_handler;
2000125c:	4b02      	ldr	r3, [pc, #8]	; (20001268 <init_systick_interrupt_handler+0x10>)
2000125e:	4a03      	ldr	r2, [pc, #12]	; (2000126c <init_systick_interrupt_handler+0x14>)
20001260:	601a      	str	r2, [r3, #0]
}
20001262:	46c0      	nop			; (mov r8, r8)
20001264:	46bd      	mov	sp, r7
20001266:	bd80      	pop	{r7, pc}
20001268:	2001c03c 	andcs	ip, r1, ip, lsr r0
2000126c:	20001271 	andcs	r1, r0, r1, ror r2

20001270 <systick_interrupt_handler>:

void systick_interrupt_handler(void){
20001270:	b580      	push	{r7, lr}
20001272:	af00      	add	r7, sp, #0
    SYSTICK.ctrl = 0;
20001274:	4b0d      	ldr	r3, [pc, #52]	; (200012ac <systick_interrupt_handler+0x3c>)
20001276:	2200      	movs	r2, #0
20001278:	601a      	str	r2, [r3, #0]
    delay_counter--;
2000127a:	4b0d      	ldr	r3, [pc, #52]	; (200012b0 <systick_interrupt_handler+0x40>)
2000127c:	681b      	ldr	r3, [r3, #0]
2000127e:	1e5a      	subs	r2, r3, #1
20001280:	4b0b      	ldr	r3, [pc, #44]	; (200012b0 <systick_interrupt_handler+0x40>)
20001282:	601a      	str	r2, [r3, #0]
    if(delay_counter > 0){
20001284:	4b0a      	ldr	r3, [pc, #40]	; (200012b0 <systick_interrupt_handler+0x40>)
20001286:	681b      	ldr	r3, [r3, #0]
20001288:	2b00      	cmp	r3, #0
2000128a:	dd09      	ble.n	200012a0 <systick_interrupt_handler+0x30>
        if(mikro){
2000128c:	4b09      	ldr	r3, [pc, #36]	; (200012b4 <systick_interrupt_handler+0x44>)
2000128e:	681b      	ldr	r3, [r3, #0]
20001290:	2b00      	cmp	r3, #0
20001292:	d002      	beq.n	2000129a <systick_interrupt_handler+0x2a>
            delay_1mikro();
20001294:	f7ff ff78 	bl	20001188 <delay_1mikro>
            delay_1milli();
        }
    } else {
        systick_flag = 1;
    }
20001298:	e005      	b.n	200012a6 <systick_interrupt_handler+0x36>
            delay_1milli();
2000129a:	f7ff ff7d 	bl	20001198 <delay_1milli>
2000129e:	e002      	b.n	200012a6 <systick_interrupt_handler+0x36>
        systick_flag = 1;
200012a0:	4b05      	ldr	r3, [pc, #20]	; (200012b8 <systick_interrupt_handler+0x48>)
200012a2:	2201      	movs	r2, #1
200012a4:	601a      	str	r2, [r3, #0]
200012a6:	46c0      	nop			; (mov r8, r8)
200012a8:	46bd      	mov	sp, r7
200012aa:	bd80      	pop	{r7, pc}
200012ac:	e000e010 	and	lr, r0, r0, lsl r0
200012b0:	2000162c 	andcs	r1, r0, ip, lsr #12
200012b4:	20001630 	andcs	r1, r0, r0, lsr r6
200012b8:	20001764 	andcs	r1, r0, r4, ror #14

200012bc <asciidisplay_init>:
#include "asciidisplay.h"

void asciidisplay_init(void){    
200012bc:	b580      	push	{r7, lr}
200012be:	af00      	add	r7, sp, #0
    // Port E -> output
    GPIO_E.moder = 0x55555555;
200012c0:	4b0e      	ldr	r3, [pc, #56]	; (200012fc <asciidisplay_init+0x40>)
200012c2:	4a0f      	ldr	r2, [pc, #60]	; (20001300 <asciidisplay_init+0x44>)
200012c4:	601a      	str	r2, [r3, #0]
    
    ascii_ctrl_bit_clear(B_E);
200012c6:	2040      	movs	r0, #64	; 0x40
200012c8:	f000 f846 	bl	20001358 <ascii_ctrl_bit_clear>
    
    // ***DISPLAY INIT***    
    // 2 rows, characters are 5x8 dots
    ascii_command(0x38, 39, 1);
200012cc:	2201      	movs	r2, #1
200012ce:	2127      	movs	r1, #39	; 0x27
200012d0:	2038      	movs	r0, #56	; 0x38
200012d2:	f000 f913 	bl	200014fc <ascii_command>
    // Turn on display, turn on cursor, cursor not blinking
    ascii_command(0xE, 39, 1);
200012d6:	2201      	movs	r2, #1
200012d8:	2127      	movs	r1, #39	; 0x27
200012da:	200e      	movs	r0, #14
200012dc:	f000 f90e 	bl	200014fc <ascii_command>
    // Clear display
    ascii_command(0x1, 2, 0);
200012e0:	2200      	movs	r2, #0
200012e2:	2102      	movs	r1, #2
200012e4:	2001      	movs	r0, #1
200012e6:	f000 f909 	bl	200014fc <ascii_command>
    // Increment mode, no shift
    ascii_command(0x6, 39, 1);
200012ea:	2201      	movs	r2, #1
200012ec:	2127      	movs	r1, #39	; 0x27
200012ee:	2006      	movs	r0, #6
200012f0:	f000 f904 	bl	200014fc <ascii_command>
}
200012f4:	46c0      	nop			; (mov r8, r8)
200012f6:	46bd      	mov	sp, r7
200012f8:	bd80      	pop	{r7, pc}
200012fa:	46c0      	nop			; (mov r8, r8)
200012fc:	40021000 	andmi	r1, r2, r0
20001300:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001304 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x){
20001304:	b580      	push	{r7, lr}
20001306:	b084      	sub	sp, #16
20001308:	af00      	add	r7, sp, #0
2000130a:	0002      	movs	r2, r0
2000130c:	1dfb      	adds	r3, r7, #7
2000130e:	701a      	strb	r2, [r3, #0]
    // Set bits that are 1 in x to 1, leave rest be
    GPIO_E.odrLow |= B_SELECT;
20001310:	4a10      	ldr	r2, [pc, #64]	; (20001354 <ascii_ctrl_bit_set+0x50>)
20001312:	4b10      	ldr	r3, [pc, #64]	; (20001354 <ascii_ctrl_bit_set+0x50>)
20001314:	7d1b      	ldrb	r3, [r3, #20]
20001316:	b2db      	uxtb	r3, r3
20001318:	2104      	movs	r1, #4
2000131a:	430b      	orrs	r3, r1
2000131c:	b2db      	uxtb	r3, r3
2000131e:	7513      	strb	r3, [r2, #20]
    unsigned char port_val = GPIO_E.odrLow;
20001320:	4a0c      	ldr	r2, [pc, #48]	; (20001354 <ascii_ctrl_bit_set+0x50>)
20001322:	230f      	movs	r3, #15
20001324:	18fb      	adds	r3, r7, r3
20001326:	7d12      	ldrb	r2, [r2, #20]
20001328:	701a      	strb	r2, [r3, #0]
    port_val |= x;
2000132a:	230f      	movs	r3, #15
2000132c:	18fb      	adds	r3, r7, r3
2000132e:	220f      	movs	r2, #15
20001330:	18b9      	adds	r1, r7, r2
20001332:	1dfa      	adds	r2, r7, #7
20001334:	7809      	ldrb	r1, [r1, #0]
20001336:	7812      	ldrb	r2, [r2, #0]
20001338:	430a      	orrs	r2, r1
2000133a:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = (port_val | B_SELECT);
2000133c:	4a05      	ldr	r2, [pc, #20]	; (20001354 <ascii_ctrl_bit_set+0x50>)
2000133e:	230f      	movs	r3, #15
20001340:	18fb      	adds	r3, r7, r3
20001342:	781b      	ldrb	r3, [r3, #0]
20001344:	2104      	movs	r1, #4
20001346:	430b      	orrs	r3, r1
20001348:	b2db      	uxtb	r3, r3
2000134a:	7513      	strb	r3, [r2, #20]
}
2000134c:	46c0      	nop			; (mov r8, r8)
2000134e:	46bd      	mov	sp, r7
20001350:	b004      	add	sp, #16
20001352:	bd80      	pop	{r7, pc}
20001354:	40021000 	andmi	r1, r2, r0

20001358 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20001358:	b580      	push	{r7, lr}
2000135a:	b084      	sub	sp, #16
2000135c:	af00      	add	r7, sp, #0
2000135e:	0002      	movs	r2, r0
20001360:	1dfb      	adds	r3, r7, #7
20001362:	701a      	strb	r2, [r3, #0]
    // Set any bits that are 0 in x to 0, leave rest as they were
    GPIO_E.odrLow |= B_SELECT;
20001364:	4a13      	ldr	r2, [pc, #76]	; (200013b4 <ascii_ctrl_bit_clear+0x5c>)
20001366:	4b13      	ldr	r3, [pc, #76]	; (200013b4 <ascii_ctrl_bit_clear+0x5c>)
20001368:	7d1b      	ldrb	r3, [r3, #20]
2000136a:	b2db      	uxtb	r3, r3
2000136c:	2104      	movs	r1, #4
2000136e:	430b      	orrs	r3, r1
20001370:	b2db      	uxtb	r3, r3
20001372:	7513      	strb	r3, [r2, #20]
    unsigned char port_val = GPIO_E.odrLow;
20001374:	4a0f      	ldr	r2, [pc, #60]	; (200013b4 <ascii_ctrl_bit_clear+0x5c>)
20001376:	230f      	movs	r3, #15
20001378:	18fb      	adds	r3, r7, r3
2000137a:	7d12      	ldrb	r2, [r2, #20]
2000137c:	701a      	strb	r2, [r3, #0]
    port_val &= (~x);
2000137e:	1dfb      	adds	r3, r7, #7
20001380:	781b      	ldrb	r3, [r3, #0]
20001382:	b25b      	sxtb	r3, r3
20001384:	43db      	mvns	r3, r3
20001386:	b25b      	sxtb	r3, r3
20001388:	220f      	movs	r2, #15
2000138a:	18ba      	adds	r2, r7, r2
2000138c:	7812      	ldrb	r2, [r2, #0]
2000138e:	b252      	sxtb	r2, r2
20001390:	4013      	ands	r3, r2
20001392:	b25a      	sxtb	r2, r3
20001394:	230f      	movs	r3, #15
20001396:	18fb      	adds	r3, r7, r3
20001398:	701a      	strb	r2, [r3, #0]
    GPIO_E.odrLow = (port_val | B_SELECT);
2000139a:	4a06      	ldr	r2, [pc, #24]	; (200013b4 <ascii_ctrl_bit_clear+0x5c>)
2000139c:	230f      	movs	r3, #15
2000139e:	18fb      	adds	r3, r7, r3
200013a0:	781b      	ldrb	r3, [r3, #0]
200013a2:	2104      	movs	r1, #4
200013a4:	430b      	orrs	r3, r1
200013a6:	b2db      	uxtb	r3, r3
200013a8:	7513      	strb	r3, [r2, #20]
    //delay_250ns();
}
200013aa:	46c0      	nop			; (mov r8, r8)
200013ac:	46bd      	mov	sp, r7
200013ae:	b004      	add	sp, #16
200013b0:	bd80      	pop	{r7, pc}
200013b2:	46c0      	nop			; (mov r8, r8)
200013b4:	40021000 	andmi	r1, r2, r0

200013b8 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
200013b8:	b580      	push	{r7, lr}
200013ba:	b082      	sub	sp, #8
200013bc:	af00      	add	r7, sp, #0
200013be:	0002      	movs	r2, r0
200013c0:	1dfb      	adds	r3, r7, #7
200013c2:	701a      	strb	r2, [r3, #0]
    // Prepare display for sending command
    ascii_ctrl_bit_clear(B_RS);
200013c4:	2001      	movs	r0, #1
200013c6:	f7ff ffc7 	bl	20001358 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear( B_RW);
200013ca:	2002      	movs	r0, #2
200013cc:	f7ff ffc4 	bl	20001358 <ascii_ctrl_bit_clear>
    
    // Write command
    ascii_write_controller(command);
200013d0:	1dfb      	adds	r3, r7, #7
200013d2:	781b      	ldrb	r3, [r3, #0]
200013d4:	0018      	movs	r0, r3
200013d6:	f000 f861 	bl	2000149c <ascii_write_controller>
}
200013da:	46c0      	nop			; (mov r8, r8)
200013dc:	46bd      	mov	sp, r7
200013de:	b002      	add	sp, #8
200013e0:	bd80      	pop	{r7, pc}

200013e2 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200013e2:	b580      	push	{r7, lr}
200013e4:	b082      	sub	sp, #8
200013e6:	af00      	add	r7, sp, #0
200013e8:	0002      	movs	r2, r0
200013ea:	1dfb      	adds	r3, r7, #7
200013ec:	701a      	strb	r2, [r3, #0]
    // Prepare display for writing data
    ascii_ctrl_bit_set(B_RS);
200013ee:	2001      	movs	r0, #1
200013f0:	f7ff ff88 	bl	20001304 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200013f4:	2002      	movs	r0, #2
200013f6:	f7ff ffaf 	bl	20001358 <ascii_ctrl_bit_clear>
    
    // Write data
    ascii_write_controller(data);
200013fa:	1dfb      	adds	r3, r7, #7
200013fc:	781b      	ldrb	r3, [r3, #0]
200013fe:	0018      	movs	r0, r3
20001400:	f000 f84c 	bl	2000149c <ascii_write_controller>
}
20001404:	46c0      	nop			; (mov r8, r8)
20001406:	46bd      	mov	sp, r7
20001408:	b002      	add	sp, #8
2000140a:	bd80      	pop	{r7, pc}

2000140c <ascii_read_data>:

unsigned char ascii_read_data(void){
2000140c:	b590      	push	{r4, r7, lr}
2000140e:	b083      	sub	sp, #12
20001410:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    GPIO_E.moder &= 0x0000FFFF;
20001412:	4b0e      	ldr	r3, [pc, #56]	; (2000144c <ascii_read_data+0x40>)
20001414:	4a0d      	ldr	r2, [pc, #52]	; (2000144c <ascii_read_data+0x40>)
20001416:	6812      	ldr	r2, [r2, #0]
20001418:	0412      	lsls	r2, r2, #16
2000141a:	0c12      	lsrs	r2, r2, #16
2000141c:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading data
    ascii_ctrl_bit_set(B_RW);
2000141e:	2002      	movs	r0, #2
20001420:	f7ff ff70 	bl	20001304 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RS);
20001424:	2001      	movs	r0, #1
20001426:	f7ff ff6d 	bl	20001304 <ascii_ctrl_bit_set>
    
    return_value = ascii_read_controller();
2000142a:	1dfc      	adds	r4, r7, #7
2000142c:	f000 f84e 	bl	200014cc <ascii_read_controller>
20001430:	0003      	movs	r3, r0
20001432:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    GPIO_E.moder |= 0x55550000;
20001434:	4b05      	ldr	r3, [pc, #20]	; (2000144c <ascii_read_data+0x40>)
20001436:	4a05      	ldr	r2, [pc, #20]	; (2000144c <ascii_read_data+0x40>)
20001438:	6812      	ldr	r2, [r2, #0]
2000143a:	4905      	ldr	r1, [pc, #20]	; (20001450 <ascii_read_data+0x44>)
2000143c:	430a      	orrs	r2, r1
2000143e:	601a      	str	r2, [r3, #0]
    
    return return_value;
20001440:	1dfb      	adds	r3, r7, #7
20001442:	781b      	ldrb	r3, [r3, #0]
}
20001444:	0018      	movs	r0, r3
20001446:	46bd      	mov	sp, r7
20001448:	b003      	add	sp, #12
2000144a:	bd90      	pop	{r4, r7, pc}
2000144c:	40021000 	andmi	r1, r2, r0
20001450:	55550000 	ldrbpl	r0, [r5, #-0]

20001454 <ascii_read_status>:

unsigned char ascii_read_status(void){
20001454:	b590      	push	{r4, r7, lr}
20001456:	b083      	sub	sp, #12
20001458:	af00      	add	r7, sp, #0
    unsigned char return_value;
    // Port E 8-15 -> input
    GPIO_E.moder &= 0x0000FFFF;
2000145a:	4b0e      	ldr	r3, [pc, #56]	; (20001494 <ascii_read_status+0x40>)
2000145c:	4a0d      	ldr	r2, [pc, #52]	; (20001494 <ascii_read_status+0x40>)
2000145e:	6812      	ldr	r2, [r2, #0]
20001460:	0412      	lsls	r2, r2, #16
20001462:	0c12      	lsrs	r2, r2, #16
20001464:	601a      	str	r2, [r3, #0]
    
    // Prepare display for reading status and address
    ascii_ctrl_bit_clear(B_RS);
20001466:	2001      	movs	r0, #1
20001468:	f7ff ff76 	bl	20001358 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
2000146c:	2002      	movs	r0, #2
2000146e:	f7ff ff49 	bl	20001304 <ascii_ctrl_bit_set>
    
    // Read values from display
    return_value = ascii_read_controller();
20001472:	1dfc      	adds	r4, r7, #7
20001474:	f000 f82a 	bl	200014cc <ascii_read_controller>
20001478:	0003      	movs	r3, r0
2000147a:	7023      	strb	r3, [r4, #0]
    
    // Port E 8-15 -> output
    GPIO_E.moder |= 0x55550000;
2000147c:	4b05      	ldr	r3, [pc, #20]	; (20001494 <ascii_read_status+0x40>)
2000147e:	4a05      	ldr	r2, [pc, #20]	; (20001494 <ascii_read_status+0x40>)
20001480:	6812      	ldr	r2, [r2, #0]
20001482:	4905      	ldr	r1, [pc, #20]	; (20001498 <ascii_read_status+0x44>)
20001484:	430a      	orrs	r2, r1
20001486:	601a      	str	r2, [r3, #0]
    
    return return_value;
20001488:	1dfb      	adds	r3, r7, #7
2000148a:	781b      	ldrb	r3, [r3, #0]
}
2000148c:	0018      	movs	r0, r3
2000148e:	46bd      	mov	sp, r7
20001490:	b003      	add	sp, #12
20001492:	bd90      	pop	{r4, r7, pc}
20001494:	40021000 	andmi	r1, r2, r0
20001498:	55550000 	ldrbpl	r0, [r5, #-0]

2000149c <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){
2000149c:	b580      	push	{r7, lr}
2000149e:	b082      	sub	sp, #8
200014a0:	af00      	add	r7, sp, #0
200014a2:	0002      	movs	r2, r0
200014a4:	1dfb      	adds	r3, r7, #7
200014a6:	701a      	strb	r2, [r3, #0]
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
200014a8:	2040      	movs	r0, #64	; 0x40
200014aa:	f7ff ff2b 	bl	20001304 <ascii_ctrl_bit_set>
    
    // Set data register values
    GPIO_E.odrHigh = byte;
200014ae:	4a06      	ldr	r2, [pc, #24]	; (200014c8 <ascii_write_controller+0x2c>)
200014b0:	1dfb      	adds	r3, r7, #7
200014b2:	781b      	ldrb	r3, [r3, #0]
200014b4:	7553      	strb	r3, [r2, #21]
    
    // Wait for 230ns (here at least 250, hope this should still work)
    delay_250ns();
200014b6:	f7ff fe4c 	bl	20001152 <delay_250ns>
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
200014ba:	2040      	movs	r0, #64	; 0x40
200014bc:	f7ff ff4c 	bl	20001358 <ascii_ctrl_bit_clear>
}
200014c0:	46c0      	nop			; (mov r8, r8)
200014c2:	46bd      	mov	sp, r7
200014c4:	b002      	add	sp, #8
200014c6:	bd80      	pop	{r7, pc}
200014c8:	40021000 	andmi	r1, r2, r0

200014cc <ascii_read_controller>:

unsigned char ascii_read_controller(void){
200014cc:	b580      	push	{r7, lr}
200014ce:	b082      	sub	sp, #8
200014d0:	af00      	add	r7, sp, #0
    unsigned char return_value;
    
    // Set enable flag to 1
    ascii_ctrl_bit_set(B_E);
200014d2:	2040      	movs	r0, #64	; 0x40
200014d4:	f7ff ff16 	bl	20001304 <ascii_ctrl_bit_set>
    
    // Wait for at least 360ns, here at least 500
    delay_500ns();
200014d8:	f7ff fe48 	bl	2000116c <delay_500ns>
    
    // Read data register
    return_value = GPIO_E.idrHigh;
200014dc:	4a06      	ldr	r2, [pc, #24]	; (200014f8 <ascii_read_controller+0x2c>)
200014de:	1dfb      	adds	r3, r7, #7
200014e0:	7c52      	ldrb	r2, [r2, #17]
200014e2:	701a      	strb	r2, [r3, #0]
    
    // Set enable flag to 0
    ascii_ctrl_bit_clear(B_E);
200014e4:	2040      	movs	r0, #64	; 0x40
200014e6:	f7ff ff37 	bl	20001358 <ascii_ctrl_bit_clear>
    
    return return_value;
200014ea:	1dfb      	adds	r3, r7, #7
200014ec:	781b      	ldrb	r3, [r3, #0]
}
200014ee:	0018      	movs	r0, r3
200014f0:	46bd      	mov	sp, r7
200014f2:	b002      	add	sp, #8
200014f4:	bd80      	pop	{r7, pc}
200014f6:	46c0      	nop			; (mov r8, r8)
200014f8:	40021000 	andmi	r1, r2, r0

200014fc <ascii_command>:

void ascii_command(unsigned char command, unsigned int post_command_delay, unsigned short us){    
200014fc:	b580      	push	{r7, lr}
200014fe:	b082      	sub	sp, #8
20001500:	af00      	add	r7, sp, #0
20001502:	6039      	str	r1, [r7, #0]
20001504:	0011      	movs	r1, r2
20001506:	1dfb      	adds	r3, r7, #7
20001508:	1c02      	adds	r2, r0, #0
2000150a:	701a      	strb	r2, [r3, #0]
2000150c:	1d3b      	adds	r3, r7, #4
2000150e:	1c0a      	adds	r2, r1, #0
20001510:	801a      	strh	r2, [r3, #0]
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while((ascii_read_status() & 0x80) != 0);
20001512:	46c0      	nop			; (mov r8, r8)
20001514:	f7ff ff9e 	bl	20001454 <ascii_read_status>
20001518:	0003      	movs	r3, r0
2000151a:	b25b      	sxtb	r3, r3
2000151c:	2b00      	cmp	r3, #0
2000151e:	dbf9      	blt.n	20001514 <ascii_command+0x18>
    delay_mikro(8);
20001520:	2008      	movs	r0, #8
20001522:	f7ff fe45 	bl	200011b0 <delay_mikro>
    
    // Send command
    ascii_write_cmd(command);
20001526:	1dfb      	adds	r3, r7, #7
20001528:	781b      	ldrb	r3, [r3, #0]
2000152a:	0018      	movs	r0, r3
2000152c:	f7ff ff44 	bl	200013b8 <ascii_write_cmd>
    
    // Wait for the entered amount of time
    if(us == 1){
20001530:	1d3b      	adds	r3, r7, #4
20001532:	881b      	ldrh	r3, [r3, #0]
20001534:	2b01      	cmp	r3, #1
20001536:	d104      	bne.n	20001542 <ascii_command+0x46>
        delay_mikro(post_command_delay);
20001538:	683b      	ldr	r3, [r7, #0]
2000153a:	0018      	movs	r0, r3
2000153c:	f7ff fe38 	bl	200011b0 <delay_mikro>
    } else {
        delay_milli(post_command_delay);
    }
}
20001540:	e003      	b.n	2000154a <ascii_command+0x4e>
        delay_milli(post_command_delay);
20001542:	683b      	ldr	r3, [r7, #0]
20001544:	0018      	movs	r0, r3
20001546:	f7ff fe51 	bl	200011ec <delay_milli>
}
2000154a:	46c0      	nop			; (mov r8, r8)
2000154c:	46bd      	mov	sp, r7
2000154e:	b002      	add	sp, #8
20001550:	bd80      	pop	{r7, pc}

20001552 <ascii_write_char>:

void ascii_write_char(unsigned char character){
20001552:	b580      	push	{r7, lr}
20001554:	b082      	sub	sp, #8
20001556:	af00      	add	r7, sp, #0
20001558:	0002      	movs	r2, r0
2000155a:	1dfb      	adds	r3, r7, #7
2000155c:	701a      	strb	r2, [r3, #0]
    // Prepare to check if display ready
    ascii_ctrl_bit_set(B_RW);
2000155e:	2002      	movs	r0, #2
20001560:	f7ff fed0 	bl	20001304 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RS);
20001564:	2001      	movs	r0, #1
20001566:	f7ff fef7 	bl	20001358 <ascii_ctrl_bit_clear>
    
    // Wait until MSB in data register is 0, which means that the display ready to receive a command in 8us
    while((ascii_read_status() & 0x80) != 0);
2000156a:	46c0      	nop			; (mov r8, r8)
2000156c:	f7ff ff72 	bl	20001454 <ascii_read_status>
20001570:	0003      	movs	r3, r0
20001572:	b25b      	sxtb	r3, r3
20001574:	2b00      	cmp	r3, #0
20001576:	dbf9      	blt.n	2000156c <ascii_write_char+0x1a>
    delay_mikro(8);
20001578:	2008      	movs	r0, #8
2000157a:	f7ff fe19 	bl	200011b0 <delay_mikro>
    
    // Write character do display
    ascii_write_data(character);
2000157e:	1dfb      	adds	r3, r7, #7
20001580:	781b      	ldrb	r3, [r3, #0]
20001582:	0018      	movs	r0, r3
20001584:	f7ff ff2d 	bl	200013e2 <ascii_write_data>
    
    // Delay for 43us
    delay_mikro(43);
20001588:	202b      	movs	r0, #43	; 0x2b
2000158a:	f7ff fe11 	bl	200011b0 <delay_mikro>
}
2000158e:	46c0      	nop			; (mov r8, r8)
20001590:	46bd      	mov	sp, r7
20001592:	b002      	add	sp, #8
20001594:	bd80      	pop	{r7, pc}

20001596 <gotoxy>:

void gotoxy(unsigned int row, unsigned int column){
20001596:	b580      	push	{r7, lr}
20001598:	b084      	sub	sp, #16
2000159a:	af00      	add	r7, sp, #0
2000159c:	6078      	str	r0, [r7, #4]
2000159e:	6039      	str	r1, [r7, #0]
    // Make sure row not out of bounds
    if(row < 1 || row > 20){
200015a0:	687b      	ldr	r3, [r7, #4]
200015a2:	2b00      	cmp	r3, #0
200015a4:	d025      	beq.n	200015f2 <gotoxy+0x5c>
200015a6:	687b      	ldr	r3, [r7, #4]
200015a8:	2b14      	cmp	r3, #20
200015aa:	d822      	bhi.n	200015f2 <gotoxy+0x5c>
        return;
    }
    // Make sure column not out of bounds
    if(column < 1 || column > 2){
200015ac:	683b      	ldr	r3, [r7, #0]
200015ae:	2b00      	cmp	r3, #0
200015b0:	d021      	beq.n	200015f6 <gotoxy+0x60>
200015b2:	683b      	ldr	r3, [r7, #0]
200015b4:	2b02      	cmp	r3, #2
200015b6:	d81e      	bhi.n	200015f6 <gotoxy+0x60>
        return;
    }
    
    // Set address to the correct location
    unsigned char address = row - 1;
200015b8:	687b      	ldr	r3, [r7, #4]
200015ba:	b2da      	uxtb	r2, r3
200015bc:	230f      	movs	r3, #15
200015be:	18fb      	adds	r3, r7, r3
200015c0:	3a01      	subs	r2, #1
200015c2:	701a      	strb	r2, [r3, #0]
    if(column == 2){
200015c4:	683b      	ldr	r3, [r7, #0]
200015c6:	2b02      	cmp	r3, #2
200015c8:	d106      	bne.n	200015d8 <gotoxy+0x42>
        address += 0x40;
200015ca:	230f      	movs	r3, #15
200015cc:	18fb      	adds	r3, r7, r3
200015ce:	220f      	movs	r2, #15
200015d0:	18ba      	adds	r2, r7, r2
200015d2:	7812      	ldrb	r2, [r2, #0]
200015d4:	3240      	adds	r2, #64	; 0x40
200015d6:	701a      	strb	r2, [r3, #0]
    }
    
    // Send command to mark correct spot
    ascii_command(0x80 | address, 39, 1);
200015d8:	230f      	movs	r3, #15
200015da:	18fb      	adds	r3, r7, r3
200015dc:	781b      	ldrb	r3, [r3, #0]
200015de:	2280      	movs	r2, #128	; 0x80
200015e0:	4252      	negs	r2, r2
200015e2:	4313      	orrs	r3, r2
200015e4:	b2db      	uxtb	r3, r3
200015e6:	2201      	movs	r2, #1
200015e8:	2127      	movs	r1, #39	; 0x27
200015ea:	0018      	movs	r0, r3
200015ec:	f7ff ff86 	bl	200014fc <ascii_command>
200015f0:	e002      	b.n	200015f8 <gotoxy+0x62>
        return;
200015f2:	46c0      	nop			; (mov r8, r8)
200015f4:	e000      	b.n	200015f8 <gotoxy+0x62>
        return;
200015f6:	46c0      	nop			; (mov r8, r8)
}
200015f8:	46bd      	mov	sp, r7
200015fa:	b004      	add	sp, #16
200015fc:	bd80      	pop	{r7, pc}

200015fe <ascii_write_string>:

void ascii_write_string(char *s){
200015fe:	b580      	push	{r7, lr}
20001600:	b082      	sub	sp, #8
20001602:	af00      	add	r7, sp, #0
20001604:	6078      	str	r0, [r7, #4]
    // Write each character onto the display until the finishing character is reached
    while(*s != 0){
20001606:	e006      	b.n	20001616 <ascii_write_string+0x18>
        ascii_write_char(*s++);
20001608:	687b      	ldr	r3, [r7, #4]
2000160a:	1c5a      	adds	r2, r3, #1
2000160c:	607a      	str	r2, [r7, #4]
2000160e:	781b      	ldrb	r3, [r3, #0]
20001610:	0018      	movs	r0, r3
20001612:	f7ff ff9e 	bl	20001552 <ascii_write_char>
    while(*s != 0){
20001616:	687b      	ldr	r3, [r7, #4]
20001618:	781b      	ldrb	r3, [r3, #0]
2000161a:	2b00      	cmp	r3, #0
2000161c:	d1f4      	bne.n	20001608 <ascii_write_string+0xa>
    }
}
2000161e:	46c0      	nop			; (mov r8, r8)
20001620:	46bd      	mov	sp, r7
20001622:	b002      	add	sp, #8
20001624:	bd80      	pop	{r7, pc}
20001626:	46c0      	nop			; (mov r8, r8)

20001628 <keyboard_val>:
	...

20001629 <win_state>:
20001629:	00000000 	andeq	r0, r0, r0

2000162c <delay_counter>:
2000162c:	00000000 	andeq	r0, r0, r0

20001630 <mikro>:
20001630:	00000000 	andeq	r0, r0, r0

20001634 <map_grid>:
	...

20001654 <spoop_bits>:
20001654:	c2433c3c 	subgt	r3, r3, #60, 24	; 0x3c00
20001658:	d00fb99d 	mulle	pc, sp, r9	; <UNPREDICTABLE>
2000165c:	524a2e74 	subpl	r2, sl, #116, 28	; 0x740
20001660:	5e7a566a 	cdppl	6, 7, cr5, cr10, cr10, {3}
20001664:	1ff82184 	svcne	0x00f82184
20001668:	100c0c30 	andne	r0, ip, r0, lsr ip
2000166c:	38162412 	ldmdacc	r6, {r1, r4, sl, sp}
20001670:	1e7811c8 	rpwne<illegal precision>m	f1, f0, #0.0

20001674 <wall_bits>:
20001674:	a005ffff 	strdge	pc, [r5], -pc	; <UNPREDICTABLE>
20001678:	a815ffff 	ldmdage	r5, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
2000167c:	aa55b42d 	bge	2156e738 <systick_flag+0x156cfd4>
20001680:	a245a5a5 	subge	sl, r5, #692060160	; 0x29400000
20001684:	a5a5a245 	strge	sl, [r5, #581]!	; 0x245
20001688:	b42daa55 	strtlt	sl, [sp], #-2645	; 0xfffff5ab
2000168c:	ffffa815 			; <UNDEFINED> instruction: 0xffffa815
20001690:	ffffa005 			; <UNDEFINED> instruction: 0xffffa005

20001694 <exit_bits>:
20001694:	8181ffff 	strdhi	pc, [r1, pc]
20001698:	a5a5bdbd 	strge	fp, [r5, #3517]!	; 0xdbd
2000169c:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
200016a0:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
200016a4:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
200016a8:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
200016ac:	bdbda5a5 	cfldr32lt	mvfx10, [sp, #660]!	; 0x294
200016b0:	ffff8181 			; <UNDEFINED> instruction: 0xffff8181

200016b4 <start_message1>:
200016b4:	6f6f7053 	svcvs	0x006f7053
200016b8:	73277970 			; <UNDEFINED> instruction: 0x73277970
200016bc:	00000000 	andeq	r0, r0, r0

200016c0 <start_message2>:
200016c0:	617a6962 	cmnvs	sl, r2, ror #18
200016c4:	20657272 	rsbcs	r7, r5, r2, ror r2
200016c8:	65766461 	ldrbvs	r6, [r6, #-1121]!	; 0xfffffb9f
200016cc:	7275746e 	rsbsvc	r7, r5, #1845493760	; 0x6e000000
200016d0:	00000065 	andeq	r0, r0, r5, rrx

200016d4 <victory_message1>:
200016d4:	676e6f43 	strbvs	r6, [lr, -r3, asr #30]!
200016d8:	75746172 	ldrbvc	r6, [r4, #-370]!	; 0xfffffe8e
200016dc:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
200016e0:	21736e6f 	cmncs	r3, pc, ror #28
200016e4:	00000000 	andeq	r0, r0, r0

200016e8 <victory_message2>:
200016e8:	20756f59 	rsbscs	r6, r5, r9, asr pc
200016ec:	216e6977 	smccs	59031	; 0xe697
200016f0:	00000000 	andeq	r0, r0, r0

200016f4 <spoop_bits>:
200016f4:	c2433c3c 	subgt	r3, r3, #60, 24	; 0x3c00
200016f8:	d00fb99d 	mulle	pc, sp, r9	; <UNPREDICTABLE>
200016fc:	524a2e74 	subpl	r2, sl, #116, 28	; 0x740
20001700:	5e7a566a 	cdppl	6, 7, cr5, cr10, cr10, {3}
20001704:	1ff82184 	svcne	0x00f82184
20001708:	100c0c30 	andne	r0, ip, r0, lsr ip
2000170c:	38162412 	ldmdacc	r6, {r1, r4, sl, sp}
20001710:	1e7811c8 	rpwne<illegal precision>m	f1, f0, #0.0

20001714 <wall_bits>:
20001714:	a005ffff 	strdge	pc, [r5], -pc	; <UNPREDICTABLE>
20001718:	a815ffff 	ldmdage	r5, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
2000171c:	aa55b42d 	bge	2156e7d8 <systick_flag+0x156d074>
20001720:	a245a5a5 	subge	sl, r5, #692060160	; 0x29400000
20001724:	a5a5a245 	strge	sl, [r5, #581]!	; 0x245
20001728:	b42daa55 	strtlt	sl, [sp], #-2645	; 0xfffff5ab
2000172c:	ffffa815 			; <UNDEFINED> instruction: 0xffffa815
20001730:	ffffa005 			; <UNDEFINED> instruction: 0xffffa005

20001734 <exit_bits>:
20001734:	8181ffff 	strdhi	pc, [r1, pc]
20001738:	a5a5bdbd 	strge	fp, [r5, #3517]!	; 0xdbd
2000173c:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
20001740:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
20001744:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
20001748:	a5a5a5a5 	strge	sl, [r5, #1445]!	; 0x5a5
2000174c:	bdbda5a5 	cfldr32lt	mvfx10, [sp, #660]!	; 0x294
20001750:	ffff8181 			; <UNDEFINED> instruction: 0xffff8181

20001754 <key>:
20001754:	0a030201 	beq	200c1f60 <systick_flag+0xc07fc>
20001758:	0b060504 	bleq	20182b70 <systick_flag+0x18140c>
2000175c:	0c090807 	stceq	8, cr0, [r9], {7}
20001760:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001730 <wall_bits+0x1c>

20001764 <systick_flag>:
20001764:	00000001 	andeq	r0, r0, r1
20001768:	00000001 	andeq	r0, r0, r1
2000176c:	00000001 	andeq	r0, r0, r1
20001770:	00000001 	andeq	r0, r0, r1
20001774:	00000003 	andeq	r0, r0, r3
20001778:	00000003 	andeq	r0, r0, r3
2000177c:	00000003 	andeq	r0, r0, r3
20001780:	00000005 	andeq	r0, r0, r5
20001784:	00000005 	andeq	r0, r0, r5
20001788:	00000005 	andeq	r0, r0, r5
2000178c:	00000006 	andeq	r0, r0, r6
20001790:	00000000 	andeq	r0, r0, r0
20001794:	00000001 	andeq	r0, r0, r1
20001798:	00000002 	andeq	r0, r0, r2
2000179c:	00000003 	andeq	r0, r0, r3
200017a0:	00000002 	andeq	r0, r0, r2
200017a4:	00000001 	andeq	r0, r0, r1
200017a8:	00000000 	andeq	r0, r0, r0
200017ac:	00000001 	andeq	r0, r0, r1
200017b0:	00000002 	andeq	r0, r0, r2
200017b4:	00000002 	andeq	r0, r0, r2
200017b8:	2000096e 	andcs	r0, r0, lr, ror #18
200017bc:	20000976 	andcs	r0, r0, r6, ror r9
200017c0:	2000097e 	andcs	r0, r0, lr, ror r9
200017c4:	20000986 	andcs	r0, r0, r6, lsl #19
200017c8:	2000098e 	andcs	r0, r0, lr, lsl #19

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000007be 			; <UNDEFINED> instruction: 0x000007be
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000071 	andeq	r0, r0, r1, ror r0
      10:	0001830c 	andeq	r8, r1, ip, lsl #6
	...
      20:	02020200 	andeq	r0, r2, #0, 4
      24:	0000420c 	andeq	r4, r0, ip, lsl #4
      28:	00000300 	andeq	r0, r0, r0, lsl #6
      2c:	0d020000 	stceq	0, cr0, [r2, #-0]
      30:	00000042 	andeq	r0, r0, r2, asr #32
      34:	038b0300 	orreq	r0, fp, #0, 6
      38:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
      3c:	00000042 	andeq	r0, r0, r2, asr #32
      40:	01040001 	tsteq	r4, r1
      44:	00028908 	andeq	r8, r2, r8, lsl #18
      48:	02040500 	andeq	r0, r4, #0, 10
      4c:	0000620a 	andeq	r6, r0, sl, lsl #4
      50:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
      54:	0b020072 	bleq	80224 <startup-0x1ff7fddc>
      58:	00000062 	andeq	r0, r0, r2, rrx
      5c:	00002107 	andeq	r2, r0, r7, lsl #2
      60:	04040000 	streq	r0, [r4], #-0
      64:	00035f07 	andeq	r5, r3, r7, lsl #30
      68:	02020200 	andeq	r0, r2, #0, 4
      6c:	00008a13 	andeq	r8, r0, r3, lsl sl
      70:	043e0300 	ldrteq	r0, [lr], #-768	; 0xfffffd00
      74:	14020000 	strne	r0, [r2], #-0
      78:	00000042 	andeq	r0, r0, r2, asr #32
      7c:	00690300 	rsbeq	r0, r9, r0, lsl #6
      80:	15020000 	strne	r0, [r2, #-0]
      84:	00000042 	andeq	r0, r0, r2, asr #32
      88:	04050001 	streq	r0, [r5], #-1
      8c:	00a31102 	adceq	r1, r3, r2, lsl #2
      90:	6f060000 	svcvs	0x00060000
      94:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
      98:	00006212 	andeq	r6, r0, r2, lsl r2
      9c:	00690700 	rsbeq	r0, r9, r0, lsl #14
      a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      a4:	00000301 	andeq	r0, r0, r1, lsl #6
      a8:	ec040218 	sfm	f0, 4, [r4], {24}
      ac:	03000000 	movweq	r0, #0
      b0:	000003ec 	andeq	r0, r0, ip, ror #7
      b4:	00620502 	rsbeq	r0, r2, r2, lsl #10
      b8:	03000000 	movweq	r0, #0
      bc:	00000151 	andeq	r0, r0, r1, asr r1
      c0:	00620602 	rsbeq	r0, r2, r2, lsl #12
      c4:	03040000 	movweq	r0, #16384	; 0x4000
      c8:	00000234 	andeq	r0, r0, r4, lsr r2
      cc:	00620702 	rsbeq	r0, r2, r2, lsl #14
      d0:	03080000 	movweq	r0, #32768	; 0x8000
      d4:	000003d3 	ldrdeq	r0, [r0], -r3
      d8:	00620802 	rsbeq	r0, r2, r2, lsl #16
      dc:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
      e0:	00000049 	andeq	r0, r0, r9, asr #32
      e4:	008a0910 	addeq	r0, sl, r0, lsl r9
      e8:	00140000 	andseq	r0, r4, r0
      ec:	00036c0a 	andeq	r6, r3, sl, lsl #24
      f0:	a3180200 	tstge	r8, #0, 4
      f4:	02000000 	andeq	r0, r0, #0
      f8:	18070302 	stmdane	r7, {r1, r8, r9}
      fc:	03000001 	movweq	r0, #1
     100:	0000012a 	andeq	r0, r0, sl, lsr #2
     104:	00420803 	subeq	r0, r2, r3, lsl #16
     108:	03000000 	movweq	r0, #0
     10c:	0000024f 	andeq	r0, r0, pc, asr #4
     110:	00420903 	subeq	r0, r2, r3, lsl #18
     114:	00010000 	andeq	r0, r1, r0
     118:	05030405 	streq	r0, [r3, #-1029]	; 0xfffffbfb
     11c:	00000131 	andeq	r0, r0, r1, lsr r1
     120:	0003330b 	andeq	r3, r3, fp, lsl #6
     124:	62060300 	andvs	r0, r6, #0, 6
     128:	07000000 	streq	r0, [r0, -r0]
     12c:	000000f7 	strdeq	r0, [r0], -r7
     130:	03040200 	movweq	r0, #16896	; 0x4200
     134:	0001520e 	andeq	r5, r1, lr, lsl #4
     138:	00070300 	andeq	r0, r7, r0, lsl #6
     13c:	0f030000 	svceq	0x00030000
     140:	00000152 	andeq	r0, r0, r2, asr r1
     144:	03f20300 	mvnseq	r0, #0, 6
     148:	10030000 	andne	r0, r3, r0
     14c:	00000042 	andeq	r0, r0, r2, asr #32
     150:	02040002 	andeq	r0, r4, #2
     154:	00035907 	andeq	r5, r3, r7, lsl #18
     158:	03040500 	movweq	r0, #17664	; 0x4500
     15c:	0001720c 	andeq	r7, r1, ip, lsl #4
     160:	6d700600 	ldclvs	6, cr0, [r0, #-0]
     164:	0d030063 	stceq	0, cr0, [r3, #-396]	; 0xfffffe74
     168:	00000062 	andeq	r0, r0, r2, rrx
     16c:	00013107 	andeq	r3, r1, r7, lsl #2
     170:	02020000 	andeq	r0, r2, #0
     174:	01931803 	orrseq	r1, r3, r3, lsl #16
     178:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
     17c:	03000003 	movweq	r0, #3
     180:	00004219 	andeq	r4, r0, r9, lsl r2
     184:	77030000 	strvc	r0, [r3, -r0]
     188:	03000003 	movweq	r0, #3
     18c:	0000421a 	andeq	r4, r0, sl, lsl r2
     190:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     194:	ac160304 	ldcge	3, cr0, [r6], {4}
     198:	0b000001 	bleq	1a4 <startup-0x1ffffe5c>
     19c:	0000003f 	andeq	r0, r0, pc, lsr r0
     1a0:	00621703 	rsbeq	r1, r2, r3, lsl #14
     1a4:	72070000 	andvc	r0, r7, #0
     1a8:	00000001 	andeq	r0, r0, r1
     1ac:	1f030202 	svcne	0x00030202
     1b0:	000001cd 	andeq	r0, r0, sp, asr #3
     1b4:	00001303 	andeq	r1, r0, r3, lsl #6
     1b8:	42200300 	eormi	r0, r0, #0, 6
     1bc:	00000000 	andeq	r0, r0, r0
     1c0:	0003c703 	andeq	ip, r3, r3, lsl #14
     1c4:	42210300 	eormi	r0, r1, #0, 6
     1c8:	01000000 	mrseq	r0, (UNDEF: 0)
     1cc:	03040500 	movweq	r0, #17664	; 0x4500
     1d0:	0001e61d 	andeq	lr, r1, sp, lsl r6
     1d4:	00470b00 	subeq	r0, r7, r0, lsl #22
     1d8:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
     1dc:	00000062 	andeq	r0, r0, r2, rrx
     1e0:	0001ac07 	andeq	sl, r1, r7, lsl #24
     1e4:	02020000 	andeq	r0, r2, #0
     1e8:	02072603 	andeq	r2, r7, #3145728	; 0x300000
     1ec:	5f030000 	svcpl	0x00030000
     1f0:	03000001 	movweq	r0, #1
     1f4:	00004227 	andeq	r4, r0, r7, lsr #4
     1f8:	27030000 	strcs	r0, [r3, -r0]
     1fc:	03000003 	movweq	r0, #3
     200:	00004228 	andeq	r4, r0, r8, lsr #4
     204:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     208:	20240304 	eorcs	r0, r4, r4, lsl #6
     20c:	0b000002 	bleq	21c <startup-0x1ffffde4>
     210:	0000004f 	andeq	r0, r0, pc, asr #32
     214:	00622503 	rsbeq	r2, r2, r3, lsl #10
     218:	e6070000 	str	r0, [r7], -r0
     21c:	00000001 	andeq	r0, r0, r1
     220:	2d030202 	sfmcs	f0, 4, [r3, #-8]
     224:	00000241 	andeq	r0, r0, r1, asr #4
     228:	0002e403 	andeq	lr, r2, r3, lsl #8
     22c:	422e0300 	eormi	r0, lr, #0, 6
     230:	00000000 	andeq	r0, r0, r0
     234:	00040803 	andeq	r0, r4, r3, lsl #16
     238:	422f0300 	eormi	r0, pc, #0, 6
     23c:	01000000 	mrseq	r0, (UNDEF: 0)
     240:	03040500 	movweq	r0, #17664	; 0x4500
     244:	00025a2b 	andeq	r5, r2, fp, lsr #20
     248:	00570b00 	subseq	r0, r7, r0, lsl #22
     24c:	2c030000 	stccs	0, cr0, [r3], {-0}
     250:	00000062 	andeq	r0, r0, r2, rrx
     254:	00022007 	andeq	r2, r2, r7
     258:	10020000 	andne	r0, r2, r0
     25c:	027b1503 	rsbseq	r1, fp, #12582912	; 0xc00000
     260:	93090000 	movwls	r0, #36864	; 0x9000
     264:	00000001 	andeq	r0, r0, r1
     268:	0001cd09 	andeq	ip, r1, r9, lsl #26
     26c:	07090400 	streq	r0, [r9, -r0, lsl #8]
     270:	08000002 	stmdaeq	r0, {r1}
     274:	00024109 	andeq	r4, r2, r9, lsl #2
     278:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
     27c:	94130310 	ldrls	r0, [r3], #-784	; 0xfffffcf0
     280:	0b000002 	bleq	290 <startup-0x1ffffd70>
     284:	0000029d 	muleq	r0, sp, r2
     288:	00621403 	rsbeq	r1, r2, r3, lsl #8
     28c:	5a070000 	bpl	1c0294 <startup-0x1fe3fd6c>
     290:	00000002 	andeq	r0, r0, r2
     294:	36030202 	strcc	r0, [r3], -r2, lsl #4
     298:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     29c:	00011c03 	andeq	r1, r1, r3, lsl #24
     2a0:	42370300 	eorsmi	r0, r7, #0, 6
     2a4:	00000000 	andeq	r0, r0, r0
     2a8:	00011203 	andeq	r1, r1, r3, lsl #4
     2ac:	42380300 	eorsmi	r0, r8, #0, 6
     2b0:	01000000 	mrseq	r0, (UNDEF: 0)
     2b4:	03040500 	movweq	r0, #17664	; 0x4500
     2b8:	0002ce34 	andeq	ip, r2, r4, lsr lr
     2bc:	02970b00 	addseq	r0, r7, #0, 22
     2c0:	35030000 	strcc	r0, [r3, #-0]
     2c4:	00000062 	andeq	r0, r0, r2, rrx
     2c8:	00029407 	andeq	r9, r2, r7, lsl #8
     2cc:	83080000 	movwhi	r0, #32768	; 0x8000
     2d0:	1c000003 	stcne	0, cr0, [r0], {3}
     2d4:	02f30403 	rscseq	r0, r3, #50331648	; 0x3000000
     2d8:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
     2dc:	00000001 	andeq	r0, r0, r1
     2e0:	00015909 	andeq	r5, r1, r9, lsl #18
     2e4:	7b090400 	blvc	2412ec <startup-0x1fdbed14>
     2e8:	08000002 	stmdaeq	r0, {r1}
     2ec:	0002b509 	andeq	fp, r2, r9, lsl #10
     2f0:	0a001800 	beq	62f8 <startup-0x1fff9d08>
     2f4:	0000027c 	andeq	r0, r0, ip, ror r2
     2f8:	02ce3b03 	sbceq	r3, lr, #3072	; 0xc00
     2fc:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
     300:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     304:	03520404 	cmpeq	r2, #4, 8	; 0x4000000
     308:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
     30c:	0400726d 	streq	r7, [r0], #-621	; 0xfffffd93
     310:	00006205 	andeq	r6, r0, r5, lsl #4
     314:	650c0000 	strvs	r0, [ip, #-0]
     318:	0400726d 	streq	r7, [r0], #-621	; 0xfffffd93
     31c:	00006206 	andeq	r6, r0, r6, lsl #4
     320:	84030400 	strhi	r0, [r3], #-1024	; 0xfffffc00
     324:	04000002 	streq	r0, [r0], #-2
     328:	00006207 	andeq	r6, r0, r7, lsl #4
     32c:	d9030800 	stmdble	r3, {fp}
     330:	04000003 	streq	r0, [r0], #-3
     334:	00006208 	andeq	r6, r0, r8, lsl #4
     338:	45030c00 	strmi	r0, [r3, #-3072]	; 0xfffff400
     33c:	04000004 	streq	r0, [r0], #-4
     340:	00006209 	andeq	r6, r0, r9, lsl #4
     344:	700c1000 	andvc	r1, ip, r0
     348:	0a040072 	beq	100518 <startup-0x1feffae8>
     34c:	00000062 	andeq	r0, r0, r2, rrx
     350:	b80a0014 	stmdalt	sl, {r2, r4}
     354:	04000003 	streq	r0, [r0], #-3
     358:	0002fe0b 	andeq	pc, r2, fp, lsl #28
     35c:	05040d00 	streq	r0, [r4, #-3328]	; 0xfffff300
     360:	00746e69 	rsbseq	r6, r4, r9, ror #28
     364:	09070404 	stmdbeq	r7, {r2, sl}
     368:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     36c:	00000042 	andeq	r0, r0, r2, asr #32
     370:	0000037b 	andeq	r0, r0, fp, ror r3
     374:	0003640f 	andeq	r6, r3, pc, lsl #8
     378:	10001f00 	andne	r1, r0, r0, lsl #30
     37c:	000002ef 	andeq	r0, r0, pc, ror #5
     380:	036b0305 	cmneq	fp, #335544320	; 0x14000000
     384:	03050000 	movweq	r0, #20480	; 0x5000
     388:	20001654 	andcs	r1, r0, r4, asr r6
     38c:	00005f10 	andeq	r5, r0, r0, lsl pc
     390:	6b030600 	blvs	c1b98 <startup-0x1ff3e468>
     394:	05000003 	streq	r0, [r0, #-3]
     398:	00167403 	andseq	r7, r6, r3, lsl #8
     39c:	01341020 	teqeq	r4, r0, lsr #32
     3a0:	03070000 	movweq	r0, #28672	; 0x7000
     3a4:	0000036b 	andeq	r0, r0, fp, ror #6
     3a8:	16940305 	ldrne	r0, [r4], r5, lsl #6
     3ac:	62082000 	andvs	r2, r8, #0
     3b0:	08000002 	stmdaeq	r0, {r1}
     3b4:	03df0908 	bicseq	r0, pc, #8, 18	; 0x20000
     3b8:	ef030000 	svc	0x00030000
     3bc:	08000001 	stmdaeq	r0, {r0}
     3c0:	0000420a 	andeq	r4, r0, sl, lsl #4
     3c4:	fa030000 	blx	c03cc <startup-0x1ff3fc34>
     3c8:	08000002 	stmdaeq	r0, {r1}
     3cc:	0000420b 	andeq	r4, r0, fp, lsl #4
     3d0:	2a030100 	bcs	c07d8 <startup-0x1ff3f828>
     3d4:	08000007 	stmdaeq	r0, {r0, r1, r2}
     3d8:	0003df0c 	andeq	sp, r3, ip, lsl #30
     3dc:	11000400 	tstne	r0, r0, lsl #8
     3e0:	00004204 	andeq	r4, r0, r4, lsl #4
     3e4:	025a0a00 	subseq	r0, sl, #0, 20
     3e8:	0d080000 	stceq	0, cr0, [r8, #-0]
     3ec:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3f0:	03ae0411 			; <UNDEFINED> instruction: 0x03ae0411
     3f4:	93080000 	movwls	r0, #32768	; 0x8000
     3f8:	24000003 	strcs	r0, [r0], #-3
     3fc:	046f0f08 	strbteq	r0, [pc], #-3848	; 404 <startup-0x1ffffbfc>
     400:	fb030000 	blx	c040a <startup-0x1ff3fbf6>
     404:	08000003 	stmdaeq	r0, {r0, r1}
     408:	0003e510 	andeq	lr, r3, r0, lsl r5
     40c:	32030000 	andcc	r0, r3, #0
     410:	08000004 	stmdaeq	r0, {r2}
     414:	00035d11 	andeq	r5, r3, r1, lsl sp
     418:	38030400 	stmdacc	r3, {sl}
     41c:	08000004 	stmdaeq	r0, {r2}
     420:	00035d11 	andeq	r5, r3, r1, lsl sp
     424:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
     428:	08000002 	stmdaeq	r0, {r1}
     42c:	00035d12 	andeq	r5, r3, r2, lsl sp
     430:	71030c00 	tstvc	r3, r0, lsl #24
     434:	08000003 	stmdaeq	r0, {r0, r1}
     438:	00035d12 	andeq	r5, r3, r2, lsl sp
     43c:	a9031000 	stmdbge	r3, {ip}
     440:	08000003 	stmdaeq	r0, {r0, r1}
     444:	00048013 	andeq	r8, r4, r3, lsl r0
     448:	85031400 	strhi	r1, [r3, #-1024]	; 0xfffffc00
     44c:	08000007 	stmdaeq	r0, {r0, r1, r2}
     450:	00048014 	andeq	r8, r4, r4, lsl r0
     454:	08031800 	stmdaeq	r3, {fp, ip}
     458:	08000002 	stmdaeq	r0, {r1}
     45c:	00048015 	andeq	r8, r4, r5, lsl r0
     460:	ae031c00 	cdpge	12, 0, cr1, cr3, cr0, {0}
     464:	08000003 	stmdaeq	r0, {r0, r1}
     468:	00049b16 	andeq	r9, r4, r6, lsl fp
     46c:	12002000 	andne	r2, r0, #0
     470:	0000047a 	andeq	r0, r0, sl, ror r4
     474:	00047a13 	andeq	r7, r4, r3, lsl sl
     478:	04110000 	ldreq	r0, [r1], #-0
     47c:	000003f6 	strdeq	r0, [r0], -r6
     480:	046f0411 	strbteq	r0, [pc], #-1041	; 488 <startup-0x1ffffb78>
     484:	9b120000 	blls	48048c <startup-0x1fb7fb74>
     488:	13000004 	movwne	r0, #4
     48c:	0000047a 	andeq	r0, r0, sl, ror r4
     490:	00035d13 	andeq	r5, r3, r3, lsl sp
     494:	035d1300 	cmpeq	sp, #0, 6
     498:	11000000 	mrsne	r0, (UNDEF: 0)
     49c:	00048604 	andeq	r8, r4, r4, lsl #12
     4a0:	02cf0a00 	sbceq	r0, pc, #0, 20
     4a4:	17080000 	strne	r0, [r8, -r0]
     4a8:	0000047a 	andeq	r0, r0, sl, ror r4
     4ac:	00013e14 	andeq	r3, r1, r4, lsl lr
     4b0:	42230100 	eormi	r0, r3, #0, 2
     4b4:	05000000 	streq	r0, [r0, #-0]
     4b8:	00162803 	andseq	r2, r6, r3, lsl #16
     4bc:	00420e20 	subeq	r0, r2, r0, lsr #28
     4c0:	04d30000 	ldrbeq	r0, [r3], #0
     4c4:	640f0000 	strvs	r0, [pc], #-0	; 4cc <startup-0x1ffffb34>
     4c8:	07000003 	streq	r0, [r0, -r3]
     4cc:	0003640f 	andeq	r6, r3, pc, lsl #8
     4d0:	14000300 	strne	r0, [r0], #-768	; 0xfffffd00
     4d4:	000003e3 	andeq	r0, r0, r3, ror #7
     4d8:	04bd2401 	ldrteq	r2, [sp], #1025	; 0x401
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	20001634 	andcs	r1, r0, r4, lsr r6
     4e4:	00016a14 	andeq	r6, r1, r4, lsl sl
     4e8:	42260100 	eormi	r0, r6, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	00162903 	andseq	r2, r6, r3, lsl #18
     4f4:	00420e20 	subeq	r0, r2, r0, lsr #28
     4f8:	05050000 	streq	r0, [r5, #-0]
     4fc:	640f0000 	strvs	r0, [pc], #-0	; 504 <startup-0x1ffffafc>
     500:	08000003 	stmdaeq	r0, {r0, r1}
     504:	03071400 	movweq	r1, #29696	; 0x7400
     508:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     50c:	000004f5 	strdeq	r0, [r0], -r5
     510:	16b40305 	ldrtne	r0, [r4], r5, lsl #6
     514:	420e2000 	andmi	r2, lr, #0
     518:	26000000 	strcs	r0, [r0], -r0
     51c:	0f000005 	svceq	0x00000005
     520:	00000364 	andeq	r0, r0, r4, ror #6
     524:	74140011 	ldrvc	r0, [r4], #-17	; 0xffffffef
     528:	01000001 	tsteq	r0, r1
     52c:	00051629 	andeq	r1, r5, r9, lsr #12
     530:	c0030500 	andgt	r0, r3, r0, lsl #10
     534:	0e200016 	miaeq	acc0, r6, r0
     538:	00000042 	andeq	r0, r0, r2, asr #32
     53c:	00000547 	andeq	r0, r0, r7, asr #10
     540:	0003640f 	andeq	r6, r3, pc, lsl #8
     544:	14001000 	strne	r1, [r0], #-0
     548:	00000348 	andeq	r0, r0, r8, asr #6
     54c:	05372b01 	ldreq	r2, [r7, #-2817]!	; 0xfffff4ff
     550:	03050000 	movweq	r0, #20480	; 0x5000
     554:	200016d4 	ldrdcs	r1, [r0], -r4
     558:	0002a414 	andeq	sl, r2, r4, lsl r4
     55c:	f52c0100 			; <UNDEFINED> instruction: 0xf52c0100
     560:	05000004 	streq	r0, [r0, #-4]
     564:	0016e803 	andseq	lr, r6, r3, lsl #16
     568:	03be1520 			; <UNDEFINED> instruction: 0x03be1520
     56c:	c4010000 	strgt	r0, [r1], #-0
     570:	20000404 	andcs	r0, r0, r4, lsl #8
     574:	0000008c 	andeq	r0, r0, ip, lsl #1
     578:	059d9c01 	ldreq	r9, [sp, #3073]	; 0xc01
     57c:	6a160000 	bvs	580584 <startup-0x1fa7fa7c>
     580:	01000002 	tsteq	r0, r2
     584:	00035dcd 	andeq	r5, r3, sp, asr #27
     588:	00058f00 	andeq	r8, r5, r0, lsl #30
     58c:	18001700 	stmdane	r0, {r8, r9, sl, ip}
     590:	0000033a 	andeq	r0, r0, sl, lsr r3
     594:	035dd001 	cmpeq	sp, #1
     598:	00170000 	andseq	r0, r7, r0
     59c:	03de1900 	bicseq	r1, lr, #0, 18
     5a0:	a5010000 	strge	r0, [r1, #-0]
     5a4:	200002d4 	ldrdcs	r0, [r0], -r4
     5a8:	00000130 	andeq	r0, r0, r0, lsr r1
     5ac:	067c9c01 	ldrbteq	r9, [ip], -r1, lsl #24
     5b0:	fc1a0000 	ldc2	0, cr0, [sl], {-0}
     5b4:	01000004 	tsteq	r0, r4
     5b8:	0004a1a5 	andeq	sl, r4, r5, lsr #3
     5bc:	fc910300 	ldc2	3, cr0, [r1], {0}
     5c0:	04721a7e 	ldrbteq	r1, [r2], #-2686	; 0xfffff582
     5c4:	a5010000 	strge	r0, [r1, #-0]
     5c8:	000004a1 	andeq	r0, r0, r1, lsr #9
     5cc:	7ef89103 	nrmvce	f1, f3
     5d0:	00014b1a 	andeq	r4, r1, sl, lsl fp
     5d4:	7ca50100 	stfvcs	f0, [r5]
     5d8:	03000006 	movweq	r0, #6
     5dc:	107ef491 			; <UNDEFINED> instruction: 0x107ef491
     5e0:	0000044b 	andeq	r0, r0, fp, asr #8
     5e4:	035dad01 	cmpeq	sp, #1, 26	; 0x40
     5e8:	91020000 	mrsls	r0, (UNDEF: 2)
     5ec:	04541060 	ldrbeq	r1, [r4], #-96	; 0xffffffa0
     5f0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     5f4:	0000035d 	andeq	r0, r0, sp, asr r3
     5f8:	105c9102 	subsne	r9, ip, r2, lsl #2
     5fc:	0000021f 	andeq	r0, r0, pc, lsl r2
     600:	035db401 	cmpeq	sp, #16777216	; 0x1000000
     604:	91020000 	mrsls	r0, (UNDEF: 2)
     608:	02261058 	eoreq	r1, r6, #88	; 0x58
     60c:	b5010000 	strlt	r0, [r1, #-0]
     610:	0000035d 	andeq	r0, r0, sp, asr r3
     614:	10549102 	subsne	r9, r4, r2, lsl #2
     618:	0000022d 	andeq	r0, r0, sp, lsr #4
     61c:	0682bb01 	streq	fp, [r2], r1, lsl #22
     620:	91030000 	mrsls	r0, (UNDEF: 3)
     624:	e8107fac 	ldmda	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
     628:	01000001 	tsteq	r0, r1
     62c:	000682bc 			; <UNDEFINED> instruction: 0x000682bc
     630:	84910300 	ldrhi	r0, [r1], #768	; 0x300
     634:	02e01b7f 	rsceq	r1, r0, #130048	; 0x1fc00
     638:	00342000 	eorseq	r2, r4, r0
     63c:	06650000 	strbteq	r0, [r5], -r0
     640:	781c0000 	ldmdavc	ip, {}	; <UNPREDICTABLE>
     644:	5da60100 	stfpls	f0, [r6]
     648:	02000003 	andeq	r0, r0, #3
     64c:	e61d6c91 			; <UNDEFINED> instruction: 0xe61d6c91
     650:	22200002 	eorcs	r0, r0, #2
     654:	1c000000 	stcne	0, cr0, [r0], {-0}
     658:	a7010079 	smlsdxge	r1, r9, r0, r0
     65c:	0000035d 	andeq	r0, r0, sp, asr r3
     660:	00689102 	rsbeq	r9, r8, r2, lsl #2
     664:	03901d00 	orrseq	r1, r0, #0, 26
     668:	00602000 	rsbeq	r2, r0, r0
     66c:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
     670:	5dbd0100 	ldfpls	f0, [sp]
     674:	02000003 	andeq	r0, r0, #3
     678:	00006491 	muleq	r0, r1, r4
     67c:	04a10411 	strteq	r0, [r1], #1041	; 0x411
     680:	5d0e0000 	stcpl	0, cr0, [lr, #-0]
     684:	92000003 	andls	r0, r0, #3
     688:	0f000006 	svceq	0x00000006
     68c:	00000364 	andeq	r0, r0, r4, ror #6
     690:	0d150009 	ldceq	0, cr0, [r5, #-36]	; 0xffffffdc
     694:	01000002 	tsteq	r0, r2
     698:	00025097 	muleq	r2, r7, r0
     69c:	00008420 	andeq	r8, r0, r0, lsr #8
     6a0:	e09c0100 	adds	r0, ip, r0, lsl #2
     6a4:	1a000006 	bne	6c4 <startup-0x1ffff93c>
     6a8:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     6ac:	04a19701 	strteq	r9, [r1], #1793	; 0x701
     6b0:	91020000 	mrsls	r0, (UNDEF: 2)
     6b4:	0316105c 	tsteq	r6, #92	; 0x5c
     6b8:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
     6bc:	0000035d 	andeq	r0, r0, sp, asr r3
     6c0:	106c9102 	rsbne	r9, ip, r2, lsl #2
     6c4:	00000414 	andeq	r0, r0, r4, lsl r4
     6c8:	035d9901 	cmpeq	sp, #16384	; 0x4000
     6cc:	91020000 	mrsls	r0, (UNDEF: 2)
     6d0:	02c41068 	sbceq	r1, r4, #104	; 0x68
     6d4:	9b010000 	blls	406dc <startup-0x1ffbf924>
     6d8:	0000035d 	andeq	r0, r0, sp, asr r3
     6dc:	00649102 	rsbeq	r9, r4, r2, lsl #2
     6e0:	00002415 	andeq	r2, r0, r5, lsl r4
     6e4:	048e0100 	streq	r0, [lr], #256	; 0x100
     6e8:	4c200002 	stcmi	0, cr0, [r0], #-8
     6ec:	01000000 	mrseq	r0, (UNDEF: 0)
     6f0:	00070d9c 	muleq	r7, ip, sp
     6f4:	02141d00 	andseq	r1, r4, #0, 26
     6f8:	00282000 	eoreq	r2, r8, r0
     6fc:	4a180000 	bmi	600704 <startup-0x1f9ff8fc>
     700:	01000002 	tsteq	r0, r2
     704:	00035d90 	muleq	r3, r0, sp
     708:	00001700 	andeq	r1, r0, r0, lsl #14
     70c:	01251500 			; <UNDEFINED> instruction: 0x01251500
     710:	37010000 	strcc	r0, [r1, -r0]
     714:	20000010 	andcs	r0, r0, r0, lsl r0
     718:	000001f4 	strdeq	r0, [r0], -r4
     71c:	07a09c01 	streq	r9, [r0, r1, lsl #24]!
     720:	b5100000 	ldrlt	r0, [r0, #-0]
     724:	01000002 	tsteq	r0, r2
     728:	0004a160 	andeq	sl, r4, r0, ror #2
     72c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     730:	00042510 	andeq	r2, r4, r0, lsl r5
     734:	a1610100 	cmnge	r1, r0, lsl #2
     738:	02000004 	andeq	r0, r0, #4
     73c:	3c106891 	ldccc	8, cr6, [r0], {145}	; 0x91
     740:	01000002 	tsteq	r0, r2
     744:	0007a062 	andeq	sl, r7, r2, rrx
     748:	e8910300 	ldm	r1, {r8, r9}
     74c:	0158167e 	cmpeq	r8, lr, ror r6
     750:	70010000 	andvc	r0, r1, r0
     754:	0000035d 	andeq	r0, r0, sp, asr r3
     758:	0000075e 	andeq	r0, r0, lr, asr r7
     75c:	f5160017 			; <UNDEFINED> instruction: 0xf5160017
     760:	01000001 	tsteq	r0, r1
     764:	00035d71 	andeq	r5, r3, r1, ror sp
     768:	00076f00 	andeq	r6, r7, r0, lsl #30
     76c:	1b001700 	blne	6374 <startup-0x1fff9c8c>
     770:	20000032 	andcs	r0, r0, r2, lsr r0
     774:	00000034 	andeq	r0, r0, r4, lsr r0
     778:	00000789 	andeq	r0, r0, r9, lsl #15
     77c:	0100691c 	tsteq	r0, ip, lsl r9
     780:	00035d63 	andeq	r5, r3, r3, ror #26
     784:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     788:	009e1d00 	addseq	r1, lr, r0, lsl #26
     78c:	00402000 	subeq	r2, r0, r0
     790:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
     794:	5d6c0100 	stfple	f0, [ip, #-0]
     798:	02000003 	andeq	r0, r0, #3
     79c:	00007091 	muleq	r0, r1, r0
     7a0:	0004a10e 	andeq	sl, r4, lr, lsl #2
     7a4:	0007b000 	andeq	fp, r7, r0
     7a8:	03640f00 	cmneq	r4, #0, 30
     7ac:	001f0000 	andseq	r0, pc, r0
     7b0:	0004001e 	andeq	r0, r4, lr, lsl r0
     7b4:	002e0100 	eoreq	r0, lr, r0, lsl #2
     7b8:	0c200000 	stceq	0, cr0, [r0], #-0
     7bc:	01000000 	mrseq	r0, (UNDEF: 0)
     7c0:	047b009c 	ldrbteq	r0, [fp], #-156	; 0xffffff64
     7c4:	00040000 	andeq	r0, r4, r0
     7c8:	00000198 	muleq	r0, r8, r1
     7cc:	00710104 	rsbseq	r0, r1, r4, lsl #2
     7d0:	920c0000 	andls	r0, ip, #0
     7d4:	90000004 	andls	r0, r0, r4
     7d8:	f2200004 	vhadd.s32	d0, d0, d4
     7dc:	a7000003 	strge	r0, [r0, -r3]
     7e0:	02000001 	andeq	r0, r0, #1
     7e4:	02890801 	addeq	r0, r9, #65536	; 0x10000
     7e8:	04020000 	streq	r0, [r2], #-0
     7ec:	00035f07 	andeq	r5, r3, r7, lsl #30
     7f0:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     7f4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     7f8:	09070402 	stmdbeq	r7, {r1, sl}
     7fc:	04000001 	streq	r0, [r0], #-1
     800:	00000021 	andeq	r0, r0, r1, lsr #32
     804:	0000004d 	andeq	r0, r0, sp, asr #32
     808:	00003605 	andeq	r3, r0, r5, lsl #12
     80c:	06001f00 	streq	r1, [r0], -r0, lsl #30
     810:	000002ef 	andeq	r0, r0, pc, ror #5
     814:	003d0302 	eorseq	r0, sp, r2, lsl #6
     818:	03050000 	movweq	r0, #20480	; 0x5000
     81c:	200016f4 	strdcs	r1, [r0], -r4
     820:	00005f06 	andeq	r5, r0, r6, lsl #30
     824:	3d030300 	stccc	3, cr0, [r3, #-0]
     828:	05000000 	streq	r0, [r0, #-0]
     82c:	00171403 	andseq	r1, r7, r3, lsl #8
     830:	01340620 	teqeq	r4, r0, lsr #12
     834:	03040000 	movweq	r0, #16384	; 0x4000
     838:	0000003d 	andeq	r0, r0, sp, lsr r0
     83c:	17340305 	ldrne	r0, [r4, -r5, lsl #6]!
     840:	62072000 	andvs	r2, r7, #0
     844:	08000002 	stmdaeq	r0, {r1}
     848:	00b10905 	adcseq	r0, r1, r5, lsl #18
     84c:	ef080000 	svc	0x00080000
     850:	05000001 	streq	r0, [r0, #-1]
     854:	0000210a 	andeq	r2, r0, sl, lsl #2
     858:	fa080000 	blx	200860 <startup-0x1fdff7a0>
     85c:	05000002 	streq	r0, [r0, #-2]
     860:	0000210b 	andeq	r2, r0, fp, lsl #2
     864:	2a080100 	bcs	200c6c <startup-0x1fdff394>
     868:	05000007 	streq	r0, [r0, #-7]
     86c:	0000b10c 	andeq	fp, r0, ip, lsl #2
     870:	09000400 	stmdbeq	r0, {sl}
     874:	00002104 	andeq	r2, r0, r4, lsl #2
     878:	025b0a00 	subseq	r0, fp, #0, 20
     87c:	0d050000 	stceq	0, cr0, [r5, #-0]
     880:	00000080 	andeq	r0, r0, r0, lsl #1
     884:	00025a0a 	andeq	r5, r2, sl, lsl #20
     888:	cd0d0500 	cfstr32gt	mvfx0, [sp, #-0]
     88c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     890:	00008004 	andeq	r8, r0, r4
     894:	03930700 	orrseq	r0, r3, #0, 14
     898:	05240000 	streq	r0, [r4, #-0]!
     89c:	00014c0f 	andeq	r4, r1, pc, lsl #24
     8a0:	03fb0800 	mvnseq	r0, #0, 16
     8a4:	10050000 	andne	r0, r5, r0
     8a8:	000000c2 	andeq	r0, r0, r2, asr #1
     8ac:	04320800 	ldrteq	r0, [r2], #-2048	; 0xfffff800
     8b0:	11050000 	mrsne	r0, (UNDEF: 5)
     8b4:	0000002f 	andeq	r0, r0, pc, lsr #32
     8b8:	04380804 	ldrteq	r0, [r8], #-2052	; 0xfffff7fc
     8bc:	11050000 	mrsne	r0, (UNDEF: 5)
     8c0:	0000002f 	andeq	r0, r0, pc, lsr #32
     8c4:	02de0808 	sbcseq	r0, lr, #8, 16	; 0x80000
     8c8:	12050000 	andne	r0, r5, #0
     8cc:	0000002f 	andeq	r0, r0, pc, lsr #32
     8d0:	0371080c 	cmneq	r1, #12, 16	; 0xc0000
     8d4:	12050000 	andne	r0, r5, #0
     8d8:	0000002f 	andeq	r0, r0, pc, lsr #32
     8dc:	03a90810 			; <UNDEFINED> instruction: 0x03a90810
     8e0:	13050000 	movwne	r0, #20480	; 0x5000
     8e4:	0000015d 	andeq	r0, r0, sp, asr r1
     8e8:	07850814 	usada8eq	r5, r4, r8, r0
     8ec:	14050000 	strne	r0, [r5], #-0
     8f0:	0000015d 	andeq	r0, r0, sp, asr r1
     8f4:	02080818 	andeq	r0, r8, #24, 16	; 0x180000
     8f8:	15050000 	strne	r0, [r5, #-0]
     8fc:	0000015d 	andeq	r0, r0, sp, asr r1
     900:	03ae081c 			; <UNDEFINED> instruction: 0x03ae081c
     904:	16050000 	strne	r0, [r5], -r0
     908:	00000178 	andeq	r0, r0, r8, ror r1
     90c:	570b0020 	strpl	r0, [fp, -r0, lsr #32]
     910:	0c000001 	stceq	0, cr0, [r0], {1}
     914:	00000157 	andeq	r0, r0, r7, asr r1
     918:	d3040900 	movwle	r0, #18688	; 0x4900
     91c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     920:	00014c04 	andeq	r4, r1, r4, lsl #24
     924:	01780b00 	cmneq	r8, r0, lsl #22
     928:	570c0000 	strpl	r0, [ip, -r0]
     92c:	0c000001 	stceq	0, cr0, [r0], {1}
     930:	0000002f 	andeq	r0, r0, pc, lsr #32
     934:	00002f0c 	andeq	r2, r0, ip, lsl #30
     938:	04090000 	streq	r0, [r9], #-0
     93c:	00000163 	andeq	r0, r0, r3, ror #2
     940:	0002d00a 	andeq	sp, r2, sl
     944:	d3170500 	tstle	r7, #0, 10
     948:	0a000000 	beq	950 <startup-0x1ffff6b0>
     94c:	000002cf 	andeq	r0, r0, pc, asr #5
     950:	01571705 	cmpeq	r7, r5, lsl #14
     954:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
     958:	01000005 	tsteq	r0, r5
     95c:	00085493 	muleq	r8, r3, r4
     960:	00002e20 	andeq	r2, r0, r0, lsr #28
     964:	b89c0100 	ldmlt	ip, {r8}
     968:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     96c:	006a626f 	rsbeq	r6, sl, pc, ror #4
     970:	01899301 	orreq	r9, r9, r1, lsl #6
     974:	91020000 	mrsls	r0, (UNDEF: 2)
     978:	6d0f0074 	stcvs	0, cr0, [pc, #-464]	; 7b0 <startup-0x1ffff850>
     97c:	01000004 	tsteq	r0, r4
     980:	0001897b 	andeq	r8, r1, fp, ror r9
     984:	0007cc00 	andeq	ip, r7, r0, lsl #24
     988:	00008820 	andeq	r8, r0, r0, lsr #16
     98c:	fc9c0100 	ldc2	1, cr0, [ip], {0}
     990:	06000001 	streq	r0, [r0], -r1
     994:	000005aa 	andeq	r0, r0, sl, lsr #11
     998:	00b77c01 	adcseq	r7, r7, r1, lsl #24
     99c:	91020000 	mrsls	r0, (UNDEF: 2)
     9a0:	0596066c 	ldreq	r0, [r6, #1644]	; 0x66c
     9a4:	82010000 	andhi	r0, r1, #0
     9a8:	000000c2 	andeq	r0, r0, r2, asr #1
     9ac:	06749102 	ldrbteq	r9, [r4], -r2, lsl #2
     9b0:	00000472 	andeq	r0, r0, r2, ror r4
     9b4:	017e8601 	cmneq	lr, r1, lsl #12
     9b8:	91020000 	mrsls	r0, (UNDEF: 2)
     9bc:	170f0048 	strne	r0, [pc, -r8, asr #32]
     9c0:	01000005 	tsteq	r0, r5
     9c4:	00018963 	andeq	r8, r1, r3, ror #18
     9c8:	00074400 	andeq	r4, r7, r0, lsl #8
     9cc:	00008820 	andeq	r8, r0, r0, lsr #16
     9d0:	409c0100 	addsmi	r0, ip, r0, lsl #2
     9d4:	06000002 	streq	r0, [r0], -r2
     9d8:	00000561 	andeq	r0, r0, r1, ror #10
     9dc:	00b76401 	adcseq	r6, r7, r1, lsl #8
     9e0:	91020000 	mrsls	r0, (UNDEF: 2)
     9e4:	0503066c 	streq	r0, [r3, #-1644]	; 0xfffff994
     9e8:	6a010000 	bvs	409f0 <startup-0x1ffbf610>
     9ec:	000000c2 	andeq	r0, r0, r2, asr #1
     9f0:	06749102 	ldrbteq	r9, [r4], -r2, lsl #2
     9f4:	0000051c 	andeq	r0, r0, ip, lsl r5
     9f8:	017e6e01 	cmneq	lr, r1, lsl #28
     9fc:	91020000 	mrsls	r0, (UNDEF: 2)
     a00:	f70f0048 			; <UNDEFINED> instruction: 0xf70f0048
     a04:	01000004 	tsteq	r0, r4
     a08:	00018949 	andeq	r8, r1, r9, asr #18
     a0c:	0006bc00 	andeq	fp, r6, r0, lsl #24
     a10:	00008820 	andeq	r8, r0, r0, lsr #16
     a14:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
     a18:	06000002 	streq	r0, [r0], -r2
     a1c:	00000579 	andeq	r0, r0, r9, ror r5
     a20:	00b74a01 	adcseq	r4, r7, r1, lsl #20
     a24:	91020000 	mrsls	r0, (UNDEF: 2)
     a28:	0477066c 	ldrbteq	r0, [r7], #-1644	; 0xfffff994
     a2c:	50010000 	andpl	r0, r1, r0
     a30:	000000c2 	andeq	r0, r0, r2, asr #1
     a34:	06749102 	ldrbteq	r9, [r4], -r2, lsl #2
     a38:	000004fc 	strdeq	r0, [r0], -ip
     a3c:	017e5601 	cmneq	lr, r1, lsl #12
     a40:	91020000 	mrsls	r0, (UNDEF: 2)
     a44:	5d100048 	ldcpl	0, cr0, [r0, #-288]	; 0xfffffee0
     a48:	01000004 	tsteq	r0, r4
     a4c:	0006a845 	andeq	sl, r6, r5, asr #16
     a50:	00001420 	andeq	r1, r0, r0, lsr #8
     a54:	be9c0100 	fmllte	f0, f4, f0
     a58:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     a5c:	45010070 	strmi	r0, [r1, #-112]	; 0xffffff90
     a60:	00000189 	andeq	r0, r0, r9, lsl #3
     a64:	0e749102 	expeqs	f1, f2
     a68:	45010078 	strmi	r0, [r1, #-120]	; 0xffffff88
     a6c:	0000002f 	andeq	r0, r0, pc, lsr #32
     a70:	0e709102 	expeqs	f1, f2
     a74:	45010079 	strmi	r0, [r1, #-121]	; 0xffffff87
     a78:	0000002f 	andeq	r0, r0, pc, lsr #32
     a7c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     a80:	0005e910 	andeq	lr, r5, r0, lsl r9
     a84:	98410100 	stmdals	r1, {r8}^
     a88:	10200006 	eorne	r0, r0, r6
     a8c:	01000000 	mrseq	r0, (UNDEF: 0)
     a90:	0002e09c 	muleq	r2, ip, r0
     a94:	00700e00 	rsbseq	r0, r0, r0, lsl #28
     a98:	01894101 	orreq	r4, r9, r1, lsl #2
     a9c:	91020000 	mrsls	r0, (UNDEF: 2)
     aa0:	21100074 	tstcs	r0, r4, ror r0
     aa4:	01000005 	tsteq	r0, r5
     aa8:	0006783c 	andeq	r7, r6, ip, lsr r8
     aac:	00002020 	andeq	r2, r0, r0, lsr #32
     ab0:	1a9c0100 	bne	fe700eb8 <systick_flag+0xde6ff754>
     ab4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     ab8:	3c010070 	stccc	0, cr0, [r1], {112}	; 0x70
     abc:	00000189 	andeq	r0, r0, r9, lsl #3
     ac0:	0e749102 	expeqs	f1, f2
     ac4:	3c010078 	stccc	0, cr0, [r1], {120}	; 0x78
     ac8:	0000002f 	andeq	r0, r0, pc, lsr #32
     acc:	0e709102 	expeqs	f1, f2
     ad0:	3c010079 	stccc	0, cr0, [r1], {121}	; 0x79
     ad4:	0000002f 	andeq	r0, r0, pc, lsr #32
     ad8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     adc:	0005390d 	andeq	r3, r5, sp, lsl #18
     ae0:	da260100 	ble	980ee8 <startup-0x1f67f118>
     ae4:	9e200005 	cdpls	0, 2, cr0, cr0, cr5, {0}
     ae8:	01000000 	mrseq	r0, (UNDEF: 0)
     aec:	00033c9c 	muleq	r3, ip, ip
     af0:	00700e00 	rsbseq	r0, r0, r0, lsl #28
     af4:	01892601 	orreq	r2, r9, r1, lsl #12
     af8:	91020000 	mrsls	r0, (UNDEF: 2)
     afc:	d50d0074 	strle	r0, [sp, #-116]	; 0xffffff8c
     b00:	01000005 	tsteq	r0, r5
     b04:	0005b822 	andeq	fp, r5, r2, lsr #16
     b08:	00002220 	andeq	r2, r0, r0, lsr #4
     b0c:	5e9c0100 	fmlple	f0, f4, f0
     b10:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     b14:	22010070 	andcs	r0, r1, #112	; 0x70
     b18:	00000189 	andeq	r0, r0, r9, lsl #3
     b1c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     b20:	0005c20d 	andeq	ip, r5, sp, lsl #4
     b24:	961e0100 	ldrls	r0, [lr], -r0, lsl #2
     b28:	22200005 	eorcs	r0, r0, #5
     b2c:	01000000 	mrseq	r0, (UNDEF: 0)
     b30:	0003809c 	muleq	r3, ip, r0
     b34:	00700e00 	rsbseq	r0, r0, r0, lsl #28
     b38:	01891e01 	orreq	r1, r9, r1, lsl #28
     b3c:	91020000 	mrsls	r0, (UNDEF: 2)
     b40:	6d0d0074 	stcvs	0, cr0, [sp, #-464]	; 0xfffffe30
     b44:	01000005 	tsteq	r0, r5
     b48:	0004bc09 	andeq	fp, r4, r9, lsl #24
     b4c:	0000da20 	andeq	sp, r0, r0, lsr #20
     b50:	309c0100 	addscc	r0, ip, r0, lsl #2
     b54:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     b58:	09010073 	stmdbeq	r1, {r0, r1, r4, r5, r6}
     b5c:	00000430 	andeq	r0, r0, r0, lsr r4
     b60:	0e5c9102 	logeqe	f1, f2
     b64:	09010078 	stmdbeq	r1, {r3, r4, r5, r6}
     b68:	0000002f 	andeq	r0, r0, pc, lsr #32
     b6c:	0e589102 	logeqe	f1, f2
     b70:	09010079 	stmdbeq	r1, {r0, r3, r4, r5, r6}
     b74:	0000002f 	andeq	r0, r0, pc, lsr #32
     b78:	0e549102 	logeqs	f1, f2
     b7c:	00746573 	rsbseq	r6, r4, r3, ror r5
     b80:	002f0901 	eoreq	r0, pc, r1, lsl #18
     b84:	91020000 	mrsls	r0, (UNDEF: 2)
     b88:	05870650 	streq	r0, [r7, #1616]	; 0x650
     b8c:	0a010000 	beq	40b94 <startup-0x1ffbf46c>
     b90:	0000002f 	andeq	r0, r0, pc, lsr #32
     b94:	11749102 	cmnne	r4, r2, lsl #2
     b98:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     b9c:	0000009e 	muleq	r0, lr, r0
     ba0:	01006912 	tsteq	r0, r2, lsl r9
     ba4:	00002f12 	andeq	r2, r0, r2, lsl pc
     ba8:	70910200 	addsvc	r0, r1, r0, lsl #4
     bac:	0004f611 	andeq	pc, r4, r1, lsl r6	; <UNPREDICTABLE>
     bb0:	00008620 	andeq	r8, r0, r0, lsr #12
     bb4:	006a1200 	rsbeq	r1, sl, r0, lsl #4
     bb8:	002f1301 	eoreq	r1, pc, r1, lsl #6
     bbc:	91020000 	mrsls	r0, (UNDEF: 2)
     bc0:	04fc116c 	ldrbteq	r1, [ip], #364	; 0x16c
     bc4:	00722000 	rsbseq	r2, r2, r0
     bc8:	8d060000 	stchi	0, cr0, [r6, #-0]
     bcc:	01000004 	tsteq	r0, r4
     bd0:	00002114 	andeq	r2, r0, r4, lsl r1
     bd4:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     bd8:	00051411 	andeq	r1, r5, r1, lsl r4
     bdc:	00005a20 	andeq	r5, r0, r0, lsr #20
     be0:	006b1200 	rsbeq	r1, fp, r0, lsl #4
     be4:	002f1501 	eoreq	r1, pc, r1, lsl #10
     be8:	91020000 	mrsls	r0, (UNDEF: 2)
     bec:	00000068 	andeq	r0, r0, r8, rrx
     bf0:	04090000 	streq	r0, [r9], #-0
     bf4:	000000b7 	strheq	r0, [r0], -r7
     bf8:	0005b613 	andeq	fp, r5, r3, lsl r6
     bfc:	90030100 	andls	r0, r3, r0, lsl #2
     c00:	2c200004 	stccs	0, cr0, [r0], #-16
     c04:	01000000 	mrseq	r0, (UNDEF: 0)
     c08:	00730e9c 			; <UNDEFINED> instruction: 0x00730e9c
     c0c:	04300301 	ldrteq	r0, [r0], #-769	; 0xfffffcff
     c10:	91020000 	mrsls	r0, (UNDEF: 2)
     c14:	072a1474 			; <UNDEFINED> instruction: 0x072a1474
     c18:	03010000 	movweq	r0, #4096	; 0x1000
     c1c:	000000b1 	strheq	r0, [r0], -r1
     c20:	14709102 	ldrbtne	r9, [r0], #-258	; 0xfffffefe
     c24:	000001ef 	andeq	r0, r0, pc, ror #3
     c28:	002f0301 	eoreq	r0, pc, r1, lsl #6
     c2c:	91020000 	mrsls	r0, (UNDEF: 2)
     c30:	02fa146c 	rscseq	r1, sl, #108, 8	; 0x6c000000
     c34:	03010000 	movweq	r0, #4096	; 0x1000
     c38:	0000002f 	andeq	r0, r0, pc, lsr #32
     c3c:	00689102 	rsbeq	r9, r8, r2, lsl #2
     c40:	0001cf00 	andeq	ip, r1, r0, lsl #30
     c44:	c3000400 	movwgt	r0, #1024	; 0x400
     c48:	04000002 	streq	r0, [r0], #-2
     c4c:	00007101 	andeq	r7, r0, r1, lsl #2
     c50:	06050c00 	streq	r0, [r5], -r0, lsl #24
     c54:	08840000 	stmeq	r4, {}	; <UNPREDICTABLE>
     c58:	01782000 	cmneq	r8, r0
     c5c:	02e40000 	rsceq	r0, r4, #0
     c60:	02020000 	andeq	r0, r2, #0
     c64:	00420c02 	subeq	r0, r2, r2, lsl #24
     c68:	00030000 	andeq	r0, r3, r0
     c6c:	02000000 	andeq	r0, r0, #0
     c70:	0000420d 	andeq	r4, r0, sp, lsl #4
     c74:	8b030000 	blhi	c0c7c <startup-0x1ff3f384>
     c78:	02000003 	andeq	r0, r0, #3
     c7c:	0000420e 	andeq	r4, r0, lr, lsl #4
     c80:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
     c84:	02890801 	addeq	r0, r9, #65536	; 0x10000
     c88:	04050000 	streq	r0, [r5], #-0
     c8c:	00620a02 	rsbeq	r0, r2, r2, lsl #20
     c90:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
     c94:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
     c98:	0000620b 	andeq	r6, r0, fp, lsl #4
     c9c:	00210700 	eoreq	r0, r1, r0, lsl #14
     ca0:	04000000 	streq	r0, [r0], #-0
     ca4:	035f0704 	cmpeq	pc, #4, 14	; 0x100000
     ca8:	02020000 	andeq	r0, r2, #0
     cac:	008a1302 	addeq	r1, sl, r2, lsl #6
     cb0:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
     cb4:	02000004 	andeq	r0, r0, #4
     cb8:	00004214 	andeq	r4, r0, r4, lsl r2
     cbc:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
     cc0:	02000000 	andeq	r0, r0, #0
     cc4:	00004215 	andeq	r4, r0, r5, lsl r2
     cc8:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     ccc:	a3110204 	tstge	r1, #4, 4	; 0x40000000
     cd0:	06000000 	streq	r0, [r0], -r0
     cd4:	0072646f 	rsbseq	r6, r2, pc, ror #8
     cd8:	00621202 	rsbeq	r1, r2, r2, lsl #4
     cdc:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	00030108 	andeq	r0, r3, r8, lsl #2
     ce8:	04021800 	streq	r1, [r2], #-2048	; 0xfffff800
     cec:	000000ec 	andeq	r0, r0, ip, ror #1
     cf0:	0003ec03 	andeq	lr, r3, r3, lsl #24
     cf4:	62050200 	andvs	r0, r5, #0, 4
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	00015103 	andeq	r5, r1, r3, lsl #2
     d00:	62060200 	andvs	r0, r6, #0, 4
     d04:	04000000 	streq	r0, [r0], #-0
     d08:	00023403 	andeq	r3, r2, r3, lsl #8
     d0c:	62070200 	andvs	r0, r7, #0, 4
     d10:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     d14:	0003d303 	andeq	sp, r3, r3, lsl #6
     d18:	62080200 	andvs	r0, r8, #0, 4
     d1c:	0c000000 	stceq	0, cr0, [r0], {-0}
     d20:	00004909 	andeq	r4, r0, r9, lsl #18
     d24:	8a091000 	bhi	244d2c <startup-0x1fdbb2d4>
     d28:	14000000 	strne	r0, [r0], #-0
     d2c:	036c0a00 	cmneq	ip, #0, 20
     d30:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     d34:	000000a3 	andeq	r0, r0, r3, lsr #1
     d38:	0000420b 	andeq	r4, r0, fp, lsl #4
     d3c:	00010d00 	andeq	r0, r1, r0, lsl #26
     d40:	010d0c00 	tsteq	sp, r0, lsl #24
     d44:	0c030000 	stceq	0, cr0, [r3], {-0}
     d48:	0000010d 	andeq	r0, r0, sp, lsl #2
     d4c:	04040003 	streq	r0, [r4], #-3
     d50:	00010907 	andeq	r0, r1, r7, lsl #18
     d54:	656b0d00 	strbvs	r0, [fp, #-3328]!	; 0xfffff300
     d58:	06030079 			; <UNDEFINED> instruction: 0x06030079
     d5c:	000000f7 	strdeq	r0, [r0], -r7
     d60:	17540305 	ldrbne	r0, [r4, -r5, lsl #6]
     d64:	700e2000 	andvc	r2, lr, r0
     d68:	01000006 	tsteq	r0, r6
     d6c:	00014b28 	andeq	r4, r1, r8, lsr #22
     d70:	0009a800 	andeq	sl, r9, r0, lsl #16
     d74:	00005420 	andeq	r5, r0, r0, lsr #8
     d78:	4b9c0100 	blmi	fe701180 <systick_flag+0xde6ffa1c>
     d7c:	0d000001 	stceq	0, cr0, [r0, #-4]
     d80:	2a010063 	bcs	40f14 <startup-0x1ffbf0ec>
     d84:	00000042 	andeq	r0, r0, r2, asr #32
     d88:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d8c:	6905040f 	stmdbvs	r5, {r0, r1, r2, r3, sl}
     d90:	1000746e 	andne	r7, r0, lr, ror #8
     d94:	000005f9 	strdeq	r0, [r0], -r9
     d98:	09501e01 	ldmdbeq	r0, {r0, r9, sl, fp, ip}^
     d9c:	00582000 	subseq	r2, r8, r0
     da0:	9c010000 	stcls	0, cr0, [r1], {-0}
     da4:	00000176 	andeq	r0, r0, r6, ror r1
     da8:	776f7211 			; <UNDEFINED> instruction: 0x776f7211
     dac:	421e0100 	andsmi	r0, lr, #0, 2
     db0:	02000000 	andeq	r0, r0, #0
     db4:	12007791 	andne	r7, r0, #38010880	; 0x2440000
     db8:	0000024a 	andeq	r0, r0, sl, asr #4
     dbc:	00420d01 	subeq	r0, r2, r1, lsl #26
     dc0:	08e40000 	stmiaeq	r4!, {}^	; <UNPREDICTABLE>
     dc4:	006c2000 	rsbeq	r2, ip, r0
     dc8:	9c010000 	stcls	0, cr0, [r1], {-0}
     dcc:	000001c1 	andeq	r0, r0, r1, asr #3
     dd0:	776f7213 			; <UNDEFINED> instruction: 0x776f7213
     dd4:	420e0100 	andmi	r0, lr, #0, 2
     dd8:	14000000 	strne	r0, [r0], #-0
     ddc:	00000669 	andeq	r0, r0, r9, ror #12
     de0:	00420e01 	subeq	r0, r2, r1, lsl #28
     de4:	91020000 	mrsls	r0, (UNDEF: 2)
     de8:	08ea1576 	stmiaeq	sl!, {r1, r2, r4, r5, r6, r8, sl, ip}^
     dec:	00522000 	subseq	r2, r2, r0
     df0:	720d0000 	andvc	r0, sp, #0
     df4:	0100776f 	tsteq	r0, pc, ror #14
     df8:	00004210 	andeq	r4, r0, r0, lsl r2
     dfc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e00:	3a160000 	bcc	580e08 <startup-0x1fa7f1f8>
     e04:	01000003 	tsteq	r0, r3
     e08:	00088403 	andeq	r8, r8, r3, lsl #8
     e0c:	00006020 	andeq	r6, r0, r0, lsr #32
     e10:	009c0100 	addseq	r0, ip, r0, lsl #2
     e14:	000005ac 	andeq	r0, r0, ip, lsr #11
     e18:	040c0004 	streq	r0, [ip], #-4
     e1c:	01040000 	mrseq	r0, (UNDEF: 4)
     e20:	00000071 	andeq	r0, r0, r1, ror r0
     e24:	0006850c 	andeq	r8, r6, ip, lsl #10
     e28:	0009fc00 	andeq	pc, r9, r0, lsl #24
     e2c:	00074820 	andeq	r4, r7, r0, lsr #16
     e30:	0003d900 	andeq	sp, r3, r0, lsl #18
     e34:	02020200 	andeq	r0, r2, #0, 4
     e38:	0000420c 	andeq	r4, r0, ip, lsl #4
     e3c:	00000300 	andeq	r0, r0, r0, lsl #6
     e40:	0d020000 	stceq	0, cr0, [r2, #-0]
     e44:	00000042 	andeq	r0, r0, r2, asr #32
     e48:	038b0300 	orreq	r0, fp, #0, 6
     e4c:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     e50:	00000042 	andeq	r0, r0, r2, asr #32
     e54:	01040001 	tsteq	r4, r1
     e58:	00028908 	andeq	r8, r2, r8, lsl #18
     e5c:	02040500 	andeq	r0, r4, #0, 10
     e60:	0000620a 	andeq	r6, r0, sl, lsl #4
     e64:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
     e68:	0b020072 	bleq	81038 <startup-0x1ff7efc8>
     e6c:	00000062 	andeq	r0, r0, r2, rrx
     e70:	00002107 	andeq	r2, r0, r7, lsl #2
     e74:	04040000 	streq	r0, [r4], #-0
     e78:	00035f07 	andeq	r5, r3, r7, lsl #30
     e7c:	02020200 	andeq	r0, r2, #0, 4
     e80:	00008a13 	andeq	r8, r0, r3, lsl sl
     e84:	043e0300 	ldrteq	r0, [lr], #-768	; 0xfffffd00
     e88:	14020000 	strne	r0, [r2], #-0
     e8c:	00000042 	andeq	r0, r0, r2, asr #32
     e90:	00690300 	rsbeq	r0, r9, r0, lsl #6
     e94:	15020000 	strne	r0, [r2, #-0]
     e98:	00000042 	andeq	r0, r0, r2, asr #32
     e9c:	04050001 	streq	r0, [r5], #-1
     ea0:	00a31102 	adceq	r1, r3, r2, lsl #2
     ea4:	6f060000 	svcvs	0x00060000
     ea8:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
     eac:	00006212 	andeq	r6, r0, r2, lsl r2
     eb0:	00690700 	rsbeq	r0, r9, r0, lsl #14
     eb4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     eb8:	00000301 	andeq	r0, r0, r1, lsl #6
     ebc:	ec040218 	sfm	f0, 4, [r4], {24}
     ec0:	03000000 	movweq	r0, #0
     ec4:	000003ec 	andeq	r0, r0, ip, ror #7
     ec8:	00620502 	rsbeq	r0, r2, r2, lsl #10
     ecc:	03000000 	movweq	r0, #0
     ed0:	00000151 	andeq	r0, r0, r1, asr r1
     ed4:	00620602 	rsbeq	r0, r2, r2, lsl #12
     ed8:	03040000 	movweq	r0, #16384	; 0x4000
     edc:	00000234 	andeq	r0, r0, r4, lsr r2
     ee0:	00620702 	rsbeq	r0, r2, r2, lsl #14
     ee4:	03080000 	movweq	r0, #32768	; 0x8000
     ee8:	000003d3 	ldrdeq	r0, [r0], -r3
     eec:	00620802 	rsbeq	r0, r2, r2, lsl #16
     ef0:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     ef4:	00000049 	andeq	r0, r0, r9, asr #32
     ef8:	008a0910 	addeq	r0, sl, r0, lsl r9
     efc:	00140000 	andseq	r0, r4, r0
     f00:	00036c0a 	andeq	r6, r3, sl, lsl #24
     f04:	a3180200 	tstge	r8, #0, 4
     f08:	0a000000 	beq	f10 <startup-0x1ffff0f0>
     f0c:	000007bd 			; <UNDEFINED> instruction: 0x000007bd
     f10:	00421803 	subeq	r1, r2, r3, lsl #16
     f14:	3a080000 	bcc	200f1c <startup-0x1fdff0e4>
     f18:	02000007 	andeq	r0, r0, #7
     f1c:	01231a03 			; <UNDEFINED> instruction: 0x01231a03
     f20:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
     f24:	f71b0300 			; <UNDEFINED> instruction: 0xf71b0300
     f28:	00000000 	andeq	r0, r0, r0
     f2c:	0300790b 	movweq	r7, #2315	; 0x90b
     f30:	0000f71c 	andeq	pc, r0, ip, lsl r7	; <UNPREDICTABLE>
     f34:	0a000100 	beq	133c <startup-0x1fffecc4>
     f38:	00000741 	andeq	r0, r0, r1, asr #14
     f3c:	01021d03 	tsteq	r2, r3, lsl #26
     f40:	b30c0000 	movwlt	r0, #49152	; 0xc000
     f44:	0c000007 	stceq	0, cr0, [r0], {7}
     f48:	6b1f0302 	blvs	7c1b58 <startup-0x1f83e4a8>
     f4c:	03000001 	movweq	r0, #1
     f50:	0000084e 	andeq	r0, r0, lr, asr #16
     f54:	016b2003 	cmneq	fp, r3
     f58:	03000000 	movweq	r0, #0
     f5c:	000006f1 	strdeq	r0, [r0], -r1
     f60:	016b2103 	cmneq	fp, r3, lsl #2
     f64:	03040000 	movweq	r0, #16384	; 0x4000
     f68:	000006f8 	strdeq	r0, [r0], -r8
     f6c:	016b2203 	cmneq	fp, r3, lsl #4
     f70:	0b080000 	bleq	200f78 <startup-0x1fdff088>
     f74:	03007870 	movweq	r7, #2160	; 0x870
     f78:	00017223 	andeq	r7, r1, r3, lsr #4
     f7c:	0d000c00 	stceq	12, cr0, [r0, #-0]
     f80:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     f84:	230e0074 	movwcs	r0, #57460	; 0xe074
     f88:	82000001 	andhi	r0, r0, #1
     f8c:	0f000001 	svceq	0x00000001
     f90:	00000182 	andeq	r0, r0, r2, lsl #3
     f94:	040400ff 	streq	r0, [r4], #-255	; 0xffffff01
     f98:	00010907 	andeq	r0, r1, r7, lsl #18
     f9c:	067b0a00 	ldrbteq	r0, [fp], -r0, lsl #20
     fa0:	24030000 	strcs	r0, [r3], #-0
     fa4:	00000194 	muleq	r0, r4, r1
     fa8:	012e0410 			; <UNDEFINED> instruction: 0x012e0410
     fac:	3c080000 	stccc	0, cr0, [r8], {-0}
     fb0:	24000008 	strcs	r0, [r0], #-8
     fb4:	02132603 	andseq	r2, r3, #3145728	; 0x300000
     fb8:	670b0000 	strvs	r0, [fp, -r0]
     fbc:	03006f65 	movweq	r6, #3941	; 0xf65
     fc0:	00018927 	andeq	r8, r1, r7, lsr #18
     fc4:	32030000 	andcc	r0, r3, #0
     fc8:	03000004 	movweq	r0, #4
     fcc:	00016b28 	andeq	r6, r1, r8, lsr #22
     fd0:	38030400 	stmdacc	r3, {sl}
     fd4:	03000004 	movweq	r0, #4
     fd8:	00016b28 	andeq	r6, r1, r8, lsr #22
     fdc:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
     fe0:	03000002 	movweq	r0, #2
     fe4:	00016b29 	andeq	r6, r1, r9, lsr #22
     fe8:	71030c00 	tstvc	r3, r0, lsl #24
     fec:	03000003 	movweq	r0, #3
     ff0:	00016b29 	andeq	r6, r1, r9, lsr #22
     ff4:	a9031000 	stmdbge	r3, {ip}
     ff8:	03000003 	movweq	r0, #3
     ffc:	0002242a 	andeq	r2, r2, sl, lsr #8
    1000:	85031400 	strhi	r1, [r3, #-1024]	; 0xfffffc00
    1004:	03000007 	movweq	r0, #7
    1008:	0002242b 	andeq	r2, r2, fp, lsr #8
    100c:	08031800 	stmdaeq	r3, {fp, ip}
    1010:	03000002 	movweq	r0, #2
    1014:	0002242c 	andeq	r2, r2, ip, lsr #8
    1018:	ae031c00 	cdpge	12, 0, cr1, cr3, cr0, {0}
    101c:	03000003 	movweq	r0, #3
    1020:	00023f2d 	andeq	r3, r2, sp, lsr #30
    1024:	11002000 	mrsne	r2, (UNDEF: 0)
    1028:	0000021e 	andeq	r0, r0, lr, lsl r2
    102c:	00021e12 	andeq	r1, r2, r2, lsl lr
    1030:	04100000 	ldreq	r0, [r0], #-0
    1034:	0000019a 	muleq	r0, sl, r1
    1038:	02130410 	andseq	r0, r3, #16, 8	; 0x10000000
    103c:	3f110000 	svccc	0x00110000
    1040:	12000002 	andne	r0, r0, #2
    1044:	0000021e 	andeq	r0, r0, lr, lsl r2
    1048:	00016b12 	andeq	r6, r1, r2, lsl fp
    104c:	016b1200 	cmneq	fp, r0, lsl #4
    1050:	10000000 	andne	r0, r0, r0
    1054:	00022a04 	andeq	r2, r2, r4, lsl #20
    1058:	087a0a00 	ldmdaeq	sl!, {r9, fp}^
    105c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    1060:	0000021e 	andeq	r0, r0, lr, lsl r2
    1064:	0007c513 	andeq	ip, r7, r3, lsl r5
    1068:	011c0100 	tsteq	ip, r0, lsl #2
    106c:	20001124 	andcs	r1, r0, r4, lsr #2
    1070:	00000020 	andeq	r0, r0, r0, lsr #32
    1074:	05149c01 	ldreq	r9, [r4, #-3073]	; 0xfffff3ff
    1078:	01000008 	tsteq	r0, r8
    107c:	11040117 	tstne	r4, r7, lsl r1
    1080:	00202000 	eoreq	r2, r0, r0
    1084:	9c010000 	stcls	0, cr0, [r1], {-0}
    1088:	000002a2 	andeq	r0, r0, r2, lsr #5
    108c:	00055a15 	andeq	r5, r5, r5, lsl sl
    1090:	01170100 	tsteq	r7, r0, lsl #2
    1094:	00000245 	andeq	r0, r0, r5, asr #4
    1098:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    109c:	17010078 	smlsdxne	r1, r8, r0, r0
    10a0:	00016b01 	andeq	r6, r1, r1, lsl #22
    10a4:	70910200 	addsvc	r0, r1, r0, lsl #4
    10a8:	01007916 	tsteq	r0, r6, lsl r9
    10ac:	016b0117 	cmneq	fp, r7, lsl r1
    10b0:	91020000 	mrsls	r0, (UNDEF: 2)
    10b4:	5817006c 	ldmdapl	r7, {r2, r3, r5, r6}
    10b8:	01000008 	tsteq	r0, r8
    10bc:	10840107 	addne	r0, r4, r7, lsl #2
    10c0:	00802000 	addeq	r2, r0, r0
    10c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    10c8:	000002c8 	andeq	r0, r0, r8, asr #5
    10cc:	00055a15 	andeq	r5, r5, r5, lsl sl
    10d0:	01070100 	mrseq	r0, (UNDEF: 23)
    10d4:	00000245 	andeq	r0, r0, r5, asr #4
    10d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    10dc:	00082f17 	andeq	r2, r8, r7, lsl pc
    10e0:	01010100 	mrseq	r0, (UNDEF: 17)
    10e4:	20001020 	andcs	r1, r0, r0, lsr #32
    10e8:	00000064 	andeq	r0, r0, r4, rrx
    10ec:	03059c01 	movweq	r9, #23553	; 0x5c01
    10f0:	5a150000 	bpl	5410f8 <startup-0x1fabef08>
    10f4:	01000005 	tsteq	r0, r5
    10f8:	02450101 	subeq	r0, r5, #1073741824	; 0x40000000
    10fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1100:	1028186c 	eorne	r1, r8, ip, ror #16
    1104:	00542000 	subseq	r2, r4, r0
    1108:	69190000 	ldmdbvs	r9, {}	; <UNPREDICTABLE>
    110c:	01020100 	mrseq	r0, (UNDEF: 18)
    1110:	0000016b 	andeq	r0, r0, fp, ror #2
    1114:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1118:	06ff1a00 	ldrbteq	r1, [pc], r0, lsl #20
    111c:	fb010000 	blx	41126 <startup-0x1ffbeeda>
    1120:	20000fbc 			; <UNDEFINED> instruction: 0x20000fbc
    1124:	00000064 	andeq	r0, r0, r4, rrx
    1128:	033f9c01 	teqeq	pc, #256	; 0x100
    112c:	5a1b0000 	bpl	6c1134 <startup-0x1f93eecc>
    1130:	01000005 	tsteq	r0, r5
    1134:	000245fb 	strdeq	r4, [r2], -fp
    1138:	6c910200 	lfmvs	f0, 4, [r1], {0}
    113c:	000fc418 	andeq	ip, pc, r8, lsl r4	; <UNPREDICTABLE>
    1140:	00005420 	andeq	r5, r0, r0, lsr #8
    1144:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    1148:	016bfc01 	msreq	SPSR_fxc, r1, lsl #24
    114c:	91020000 	mrsls	r0, (UNDEF: 2)
    1150:	1a000074 	bne	1328 <startup-0x1fffecd8>
    1154:	00000734 	andeq	r0, r0, r4, lsr r7
    1158:	0e16c301 	cdpeq	3, 1, cr12, cr6, cr1, {0}
    115c:	01a62000 			; <UNDEFINED> instruction: 0x01a62000
    1160:	9c010000 	stcls	0, cr0, [r1], {-0}
    1164:	000003c1 	andeq	r0, r0, r1, asr #7
    1168:	0100781d 	tsteq	r0, sp, lsl r8
    116c:	0000f7c3 	andeq	pc, r0, r3, asr #15
    1170:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    1174:	0100791d 	tsteq	r0, sp, lsl r9
    1178:	0000f7c3 	andeq	pc, r0, r3, asr #15
    117c:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    1180:	7465731d 	strbtvc	r7, [r5], #-797	; 0xfffffce3
    1184:	f7c30100 			; <UNDEFINED> instruction: 0xf7c30100
    1188:	02000000 	andeq	r0, r0, #0
    118c:	291e6591 	ldmdbcs	lr, {r0, r4, r7, r8, sl, sp, lr}
    1190:	01000008 	tsteq	r0, r8
    1194:	0000f7cf 	andeq	pc, r0, pc, asr #15
    1198:	6c910200 	lfmvs	f0, 4, [r1], {0}
    119c:	0007ed1e 	andeq	lr, r7, lr, lsl sp
    11a0:	f7d10100 			; <UNDEFINED> instruction: 0xf7d10100
    11a4:	02000000 	andeq	r0, r0, #0
    11a8:	471e6f91 			; <UNDEFINED> instruction: 0x471e6f91
    11ac:	01000007 	tsteq	r0, r7
    11b0:	0000f7e3 	andeq	pc, r0, r3, ror #15
    11b4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    11b8:	000abf1e 	andeq	fp, sl, lr, lsl pc
    11bc:	f7e40100 			; <UNDEFINED> instruction: 0xf7e40100
    11c0:	02000000 	andeq	r0, r0, #0
    11c4:	5e1e6d91 	mrcpl	13, 0, r6, cr14, cr1, {4}
    11c8:	01000007 	tsteq	r0, r7
    11cc:	0000f7f0 	strdeq	pc, [r0], -r0
    11d0:	6b910200 	blvs	fe4419d8 <systick_flag+0xde440274>
    11d4:	08821a00 	stmeq	r2, {r9, fp, ip}
    11d8:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    11dc:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
    11e0:	00000066 	andeq	r0, r0, r6, rrx
    11e4:	04079c01 	streq	r9, [r7], #-3073	; 0xfffff3ff
    11e8:	b6180000 	ldrlt	r0, [r8], -r0
    11ec:	5820000d 	stmdapl	r0!, {r0, r2, r3}
    11f0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    11f4:	0000072f 	andeq	r0, r0, pc, lsr #14
    11f8:	00f7b901 	rscseq	fp, r7, r1, lsl #18
    11fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1200:	0dda1877 	ldcleq	8, cr1, [sl, #476]	; 0x1dc
    1204:	00222000 	eoreq	r2, r2, r0
    1208:	611c0000 	tstvs	ip, r0
    120c:	01006464 	tsteq	r0, r4, ror #8
    1210:	0000f7bd 			; <UNDEFINED> instruction: 0x0000f7bd
    1214:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1218:	1f000000 	svcne	0x00000000
    121c:	0000078b 	andeq	r0, r0, fp, lsl #15
    1220:	0d54a301 	ldcleq	3, cr10, [r4, #-4]
    1224:	005c2000 	subseq	r2, ip, r0
    1228:	9c010000 	stcls	0, cr0, [r1], {-0}
    122c:	00071d20 	andeq	r1, r7, r0, lsr #26
    1230:	f79e0100 			; <UNDEFINED> instruction: 0xf79e0100
    1234:	2a000000 	bcs	123c <startup-0x1fffedc4>
    1238:	2a20000d 	bcs	801274 <startup-0x1f7fed8c>
    123c:	01000000 	mrseq	r0, (UNDEF: 0)
    1240:	0004409c 	muleq	r4, ip, r0
    1244:	0abf1b00 	beq	fefc7e4c <systick_flag+0xdefc66e8>
    1248:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    124c:	000000f7 	strdeq	r0, [r0], -r7
    1250:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1254:	0007f21a 	andeq	pc, r7, sl, lsl r2	; <UNPREDICTABLE>
    1258:	e4960100 	ldr	r0, [r6], #256	; 0x100
    125c:	4620000c 	strtmi	r0, [r0], -ip
    1260:	01000000 	mrseq	r0, (UNDEF: 0)
    1264:	0004729c 	muleq	r4, ip, r2
    1268:	072a1b00 	streq	r1, [sl, -r0, lsl #22]!
    126c:	96010000 	strls	r0, [r1], -r0
    1270:	000000f7 	strdeq	r0, [r0], -r7
    1274:	1b779102 	blne	1de5684 <startup-0x1e21a97c>
    1278:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    127c:	00f79601 	rscseq	r9, r7, r1, lsl #12
    1280:	91020000 	mrsls	r0, (UNDEF: 2)
    1284:	641a0076 	ldrvs	r0, [sl], #-118	; 0xffffff8a
    1288:	01000008 	tsteq	r0, r8
    128c:	000ca48f 	andeq	sl, ip, pc, lsl #9
    1290:	00004020 	andeq	r4, r0, r0, lsr #32
    1294:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    1298:	1b000004 	blne	12b0 <startup-0x1fffed50>
    129c:	00000872 	andeq	r0, r0, r2, ror r8
    12a0:	00f78f01 	rscseq	r8, r7, r1, lsl #30
    12a4:	91020000 	mrsls	r0, (UNDEF: 2)
    12a8:	0abf1b77 	beq	fefc808c <systick_flag+0xdefc6928>
    12ac:	8f010000 	svchi	0x00010000
    12b0:	000000f7 	strdeq	r0, [r0], -r7
    12b4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    12b8:	0007501a 	andeq	r5, r7, sl, lsl r0
    12bc:	24730100 	ldrbtcs	r0, [r3], #-256	; 0xffffff00
    12c0:	8020000c 	eorhi	r0, r0, ip
    12c4:	01000000 	mrseq	r0, (UNDEF: 0)
    12c8:	0004d69c 	muleq	r4, ip, r6
    12cc:	0a1f1b00 	beq	7c7ed4 <startup-0x1f83812c>
    12d0:	73010000 	movwvc	r0, #4096	; 0x1000
    12d4:	000000f7 	strdeq	r0, [r0], -r7
    12d8:	1b779102 	blne	1de56e8 <startup-0x1e21a918>
    12dc:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    12e0:	00f77301 	rscseq	r7, r7, r1, lsl #6
    12e4:	91020000 	mrsls	r0, (UNDEF: 2)
    12e8:	41200076 			; <UNDEFINED> instruction: 0x41200076
    12ec:	01000008 	tsteq	r0, r8
    12f0:	0000f748 	andeq	pc, r0, r8, asr #14
    12f4:	000b9400 	andeq	r9, fp, r0, lsl #8
    12f8:	00009020 	andeq	r9, r0, r0, lsr #32
    12fc:	0b9c0100 	bleq	fe701704 <systick_flag+0xde6fffa0>
    1300:	1b000005 	blne	131c <startup-0x1fffece4>
    1304:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    1308:	00f74801 	rscseq	r4, r7, r1, lsl #16
    130c:	91020000 	mrsls	r0, (UNDEF: 2)
    1310:	56521c6f 	ldrbpl	r1, [r2], -pc, ror #24
    1314:	f7580100 			; <UNDEFINED> instruction: 0xf7580100
    1318:	02000000 	andeq	r0, r0, #0
    131c:	1a007791 	bne	1f168 <startup-0x1ffe0e98>
    1320:	00000816 	andeq	r0, r0, r6, lsl r8
    1324:	0b1e2601 	bleq	78ab30 <startup-0x1f8754d0>
    1328:	00762000 	rsbseq	r2, r6, r0
    132c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1330:	0000052f 	andeq	r0, r0, pc, lsr #10
    1334:	0007d91e 	andeq	sp, r7, lr, lsl r9
    1338:	f7270100 			; <UNDEFINED> instruction: 0xf7270100
    133c:	02000000 	andeq	r0, r0, #0
    1340:	1a007791 	bne	1f18c <startup-0x1ffe0e74>
    1344:	0000070b 	andeq	r0, r0, fp, lsl #14
    1348:	0ac41301 	beq	ff105f54 <systick_flag+0xdf1047f0>
    134c:	005a2000 	subseq	r2, sl, r0
    1350:	9c010000 	stcls	0, cr0, [r1], {-0}
    1354:	00000553 	andeq	r0, r0, r3, asr r5
    1358:	000abf1b 	andeq	fp, sl, fp, lsl pc
    135c:	f7130100 			; <UNDEFINED> instruction: 0xf7130100
    1360:	02000000 	andeq	r0, r0, #0
    1364:	21007791 			; <UNDEFINED> instruction: 0x21007791
    1368:	00000774 	andeq	r0, r0, r4, ror r7
    136c:	0a5c0b01 	beq	1703f78 <startup-0x1e8fc088>
    1370:	00682000 	rsbeq	r2, r8, r0
    1374:	9c010000 	stcls	0, cr0, [r1], {-0}
    1378:	00000583 	andeq	r0, r0, r3, lsl #11
    137c:	0100781d 	tsteq	r0, sp, lsl r8
    1380:	0000f70b 	andeq	pc, r0, fp, lsl #14
    1384:	6f910200 	svcvs	0x00910200
    1388:	0007631e 	andeq	r6, r7, lr, lsl r3
    138c:	f70d0100 			; <UNDEFINED> instruction: 0xf70d0100
    1390:	02000000 	andeq	r0, r0, #0
    1394:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
    1398:	0000079e 	muleq	r0, lr, r7
    139c:	09fc0301 	ldmibeq	ip!, {r0, r8, r9}^
    13a0:	00602000 	rsbeq	r2, r0, r0
    13a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    13a8:	0100781d 	tsteq	r0, sp, lsl r8
    13ac:	0000f703 	andeq	pc, r0, r3, lsl #14
    13b0:	6f910200 	svcvs	0x00910200
    13b4:	0007631e 	andeq	r6, r7, lr, lsl r3
    13b8:	f7050100 			; <UNDEFINED> instruction: 0xf7050100
    13bc:	02000000 	andeq	r0, r0, #0
    13c0:	00007791 	muleq	r0, r1, r7
    13c4:	000001e2 	andeq	r0, r0, r2, ror #3
    13c8:	061d0004 	ldreq	r0, [sp], -r4
    13cc:	01040000 	mrseq	r0, (UNDEF: 4)
    13d0:	00000071 	andeq	r0, r0, r1, ror r0
    13d4:	0009940c 	andeq	r9, r9, ip, lsl #8
    13d8:	00114400 	andseq	r4, r1, r0, lsl #8
    13dc:	00017820 	andeq	r7, r1, r0, lsr #16
    13e0:	0005b400 	andeq	fp, r5, r0, lsl #8
    13e4:	08010200 	stmdaeq	r1, {r9}
    13e8:	00000289 	andeq	r0, r0, r9, lsl #5
    13ec:	5f070402 	svcpl	0x00070402
    13f0:	03000003 	movweq	r0, #3
    13f4:	68070204 	stmdavs	r7, {r2, r9}
    13f8:	04000000 	streq	r0, [r0], #-0
    13fc:	00000936 	andeq	r0, r0, r6, lsr r9
    1400:	00210802 	eoreq	r0, r1, r2, lsl #16
    1404:	04000000 	streq	r0, [r0], #-0
    1408:	00000944 	andeq	r0, r0, r4, asr #18
    140c:	00210902 	eoreq	r0, r1, r2, lsl #18
    1410:	04010000 	streq	r0, [r1], #-0
    1414:	0000091a 	andeq	r0, r0, sl, lsl r9
    1418:	00210a02 	eoreq	r0, r1, r2, lsl #20
    141c:	04020000 	streq	r0, [r2], #-0
    1420:	0000094e 	andeq	r0, r0, lr, asr #18
    1424:	00210b02 	eoreq	r0, r1, r2, lsl #22
    1428:	00030000 	andeq	r0, r3, r0
    142c:	05020405 	streq	r0, [r2, #-1029]	; 0xfffffbfb
    1430:	00000081 	andeq	r0, r0, r1, lsl #1
    1434:	0008ec06 	andeq	lr, r8, r6, lsl #24
    1438:	28060200 	stmdacs	r6, {r9}
    143c:	07000000 	streq	r0, [r0, -r0]
    1440:	0000002f 	andeq	r0, r0, pc, lsr #32
    1444:	09580800 	ldmdbeq	r8, {fp}^
    1448:	02100000 	andseq	r0, r0, #0
    144c:	0000b804 	andeq	fp, r0, r4, lsl #16
    1450:	00680900 	rsbeq	r0, r8, r0, lsl #18
    1454:	04000000 	streq	r0, [r0], #-0
    1458:	000008fd 	strdeq	r0, [r0], -sp
    145c:	00280e02 	eoreq	r0, r8, r2, lsl #28
    1460:	0a040000 	beq	101468 <startup-0x1fefeb98>
    1464:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1468:	00280f02 	eoreq	r0, r8, r2, lsl #30
    146c:	04080000 	streq	r0, [r8], #-0
    1470:	0000098e 	andeq	r0, r0, lr, lsl #19
    1474:	00281002 	eoreq	r1, r8, r2
    1478:	000c0000 	andeq	r0, ip, r0
    147c:	0008c80b 	andeq	ip, r8, fp, lsl #16
    1480:	81110200 	tsthi	r1, r0, lsl #4
    1484:	0c000000 	stceq	0, cr0, [r0], {-0}
    1488:	00000a01 	andeq	r0, r0, r1, lsl #20
    148c:	00db0301 	sbcseq	r0, fp, r1, lsl #6
    1490:	03050000 	movweq	r0, #20480	; 0x5000
    1494:	20001764 	andcs	r1, r0, r4, ror #14
    1498:	6905040d 	stmdbvs	r5, {r0, r2, r3, sl}
    149c:	0e00746e 	cdpeq	4, 0, cr7, cr0, cr14, {3}
    14a0:	000000d4 	ldrdeq	r0, [r0], -r4
    14a4:	0009280f 	andeq	r2, r9, pc, lsl #16
    14a8:	db040100 	blle	1018b0 <startup-0x1fefe750>
    14ac:	05000000 	streq	r0, [r0, #-0]
    14b0:	00162c03 	andseq	r2, r6, r3, lsl #24
    14b4:	097c0f20 	ldmdbeq	ip!, {r5, r8, r9, sl, fp}^
    14b8:	05010000 	streq	r0, [r1, #-0]
    14bc:	000000d4 	ldrdeq	r0, [r0], -r4
    14c0:	16300305 	ldrtne	r0, [r0], -r5, lsl #6
    14c4:	a8102000 	ldmdage	r0, {sp}
    14c8:	01000008 	tsteq	r0, r8
    14cc:	0012703c 	andseq	r7, r2, ip, lsr r0
    14d0:	00004c20 	andeq	r4, r0, r0, lsr #24
    14d4:	119c0100 	orrsne	r0, ip, r0, lsl #2
    14d8:	000008a3 	andeq	r0, r0, r3, lsr #17
    14dc:	12583801 	subsne	r3, r8, #65536	; 0x10000
    14e0:	00182000 	andseq	r2, r8, r0
    14e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    14e8:	0008f112 	andeq	pc, r8, r2, lsl r1	; <UNPREDICTABLE>
    14ec:	28310100 	ldmdacs	r1!, {r8}
    14f0:	30200012 	eorcc	r0, r0, r2, lsl r0
    14f4:	01000000 	mrseq	r0, (UNDEF: 0)
    14f8:	0001489c 	muleq	r1, ip, r8
    14fc:	096e1300 	stmdbeq	lr!, {r8, r9, ip}^
    1500:	31010000 	mrscc	r0, (UNDEF: 1)
    1504:	00000028 	andeq	r0, r0, r8, lsr #32
    1508:	00749102 	rsbseq	r9, r4, r2, lsl #2
    150c:	00089714 	andeq	r9, r8, r4, lsl r7
    1510:	ec290100 	stfs	f0, [r9], #-0
    1514:	3c200011 	stccc	0, cr0, [r0], #-68	; 0xffffffbc
    1518:	01000000 	mrseq	r0, (UNDEF: 0)
    151c:	00016c9c 	muleq	r1, ip, ip
    1520:	08c21300 	stmiaeq	r2, {r8, r9, ip}^
    1524:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    1528:	00000028 	andeq	r0, r0, r8, lsr #32
    152c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1530:	00098214 	andeq	r8, r9, r4, lsl r2
    1534:	b0210100 	eorlt	r0, r1, r0, lsl #2
    1538:	3c200011 	stccc	0, cr0, [r0], #-68	; 0xffffffbc
    153c:	01000000 	mrseq	r0, (UNDEF: 0)
    1540:	0001909c 	muleq	r1, ip, r0
    1544:	08c21300 	stmiaeq	r2, {r8, r9, ip}^
    1548:	21010000 	mrscs	r0, (UNDEF: 1)
    154c:	00000028 	andeq	r0, r0, r8, lsr #32
    1550:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1554:	00096110 	andeq	r6, r9, r0, lsl r1
    1558:	98190100 	ldmdals	r9, {r8}
    155c:	18200011 	stmdane	r0!, {r0, r4}
    1560:	01000000 	mrseq	r0, (UNDEF: 0)
    1564:	0975109c 	ldmdbeq	r5!, {r2, r3, r4, r7, ip}^
    1568:	15010000 	strne	r0, [r1, #-0]
    156c:	20001188 	andcs	r1, r0, r8, lsl #3
    1570:	00000010 	andeq	r0, r0, r0, lsl r0
    1574:	0e109c01 	cdpeq	12, 1, cr9, cr0, cr1, {0}
    1578:	01000009 	tsteq	r0, r9
    157c:	00116c10 	andseq	r6, r1, r0, lsl ip
    1580:	00001c20 	andeq	r1, r0, r0, lsr #24
    1584:	109c0100 	addsne	r0, ip, r0, lsl #2
    1588:	00000902 	andeq	r0, r0, r2, lsl #18
    158c:	11520b01 	cmpne	r2, r1, lsl #22
    1590:	001a2000 	andseq	r2, sl, r0
    1594:	9c010000 	stcls	0, cr0, [r1], {-0}
    1598:	0008d710 	andeq	sp, r8, r0, lsl r7
    159c:	44070100 	strmi	r0, [r7], #-256	; 0xffffff00
    15a0:	0e200011 	miaeq	acc0, r1, r0
    15a4:	01000000 	mrseq	r0, (UNDEF: 0)
    15a8:	0322009c 			; <UNDEFINED> instruction: 0x0322009c
    15ac:	00040000 	andeq	r0, r4, r0
    15b0:	00000750 	andeq	r0, r0, r0, asr r7
    15b4:	00710104 	rsbseq	r0, r1, r4, lsl #2
    15b8:	4a0c0000 	bmi	3015c0 <startup-0x1fcfea40>
    15bc:	bc00000a 	stclt	0, cr0, [r0], {10}
    15c0:	6a200012 	bvs	801610 <startup-0x1f7fe9f0>
    15c4:	8f000003 	svchi	0x00000003
    15c8:	02000006 	andeq	r0, r0, #6
    15cc:	420c0202 	andmi	r0, ip, #536870912	; 0x20000000
    15d0:	03000000 	movweq	r0, #0
    15d4:	00000000 	andeq	r0, r0, r0
    15d8:	00420d02 	subeq	r0, r2, r2, lsl #26
    15dc:	03000000 	movweq	r0, #0
    15e0:	0000038b 	andeq	r0, r0, fp, lsl #7
    15e4:	00420e02 	subeq	r0, r2, r2, lsl #28
    15e8:	00010000 	andeq	r0, r1, r0
    15ec:	89080104 	stmdbhi	r8, {r2, r8}
    15f0:	05000002 	streq	r0, [r0, #-2]
    15f4:	620a0204 	andvs	r0, sl, #4, 4	; 0x40000000
    15f8:	06000000 	streq	r0, [r0], -r0
    15fc:	00726469 	rsbseq	r6, r2, r9, ror #8
    1600:	00620b02 	rsbeq	r0, r2, r2, lsl #22
    1604:	21070000 	mrscs	r0, (UNDEF: 7)
    1608:	00000000 	andeq	r0, r0, r0
    160c:	5f070404 	svcpl	0x00070404
    1610:	02000003 	andeq	r0, r0, #3
    1614:	8a130202 	bhi	4c1e24 <startup-0x1fb3e1dc>
    1618:	03000000 	movweq	r0, #0
    161c:	0000043e 	andeq	r0, r0, lr, lsr r4
    1620:	00421402 	subeq	r1, r2, r2, lsl #8
    1624:	03000000 	movweq	r0, #0
    1628:	00000069 	andeq	r0, r0, r9, rrx
    162c:	00421502 	subeq	r1, r2, r2, lsl #10
    1630:	00010000 	andeq	r0, r1, r0
    1634:	11020405 	tstne	r2, r5, lsl #8
    1638:	000000a3 	andeq	r0, r0, r3, lsr #1
    163c:	72646f06 	rsbvc	r6, r4, #6, 30
    1640:	62120200 	andsvs	r0, r2, #0, 4
    1644:	07000000 	streq	r0, [r0, -r0]
    1648:	00000069 	andeq	r0, r0, r9, rrx
    164c:	03010800 	movweq	r0, #6144	; 0x1800
    1650:	02180000 	andseq	r0, r8, #0
    1654:	0000ec04 	andeq	lr, r0, r4, lsl #24
    1658:	03ec0300 	mvneq	r0, #0, 6
    165c:	05020000 	streq	r0, [r2, #-0]
    1660:	00000062 	andeq	r0, r0, r2, rrx
    1664:	01510300 	cmpeq	r1, r0, lsl #6
    1668:	06020000 	streq	r0, [r2], -r0
    166c:	00000062 	andeq	r0, r0, r2, rrx
    1670:	02340304 	eorseq	r0, r4, #4, 6	; 0x10000000
    1674:	07020000 	streq	r0, [r2, -r0]
    1678:	00000062 	andeq	r0, r0, r2, rrx
    167c:	03d30308 	bicseq	r0, r3, #8, 6	; 0x20000000
    1680:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1684:	00000062 	andeq	r0, r0, r2, rrx
    1688:	0049090c 	subeq	r0, r9, ip, lsl #18
    168c:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    1690:	0000008a 	andeq	r0, r0, sl, lsl #1
    1694:	6c0a0014 	stcvs	0, cr0, [sl], {20}
    1698:	02000003 	andeq	r0, r0, #3
    169c:	0000a318 	andeq	sl, r0, r8, lsl r3
    16a0:	01f50b00 	mvnseq	r0, r0, lsl #22
    16a4:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    16a8:	200015fe 	strdcs	r1, [r0], -lr
    16ac:	00000028 	andeq	r0, r0, r8, lsr #32
    16b0:	01199c01 	tsteq	r9, r1, lsl #24
    16b4:	730c0000 	movwvc	r0, #49152	; 0xc000
    16b8:	19ae0100 	stmibne	lr!, {r8}
    16bc:	02000001 	andeq	r0, r0, #1
    16c0:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
    16c4:	00011f04 	andeq	r1, r1, r4, lsl #30
    16c8:	08010400 	stmdaeq	r1, {sl}
    16cc:	00000292 	muleq	r0, r2, r2
    16d0:	0001580b 	andeq	r5, r1, fp, lsl #16
    16d4:	969a0100 	ldrls	r0, [sl], r0, lsl #2
    16d8:	68200015 	stmdavs	r0!, {r0, r2, r4}
    16dc:	01000000 	mrseq	r0, (UNDEF: 0)
    16e0:	0001669c 	muleq	r1, ip, r6
    16e4:	6f720c00 	svcvs	0x00720c00
    16e8:	9a010077 	bls	418cc <startup-0x1ffbe734>
    16ec:	00000062 	andeq	r0, r0, r2, rrx
    16f0:	0e6c9102 	lgneqe	f1, f2
    16f4:	00000669 	andeq	r0, r0, r9, ror #12
    16f8:	00629a01 	rsbeq	r9, r2, r1, lsl #20
    16fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1700:	0af60f68 	beq	ffd854a8 <systick_flag+0xdfd83d44>
    1704:	a5010000 	strge	r0, [r1, #-0]
    1708:	00000042 	andeq	r0, r0, r2, asr #32
    170c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1710:	000b590b 	andeq	r5, fp, fp, lsl #18
    1714:	528a0100 	addpl	r0, sl, #0, 2
    1718:	44200015 	strtmi	r0, [r0], #-21	; 0xffffffeb
    171c:	01000000 	mrseq	r0, (UNDEF: 0)
    1720:	00018a9c 	muleq	r1, ip, sl
    1724:	0a0e0e00 	beq	384f2c <startup-0x1fc7b0d4>
    1728:	8a010000 	bhi	41730 <startup-0x1ffbe8d0>
    172c:	00000042 	andeq	r0, r0, r2, asr #32
    1730:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1734:	000b0f0b 	andeq	r0, fp, fp, lsl #30
    1738:	fc7a0100 	ldc2l	1, cr0, [sl], #-0
    173c:	56200014 			; <UNDEFINED> instruction: 0x56200014
    1740:	01000000 	mrseq	r0, (UNDEF: 0)
    1744:	0001c99c 	muleq	r1, ip, r9
    1748:	08720e00 	ldmdaeq	r2!, {r9, sl, fp}^
    174c:	7a010000 	bvc	41754 <startup-0x1ffbe8ac>
    1750:	00000042 	andeq	r0, r0, r2, asr #32
    1754:	0e779102 	expeqs	f1, f2
    1758:	00000a37 	andeq	r0, r0, r7, lsr sl
    175c:	00627a01 	rsbeq	r7, r2, r1, lsl #20
    1760:	91020000 	mrsls	r0, (UNDEF: 2)
    1764:	73750c70 	cmnvc	r5, #112, 24	; 0x7000
    1768:	c97a0100 	ldmdbgt	sl!, {r8}^
    176c:	02000001 	andeq	r0, r0, #1
    1770:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
    1774:	03590702 	cmpeq	r9, #524288	; 0x80000
    1778:	b4100000 	ldrlt	r0, [r0], #-0
    177c:	0100000a 	tsteq	r0, sl
    1780:	00004268 	andeq	r4, r0, r8, ror #4
    1784:	0014cc00 	andseq	ip, r4, r0, lsl #24
    1788:	00003020 	andeq	r3, r0, r0, lsr #32
    178c:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
    1790:	0f000001 	svceq	0x00000001
    1794:	00000a18 	andeq	r0, r0, r8, lsl sl
    1798:	00426901 	subeq	r6, r2, r1, lsl #18
    179c:	91020000 	mrsls	r0, (UNDEF: 2)
    17a0:	420b0077 	andmi	r0, fp, #119	; 0x77
    17a4:	0100000b 	tsteq	r0, fp
    17a8:	00149c5a 	andseq	r9, r4, sl, asr ip
    17ac:	00003020 	andeq	r3, r0, r0, lsr #32
    17b0:	1c9c0100 	ldfnes	f0, [ip], {0}
    17b4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    17b8:	0000048d 	andeq	r0, r0, sp, lsl #9
    17bc:	00425a01 	subeq	r5, r2, r1, lsl #20
    17c0:	91020000 	mrsls	r0, (UNDEF: 2)
    17c4:	25100077 	ldrcs	r0, [r0, #-119]	; 0xffffff89
    17c8:	0100000a 	tsteq	r0, sl
    17cc:	00004248 	andeq	r4, r0, r8, asr #4
    17d0:	00145400 	andseq	r5, r4, r0, lsl #8
    17d4:	00004820 	andeq	r4, r0, r0, lsr #16
    17d8:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    17dc:	0f000002 	svceq	0x00000002
    17e0:	00000a18 	andeq	r0, r0, r8, lsl sl
    17e4:	00424901 	subeq	r4, r2, r1, lsl #18
    17e8:	91020000 	mrsls	r0, (UNDEF: 2)
    17ec:	3210006f 	andscc	r0, r0, #111	; 0x6f
    17f0:	0100000b 	tsteq	r0, fp
    17f4:	00004237 	andeq	r4, r0, r7, lsr r2
    17f8:	00140c00 	andseq	r0, r4, r0, lsl #24
    17fc:	00004820 	andeq	r4, r0, r0, lsr #16
    1800:	6c9c0100 	ldfvss	f0, [ip], {0}
    1804:	0f000002 	svceq	0x00000002
    1808:	00000a18 	andeq	r0, r0, r8, lsl sl
    180c:	00423801 	subeq	r3, r2, r1, lsl #16
    1810:	91020000 	mrsls	r0, (UNDEF: 2)
    1814:	fe0b006f 	cdp2	0, 0, cr0, cr11, cr15, {3}
    1818:	0100000a 	tsteq	r0, sl
    181c:	0013e22e 	andseq	lr, r3, lr, lsr #4
    1820:	00002a20 	andeq	r2, r0, r0, lsr #20
    1824:	909c0100 	addsls	r0, ip, r0, lsl #2
    1828:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    182c:	0000072a 	andeq	r0, r0, sl, lsr #14
    1830:	00422e01 	subeq	r2, r2, r1, lsl #28
    1834:	91020000 	mrsls	r0, (UNDEF: 2)
    1838:	e60b0077 			; <UNDEFINED> instruction: 0xe60b0077
    183c:	0100000a 	tsteq	r0, sl
    1840:	0013b825 	andseq	fp, r3, r5, lsr #16
    1844:	00002a20 	andeq	r2, r0, r0, lsr #20
    1848:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    184c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1850:	00000872 	andeq	r0, r0, r2, ror r8
    1854:	00422501 	subeq	r2, r2, r1, lsl #10
    1858:	91020000 	mrsls	r0, (UNDEF: 2)
    185c:	1d110077 	ldcne	0, cr0, [r1, #-476]	; 0xfffffe24
    1860:	0100000b 	tsteq	r0, fp
    1864:	0013581c 	andseq	r5, r3, ip, lsl r8
    1868:	00006020 	andeq	r6, r0, r0, lsr #32
    186c:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    1870:	0c000002 	stceq	0, cr0, [r0], {2}
    1874:	1c010078 	stcne	0, cr0, [r1], {120}	; 0x78
    1878:	00000042 	andeq	r0, r0, r2, asr #32
    187c:	0f6f9102 	svceq	0x006f9102
    1880:	00000add 	ldrdeq	r0, [r0], -sp
    1884:	00421f01 	subeq	r1, r2, r1, lsl #30
    1888:	91020000 	mrsls	r0, (UNDEF: 2)
    188c:	ca110077 	bgt	441a70 <startup-0x1fbbe590>
    1890:	0100000a 	tsteq	r0, sl
    1894:	00130414 	andseq	r0, r3, r4, lsl r4
    1898:	00005420 	andeq	r5, r0, r0, lsr #8
    189c:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    18a0:	0c000003 	stceq	0, cr0, [r0], {3}
    18a4:	14010078 	strne	r0, [r1], #-120	; 0xffffff88
    18a8:	00000042 	andeq	r0, r0, r2, asr #32
    18ac:	0f6f9102 	svceq	0x006f9102
    18b0:	00000add 	ldrdeq	r0, [r0], -sp
    18b4:	00421701 	subeq	r1, r2, r1, lsl #14
    18b8:	91020000 	mrsls	r0, (UNDEF: 2)
    18bc:	6a120077 	bvs	481aa0 <startup-0x1fb7e560>
    18c0:	01000002 	tsteq	r0, r2
    18c4:	0012bc03 	andseq	fp, r2, r3, lsl #24
    18c8:	00004820 	andeq	r4, r0, r0, lsr #16
    18cc:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b011705 	bleq	45c54 <startup-0x1ffba3ac>
  3c:	3b0b3a0b 	blcc	2ce870 <startup-0x1fd31790>
  40:	0013010b 	andseq	r0, r3, fp, lsl #2
  44:	000d0600 	andeq	r0, sp, r0, lsl #12
  48:	0b3a0803 	bleq	e8205c <startup-0x1f17dfa4>
  4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  50:	0d070000 	stceq	0, cr0, [r7, #-0]
  54:	00134900 	andseq	r4, r3, r0, lsl #18
  58:	01130800 	tsteq	r3, r0, lsl #16
  5c:	0b0b0e03 	bleq	2c3870 <startup-0x1fd3c790>
  60:	0b3b0b3a 	bleq	ec2d50 <startup-0x1f13d2b0>
  64:	00001301 	andeq	r1, r0, r1, lsl #6
  68:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
  6c:	000b3813 	andeq	r3, fp, r3, lsl r8
  70:	00160a00 	andseq	r0, r6, r0, lsl #20
  74:	0b3a0e03 	bleq	e83888 <startup-0x1f17c778>
  78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  7c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  80:	3a0e0300 	bcc	380c88 <startup-0x1fc7f378>
  84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  88:	0c000013 	stceq	0, cr0, [r0], {19}
  8c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  90:	0b3b0b3a 	bleq	ec2d80 <startup-0x1f13d280>
  94:	0b381349 	bleq	e04dc0 <startup-0x1f1fb240>
  98:	240d0000 	strcs	r0, [sp], #-0
  9c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  a0:	0008030b 	andeq	r0, r8, fp, lsl #6
  a4:	01010e00 	tsteq	r1, r0, lsl #28
  a8:	13011349 	movwne	r1, #4937	; 0x1349
  ac:	210f0000 	mrscs	r0, CPSR
  b0:	2f134900 	svccs	0x00134900
  b4:	1000000b 	andne	r0, r0, fp
  b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  bc:	0b3b0b3a 	bleq	ec2dac <startup-0x1f13d254>
  c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c4:	0f110000 	svceq	0x00110000
  c8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  cc:	12000013 	andne	r0, r0, #19
  d0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  d4:	00001301 	andeq	r1, r0, r1, lsl #6
  d8:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
  dc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
  e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  ec:	00001802 	andeq	r1, r0, r2, lsl #16
  f0:	3f012e15 	svccc	0x00012e15
  f4:	3a0e0319 	bcc	380d60 <startup-0x1fc7f2a0>
  f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 100:	96184006 	ldrls	r4, [r8], -r6
 104:	13011942 	movwne	r1, #6466	; 0x1942
 108:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 10c:	03193f01 	tsteq	r9, #1, 30
 110:	3b0b3a0e 	blcc	2ce950 <startup-0x1fd316b0>
 114:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 118:	00130119 	andseq	r0, r3, r9, lsl r1
 11c:	00181700 	andseq	r1, r8, r0, lsl #14
 120:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 124:	03193f01 	tsteq	r9, #1, 30
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 130:	19000019 	stmdbne	r0, {r0, r3, r4}
 134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 138:	0b3a0e03 	bleq	e8394c <startup-0x1f17c6b4>
 13c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 140:	06120111 			; <UNDEFINED> instruction: 0x06120111
 144:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 148:	00130119 	andseq	r0, r3, r9, lsl r1
 14c:	00051a00 	andeq	r1, r5, r0, lsl #20
 150:	0b3a0e03 	bleq	e83964 <startup-0x1f17c69c>
 154:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 158:	00001802 	andeq	r1, r0, r2, lsl #16
 15c:	11010b1b 	tstne	r1, fp, lsl fp
 160:	01061201 	tsteq	r6, r1, lsl #4
 164:	1c000013 	stcne	0, cr0, [r0], {19}
 168:	08030034 	stmdaeq	r3, {r2, r4, r5}
 16c:	0b3b0b3a 	bleq	ec2e5c <startup-0x1f13d1a4>
 170:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 174:	0b1d0000 	bleq	74017c <startup-0x1f8bfe84>
 178:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 17c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
 180:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 184:	0b3a0e03 	bleq	e83998 <startup-0x1f17c668>
 188:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 190:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 194:	00000019 	andeq	r0, r0, r9, lsl r0
 198:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 19c:	030b130e 	movweq	r1, #45838	; 0xb30e
 1a0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 1a4:	00171006 	andseq	r1, r7, r6
 1a8:	00240200 	eoreq	r0, r4, r0, lsl #4
 1ac:	0b3e0b0b 	bleq	f82de0 <startup-0x1f07d220>
 1b0:	00000e03 	andeq	r0, r0, r3, lsl #28
 1b4:	0b002403 	bleq	91c8 <startup-0x1fff6e38>
 1b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1bc:	04000008 	streq	r0, [r0], #-8
 1c0:	13490101 	movtne	r0, #37121	; 0x9101
 1c4:	00001301 	andeq	r1, r0, r1, lsl #6
 1c8:	49002105 	stmdbmi	r0, {r0, r2, r8, sp}
 1cc:	000b2f13 	andeq	r2, fp, r3, lsl pc
 1d0:	00340600 	eorseq	r0, r4, r0, lsl #12
 1d4:	0b3a0e03 	bleq	e839e8 <startup-0x1f17c618>
 1d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1dc:	00001802 	andeq	r1, r0, r2, lsl #16
 1e0:	03011307 	movweq	r1, #4871	; 0x1307
 1e4:	3a0b0b0e 	bcc	2c2e24 <startup-0x1fd3d1dc>
 1e8:	010b3b0b 	tsteq	fp, fp, lsl #22
 1ec:	08000013 	stmdaeq	r0, {r0, r1, r4}
 1f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 1f4:	0b3b0b3a 	bleq	ec2ee4 <startup-0x1f13d11c>
 1f8:	0b381349 	bleq	e04f24 <startup-0x1f1fb0dc>
 1fc:	0f090000 	svceq	0x00090000
 200:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 204:	0a000013 	beq	258 <startup-0x1ffffda8>
 208:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 20c:	0b3b0b3a 	bleq	ec2efc <startup-0x1f13d104>
 210:	00001349 	andeq	r1, r0, r9, asr #6
 214:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 218:	00130119 	andseq	r0, r3, r9, lsl r1
 21c:	00050c00 	andeq	r0, r5, r0, lsl #24
 220:	00001349 	andeq	r1, r0, r9, asr #6
 224:	3f012e0d 	svccc	0x00012e0d
 228:	3a0e0319 	bcc	380e94 <startup-0x1fc7f16c>
 22c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 230:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 234:	96184006 	ldrls	r4, [r8], -r6
 238:	13011942 	movwne	r1, #6466	; 0x1942
 23c:	050e0000 	streq	r0, [lr, #-0]
 240:	3a080300 	bcc	200e48 <startup-0x1fdff1b8>
 244:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 248:	00180213 	andseq	r0, r8, r3, lsl r2
 24c:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 250:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	13491927 	movtne	r1, #39207	; 0x9927
 25c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 260:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 264:	00130119 	andseq	r0, r3, r9, lsl r1
 268:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 26c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 270:	0b3b0b3a 	bleq	ec2f60 <startup-0x1f13d0a0>
 274:	01111927 	tsteq	r1, r7, lsr #18
 278:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 27c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 280:	11000013 	tstne	r0, r3, lsl r0
 284:	0111010b 	tsteq	r1, fp, lsl #2
 288:	00000612 	andeq	r0, r0, r2, lsl r6
 28c:	03003412 	movweq	r3, #1042	; 0x412
 290:	3b0b3a08 	blcc	2ceab8 <startup-0x1fd31548>
 294:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 298:	13000018 	movwne	r0, #24
 29c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2a0:	0b3a0e03 	bleq	e83ab4 <startup-0x1f17c54c>
 2a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2b0:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
 2b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 2b8:	0b3b0b3a 	bleq	ec2fa8 <startup-0x1f13d058>
 2bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2c0:	01000000 	mrseq	r0, (UNDEF: 0)
 2c4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2c8:	0e030b13 	vmoveq.32	d3[0], r0
 2cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2d0:	00001710 	andeq	r1, r0, r0, lsl r7
 2d4:	0b011302 	bleq	44ee4 <startup-0x1ffbb11c>
 2d8:	3b0b3a0b 	blcc	2ceb0c <startup-0x1fd314f4>
 2dc:	0013010b 	andseq	r0, r3, fp, lsl #2
 2e0:	000d0300 	andeq	r0, sp, r0, lsl #6
 2e4:	0b3a0e03 	bleq	e83af8 <startup-0x1f17c508>
 2e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ec:	00000b38 	andeq	r0, r0, r8, lsr fp
 2f0:	0b002404 	bleq	9308 <startup-0x1fff6cf8>
 2f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2f8:	0500000e 	streq	r0, [r0, #-14]
 2fc:	0b0b0117 	bleq	2c0760 <startup-0x1fd3f8a0>
 300:	0b3b0b3a 	bleq	ec2ff0 <startup-0x1f13d010>
 304:	00001301 	andeq	r1, r0, r1, lsl #6
 308:	03000d06 	movweq	r0, #3334	; 0xd06
 30c:	3b0b3a08 	blcc	2ceb34 <startup-0x1fd314cc>
 310:	0013490b 	andseq	r4, r3, fp, lsl #18
 314:	000d0700 	andeq	r0, sp, r0, lsl #14
 318:	00001349 	andeq	r1, r0, r9, asr #6
 31c:	03011308 	movweq	r1, #4872	; 0x1308
 320:	3a0b0b0e 	bcc	2c2f60 <startup-0x1fd3d0a0>
 324:	010b3b0b 	tsteq	fp, fp, lsl #22
 328:	09000013 	stmdbeq	r0, {r0, r1, r4}
 32c:	1349000d 	movtne	r0, #36877	; 0x900d
 330:	00000b38 	andeq	r0, r0, r8, lsr fp
 334:	0300160a 	movweq	r1, #1546	; 0x60a
 338:	3b0b3a0e 	blcc	2ceb78 <startup-0x1fd31488>
 33c:	0013490b 	andseq	r4, r3, fp, lsl #18
 340:	01010b00 	tsteq	r1, r0, lsl #22
 344:	13011349 	movwne	r1, #4937	; 0x1349
 348:	210c0000 	mrscs	r0, (UNDEF: 12)
 34c:	2f134900 	svccs	0x00134900
 350:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 354:	08030034 	stmdaeq	r3, {r2, r4, r5}
 358:	0b3b0b3a 	bleq	ec3048 <startup-0x1f13cfb8>
 35c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 360:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 364:	03193f01 	tsteq	r9, #1, 30
 368:	3b0b3a0e 	blcc	2ceba8 <startup-0x1fd31458>
 36c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 370:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 374:	97184006 	ldrls	r4, [r8, -r6]
 378:	13011942 	movwne	r1, #6466	; 0x1942
 37c:	240f0000 	strcs	r0, [pc], #-0	; 384 <startup-0x1ffffc7c>
 380:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 384:	0008030b 	andeq	r0, r8, fp, lsl #6
 388:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 38c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 390:	0b3b0b3a 	bleq	ec3080 <startup-0x1f13cf80>
 394:	01111927 	tsteq	r1, r7, lsr #18
 398:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 39c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3a0:	11000013 	tstne	r0, r3, lsl r0
 3a4:	08030005 	stmdaeq	r3, {r0, r2}
 3a8:	0b3b0b3a 	bleq	ec3098 <startup-0x1f13cf68>
 3ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3b0:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 3b4:	03193f01 	tsteq	r9, #1, 30
 3b8:	3b0b3a0e 	blcc	2cebf8 <startup-0x1fd31408>
 3bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 3c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 3c4:	96184006 	ldrls	r4, [r8], -r6
 3c8:	13011942 	movwne	r1, #6466	; 0x1942
 3cc:	34130000 	ldrcc	r0, [r3], #-0
 3d0:	3a080300 	bcc	200fd8 <startup-0x1fdff028>
 3d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3d8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 3dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 3e0:	0b3b0b3a 	bleq	ec30d0 <startup-0x1f13cf30>
 3e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3e8:	0b150000 	bleq	5403f0 <startup-0x1fabfc10>
 3ec:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 3f0:	16000006 	strne	r0, [r0], -r6
 3f4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3f8:	0b3a0e03 	bleq	e83c0c <startup-0x1f17c3f4>
 3fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 400:	06120111 			; <UNDEFINED> instruction: 0x06120111
 404:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 408:	00000019 	andeq	r0, r0, r9, lsl r0
 40c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 410:	030b130e 	movweq	r1, #45838	; 0xb30e
 414:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 418:	00171006 	andseq	r1, r7, r6
 41c:	01130200 	tsteq	r3, r0, lsl #4
 420:	0b3a0b0b 	bleq	e83054 <startup-0x1f17cfac>
 424:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 428:	0d030000 	stceq	0, cr0, [r3, #-0]
 42c:	3a0e0300 	bcc	381034 <startup-0x1fc7efcc>
 430:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 434:	000b3813 	andeq	r3, fp, r3, lsl r8
 438:	00240400 	eoreq	r0, r4, r0, lsl #8
 43c:	0b3e0b0b 	bleq	f83070 <startup-0x1f07cf90>
 440:	00000e03 	andeq	r0, r0, r3, lsl #28
 444:	0b011705 	bleq	46060 <startup-0x1ffb9fa0>
 448:	3b0b3a0b 	blcc	2cec7c <startup-0x1fd31384>
 44c:	0013010b 	andseq	r0, r3, fp, lsl #2
 450:	000d0600 	andeq	r0, sp, r0, lsl #12
 454:	0b3a0803 	bleq	e82468 <startup-0x1f17db98>
 458:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 45c:	0d070000 	stceq	0, cr0, [r7, #-0]
 460:	00134900 	andseq	r4, r3, r0, lsl #18
 464:	01130800 	tsteq	r3, r0, lsl #16
 468:	0b0b0e03 	bleq	2c3c7c <startup-0x1fd3c384>
 46c:	0b3b0b3a 	bleq	ec315c <startup-0x1f13cea4>
 470:	00001301 	andeq	r1, r0, r1, lsl #6
 474:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 478:	000b3813 	andeq	r3, fp, r3, lsl r8
 47c:	00160a00 	andseq	r0, r6, r0, lsl #20
 480:	0b3a0e03 	bleq	e83c94 <startup-0x1f17c36c>
 484:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 488:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 48c:	3a080300 	bcc	201094 <startup-0x1fdfef6c>
 490:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 494:	000b3813 	andeq	r3, fp, r3, lsl r8
 498:	01130c00 	tsteq	r3, r0, lsl #24
 49c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 4a0:	0b3b0b3a 	bleq	ec3190 <startup-0x1f13ce70>
 4a4:	00001301 	andeq	r1, r0, r1, lsl #6
 4a8:	0b00240d 	bleq	94e4 <startup-0x1fff6b1c>
 4ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4b0:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
 4b4:	13490101 	movtne	r0, #37121	; 0x9101
 4b8:	00001301 	andeq	r1, r0, r1, lsl #6
 4bc:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
 4c0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 4c4:	000f1000 	andeq	r1, pc, r0
 4c8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 4cc:	15110000 	ldrne	r0, [r1, #-0]
 4d0:	01192701 	tsteq	r9, r1, lsl #14
 4d4:	12000013 	andne	r0, r0, #19
 4d8:	13490005 	movtne	r0, #36869	; 0x9005
 4dc:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 4e0:	03193f00 	tsteq	r9, #0, 30
 4e4:	3b0b3a0e 	blcc	2ced24 <startup-0x1fd312dc>
 4e8:	11192705 	tstne	r9, r5, lsl #14
 4ec:	40061201 	andmi	r1, r6, r1, lsl #4
 4f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4f4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 4f8:	03193f01 	tsteq	r9, #1, 30
 4fc:	3b0b3a0e 	blcc	2ced3c <startup-0x1fd312c4>
 500:	11192705 	tstne	r9, r5, lsl #14
 504:	40061201 	andmi	r1, r6, r1, lsl #4
 508:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 50c:	00001301 	andeq	r1, r0, r1, lsl #6
 510:	03000515 	movweq	r0, #1301	; 0x515
 514:	3b0b3a0e 	blcc	2ced54 <startup-0x1fd312ac>
 518:	02134905 	andseq	r4, r3, #81920	; 0x14000
 51c:	16000018 			; <UNDEFINED> instruction: 0x16000018
 520:	08030005 	stmdaeq	r3, {r0, r2}
 524:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 528:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 52c:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 530:	03193f01 	tsteq	r9, #1, 30
 534:	3b0b3a0e 	blcc	2ced74 <startup-0x1fd3128c>
 538:	11192705 	tstne	r9, r5, lsl #14
 53c:	40061201 	andmi	r1, r6, r1, lsl #4
 540:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 544:	00001301 	andeq	r1, r0, r1, lsl #6
 548:	11010b18 	tstne	r1, r8, lsl fp
 54c:	00061201 	andeq	r1, r6, r1, lsl #4
 550:	00341900 	eorseq	r1, r4, r0, lsl #18
 554:	0b3a0803 	bleq	e82568 <startup-0x1f17da98>
 558:	1349053b 	movtne	r0, #38203	; 0x953b
 55c:	00001802 	andeq	r1, r0, r2, lsl #16
 560:	3f012e1a 	svccc	0x00012e1a
 564:	3a0e0319 	bcc	3811d0 <startup-0x1fc7ee30>
 568:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 56c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 570:	96184006 	ldrls	r4, [r8], -r6
 574:	13011942 	movwne	r1, #6466	; 0x1942
 578:	051b0000 	ldreq	r0, [fp, #-0]
 57c:	3a0e0300 	bcc	381184 <startup-0x1fc7ee7c>
 580:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 584:	00180213 	andseq	r0, r8, r3, lsl r2
 588:	00341c00 	eorseq	r1, r4, r0, lsl #24
 58c:	0b3a0803 	bleq	e825a0 <startup-0x1f17da60>
 590:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 594:	00001802 	andeq	r1, r0, r2, lsl #16
 598:	0300051d 	movweq	r0, #1309	; 0x51d
 59c:	3b0b3a08 	blcc	2cedc4 <startup-0x1fd3123c>
 5a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5a4:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
 5a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5ac:	0b3b0b3a 	bleq	ec329c <startup-0x1f13cd64>
 5b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5b4:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 5b8:	03193f00 	tsteq	r9, #0, 30
 5bc:	3b0b3a0e 	blcc	2cedfc <startup-0x1fd31204>
 5c0:	1119270b 	tstne	r9, fp, lsl #14
 5c4:	40061201 	andmi	r1, r6, r1, lsl #4
 5c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5cc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 5d0:	03193f01 	tsteq	r9, #1, 30
 5d4:	3b0b3a0e 	blcc	2cee14 <startup-0x1fd311ec>
 5d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 5dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 5e0:	96184006 	ldrls	r4, [r8], -r6
 5e4:	13011942 	movwne	r1, #6466	; 0x1942
 5e8:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 5ec:	03193f01 	tsteq	r9, #1, 30
 5f0:	3b0b3a0e 	blcc	2cee30 <startup-0x1fd311d0>
 5f4:	1119270b 	tstne	r9, fp, lsl #14
 5f8:	40061201 	andmi	r1, r6, r1, lsl #4
 5fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 600:	00001301 	andeq	r1, r0, r1, lsl #6
 604:	3f012e22 	svccc	0x00012e22
 608:	3a0e0319 	bcc	381274 <startup-0x1fc7ed8c>
 60c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 610:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 614:	97184006 	ldrls	r4, [r8, -r6]
 618:	00001942 	andeq	r1, r0, r2, asr #18
 61c:	01110100 	tsteq	r1, r0, lsl #2
 620:	0b130e25 	bleq	4c3ebc <startup-0x1fb3c144>
 624:	01110e03 	tsteq	r1, r3, lsl #28
 628:	17100612 			; <UNDEFINED> instruction: 0x17100612
 62c:	24020000 	strcs	r0, [r2], #-0
 630:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 634:	000e030b 	andeq	r0, lr, fp, lsl #6
 638:	01130300 	tsteq	r3, r0, lsl #6
 63c:	0b3a0b0b 	bleq	e83270 <startup-0x1f17cd90>
 640:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 644:	0d040000 	stceq	0, cr0, [r4, #-0]
 648:	3a0e0300 	bcc	381250 <startup-0x1fc7edb0>
 64c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 650:	000b3813 	andeq	r3, fp, r3, lsl r8
 654:	01170500 	tsteq	r7, r0, lsl #10
 658:	0b3a0b0b 	bleq	e8328c <startup-0x1f17cd74>
 65c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 660:	0d060000 	stceq	0, cr0, [r6, #-0]
 664:	3a0e0300 	bcc	38126c <startup-0x1fc7ed94>
 668:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 66c:	07000013 	smladeq	r0, r3, r0, r0
 670:	1349000d 	movtne	r0, #36877	; 0x900d
 674:	13080000 	movwne	r0, #32768	; 0x8000
 678:	0b0e0301 	bleq	381284 <startup-0x1fc7ed7c>
 67c:	3b0b3a0b 	blcc	2ceeb0 <startup-0x1fd31150>
 680:	0013010b 	andseq	r0, r3, fp, lsl #2
 684:	000d0900 	andeq	r0, sp, r0, lsl #18
 688:	0b381349 	bleq	e053b4 <startup-0x1f1fac4c>
 68c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
 690:	3a080300 	bcc	201298 <startup-0x1fdfed68>
 694:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 698:	000b3813 	andeq	r3, fp, r3, lsl r8
 69c:	00160b00 	andseq	r0, r6, r0, lsl #22
 6a0:	0b3a0e03 	bleq	e83eb4 <startup-0x1f17c14c>
 6a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6a8:	340c0000 	strcc	r0, [ip], #-0
 6ac:	3a0e0300 	bcc	3812b4 <startup-0x1fc7ed4c>
 6b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6b4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 6b8:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 6bc:	0b0b0024 	bleq	2c0754 <startup-0x1fd3f8ac>
 6c0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 6c4:	350e0000 	strcc	r0, [lr, #-0]
 6c8:	00134900 	andseq	r4, r3, r0, lsl #18
 6cc:	00340f00 	eorseq	r0, r4, r0, lsl #30
 6d0:	0b3a0e03 	bleq	e83ee4 <startup-0x1f17c11c>
 6d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6d8:	00001802 	andeq	r1, r0, r2, lsl #16
 6dc:	3f002e10 	svccc	0x00002e10
 6e0:	3a0e0319 	bcc	38134c <startup-0x1fc7ecb4>
 6e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6ec:	96184006 	ldrls	r4, [r8], -r6
 6f0:	00001942 	andeq	r1, r0, r2, asr #18
 6f4:	3f002e11 	svccc	0x00002e11
 6f8:	3a0e0319 	bcc	381364 <startup-0x1fc7ec9c>
 6fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 700:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 704:	97184006 	ldrls	r4, [r8, -r6]
 708:	00001942 	andeq	r1, r0, r2, asr #18
 70c:	3f012e12 	svccc	0x00012e12
 710:	3a0e0319 	bcc	38137c <startup-0x1fc7ec84>
 714:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 718:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 71c:	97184006 	ldrls	r4, [r8, -r6]
 720:	13011942 	movwne	r1, #6466	; 0x1942
 724:	05130000 	ldreq	r0, [r3, #-0]
 728:	3a0e0300 	bcc	381330 <startup-0x1fc7ecd0>
 72c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 730:	00180213 	andseq	r0, r8, r3, lsl r2
 734:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 738:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 73c:	0b3b0b3a 	bleq	ec342c <startup-0x1f13cbd4>
 740:	01111927 	tsteq	r1, r7, lsr #18
 744:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 748:	01194296 			; <UNDEFINED> instruction: 0x01194296
 74c:	00000013 	andeq	r0, r0, r3, lsl r0
 750:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 754:	030b130e 	movweq	r1, #45838	; 0xb30e
 758:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 75c:	00171006 	andseq	r1, r7, r6
 760:	01130200 	tsteq	r3, r0, lsl #4
 764:	0b3a0b0b 	bleq	e83398 <startup-0x1f17cc68>
 768:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 76c:	0d030000 	stceq	0, cr0, [r3, #-0]
 770:	3a0e0300 	bcc	381378 <startup-0x1fc7ec88>
 774:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 778:	000b3813 	andeq	r3, fp, r3, lsl r8
 77c:	00240400 	eoreq	r0, r4, r0, lsl #8
 780:	0b3e0b0b 	bleq	f833b4 <startup-0x1f07cc4c>
 784:	00000e03 	andeq	r0, r0, r3, lsl #28
 788:	0b011705 	bleq	463a4 <startup-0x1ffb9c5c>
 78c:	3b0b3a0b 	blcc	2cefc0 <startup-0x1fd31040>
 790:	0013010b 	andseq	r0, r3, fp, lsl #2
 794:	000d0600 	andeq	r0, sp, r0, lsl #12
 798:	0b3a0803 	bleq	e827ac <startup-0x1f17d854>
 79c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7a0:	0d070000 	stceq	0, cr0, [r7, #-0]
 7a4:	00134900 	andseq	r4, r3, r0, lsl #18
 7a8:	01130800 	tsteq	r3, r0, lsl #16
 7ac:	0b0b0e03 	bleq	2c3fc0 <startup-0x1fd3c040>
 7b0:	0b3b0b3a 	bleq	ec34a0 <startup-0x1f13cb60>
 7b4:	00001301 	andeq	r1, r0, r1, lsl #6
 7b8:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 7bc:	000b3813 	andeq	r3, fp, r3, lsl r8
 7c0:	00160a00 	andseq	r0, r6, r0, lsl #20
 7c4:	0b3a0e03 	bleq	e83fd8 <startup-0x1f17c028>
 7c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7cc:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 7d0:	03193f01 	tsteq	r9, #1, 30
 7d4:	3b0b3a0e 	blcc	2cf014 <startup-0x1fd30fec>
 7d8:	1119270b 	tstne	r9, fp, lsl #14
 7dc:	40061201 	andmi	r1, r6, r1, lsl #4
 7e0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 7e4:	00001301 	andeq	r1, r0, r1, lsl #6
 7e8:	0300050c 	movweq	r0, #1292	; 0x50c
 7ec:	3b0b3a08 	blcc	2cf014 <startup-0x1fd30fec>
 7f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 7f4:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 7f8:	0b0b000f 	bleq	2c083c <startup-0x1fd3f7c4>
 7fc:	00001349 	andeq	r1, r0, r9, asr #6
 800:	0300050e 	movweq	r0, #1294	; 0x50e
 804:	3b0b3a0e 	blcc	2cf044 <startup-0x1fd30fbc>
 808:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 80c:	0f000018 	svceq	0x00000018
 810:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 814:	0b3b0b3a 	bleq	ec3504 <startup-0x1f13cafc>
 818:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 81c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 820:	03193f01 	tsteq	r9, #1, 30
 824:	3b0b3a0e 	blcc	2cf064 <startup-0x1fd30f9c>
 828:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 82c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 830:	96184006 	ldrls	r4, [r8], -r6
 834:	13011942 	movwne	r1, #6466	; 0x1942
 838:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 83c:	03193f01 	tsteq	r9, #1, 30
 840:	3b0b3a0e 	blcc	2cf080 <startup-0x1fd30f80>
 844:	1119270b 	tstne	r9, fp, lsl #14
 848:	40061201 	andmi	r1, r6, r1, lsl #4
 84c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 850:	00001301 	andeq	r1, r0, r1, lsl #6
 854:	3f002e12 	svccc	0x00002e12
 858:	3a0e0319 	bcc	3814c4 <startup-0x1fc7eb3c>
 85c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 860:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 864:	96184006 	ldrls	r4, [r8], -r6
 868:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000480 	andeq	r0, r0, r0, lsl #9
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	07c20002 	strbeq	r0, [r2, r2]
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000490 	mulcs	r0, r0, r4
  3c:	000003f2 	strdeq	r0, [r0], -r2
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0c410002 	mcrreq	0, 0, r0, r1, cr2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000884 	andcs	r0, r0, r4, lsl #17
  5c:	00000178 	andeq	r0, r0, r8, ror r1
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0e140002 	cdpeq	0, 1, cr0, cr4, cr2, {0}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200009fc 	strdcs	r0, [r0], -ip
  7c:	00000748 	andeq	r0, r0, r8, asr #14
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	13c40002 	bicne	r0, r4, #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001144 	andcs	r1, r0, r4, asr #2
  9c:	00000178 	andeq	r0, r0, r8, ror r1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	15aa0002 	strne	r0, [sl, #2]!
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200012bc 			; <UNDEFINED> instruction: 0x200012bc
  bc:	0000036a 	andeq	r0, r0, sl, ror #6
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000490 	mulcs	r0, r0, r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001a3 	andeq	r0, r0, r3, lsr #3
   4:	00ce0002 	sbceq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	7468616c 	strbtvc	r6, [r8], #-364	; 0xfffffe94
  28:	442f6769 	strtmi	r6, [pc], #-1897	; 30 <startup-0x1fffffd0>
  2c:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
  30:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
  34:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
  38:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
  3c:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
  40:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
  44:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; fffffeb8 <systick_flag+0xdfffe754>
  48:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
  4c:	31305441 	teqcc	r0, r1, asr #8
  50:	616d2d37 	cmnvs	sp, r7, lsr sp
  54:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
  58:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  5c:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
  60:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
  64:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
  68:	2f736573 	svccs	0x00736573
  6c:	6f6f7073 	svcvs	0x006f7073
  70:	765f7970 			; <UNDEFINED> instruction: 0x765f7970
  74:	73000032 	movwvc	r0, #50	; 0x32
  78:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  7c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  80:	00000100 	andeq	r0, r0, r0, lsl #2
  84:	6f697067 	svcvs	0x00697067
  88:	0100682e 	tsteq	r0, lr, lsr #16
  8c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
  90:	67666373 			; <UNDEFINED> instruction: 0x67666373
  94:	0100682e 	tsteq	r0, lr, lsr #16
  98:	78650000 	stmdavc	r5!, {}^	; <UNPREDICTABLE>
  9c:	682e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}
  a0:	00000100 	andeq	r0, r0, r0, lsl #2
  a4:	6f6f7073 	svcvs	0x006f7073
  a8:	782e7970 	stmdavc	lr!, {r4, r5, r6, r8, fp, ip, sp, lr}
  ac:	01006d62 	tsteq	r0, r2, ror #26
  b0:	61770000 	cmnvs	r7, r0
  b4:	782e6c6c 	stmdavc	lr!, {r2, r3, r5, r6, sl, fp, sp, lr}
  b8:	01006d62 	tsteq	r0, r2, ror #26
  bc:	78650000 	stmdavc	r5!, {}^	; <UNPREDICTABLE>
  c0:	782e7469 	stmdavc	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
  c4:	01006d62 	tsteq	r0, r2, ror #26
  c8:	70730000 	rsbsvc	r0, r3, r0
  cc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  d0:	00682e73 	rsbeq	r2, r8, r3, ror lr
  d4:	00000001 	andeq	r0, r0, r1
  d8:	00020500 	andeq	r0, r2, r0, lsl #10
  dc:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  e0:	5e13012d 	mufplsp	f0, f3, #5.0
  e4:	01000302 	tsteq	r0, r2, lsl #6
  e8:	02050001 	andeq	r0, r5, #1
  ec:	20000010 	andcs	r0, r0, r0, lsl r0
  f0:	3d013603 	stccc	6, cr3, [r1, #-12]
  f4:	672e2803 	strvs	r2, [lr, -r3, lsl #16]!
  f8:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
  fc:	02005903 	andeq	r5, r0, #49152	; 0xc000
 100:	008f0304 	addeq	r0, pc, r4, lsl #6
 104:	06010402 	streq	r0, [r1], -r2, lsl #8
 108:	a15c0674 	cmpge	ip, r4, ror r6
 10c:	02009191 	andeq	r9, r0, #1073741860	; 0x40000024
 110:	00590304 	subseq	r0, r9, r4, lsl #6
 114:	e3030402 	movw	r0, #13314	; 0x3402
 118:	01040200 	mrseq	r0, R12_usr
 11c:	5c067406 	cfstrspl	mvf7, [r6], {6}
 120:	4e4b4b4b 	vmlsmi.f64	d20, d11, d11
 124:	bbbbadc9 	bllt	feeeb850 <systick_flag+0xdeeea0ec>
 128:	6767aead 	strbvs	sl, [r7, -sp, lsr #29]!
 12c:	033d4b4b 	teqeq	sp, #76800	; 0x12c00
 130:	0d034a74 	vstreq	s8, [r3, #-464]	; 0xfffffe30
 134:	4b4b2420 	blmi	12c91bc <startup-0x1ed36e44>
 138:	2ff44b4b 	svccs	0x00f44b4b
 13c:	ae3e6767 	cdpge	7, 3, cr6, cr14, cr7, {3}
 140:	76754ba0 	ldrbtvc	r4, [r5], -r0, lsr #23
 144:	3d7559cb 			; <UNDEFINED> instruction: 0x3d7559cb
 148:	3d6784bc 	cfstrdcc	mvd8, [r7, #-752]!	; 0xfffffd10
 14c:	03040200 	movweq	r0, #16896	; 0x4200
 150:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 154:	02008103 	andeq	r8, r0, #-1073741824	; 0xc0000000
 158:	3c060104 	stfccs	f0, [r6], {4}
 15c:	02040200 	andeq	r0, r4, #0, 4
 160:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 164:	3c060104 	stfccs	f0, [r6], {4}
 168:	2f2f4306 	svccs	0x002f4306
 16c:	2f4d4b83 	svccs	0x004d4b83
 170:	4d4b832f 	stclmi	3, cr8, [fp, #-188]	; 0xffffff44
 174:	0200adad 	andeq	sl, r0, #11072	; 0x2b40
 178:	003d0304 	eorseq	r0, sp, r4, lsl #6
 17c:	e5030402 	str	r0, [r3, #-1026]	; 0xfffffbfe
 180:	03040200 	movweq	r0, #16896	; 0x4200
 184:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
 188:	0200b703 	andeq	fp, r0, #786432	; 0xc0000
 18c:	3c060104 	stfccs	f0, [r6], {4}
 190:	03a04106 	moveq	r4, #-2147483647	; 0x80000001
 194:	2f2f2e09 	svccs	0x002f2e09
 198:	4b3f322f 	blmi	fcca5c <startup-0x1f0335a4>
 19c:	3f3d7775 	svccc	0x003d7775
 1a0:	13027575 	movwne	r7, #9589	; 0x2575
 1a4:	39010100 	stmdbcc	r1, {r8}
 1a8:	02000001 	andeq	r0, r0, #1
 1ac:	0000ae00 	andeq	sl, r0, r0, lsl #28
 1b0:	fb010200 	blx	409ba <startup-0x1ffbf646>
 1b4:	01000d0e 	tsteq	r0, lr, lsl #26
 1b8:	00010101 	andeq	r0, r1, r1, lsl #2
 1bc:	00010000 	andeq	r0, r1, r0
 1c0:	3a430100 	bcc	10c05c8 <startup-0x1ef3fa38>
 1c4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1c8:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 8 <startup-0x1ffffff8>
 1cc:	69746861 	ldmdbvs	r4!, {r0, r5, r6, fp, sp, lr}^
 1d0:	6f442f67 	svcvs	0x00442f67
 1d4:	6f6c6e77 	svcvs	0x006c6e77
 1d8:	2f736461 	svccs	0x00736461
 1dc:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 1e0:	30544144 	subscc	r4, r4, r4, asr #2
 1e4:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 1e8:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 1ec:	6f4d2f72 	svcvs	0x004d2f72
 1f0:	41442d70 	hvcmi	17104	; 0x42d0
 1f4:	37313054 			; <UNDEFINED> instruction: 0x37313054
 1f8:	73616d2d 	cmnvc	r1, #2880	; 0xb40
 1fc:	2f726574 	svccs	0x00726574
 200:	7362614c 	cmnvc	r2, #76, 2
 204:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 208:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 20c:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 210:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 214:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 218:	32765f79 	rsbscc	r5, r6, #484	; 0x1e4
 21c:	70730000 	rsbsvc	r0, r3, r0
 220:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 224:	00632e73 	rsbeq	r2, r3, r3, ror lr
 228:	73000001 	movwvc	r0, #1
 22c:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 230:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 234:	0001006d 	andeq	r0, r1, sp, rrx
 238:	6c617700 	stclvs	7, cr7, [r1], #-0
 23c:	62782e6c 	rsbsvs	r2, r8, #108, 28	; 0x6c0
 240:	0001006d 	andeq	r0, r1, sp, rrx
 244:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
 248:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 24c:	0001006d 	andeq	r0, r1, sp, rrx
 250:	72707300 	rsbsvc	r7, r0, #0, 6
 254:	73657469 	cmnvc	r5, #1761607680	; 0x69000000
 258:	0100682e 	tsteq	r0, lr, lsr #16
 25c:	00000000 	andeq	r0, r0, r0
 260:	04900205 	ldreq	r0, [r0], #517	; 0x205
 264:	75142000 	ldrvc	r2, [r4, #-0]
 268:	4c3d4b4b 			; <UNDEFINED> instruction: 0x4c3d4b4b
 26c:	69687577 	stmdbvs	r8!, {r0, r1, r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 270:	3dbb3d3d 	ldccc	13, cr3, [fp, #244]!	; 0xf4
 274:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 278:	009c0802 	addseq	r0, ip, r2, lsl #16
 27c:	06010402 	streq	r0, [r1], -r2, lsl #8
 280:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 284:	003a0602 	eorseq	r0, sl, r2, lsl #12
 288:	06010402 	streq	r0, [r1], -r2, lsl #8
 28c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 290:	00490602 	subeq	r0, r9, r2, lsl #12
 294:	06010402 	streq	r0, [r1], -r2, lsl #8
 298:	0a03063c 	beq	c1b90 <startup-0x1ff3e470>
 29c:	914b4c66 	cmpls	fp, r6, ror #24
 2a0:	4c914b4c 	vldmiami	r1, {d4-<overflow reg d41>}
 2a4:	7675594b 	ldrbtvc	r5, [r5], -fp, asr #18
 2a8:	833e3d4b 	teqhi	lr, #4800	; 0x12c0
 2ac:	3e3d4b85 	vaddcc.f64	d4, d29, d5
 2b0:	674c8483 	strbvs	r8, [ip, -r3, lsl #9]
 2b4:	4b4c3d3d 	blmi	130f7b0 <startup-0x1ecf0850>
 2b8:	21673e21 	cmncs	r7, r1, lsr #28
 2bc:	3fc03d3e 	svccc	0x00c03d3e
 2c0:	080a0369 	stmdaeq	sl, {r0, r3, r5, r6, r8, r9}
 2c4:	3dd821ba 	ldfcce	f2, [r8, #744]	; 0x2e8
 2c8:	03683ec0 	cmneq	r8, #192, 28	; 0xc00
 2cc:	21ba080a 			; <UNDEFINED> instruction: 0x21ba080a
 2d0:	3ec03dd8 	mcrcc	13, 6, r3, cr0, cr8, {6}
 2d4:	080a0368 	stmdaeq	sl, {r3, r5, r6, r8, r9}
 2d8:	4bd821ba 	blmi	ff6089c8 <systick_flag+0xdf607264>
 2dc:	02595959 	subseq	r5, r9, #1458176	; 0x164000
 2e0:	01010004 	tsteq	r1, r4
 2e4:	000000f1 	strdeq	r0, [r0], -r1
 2e8:	00900002 	addseq	r0, r0, r2
 2ec:	01020000 	mrseq	r0, (UNDEF: 2)
 2f0:	000d0efb 	strdeq	r0, [sp], -fp
 2f4:	01010101 	tsteq	r1, r1, lsl #2
 2f8:	01000000 	mrseq	r0, (UNDEF: 0)
 2fc:	43010000 	movwmi	r0, #4096	; 0x1000
 300:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 304:	2f737265 	svccs	0x00737265
 308:	7468616c 	strbtvc	r6, [r8], #-364	; 0xfffffe94
 30c:	442f6769 	strtmi	r6, [pc], #-1897	; 314 <startup-0x1ffffcec>
 310:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
 314:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
 318:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 31c:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 320:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
 324:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
 328:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 19c <startup-0x1ffffe64>
 32c:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 330:	31305441 	teqcc	r0, r1, asr #8
 334:	616d2d37 	cmnvs	sp, r7, lsr sp
 338:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 33c:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 340:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 344:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 348:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 34c:	2f736573 	svccs	0x00736573
 350:	6f6f7073 	svcvs	0x006f7073
 354:	765f7970 			; <UNDEFINED> instruction: 0x765f7970
 358:	6b000032 	blvs	428 <startup-0x1ffffbd8>
 35c:	61707965 	cmnvs	r0, r5, ror #18
 360:	00632e64 	rsbeq	r2, r3, r4, ror #28
 364:	67000001 	strvs	r0, [r0, -r1]
 368:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 36c:	00010068 	andeq	r0, r1, r8, rrx
 370:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 374:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 378:	00010068 	andeq	r0, r1, r8, rrx
 37c:	05000000 	streq	r0, [r0, #-0]
 380:	00088402 	andeq	r8, r8, r2, lsl #8
 384:	672f1420 	strvs	r1, [pc, -r0, lsr #8]!
 388:	674b6775 	smlsldxvs	r6, fp, r5, r7
 38c:	3f5a5975 	svccc	0x005a5975
 390:	4b59594c 	blmi	16568c8 <startup-0x1e9a9738>
 394:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 398:	ac7a0302 	ldclge	3, cr0, [sl], #-8
 39c:	01040200 	mrseq	r0, R12_usr
 3a0:	03065806 	movweq	r5, #26630	; 0x6806
 3a4:	213d4a0a 	teqcs	sp, sl, lsl #20
 3a8:	4b916768 	blmi	fe45a150 <systick_flag+0xde4589ec>
 3ac:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 3b0:	004b3f92 	umaaleq	r3, fp, r2, pc	; <UNPREDICTABLE>
 3b4:	06010402 	streq	r0, [r1], -r2, lsl #8
 3b8:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 3bc:	06010402 	streq	r0, [r1], -r2, lsl #8
 3c0:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 3c4:	06010402 	streq	r0, [r1], -r2, lsl #8
 3c8:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 3cc:	06010402 	streq	r0, [r1], -r2, lsl #8
 3d0:	212f0658 			; <UNDEFINED> instruction: 0x212f0658
 3d4:	01000602 	tsteq	r0, r2, lsl #12
 3d8:	0001d701 	andeq	sp, r1, r1, lsl #14
 3dc:	a0000200 	andge	r0, r0, r0, lsl #4
 3e0:	02000000 	andeq	r0, r0, #0
 3e4:	0d0efb01 	vstreq	d15, [lr, #-4]
 3e8:	01010100 	mrseq	r0, (UNDEF: 17)
 3ec:	00000001 	andeq	r0, r0, r1
 3f0:	01000001 	tsteq	r0, r1
 3f4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9b9 <systick_flag+0xdfffe255>
 3f8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3fc:	68616c2f 	stmdavs	r1!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
 400:	2f676974 	svccs	0x00676974
 404:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
 408:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 40c:	6f4d2f73 	svcvs	0x004d2f73
 410:	41442d70 	hvcmi	17104	; 0x42d0
 414:	37313054 			; <UNDEFINED> instruction: 0x37313054
 418:	73616d2d 	cmnvc	r1, #2880	; 0xb40
 41c:	2f726574 	svccs	0x00726574
 420:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 424:	30544144 	subscc	r4, r4, r4, asr #2
 428:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 42c:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 430:	614c2f72 	hvcvs	49906	; 0xc2f2
 434:	61207362 			; <UNDEFINED> instruction: 0x61207362
 438:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 43c:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 440:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 444:	6f70732f 	svcvs	0x0070732f
 448:	5f79706f 	svcpl	0x0079706f
 44c:	00003276 	andeq	r3, r0, r6, ror r2
 450:	70617267 	rsbvc	r7, r1, r7, ror #4
 454:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 458:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 45c:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 460:	00000100 	andeq	r0, r0, r0, lsl #2
 464:	6f697067 	svcvs	0x00697067
 468:	0100682e 	tsteq	r0, lr, lsr #16
 46c:	72670000 	rsbvc	r0, r7, #0
 470:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 474:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 478:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 47c:	0100682e 	tsteq	r0, lr, lsr #16
 480:	00000000 	andeq	r0, r0, r0
 484:	09fc0205 	ldmibeq	ip!, {r0, r2, r9}^
 488:	67142000 	ldrvs	r2, [r4, -r0]
 48c:	83915983 	orrshi	r5, r1, #2146304	; 0x20c000
 490:	83677659 	cmnhi	r7, #93323264	; 0x5900000
 494:	5983d759 	stmibpl	r3, {r0, r3, r4, r6, r8, r9, sl, ip, lr, pc}
 498:	10036768 	andne	r6, r3, r8, ror #14
 49c:	20700374 	rsbscs	r0, r0, r4, ror r3
 4a0:	034a1003 	movteq	r1, #40963	; 0xa003
 4a4:	223d2072 	eorscs	r2, sp, #114	; 0x72
 4a8:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 4ac:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 4b0:	3f3e3f4c 	svccc	0x003e3f4c
 4b4:	3d323d3d 	ldccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 4b8:	313d4b30 	teqcc	sp, r0, lsr fp
 4bc:	4a770367 	bmi	1dc1260 <startup-0x1e23eda0>
 4c0:	25200a03 	strcs	r0, [r0, #-2563]!	; 0xfffff5fd
 4c4:	68a03d3e 	stmiavs	r0!, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 4c8:	593e3e3f 	ldmdbpl	lr!, {r0, r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 4cc:	5a313d30 	bpl	c4f994 <startup-0x1f3b066c>
 4d0:	3d593e3f 	ldclcc	14, cr3, [r9, #-252]	; 0xffffff04
 4d4:	033d5930 	teqeq	sp, #48, 18	; 0xc0000
 4d8:	ae3d2e0b 	cdpge	14, 3, cr2, cr13, cr11, {0}
 4dc:	30594b92 			; <UNDEFINED> instruction: 0x30594b92
 4e0:	593f2f3d 	ldmdbpl	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
 4e4:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 4e8:	3d3f3d32 	ldccc	13, cr3, [pc, #-200]!	; 428 <startup-0x1ffffbd8>
 4ec:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
 4f0:	914c833d 	cmpls	ip, sp, lsr r3
 4f4:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 4f8:	59674c83 	stmdbpl	r7!, {r0, r1, r7, sl, fp, lr}^
 4fc:	3e2f4c67 	cdpcc	12, 2, cr4, cr15, cr7, {3}
 500:	3e3d3e3e 	mrccc	14, 1, r3, cr13, cr14, {1}
 504:	4b4b4b3e 	blmi	12d3204 <startup-0x1ed2cdfc>
 508:	3e3d4c4b 	cdpcc	12, 3, cr4, cr13, cr11, {2}
 50c:	4c9f4b3d 	fldmiaxmi	pc, {d4-d33}	;@ Deprecated
 510:	03040200 	movweq	r0, #16896	; 0x4200
 514:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 518:	02004903 	andeq	r4, r0, #49152	; 0xc000
 51c:	58060104 	stmdapl	r6, {r2, r8}
 520:	02040200 	andeq	r0, r4, #0, 4
 524:	02004606 	andeq	r4, r0, #6291456	; 0x600000
 528:	58060104 	stmdapl	r6, {r2, r8}
 52c:	e64c5206 	strb	r5, [ip], -r6, lsl #4
 530:	01040200 	mrseq	r0, R12_usr
 534:	5b065806 	blpl	196554 <startup-0x1fe69aac>
 538:	01040200 	mrseq	r0, R12_usr
 53c:	5b065806 	blpl	19655c <startup-0x1fe69aa4>
 540:	01040200 	mrseq	r0, R12_usr
 544:	5c064a06 			; <UNDEFINED> instruction: 0x5c064a06
 548:	0d034bae 	vstreq	d4, [r3, #-696]	; 0xfffffd48
 54c:	7a4b2008 	bvc	12c8574 <startup-0x1ed37a8c>
 550:	4b764b4b 	blmi	1d93284 <startup-0x1e26cd7c>
 554:	9fd7c969 	svcls	0x00d7c969
 558:	a0ae4bc9 	adcge	r4, lr, r9, asr #23
 55c:	3c4e039f 	mcrrcc	3, 9, r0, lr, cr15
 560:	2d033131 	stfcss	f3, [r3, #-196]	; 0xffffff3c
 564:	004b5a20 	subeq	r5, fp, r0, lsr #20
 568:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 56c:	03040200 	movweq	r0, #16896	; 0x4200
 570:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 574:	3c060104 	stfccs	f0, [r6], {4}
 578:	4b4c6906 	blmi	131a998 <startup-0x1ece5668>
 57c:	03040200 	movweq	r0, #16896	; 0x4200
 580:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 584:	00c70803 	sbceq	r0, r7, r3, lsl #16
 588:	06010402 	streq	r0, [r1], -r2, lsl #8
 58c:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 590:	77754b4b 	ldrbvc	r4, [r5, -fp, asr #22]!
 594:	01040200 	mrseq	r0, R12_usr
 598:	83064a06 	movwhi	r4, #27142	; 0x6a06
 59c:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
 5a0:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 5a4:	4c4b5b83 	mcrrmi	11, 8, r5, fp, cr3
 5a8:	4c3d3d67 	ldcmi	13, cr3, [sp], #-412	; 0xfffffe64
 5ac:	023d3d30 	eorseq	r3, sp, #48, 26	; 0xc00
 5b0:	01010008 	tsteq	r1, r8
 5b4:	000000d7 	ldrdeq	r0, [r0], -r7
 5b8:	00900002 	addseq	r0, r0, r2
 5bc:	01020000 	mrseq	r0, (UNDEF: 2)
 5c0:	000d0efb 	strdeq	r0, [sp], -fp
 5c4:	01010101 	tsteq	r1, r1, lsl #2
 5c8:	01000000 	mrseq	r0, (UNDEF: 0)
 5cc:	43010000 	movwmi	r0, #4096	; 0x1000
 5d0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 5d4:	2f737265 	svccs	0x00737265
 5d8:	7468616c 	strbtvc	r6, [r8], #-364	; 0xfffffe94
 5dc:	442f6769 	strtmi	r6, [pc], #-1897	; 5e4 <startup-0x1ffffa1c>
 5e0:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
 5e4:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
 5e8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 5ec:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 5f0:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
 5f4:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
 5f8:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 46c <startup-0x1ffffb94>
 5fc:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 600:	31305441 	teqcc	r0, r1, asr #8
 604:	616d2d37 	cmnvs	sp, r7, lsr sp
 608:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 60c:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 610:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 614:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 618:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 61c:	2f736573 	svccs	0x00736573
 620:	6f6f7073 	svcvs	0x006f7073
 624:	765f7970 			; <UNDEFINED> instruction: 0x765f7970
 628:	64000032 	strvs	r0, [r0], #-50	; 0xffffffce
 62c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 630:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 634:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 638:	632e7470 			; <UNDEFINED> instruction: 0x632e7470
 63c:	00000100 	andeq	r0, r0, r0, lsl #2
 640:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 644:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
 648:	00010068 	andeq	r0, r1, r8, rrx
 64c:	05000000 	streq	r0, [r0, #-0]
 650:	00114402 	andseq	r4, r1, r2, lsl #8
 654:	2f2f1820 	svccs	0x002f1820
 658:	3d3d2f3e 	ldccc	15, cr2, [sp, #-248]!	; 0xffffff08
 65c:	3d3d2f5a 	ldccc	15, cr2, [sp, #-360]!	; 0xfffffe98
 660:	3e3d2f68 	cdpcc	15, 3, cr2, cr13, cr8, {3}
 664:	4b684e30 	blmi	1a13f2c <startup-0x1e5ec0d4>
 668:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 66c:	4ba02538 	blmi	fe809b54 <systick_flag+0xde8083f0>
 670:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 674:	4ba02538 	blmi	fe809b5c <systick_flag+0xde8083f8>
 678:	3d3d4b3d 	fldmdbxcc	sp!, {d4-d33}	;@ Deprecated
 67c:	763d2f76 	shsub16vc	r2, sp, r6
 680:	4b593d2f 	blmi	164fb44 <startup-0x1e9b04bc>
 684:	331b354b 	tstcc	fp, #314572800	; 0x12c00000
 688:	0b023e1e 	bleq	8ff08 <startup-0x1ff700f8>
 68c:	17010100 	strne	r0, [r1, -r0, lsl #2]
 690:	02000001 	andeq	r0, r0, #1
 694:	00008a00 	andeq	r8, r0, r0, lsl #20
 698:	fb010200 	blx	40ea2 <startup-0x1ffbf15e>
 69c:	01000d0e 	tsteq	r0, lr, lsl #26
 6a0:	00010101 	andeq	r0, r1, r1, lsl #2
 6a4:	00010000 	andeq	r0, r1, r0
 6a8:	3a430100 	bcc	10c0ab0 <startup-0x1ef3f550>
 6ac:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 6b0:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 4f0 <startup-0x1ffffb10>
 6b4:	69746861 	ldmdbvs	r4!, {r0, r5, r6, fp, sp, lr}^
 6b8:	6f442f67 	svcvs	0x00442f67
 6bc:	6f6c6e77 	svcvs	0x006c6e77
 6c0:	2f736461 	svccs	0x00736461
 6c4:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 6c8:	30544144 	subscc	r4, r4, r4, asr #2
 6cc:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 6d0:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 6d4:	6f4d2f72 	svcvs	0x004d2f72
 6d8:	41442d70 	hvcmi	17104	; 0x42d0
 6dc:	37313054 			; <UNDEFINED> instruction: 0x37313054
 6e0:	73616d2d 	cmnvc	r1, #2880	; 0xb40
 6e4:	2f726574 	svccs	0x00726574
 6e8:	7362614c 	cmnvc	r2, #76, 2
 6ec:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 6f0:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 6f4:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 6f8:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 6fc:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 700:	32765f79 	rsbscc	r5, r6, #484	; 0x1e4
 704:	73610000 	cmnvc	r1, #0
 708:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 70c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 710:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 714:	00000100 	andeq	r0, r0, r0, lsl #2
 718:	6f697067 	svcvs	0x00697067
 71c:	0100682e 	tsteq	r0, lr, lsr #16
 720:	00000000 	andeq	r0, r0, r0
 724:	12bc0205 	adcsne	r0, ip, #1342177280	; 0x50000000
 728:	30142000 	andscc	r2, r4, r0
 72c:	5a5a403e 	bpl	169082c <startup-0x1e96f7d4>
 730:	6884595a 	stmvs	r4, {r1, r3, r4, r6, r8, fp, ip, lr}
 734:	83915983 	orrshi	r5, r1, #2146304	; 0x20c000
 738:	59836868 	stmibpl	r3, {r3, r5, r6, fp, sp, lr}
 73c:	687684d7 	ldmdavs	r6!, {r0, r1, r2, r4, r6, r7, sl, pc}^
 740:	4c593f3d 	mrrcmi	15, 3, r3, r9, cr13
 744:	593f3d68 	ldmdbpl	pc!, {r3, r5, r6, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
 748:	3d693f4c 	stclcc	15, cr3, [r9, #-304]!	; 0xfffffed0
 74c:	2f685b3e 	svccs	0x00685b3e
 750:	3d693f84 	stclcc	15, cr3, [r9, #-528]!	; 0xfffffdf0
 754:	2f685b3f 	svccs	0x00685b3f
 758:	4d3f6884 	ldcmi	8, cr6, [pc, #-528]!	; 550 <startup-0x1ffffab0>
 75c:	40683d31 	rsbmi	r3, r8, r1, lsr sp
 760:	3e4d313f 	mcrcc	1, 2, r3, cr13, cr15, {1}
 764:	00ae762f 	adceq	r7, lr, pc, lsr #12
 768:	06010402 	streq	r0, [r1], -r2, lsl #8
 76c:	3f670620 	svccc	0x00670620
 770:	1e4e4b5b 	vmovne.8	d14[2], r4
 774:	3d684c4c 	stclcc	12, cr4, [r8, #-304]!	; 0xfffffed0
 778:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
 77c:	06200601 	strteq	r0, [r0], -r1, lsl #12
 780:	3d5b3f67 	ldclcc	15, cr3, [fp, #-412]	; 0xfffffe64
 784:	02005a4c 	andeq	r5, r0, #76, 20	; 0x4c000
 788:	3c060104 	stfccs	f0, [r6], {4}
 78c:	02004006 	andeq	r4, r0, #6
 790:	3c060104 	stfccs	f0, [r6], {4}
 794:	3d674106 	stfcce	f4, [r7, #-24]!	; 0xffffffe8
 798:	c8720378 	ldmdagt	r2!, {r3, r4, r5, r6, r8, r9}^
 79c:	200b0332 	andcs	r0, fp, r2, lsr r3
 7a0:	73214c3e 			; <UNDEFINED> instruction: 0x73214c3e
 7a4:	0004024d 	andeq	r0, r4, sp, asr #4
 7a8:	Address 0x000007a8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
   4:	7000776f 	andvc	r7, r0, pc, ror #14
   8:	6552636d 	ldrbvs	r6, [r2, #-877]	; 0xfffffc93
   c:	76726573 			; <UNDEFINED> instruction: 0x76726573
  10:	65006465 	strvs	r6, [r0, #-1125]	; 0xfffffb9b
  14:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
  18:	6f4c3272 	svcvs	0x004c3272
  1c:	655f0077 	ldrbvs	r0, [pc, #-119]	; ffffffad <systick_flag+0xdfffe849>
  20:	00697478 	rsbeq	r7, r9, r8, ror r4
  24:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
  28:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
  2c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
  30:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
  34:	685f7470 	ldmdavs	pc, {r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  38:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
  3c:	65007265 	strvs	r7, [r0, #-613]	; 0xfffffd9b
  40:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
  44:	65003172 	strvs	r3, [r0, #-370]	; 0xfffffe8e
  48:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
  4c:	65003272 	strvs	r3, [r0, #-626]	; 0xfffffd8e
  50:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
  54:	65003372 	strvs	r3, [r0, #-882]	; 0xfffffc8e
  58:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
  5c:	77003472 	smlsdxvc	r0, r2, r4, r3
  60:	5f6c6c61 	svcpl	0x006c6c61
  64:	73746962 	cmnvc	r4, #1605632	; 0x188000
  68:	72646f00 	rsbvc	r6, r4, #0, 30
  6c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
  70:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  74:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  78:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  7c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  80:	30373130 	eorscc	r3, r7, r0, lsr r1
  84:	20353132 	eorscs	r3, r5, r2, lsr r1
  88:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  8c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  90:	415b2029 	cmpmi	fp, r9, lsr #32
  94:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff34a <systick_flag+0xdfffdbe6>
  98:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  9c:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  a0:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
  a4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  a8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  ac:	6f697369 	svcvs	0x00697369
  b0:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
  b4:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
  b8:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  bc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  c0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  c4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  c8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  cc:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  d0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  d4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  d8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  dc:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  e0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  e4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  e8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  ec:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  f0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  f4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  f8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  fc:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 100:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 104:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 108:	7a697300 	bvc	1a5cd10 <startup-0x1e5a32f0>
 10c:	70797465 	rsbsvc	r7, r9, r5, ror #8
 110:	6d630065 	stclvs	0, cr0, [r3, #-404]!	; 0xfffffe6c
 114:	48726370 	ldmdami	r2!, {r4, r5, r6, r8, r9, sp, lr}^
 118:	00686769 	rsbeq	r6, r8, r9, ror #14
 11c:	63706d63 	cmnvs	r0, #6336	; 0x18c0
 120:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 124:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 128:	656d006e 	strbvs	r0, [sp, #-110]!	; 0xffffff92
 12c:	706d726d 	rsbvc	r7, sp, sp, ror #4
 130:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 134:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 138:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 13c:	656b0073 	strbvs	r0, [fp, #-115]!	; 0xffffff8d
 140:	616f6279 	smcvs	63017	; 0xf629
 144:	765f6472 			; <UNDEFINED> instruction: 0x765f6472
 148:	77006c61 	strvc	r6, [r0, -r1, ror #24]
 14c:	736c6c61 	cmnvc	ip, #24832	; 0x6100
 150:	79746f00 	ldmdbvc	r4!, {r8, r9, sl, fp, sp, lr}^
 154:	00726570 	rsbseq	r6, r2, r0, ror r5
 158:	6f746f67 	svcvs	0x00746f67
 15c:	65007978 	strvs	r7, [r0, #-2424]	; 0xfffff688
 160:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
 164:	6f4c3372 	svcvs	0x004c3372
 168:	69770077 	ldmdbvs	r7!, {r0, r1, r2, r4, r5, r6}^
 16c:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 170:	00657461 	rsbeq	r7, r5, r1, ror #8
 174:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 178:	656d5f74 	strbvs	r5, [sp, #-3956]!	; 0xfffff08c
 17c:	67617373 			; <UNDEFINED> instruction: 0x67617373
 180:	43003265 	movwmi	r3, #613	; 0x265
 184:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 188:	2f737265 	svccs	0x00737265
 18c:	7468616c 	strbtvc	r6, [r8], #-364	; 0xfffffe94
 190:	442f6769 	strtmi	r6, [pc], #-1897	; 198 <startup-0x1ffffe68>
 194:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
 198:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
 19c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 1a0:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 1a4:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
 1a8:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
 1ac:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; 20 <startup-0x1fffffe0>
 1b0:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 1b4:	31305441 	teqcc	r0, r1, asr #8
 1b8:	616d2d37 	cmnvs	sp, r7, lsr sp
 1bc:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 1c0:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 1c4:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 1c8:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 1cc:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 1d0:	2f736573 	svccs	0x00736573
 1d4:	6f6f7073 	svcvs	0x006f7073
 1d8:	765f7970 			; <UNDEFINED> instruction: 0x765f7970
 1dc:	74732f32 	ldrbtvc	r2, [r3], #-3890	; 0xfffff0ce
 1e0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1e4:	00632e70 	rsbeq	r2, r3, r0, ror lr
 1e8:	6c6c6177 	stfvse	f6, [ip], #-476	; 0xfffffe24
 1ec:	7700795f 	smlsdvc	r0, pc, r9, r7	; <UNPREDICTABLE>
 1f0:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 1f4:	63736100 	cmnvs	r3, #0, 2
 1f8:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1fc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 200:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 204:	00676e69 	rsbeq	r6, r7, r9, ror #28
 208:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 20c:	736f7000 	cmnvc	pc, #0
 210:	6f697469 	svcvs	0x00697469
 214:	68635f6e 	stmdavs	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 218:	696b6365 	stmdbvs	fp!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 21c:	6500676e 	strvs	r6, [r0, #-1902]	; 0xfffff892
 220:	5f746978 	svcpl	0x00746978
 224:	78650078 	stmdavc	r5!, {r3, r4, r5, r6}^
 228:	795f7469 	ldmdbvc	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 22c:	6c617700 	stclvs	7, cr7, [r1], #-0
 230:	00785f6c 	rsbseq	r5, r8, ip, ror #30
 234:	6570736f 	ldrbvs	r7, [r0, #-879]!	; 0xfffffc91
 238:	00726465 	rsbseq	r6, r2, r5, ror #8
 23c:	6c6c6177 	stfvse	f6, [ip], #-476	; 0xfffffe24
 240:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 244:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 248:	656b0073 	strbvs	r0, [fp, #-115]!	; 0xffffff8d
 24c:	6d006279 	sfmvs	f6, 4, [r0, #-484]	; 0xfffffe1c
 250:	6d726d65 	ldclvs	13, cr6, [r2, #-404]!	; 0xfffffe6c
 254:	67694870 			; <UNDEFINED> instruction: 0x67694870
 258:	53500068 	cmppl	r0, #104	; 0x68
 25c:	54495250 	strbpl	r5, [r9], #-592	; 0xfffffdb0
 260:	53740045 	cmnpl	r4, #69	; 0x45
 264:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 268:	73610065 	cmnvc	r1, #101	; 0x65
 26c:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 270:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 274:	695f7961 	ldmdbvs	pc, {r0, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
 278:	0074696e 	rsbseq	r6, r4, lr, ror #18
 27c:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
 280:	00474643 	subeq	r4, r7, r3, asr #12
 284:	72737472 	rsbsvc	r7, r3, #1912602624	; 0x72000000
 288:	736e7500 	cmnvc	lr, #0, 10
 28c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 290:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 294:	63007261 	movwvs	r7, #609	; 0x261
 298:	7263706d 	rsbvc	r7, r3, #109	; 0x6d
 29c:	74786500 	ldrbtvc	r6, [r8], #-1280	; 0xfffffb00
 2a0:	00726369 	rsbseq	r6, r2, r9, ror #6
 2a4:	74636976 	strbtvc	r6, [r3], #-2422	; 0xfffff68a
 2a8:	5f79726f 	svcpl	0x0079726f
 2ac:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
 2b0:	32656761 	rsbcc	r6, r5, #25427968	; 0x1840000
 2b4:	6f707300 	svcvs	0x00707300
 2b8:	5f79706f 	svcpl	0x0079706f
 2bc:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 2c0:	00726574 	rsbseq	r6, r2, r4, ror r5
 2c4:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 2c8:	6170735f 	cmnvs	r0, pc, asr r3
 2cc:	50006563 	andpl	r6, r0, r3, ror #10
 2d0:	49525053 	ldmdbmi	r2, {r0, r1, r4, r6, ip, lr}^
 2d4:	4f5f4554 	svcmi	0x005f4554
 2d8:	43454a42 	movtmi	r4, #23106	; 0x5a42
 2dc:	6f700054 	svcvs	0x00700054
 2e0:	00785f73 	rsbseq	r5, r8, r3, ror pc
 2e4:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 2e8:	4c347263 	lfmmi	f7, 4, [r4], #-396	; 0xfffffe74
 2ec:	7300776f 	movwvc	r7, #1903	; 0x76f
 2f0:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 2f4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 2f8:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
 2fc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 300:	70675f00 	rsbvc	r5, r7, r0, lsl #30
 304:	73006f69 	movwvc	r6, #3945	; 0xf69
 308:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 30c:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
 310:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
 314:	70730031 	rsbsvc	r0, r3, r1, lsr r0
 318:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 31c:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
 320:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
 324:	6500785f 	strvs	r7, [r0, #-2143]	; 0xfffff7a1
 328:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
 32c:	69483372 	stmdbvs	r8, {r1, r4, r5, r6, r8, r9, ip, sp}^
 330:	6d006867 	stcvs	8, cr6, [r0, #-412]	; 0xfffffe64
 334:	6d726d65 	ldclvs	13, cr6, [r2, #-404]!	; 0xfffffe6c
 338:	656b0070 	strbvs	r0, [fp, #-112]!	; 0xffffff90
 33c:	616f6279 	smcvs	63017	; 0xf629
 340:	695f6472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
 344:	0074696e 	rsbseq	r6, r4, lr, ror #18
 348:	74636976 	strbtvc	r6, [r3], #-2422	; 0xfffff68a
 34c:	5f79726f 	svcpl	0x0079726f
 350:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
 354:	31656761 	cmncc	r5, r1, ror #14
 358:	6f687300 	svcvs	0x00687300
 35c:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 360:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 364:	2064656e 	rsbcs	r6, r4, lr, ror #10
 368:	00746e69 	rsbseq	r6, r4, r9, ror #28
 36c:	4f495047 	svcmi	0x00495047
 370:	736f7000 	cmnvc	pc, #0
 374:	6500795f 	strvs	r7, [r0, #-2399]	; 0xfffff6a1
 378:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
 37c:	69483172 	stmdbvs	r8, {r1, r4, r5, r6, r8, ip, sp}^
 380:	5f006867 	svcpl	0x00006867
 384:	63737973 	cmnvs	r3, #1884160	; 0x1cc000
 388:	69006766 	stmdbvs	r0, {r1, r2, r5, r6, r8, r9, sl, sp, lr}
 38c:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 390:	74006867 	strvc	r6, [r0], #-2151	; 0xfffff799
 394:	69727053 	ldmdbvs	r2!, {r0, r1, r4, r6, ip, sp, lr}^
 398:	624f6574 	subvs	r6, pc, #116, 10	; 0x1d000000
 39c:	7865006a 	stmdavc	r5!, {r1, r3, r5, r6}^
 3a0:	72636974 	rsbvc	r6, r3, #116, 18	; 0x1d0000
 3a4:	776f4c31 			; <UNDEFINED> instruction: 0x776f4c31
 3a8:	61726400 	cmnvs	r2, r0, lsl #8
 3ac:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 3b0:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 3b4:	00646565 	rsbeq	r6, r4, r5, ror #10
 3b8:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
 3bc:	70610049 	rsbvc	r0, r1, r9, asr #32
 3c0:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
 3c4:	65007469 	strvs	r7, [r0, #-1129]	; 0xfffffb97
 3c8:	63697478 	cmnvs	r9, #120, 8	; 0x78000000
 3cc:	69483272 	stmdbvs	r8, {r1, r4, r5, r6, r9, ip, sp}^
 3d0:	70006867 	andvc	r6, r0, r7, ror #16
 3d4:	72647075 	rsbvc	r7, r4, #117	; 0x75
 3d8:	73746600 	cmnvc	r4, #0, 12
 3dc:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 3e0:	6d5f7469 	cfldrdvs	mvd7, [pc, #-420]	; 244 <startup-0x1ffffdbc>
 3e4:	675f7061 	ldrbvs	r7, [pc, -r1, rrx]
 3e8:	00646972 	rsbeq	r6, r4, r2, ror r9
 3ec:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 3f0:	6d700072 	ldclvs	0, cr0, [r0, #-456]!	; 0xfffffe38
 3f4:	74794263 	ldrbtvc	r4, [r9], #-611	; 0xfffffd9d
 3f8:	73003365 	movwvc	r3, #869	; 0x365
 3fc:	00747270 	rsbseq	r7, r4, r0, ror r2
 400:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 404:	00707574 	rsbseq	r7, r0, r4, ror r5
 408:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 40c:	48347263 	ldmdami	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}
 410:	00686769 	rsbeq	r6, r8, r9, ror #14
 414:	6f6f7073 	svcvs	0x006f7073
 418:	635f7970 	cmpvs	pc, #112, 18	; 0x1c0000
 41c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
 420:	795f746e 	ldmdbvc	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 424:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
 428:	6f705f74 	svcvs	0x00705f74
 42c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 430:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
 434:	00785f72 	rsbseq	r5, r8, r2, ror pc
 438:	5f726964 	svcpl	0x00726964
 43c:	646f0079 	strbtvs	r0, [pc], #-121	; 444 <startup-0x1ffffbbc>
 440:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 444:	69777300 	ldmdbvs	r7!, {r8, r9, ip, sp, lr}^
 448:	73007265 	movwvc	r7, #613	; 0x265
 44c:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 450:	00785f79 	rsbseq	r5, r8, r9, ror pc
 454:	6f6f7073 	svcvs	0x006f7073
 458:	795f7970 	ldmdbvc	pc, {r4, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
 45c:	6d756400 	cfldrdvs	mvd6, [r5, #-0]
 460:	665f796d 	ldrbvs	r7, [pc], -sp, ror #18
 464:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 468:	326e6f69 	rsbcc	r6, lr, #420	; 0x1a4
 46c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 470:	78655f74 	stmdavc	r5!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 474:	73007469 	movwvc	r7, #1129	; 0x469
 478:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 47c:	70735f79 	rsbsvc	r5, r3, r9, ror pc
 480:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 484:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 488:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 48c:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 490:	3a430065 	bcc	10c062c <startup-0x1ef3f9d4>
 494:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 498:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 2d8 <startup-0x1ffffd28>
 49c:	69746861 	ldmdbvs	r4!, {r0, r5, r6, fp, sp, lr}^
 4a0:	6f442f67 	svcvs	0x00442f67
 4a4:	6f6c6e77 	svcvs	0x006c6e77
 4a8:	2f736461 	svccs	0x00736461
 4ac:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 4b0:	30544144 	subscc	r4, r4, r4, asr #2
 4b4:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 4b8:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 4bc:	6f4d2f72 	svcvs	0x004d2f72
 4c0:	41442d70 	hvcmi	17104	; 0x42d0
 4c4:	37313054 			; <UNDEFINED> instruction: 0x37313054
 4c8:	73616d2d 	cmnvc	r1, #2880	; 0xb40
 4cc:	2f726574 	svccs	0x00726574
 4d0:	7362614c 	cmnvc	r2, #76, 2
 4d4:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 4d8:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 4dc:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 4e0:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 4e4:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 4e8:	32765f79 	rsbscc	r5, r6, #484	; 0x1e4
 4ec:	7270732f 	rsbsvc	r7, r0, #-1140850688	; 0xbc000000
 4f0:	73657469 	cmnvc	r5, #1761607680	; 0x69000000
 4f4:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 4f8:	5f74696e 	svcpl	0x0074696e
 4fc:	6f6f7073 	svcvs	0x006f7073
 500:	77007970 	smlsdxvc	r0, r0, r9, r7
 504:	5f6c6c61 	svcpl	0x006c6c61
 508:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 50c:	705f6574 	subsvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
 510:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 514:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
 518:	5f74696e 	svcpl	0x0074696e
 51c:	6c6c6177 	stfvse	f6, [ip], #-476	; 0xfffffe24
 520:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 524:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 528:	5f657469 	svcpl	0x00657469
 52c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 530:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 534:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 538:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 53c:	70735f65 	rsbsvc	r5, r3, r5, ror #30
 540:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 544:	6a626f5f 	bvs	189c2c8 <startup-0x1e763d38>
 548:	00746365 	rsbseq	r6, r4, r5, ror #6
 54c:	61647075 	smcvs	18181	; 0x4705
 550:	735f6574 	cmpvc	pc, #116, 10	; 0x1d000000
 554:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 558:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 55c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 560:	6c617700 	stclvs	7, cr7, [r1], #-0
 564:	70735f6c 	rsbsvc	r5, r3, ip, ror #30
 568:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 56c:	61726400 	cmnvs	r2, r0, lsl #8
 570:	70735f77 	rsbsvc	r5, r3, r7, ror pc
 574:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 578:	6f707300 	svcvs	0x00707300
 57c:	5f79706f 	svcpl	0x0079706f
 580:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 584:	77006574 	smlsdxvc	r0, r4, r5, r6
 588:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 58c:	5f6e695f 	svcpl	0x006e695f
 590:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 594:	78650073 	stmdavc	r5!, {r0, r1, r4, r5, r6}^
 598:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 59c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 5a0:	6f705f65 	svcvs	0x00705f65
 5a4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 5a8:	78650072 	stmdavc	r5!, {r1, r4, r5, r6}^
 5ac:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 5b0:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 5b4:	6f6c0065 	svcvs	0x006c0065
 5b8:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 5bc:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 5c0:	72640065 	rsbvc	r0, r4, #101	; 0x65
 5c4:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 5c8:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 5cc:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 5d0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 5d4:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 5d8:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 5dc:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 5e0:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 5e4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 5e8:	6d756400 	cfldrdvs	mvd6, [r5, #-0]
 5ec:	665f796d 	ldrbvs	r7, [pc], -sp, ror #18
 5f0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 5f4:	316e6f69 	cmncc	lr, r9, ror #30
 5f8:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
 5fc:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 600:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 604:	2f3a4300 	svccs	0x003a4300
 608:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 60c:	616c2f73 	smcvs	49907	; 0xc2f3
 610:	67697468 	strbvs	r7, [r9, -r8, ror #8]!
 614:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
 618:	616f6c6e 	cmnvs	pc, lr, ror #24
 61c:	4d2f7364 	stcmi	3, cr7, [pc, #-400]!	; 494 <startup-0x1ffffb6c>
 620:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 624:	31305441 	teqcc	r0, r1, asr #8
 628:	616d2d37 	cmnvs	sp, r7, lsr sp
 62c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 630:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 634:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 638:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
 63c:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
 640:	4c2f7265 	sfmmi	f7, 4, [pc], #-404	; 4b4 <startup-0x1ffffb4c>
 644:	20736261 	rsbscs	r6, r3, r1, ror #4
 648:	20646e61 	rsbcs	r6, r4, r1, ror #28
 64c:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 650:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 654:	70732f73 	rsbsvc	r2, r3, r3, ror pc
 658:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 65c:	2f32765f 	svccs	0x0032765f
 660:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 664:	632e6461 			; <UNDEFINED> instruction: 0x632e6461
 668:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 670 <startup-0x1ffff990>
 66c:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 670:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 674:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
 678:	50006e6d 	andpl	r6, r0, sp, ror #28
 67c:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 568 <startup-0x1ffffa98>
 680:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 684:	2f3a4300 	svccs	0x003a4300
 688:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 68c:	616c2f73 	smcvs	49907	; 0xc2f3
 690:	67697468 	strbvs	r7, [r9, -r8, ror #8]!
 694:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
 698:	616f6c6e 	cmnvs	pc, lr, ror #24
 69c:	4d2f7364 	stcmi	3, cr7, [pc, #-400]!	; 514 <startup-0x1ffffaec>
 6a0:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 6a4:	31305441 	teqcc	r0, r1, asr #8
 6a8:	616d2d37 	cmnvs	sp, r7, lsr sp
 6ac:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 6b0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 6b4:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 6b8:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
 6bc:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
 6c0:	4c2f7265 	sfmmi	f7, 4, [pc], #-404	; 534 <startup-0x1ffffacc>
 6c4:	20736261 	rsbscs	r6, r3, r1, ror #4
 6c8:	20646e61 	rsbcs	r6, r4, r1, ror #28
 6cc:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 6d0:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 6d4:	70732f73 	rsbsvc	r2, r3, r3, ror pc
 6d8:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 6dc:	2f32765f 	svccs	0x0032765f
 6e0:	70617267 	rsbvc	r7, r1, r7, ror #4
 6e4:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 6e8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 6ec:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 6f0:	7a697300 	bvc	1a5d2f8 <startup-0x1e5a2d08>
 6f4:	00785f65 	rsbseq	r5, r8, r5, ror #30
 6f8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 6fc:	6400795f 	strvs	r7, [r0], #-2399	; 0xfffff6a1
 700:	5f776172 	svcpl	0x00776172
 704:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 708:	73007463 	movwvc	r7, #1123	; 0x463
 70c:	63656c65 	cmnvs	r5, #25856	; 0x6500
 710:	6f635f74 	svcvs	0x00635f74
 714:	6f72746e 	svcvs	0x0072746e
 718:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 71c:	61726700 	cmnvs	r2, r0, lsl #14
 720:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 724:	6165725f 	cmnvs	r5, pc, asr r2
 728:	61645f64 	cmnvs	r4, r4, ror #30
 72c:	70006174 	andvc	r6, r0, r4, ror r1
 730:	00656761 	rsbeq	r6, r5, r1, ror #14
 734:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 738:	5074006c 	rsbspl	r0, r4, ip, rrx
 73c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 740:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 744:	7800544e 	stmdavc	r0, {r1, r2, r3, r6, sl, ip, lr}
 748:	7463615f 	strbtvc	r6, [r3], #-351	; 0xfffffea1
 74c:	006c6175 	rsbeq	r6, ip, r5, ror r1
 750:	70617267 	rsbvc	r7, r1, r7, ror #4
 754:	5f636968 	svcpl	0x00636968
 758:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 75c:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
 760:	6300706d 	movwvs	r7, #109	; 0x6d
 764:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 768:	725f6c6f 	subsvc	r6, pc, #28416	; 0x6f00
 76c:	73696765 	cmnvc	r9, #26476544	; 0x1940000
 770:	00726574 	rsbseq	r6, r2, r4, ror r5
 774:	70617267 	rsbvc	r7, r1, r7, ror #4
 778:	5f636968 	svcpl	0x00636968
 77c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 780:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 784:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 788:	67007261 	strvs	r7, [r0, -r1, ror #4]
 78c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 790:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 794:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 798:	7a696c61 	bvc	1a5b924 <startup-0x1e5a46dc>
 79c:	72670065 	rsbvc	r0, r7, #101	; 0x65
 7a0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 7a4:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 7a8:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 7ac:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 7b0:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
 7b4:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 6a0 <startup-0x1ffff960>
 7b8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 7bc:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 7c0:	745f3874 	ldrbvc	r3, [pc], #-2164	; 7c8 <startup-0x1ffff838>
 7c4:	61726700 	cmnvs	r2, r0, lsl #14
 7c8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 7cc:	70736964 	rsbsvc	r6, r3, r4, ror #18
 7d0:	5f79616c 	svcpl	0x0079616c
 7d4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 7d8:	73696400 	cmnvc	r9, #0, 8
 7dc:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 7e0:	7375625f 	cmnvc	r5, #-268435451	; 0xf0000005
 7e4:	74735f79 	ldrbtvc	r5, [r3], #-3961	; 0xfffff087
 7e8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 7ec:	73616d00 	cmnvc	r1, #0, 26
 7f0:	7267006b 	rsbvc	r0, r7, #107	; 0x6b
 7f4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 7f8:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 7fc:	5f657469 	svcpl	0x00657469
 800:	61746164 	cmnvs	r4, r4, ror #2
 804:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 808:	6a626f5f 	bvs	189c58c <startup-0x1e763a74>
 80c:	5f746365 	svcpl	0x00746365
 810:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 814:	72670064 	rsbvc	r0, r7, #100	; 0x64
 818:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 81c:	61775f63 	cmnvs	r7, r3, ror #30
 820:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 824:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 828:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 82c:	63007865 	movwvs	r7, #2149	; 0x865
 830:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 834:	6a626f5f 	bvs	189c5b8 <startup-0x1e763a48>
 838:	00746365 	rsbseq	r6, r4, r5, ror #6
 83c:	6a624f74 	bvs	1894614 <startup-0x1e76b9ec>
 840:	61726700 	cmnvs	r2, r0, lsl #14
 844:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 848:	6165725f 	cmnvs	r5, pc, asr r2
 84c:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
 850:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 854:	0073746e 	rsbseq	r7, r3, lr, ror #8
 858:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 85c:	6a626f5f 	bvs	189c5e0 <startup-0x1e763a20>
 860:	00746365 	rsbseq	r6, r4, r5, ror #6
 864:	70617267 	rsbvc	r7, r1, r7, ror #4
 868:	5f636968 	svcpl	0x00636968
 86c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 870:	6f635f65 	svcvs	0x00635f65
 874:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 878:	4f500064 	svcmi	0x00500064
 87c:	43454a42 	movtmi	r4, #23106	; 0x5a42
 880:	72670054 	rsbvc	r0, r7, #84	; 0x54
 884:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 888:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 88c:	5f726165 	svcpl	0x00726165
 890:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 894:	64006e65 	strvs	r6, [r0], #-3685	; 0xfffff19b
 898:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 89c:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 8a0:	6900696c 	stmdbvs	r0, {r2, r3, r5, r6, r8, fp, sp, lr}
 8a4:	5f74696e 	svcpl	0x0074696e
 8a8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 8ac:	5f6b6369 	svcpl	0x006b6369
 8b0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8b4:	70757272 	rsbsvc	r7, r5, r2, ror r2
 8b8:	61685f74 	smcvs	34292	; 0x85f4
 8bc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 8c0:	6f630072 	svcvs	0x00630072
 8c4:	00746e75 	rsbseq	r6, r4, r5, ror lr
 8c8:	54535953 	ldrbpl	r5, [r3], #-2387	; 0xfffff6ad
 8cc:	5f4b4349 	svcpl	0x004b4349
 8d0:	55525453 	ldrbpl	r5, [r2, #-1107]	; 0xfffffbad
 8d4:	64005443 	strvs	r5, [r0], #-1091	; 0xfffffbbd
 8d8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 8dc:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 8e0:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 8e4:	695f7470 	ldmdbvs	pc, {r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 8e8:	0074696e 	rsbseq	r6, r4, lr, ror #18
 8ec:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 8f0:	61747300 	cmnvs	r4, r0, lsl #6
 8f4:	645f7472 	ldrbvs	r7, [pc], #-1138	; 8fc <startup-0x1ffff704>
 8f8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 8fc:	616f6c00 	cmnvs	pc, r0, lsl #24
 900:	65640064 	strbvs	r0, [r4, #-100]!	; 0xffffff9c
 904:	5f79616c 	svcpl	0x0079616c
 908:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 90c:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 910:	5f79616c 	svcpl	0x0079616c
 914:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 918:	74630073 	strbtvc	r0, [r3], #-115	; 0xffffff8d
 91c:	68546c72 	ldmdavs	r4, {r1, r4, r5, r6, sl, fp, sp, lr}^
 920:	42647269 	rsbmi	r7, r4, #-1879048186	; 0x90000006
 924:	00657479 	rsbeq	r7, r5, r9, ror r4
 928:	616c6564 	cmnvs	ip, r4, ror #10
 92c:	6f635f79 	svcvs	0x00635f79
 930:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
 934:	74630072 	strbtvc	r0, [r3], #-114	; 0xffffff8e
 938:	69466c72 	stmdbvs	r6, {r1, r4, r5, r6, sl, fp, sp, lr}^
 93c:	42747372 	rsbsmi	r7, r4, #-939524095	; 0xc8000001
 940:	00657479 	rsbeq	r7, r5, r9, ror r4
 944:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
 948:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 94c:	65720031 	ldrbvs	r0, [r2, #-49]!	; 0xffffffcf
 950:	76726573 			; <UNDEFINED> instruction: 0x76726573
 954:	00326465 	eorseq	r6, r2, r5, ror #8
 958:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
 95c:	6b636974 	blvs	18daf34 <startup-0x1e7250cc>
 960:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 964:	315f7961 	cmpcc	pc, r1, ror #18
 968:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 96c:	75700069 	ldrbvc	r0, [r0, #-105]!	; 0xffffff97
 970:	7365736c 	cmnvc	r5, #108, 6	; 0xb0000001
 974:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 978:	315f7961 	cmpcc	pc, r1, ror #18
 97c:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 980:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
 984:	5f79616c 	svcpl	0x0079616c
 988:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 98c:	6163006f 	cmnvs	r3, pc, rrx
 990:	0062696c 	rsbeq	r6, r2, ip, ror #18
 994:	552f3a43 	strpl	r3, [pc, #-2627]!	; ffffff59 <systick_flag+0xdfffe7f5>
 998:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 99c:	68616c2f 	stmdavs	r1!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
 9a0:	2f676974 	svccs	0x00676974
 9a4:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
 9a8:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 9ac:	6f4d2f73 	svcvs	0x004d2f73
 9b0:	41442d70 	hvcmi	17104	; 0x42d0
 9b4:	37313054 			; <UNDEFINED> instruction: 0x37313054
 9b8:	73616d2d 	cmnvc	r1, #2880	; 0xb40
 9bc:	2f726574 	svccs	0x00726574
 9c0:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 9c4:	30544144 	subscc	r4, r4, r4, asr #2
 9c8:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 9cc:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 9d0:	614c2f72 	hvcvs	49906	; 0xc2f2
 9d4:	61207362 			; <UNDEFINED> instruction: 0x61207362
 9d8:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 9dc:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 9e0:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 9e4:	6f70732f 	svcvs	0x0070732f
 9e8:	5f79706f 	svcpl	0x0079706f
 9ec:	642f3276 	strtvs	r3, [pc], #-630	; 9f4 <startup-0x1ffff60c>
 9f0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 9f4:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 9f8:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 9fc:	632e7470 			; <UNDEFINED> instruction: 0x632e7470
 a00:	73797300 	cmnvc	r9, #0, 6
 a04:	6b636974 	blvs	18dafdc <startup-0x1e725024>
 a08:	616c665f 	cmnvs	ip, pc, asr r6
 a0c:	68630067 	stmdavs	r3!, {r0, r1, r2, r5, r6}^
 a10:	63617261 	cmnvs	r1, #268435462	; 0x10000006
 a14:	00726574 	rsbseq	r6, r2, r4, ror r5
 a18:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 a1c:	765f6e72 			; <UNDEFINED> instruction: 0x765f6e72
 a20:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 a24:	63736100 	cmnvs	r3, #0, 2
 a28:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 a2c:	5f646165 	svcpl	0x00646165
 a30:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 a34:	70007375 	andvc	r7, r0, r5, ror r3
 a38:	5f74736f 	svcpl	0x0074736f
 a3c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 a40:	5f646e61 	svcpl	0x00646e61
 a44:	616c6564 	cmnvs	ip, r4, ror #10
 a48:	3a430079 	bcc	10c0c34 <startup-0x1ef3f3cc>
 a4c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 a50:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 890 <startup-0x1ffff770>
 a54:	69746861 	ldmdbvs	r4!, {r0, r5, r6, fp, sp, lr}^
 a58:	6f442f67 	svcvs	0x00442f67
 a5c:	6f6c6e77 	svcvs	0x006c6e77
 a60:	2f736461 	svccs	0x00736461
 a64:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 a68:	30544144 	subscc	r4, r4, r4, asr #2
 a6c:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 a70:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 a74:	6f4d2f72 	svcvs	0x004d2f72
 a78:	41442d70 	hvcmi	17104	; 0x42d0
 a7c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 a80:	73616d2d 	cmnvc	r1, #2880	; 0xb40
 a84:	2f726574 	svccs	0x00726574
 a88:	7362614c 	cmnvc	r2, #76, 2
 a8c:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
 a90:	65786520 	ldrbvs	r6, [r8, #-1312]!	; 0xfffffae0
 a94:	73696372 	cmnvc	r9, #-939524095	; 0xc8000001
 a98:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
 a9c:	706f6f70 	rsbvc	r6, pc, r0, ror pc	; <UNPREDICTABLE>
 aa0:	32765f79 	rsbscc	r5, r6, #484	; 0x1e4
 aa4:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 aa8:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
 aac:	616c7073 	smcvs	50947	; 0xc703
 ab0:	00632e79 	rsbeq	r2, r3, r9, ror lr
 ab4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 ab8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 abc:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 ac0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 ac4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 ac8:	73610072 	cmnvc	r1, #114	; 0x72
 acc:	5f696963 	svcpl	0x00696963
 ad0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 ad4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 ad8:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 adc:	726f7000 	rsbvc	r7, pc, #0
 ae0:	61765f74 	cmnvs	r6, r4, ror pc
 ae4:	7361006c 	cmnvc	r1, #108	; 0x6c
 ae8:	5f696963 	svcpl	0x00696963
 aec:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 af0:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 af4:	64610064 	strbtvs	r0, [r1], #-100	; 0xffffff9c
 af8:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 afc:	73610073 	cmnvc	r1, #115	; 0x73
 b00:	5f696963 	svcpl	0x00696963
 b04:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 b08:	61645f65 	cmnvs	r4, r5, ror #30
 b0c:	61006174 	tstvs	r0, r4, ror r1
 b10:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 b14:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 9a0 <startup-0x1ffff660>
 b18:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 b1c:	63736100 	cmnvs	r3, #0, 2
 b20:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 b24:	5f6c7274 	svcpl	0x006c7274
 b28:	5f746962 	svcpl	0x00746962
 b2c:	61656c63 	cmnvs	r5, r3, ror #24
 b30:	73610072 	cmnvc	r1, #114	; 0x72
 b34:	5f696963 	svcpl	0x00696963
 b38:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 b3c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 b40:	73610061 	cmnvc	r1, #97	; 0x61
 b44:	5f696963 	svcpl	0x00696963
 b48:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 b4c:	6f635f65 	svcvs	0x00635f65
 b50:	6f72746e 	svcvs	0x0072746e
 b54:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 b58:	63736100 	cmnvs	r3, #0, 2
 b5c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 b60:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 b64:	6168635f 	cmnvs	r8, pc, asr r3
 b68:	Address 0x00000b68 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000001f4 	strdeq	r0, [r0], -r4
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	980e4101 	stmdals	lr, {r0, r8, lr}
  3c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000204 	andcs	r0, r0, r4, lsl #4
  4c:	0000004c 	andeq	r0, r0, ip, asr #32
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	20000250 	andcs	r0, r0, r0, asr r2
  68:	00000084 	andeq	r0, r0, r4, lsl #1
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  7c:	0000070d 	andeq	r0, r0, sp, lsl #14
  80:	00000020 	andeq	r0, r0, r0, lsr #32
  84:	00000000 	andeq	r0, r0, r0
  88:	200002d4 	ldrdcs	r0, [r0], -r4
  8c:	00000130 	andeq	r0, r0, r0, lsr r1
  90:	400c0e41 	andmi	r0, ip, r1, asr #28
  94:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  98:	018e4002 	orreq	r4, lr, r2
  9c:	01900e41 	orrseq	r0, r0, r1, asr #28
  a0:	00070d41 	andeq	r0, r7, r1, asr #26
  a4:	00000018 	andeq	r0, r0, r8, lsl r0
  a8:	00000000 	andeq	r0, r0, r0
  ac:	20000404 	andcs	r0, r0, r4, lsl #8
  b0:	0000008c 	andeq	r0, r0, ip, lsl #1
  b4:	40080e41 	andmi	r0, r8, r1, asr #28
  b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  c0:	0000000c 	andeq	r0, r0, ip
  c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  c8:	7c020001 	stcvc	0, cr0, [r2], {1}
  cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	000000c0 	andeq	r0, r0, r0, asr #1
  d8:	20000490 	mulcs	r0, r0, r4
  dc:	0000002c 	andeq	r0, r0, ip, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	000000c0 	andeq	r0, r0, r0, asr #1
  f8:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
  fc:	000000da 	ldrdeq	r0, [r0], -sl
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	300e4101 	andcc	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	000000c0 	andeq	r0, r0, r0, asr #1
 118:	20000596 	mulcs	r0, r6, r5
 11c:	00000022 	andeq	r0, r0, r2, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	000000c0 	andeq	r0, r0, r0, asr #1
 138:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
 13c:	00000022 	andeq	r0, r0, r2, lsr #32
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	100e4101 	andne	r4, lr, r1, lsl #2
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	000000c0 	andeq	r0, r0, r0, asr #1
 158:	200005da 	ldrdcs	r0, [r0], -sl
 15c:	0000009e 	muleq	r0, lr, r0
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	000000c0 	andeq	r0, r0, r0, asr #1
 178:	20000678 	andcs	r0, r0, r8, ror r6
 17c:	00000020 	andeq	r0, r0, r0, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	180e4101 	stmdane	lr, {r0, r8, lr}
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	000000c0 	andeq	r0, r0, r0, asr #1
 198:	20000698 	mulcs	r0, r8, r6
 19c:	00000010 	andeq	r0, r0, r0, lsl r0
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	000000c0 	andeq	r0, r0, r0, asr #1
 1b8:	200006a8 	andcs	r0, r0, r8, lsr #13
 1bc:	00000014 	andeq	r0, r0, r4, lsl r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	000000c0 	andeq	r0, r0, r0, asr #1
 1d8:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
 1dc:	00000088 	andeq	r0, r0, r8, lsl #1
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	380e4101 	stmdacc	lr, {r0, r8, lr}
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000000c0 	andeq	r0, r0, r0, asr #1
 1f8:	20000744 	andcs	r0, r0, r4, asr #14
 1fc:	00000088 	andeq	r0, r0, r8, lsl #1
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	380e4101 	stmdacc	lr, {r0, r8, lr}
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	000000c0 	andeq	r0, r0, r0, asr #1
 218:	200007cc 	andcs	r0, r0, ip, asr #15
 21c:	00000088 	andeq	r0, r0, r8, lsl #1
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	380e4101 	stmdacc	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	000000c0 	andeq	r0, r0, r0, asr #1
 238:	20000854 	andcs	r0, r0, r4, asr r8
 23c:	0000002e 	andeq	r0, r0, lr, lsr #32
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	100e4101 	andne	r4, lr, r1, lsl #2
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000000c 	andeq	r0, r0, ip
 254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 258:	7c020001 	stcvc	0, cr0, [r2], {1}
 25c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 260:	00000018 	andeq	r0, r0, r8, lsl r0
 264:	00000250 	andeq	r0, r0, r0, asr r2
 268:	20000884 	andcs	r0, r0, r4, lsl #17
 26c:	00000060 	andeq	r0, r0, r0, rrx
 270:	40080e41 	andmi	r0, r8, r1, asr #28
 274:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 278:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	00000250 	andeq	r0, r0, r0, asr r2
 284:	200008e4 	andcs	r0, r0, r4, ror #17
 288:	0000006c 	andeq	r0, r0, ip, rrx
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	100e4101 	andne	r4, lr, r1, lsl #2
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	00000250 	andeq	r0, r0, r0, asr r2
 2a4:	20000950 	andcs	r0, r0, r0, asr r9
 2a8:	00000058 	andeq	r0, r0, r8, asr r0
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	100e4101 	andne	r4, lr, r1, lsl #2
 2b8:	00070d41 	andeq	r0, r7, r1, asr #26
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	00000250 	andeq	r0, r0, r0, asr r2
 2c4:	200009a8 	andcs	r0, r0, r8, lsr #19
 2c8:	00000054 	andeq	r0, r0, r4, asr r0
 2cc:	40080e41 	andmi	r0, r8, r1, asr #28
 2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d4:	100e4101 	andne	r4, lr, r1, lsl #2
 2d8:	00070d41 	andeq	r0, r7, r1, asr #26
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000002dc 	ldrdeq	r0, [r0], -ip
 2f4:	200009fc 	strdcs	r0, [r0], -ip
 2f8:	00000060 	andeq	r0, r0, r0, rrx
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	180e4101 	stmdane	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	000002dc 	ldrdeq	r0, [r0], -ip
 314:	20000a5c 	andcs	r0, r0, ip, asr sl
 318:	00000068 	andeq	r0, r0, r8, rrx
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	180e4101 	stmdane	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000002dc 	ldrdeq	r0, [r0], -ip
 334:	20000ac4 	andcs	r0, r0, r4, asr #21
 338:	0000005a 	andeq	r0, r0, sl, asr r0
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	000002dc 	ldrdeq	r0, [r0], -ip
 354:	20000b1e 	andcs	r0, r0, lr, lsl fp
 358:	00000076 	andeq	r0, r0, r6, ror r0
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	000002dc 	ldrdeq	r0, [r0], -ip
 374:	20000b94 	mulcs	r0, r4, fp
 378:	00000090 	muleq	r0, r0, r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	180e4101 	stmdane	lr, {r0, r8, lr}
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	000002dc 	ldrdeq	r0, [r0], -ip
 394:	20000c24 	andcs	r0, r0, r4, lsr #24
 398:	00000080 	andeq	r0, r0, r0, lsl #1
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	100e4101 	andne	r4, lr, r1, lsl #2
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002dc 	ldrdeq	r0, [r0], -ip
 3b4:	20000ca4 	andcs	r0, r0, r4, lsr #25
 3b8:	00000040 	andeq	r0, r0, r0, asr #32
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	100e4101 	andne	r4, lr, r1, lsl #2
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	000002dc 	ldrdeq	r0, [r0], -ip
 3d4:	20000ce4 	andcs	r0, r0, r4, ror #25
 3d8:	00000046 	andeq	r0, r0, r6, asr #32
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	100e4101 	andne	r4, lr, r1, lsl #2
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	000002dc 	ldrdeq	r0, [r0], -ip
 3f4:	20000d2a 	andcs	r0, r0, sl, lsr #26
 3f8:	0000002a 	andeq	r0, r0, sl, lsr #32
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	100e4101 	andne	r4, lr, r1, lsl #2
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	00000018 	andeq	r0, r0, r8, lsl r0
 410:	000002dc 	ldrdeq	r0, [r0], -ip
 414:	20000d54 	andcs	r0, r0, r4, asr sp
 418:	0000005c 	andeq	r0, r0, ip, asr r0
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 428:	0000001c 	andeq	r0, r0, ip, lsl r0
 42c:	000002dc 	ldrdeq	r0, [r0], -ip
 430:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 434:	00000066 	andeq	r0, r0, r6, rrx
 438:	40080e41 	andmi	r0, r8, r1, asr #28
 43c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 440:	100e4101 	andne	r4, lr, r1, lsl #2
 444:	00070d41 	andeq	r0, r7, r1, asr #26
 448:	00000020 	andeq	r0, r0, r0, lsr #32
 44c:	000002dc 	ldrdeq	r0, [r0], -ip
 450:	20000e16 	andcs	r0, r0, r6, lsl lr
 454:	000001a6 	andeq	r0, r0, r6, lsr #3
 458:	400c0e41 	andmi	r0, ip, r1, asr #28
 45c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 460:	018e4002 	orreq	r4, lr, r2
 464:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 468:	0000070d 	andeq	r0, r0, sp, lsl #14
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000002dc 	ldrdeq	r0, [r0], -ip
 474:	20000fbc 			; <UNDEFINED> instruction: 0x20000fbc
 478:	00000064 	andeq	r0, r0, r4, rrx
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	180e4101 	stmdane	lr, {r0, r8, lr}
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	000002dc 	ldrdeq	r0, [r0], -ip
 494:	20001020 	andcs	r1, r0, r0, lsr #32
 498:	00000064 	andeq	r0, r0, r4, rrx
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	000002dc 	ldrdeq	r0, [r0], -ip
 4b4:	20001084 	andcs	r1, r0, r4, lsl #1
 4b8:	00000080 	andeq	r0, r0, r0, lsl #1
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	000002dc 	ldrdeq	r0, [r0], -ip
 4d4:	20001104 	andcs	r1, r0, r4, lsl #2
 4d8:	00000020 	andeq	r0, r0, r0, lsr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	00000018 	andeq	r0, r0, r8, lsl r0
 4f0:	000002dc 	ldrdeq	r0, [r0], -ip
 4f4:	20001124 	andcs	r1, r0, r4, lsr #2
 4f8:	00000020 	andeq	r0, r0, r0, lsr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 508:	0000000c 	andeq	r0, r0, ip
 50c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 510:	7c020001 	stcvc	0, cr0, [r2], {1}
 514:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 518:	00000018 	andeq	r0, r0, r8, lsl r0
 51c:	00000508 	andeq	r0, r0, r8, lsl #10
 520:	20001144 	andcs	r1, r0, r4, asr #2
 524:	0000000e 	andeq	r0, r0, lr
 528:	40080e41 	andmi	r0, r8, r1, asr #28
 52c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 530:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 534:	00000018 	andeq	r0, r0, r8, lsl r0
 538:	00000508 	andeq	r0, r0, r8, lsl #10
 53c:	20001152 	andcs	r1, r0, r2, asr r1
 540:	0000001a 	andeq	r0, r0, sl, lsl r0
 544:	40080e41 	andmi	r0, r8, r1, asr #28
 548:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 54c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 550:	00000018 	andeq	r0, r0, r8, lsl r0
 554:	00000508 	andeq	r0, r0, r8, lsl #10
 558:	2000116c 	andcs	r1, r0, ip, ror #2
 55c:	0000001c 	andeq	r0, r0, ip, lsl r0
 560:	40080e41 	andmi	r0, r8, r1, asr #28
 564:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 568:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 56c:	00000018 	andeq	r0, r0, r8, lsl r0
 570:	00000508 	andeq	r0, r0, r8, lsl #10
 574:	20001188 	andcs	r1, r0, r8, lsl #3
 578:	00000010 	andeq	r0, r0, r0, lsl r0
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 588:	00000018 	andeq	r0, r0, r8, lsl r0
 58c:	00000508 	andeq	r0, r0, r8, lsl #10
 590:	20001198 	mulcs	r0, r8, r1
 594:	00000018 	andeq	r0, r0, r8, lsl r0
 598:	40080e41 	andmi	r0, r8, r1, asr #28
 59c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a8:	00000508 	andeq	r0, r0, r8, lsl #10
 5ac:	200011b0 			; <UNDEFINED> instruction: 0x200011b0
 5b0:	0000003c 	andeq	r0, r0, ip, lsr r0
 5b4:	40080e41 	andmi	r0, r8, r1, asr #28
 5b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5bc:	100e4101 	andne	r4, lr, r1, lsl #2
 5c0:	00070d41 	andeq	r0, r7, r1, asr #26
 5c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c8:	00000508 	andeq	r0, r0, r8, lsl #10
 5cc:	200011ec 	andcs	r1, r0, ip, ror #3
 5d0:	0000003c 	andeq	r0, r0, ip, lsr r0
 5d4:	40080e41 	andmi	r0, r8, r1, asr #28
 5d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5dc:	100e4101 	andne	r4, lr, r1, lsl #2
 5e0:	00070d41 	andeq	r0, r7, r1, asr #26
 5e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e8:	00000508 	andeq	r0, r0, r8, lsl #10
 5ec:	20001228 	andcs	r1, r0, r8, lsr #4
 5f0:	00000030 	andeq	r0, r0, r0, lsr r0
 5f4:	40080e41 	andmi	r0, r8, r1, asr #28
 5f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5fc:	100e4101 	andne	r4, lr, r1, lsl #2
 600:	00070d41 	andeq	r0, r7, r1, asr #26
 604:	00000018 	andeq	r0, r0, r8, lsl r0
 608:	00000508 	andeq	r0, r0, r8, lsl #10
 60c:	20001258 	andcs	r1, r0, r8, asr r2
 610:	00000018 	andeq	r0, r0, r8, lsl r0
 614:	40080e41 	andmi	r0, r8, r1, asr #28
 618:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 61c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 620:	00000018 	andeq	r0, r0, r8, lsl r0
 624:	00000508 	andeq	r0, r0, r8, lsl #10
 628:	20001270 	andcs	r1, r0, r0, ror r2
 62c:	0000004c 	andeq	r0, r0, ip, asr #32
 630:	40080e41 	andmi	r0, r8, r1, asr #28
 634:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 638:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 63c:	0000000c 	andeq	r0, r0, ip
 640:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 644:	7c020001 	stcvc	0, cr0, [r2], {1}
 648:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 64c:	00000018 	andeq	r0, r0, r8, lsl r0
 650:	0000063c 	andeq	r0, r0, ip, lsr r6
 654:	200012bc 			; <UNDEFINED> instruction: 0x200012bc
 658:	00000048 	andeq	r0, r0, r8, asr #32
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 668:	0000001c 	andeq	r0, r0, ip, lsl r0
 66c:	0000063c 	andeq	r0, r0, ip, lsr r6
 670:	20001304 	andcs	r1, r0, r4, lsl #6
 674:	00000054 	andeq	r0, r0, r4, asr r0
 678:	40080e41 	andmi	r0, r8, r1, asr #28
 67c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 680:	180e4101 	stmdane	lr, {r0, r8, lr}
 684:	00070d41 	andeq	r0, r7, r1, asr #26
 688:	0000001c 	andeq	r0, r0, ip, lsl r0
 68c:	0000063c 	andeq	r0, r0, ip, lsr r6
 690:	20001358 	andcs	r1, r0, r8, asr r3
 694:	00000060 	andeq	r0, r0, r0, rrx
 698:	40080e41 	andmi	r0, r8, r1, asr #28
 69c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6a4:	00070d41 	andeq	r0, r7, r1, asr #26
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	0000063c 	andeq	r0, r0, ip, lsr r6
 6b0:	200013b8 			; <UNDEFINED> instruction: 0x200013b8
 6b4:	0000002a 	andeq	r0, r0, sl, lsr #32
 6b8:	40080e41 	andmi	r0, r8, r1, asr #28
 6bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c0:	100e4101 	andne	r4, lr, r1, lsl #2
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	0000063c 	andeq	r0, r0, ip, lsr r6
 6d0:	200013e2 	andcs	r1, r0, r2, ror #7
 6d4:	0000002a 	andeq	r0, r0, sl, lsr #32
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	100e4101 	andne	r4, lr, r1, lsl #2
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	00000020 	andeq	r0, r0, r0, lsr #32
 6ec:	0000063c 	andeq	r0, r0, ip, lsr r6
 6f0:	2000140c 	andcs	r1, r0, ip, lsl #8
 6f4:	00000048 	andeq	r0, r0, r8, asr #32
 6f8:	400c0e41 	andmi	r0, ip, r1, asr #28
 6fc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 700:	018e4002 	orreq	r4, lr, r2
 704:	41180e41 	tstmi	r8, r1, asr #28
 708:	0000070d 	andeq	r0, r0, sp, lsl #14
 70c:	00000020 	andeq	r0, r0, r0, lsr #32
 710:	0000063c 	andeq	r0, r0, ip, lsr r6
 714:	20001454 	andcs	r1, r0, r4, asr r4
 718:	00000048 	andeq	r0, r0, r8, asr #32
 71c:	400c0e41 	andmi	r0, ip, r1, asr #28
 720:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 724:	018e4002 	orreq	r4, lr, r2
 728:	41180e41 	tstmi	r8, r1, asr #28
 72c:	0000070d 	andeq	r0, r0, sp, lsl #14
 730:	0000001c 	andeq	r0, r0, ip, lsl r0
 734:	0000063c 	andeq	r0, r0, ip, lsr r6
 738:	2000149c 	mulcs	r0, ip, r4
 73c:	00000030 	andeq	r0, r0, r0, lsr r0
 740:	40080e41 	andmi	r0, r8, r1, asr #28
 744:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 748:	100e4101 	andne	r4, lr, r1, lsl #2
 74c:	00070d41 	andeq	r0, r7, r1, asr #26
 750:	0000001c 	andeq	r0, r0, ip, lsl r0
 754:	0000063c 	andeq	r0, r0, ip, lsr r6
 758:	200014cc 	andcs	r1, r0, ip, asr #9
 75c:	00000030 	andeq	r0, r0, r0, lsr r0
 760:	40080e41 	andmi	r0, r8, r1, asr #28
 764:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 768:	100e4101 	andne	r4, lr, r1, lsl #2
 76c:	00070d41 	andeq	r0, r7, r1, asr #26
 770:	0000001c 	andeq	r0, r0, ip, lsl r0
 774:	0000063c 	andeq	r0, r0, ip, lsr r6
 778:	200014fc 	strdcs	r1, [r0], -ip
 77c:	00000056 	andeq	r0, r0, r6, asr r0
 780:	40080e41 	andmi	r0, r8, r1, asr #28
 784:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 788:	100e4101 	andne	r4, lr, r1, lsl #2
 78c:	00070d41 	andeq	r0, r7, r1, asr #26
 790:	0000001c 	andeq	r0, r0, ip, lsl r0
 794:	0000063c 	andeq	r0, r0, ip, lsr r6
 798:	20001552 	andcs	r1, r0, r2, asr r5
 79c:	00000044 	andeq	r0, r0, r4, asr #32
 7a0:	40080e41 	andmi	r0, r8, r1, asr #28
 7a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a8:	100e4101 	andne	r4, lr, r1, lsl #2
 7ac:	00070d41 	andeq	r0, r7, r1, asr #26
 7b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b4:	0000063c 	andeq	r0, r0, ip, lsr r6
 7b8:	20001596 	mulcs	r0, r6, r5
 7bc:	00000068 	andeq	r0, r0, r8, rrx
 7c0:	40080e41 	andmi	r0, r8, r1, asr #28
 7c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 7cc:	00070d41 	andeq	r0, r7, r1, asr #26
 7d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d4:	0000063c 	andeq	r0, r0, ip, lsr r6
 7d8:	200015fe 	strdcs	r1, [r0], -lr
 7dc:	00000028 	andeq	r0, r0, r8, lsr #32
 7e0:	40080e41 	andmi	r0, r8, r1, asr #28
 7e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7e8:	100e4101 	andne	r4, lr, r1, lsl #2
 7ec:	00070d41 	andeq	r0, r7, r1, asr #26
