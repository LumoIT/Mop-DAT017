
./Debug/spoopy_v3.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "gpio.h"
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );
void app_init(void);

void startup ( void ){
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:

void main(void){
20000010:	b590      	push	{r4, r7, lr}
20000012:	b089      	sub	sp, #36	; 0x24
20000014:	af00      	add	r7, sp, #0
    app_init();
20000016:	f000 f84f 	bl	200000b8 <app_init>
    
    unsigned char test1[] = "Lumo och Lattes";
2000001a:	2308      	movs	r3, #8
2000001c:	18fb      	adds	r3, r7, r3
2000001e:	4a24      	ldr	r2, [pc, #144]	; (200000b0 <main+0xa0>)
20000020:	ca13      	ldmia	r2!, {r0, r1, r4}
20000022:	c313      	stmia	r3!, {r0, r1, r4}
20000024:	6812      	ldr	r2, [r2, #0]
20000026:	601a      	str	r2, [r3, #0]
    unsigned char test2[] = "Cafe";
20000028:	003b      	movs	r3, r7
2000002a:	4a22      	ldr	r2, [pc, #136]	; (200000b4 <main+0xa4>)
2000002c:	6811      	ldr	r1, [r2, #0]
2000002e:	6019      	str	r1, [r3, #0]
20000030:	7912      	ldrb	r2, [r2, #4]
20000032:	711a      	strb	r2, [r3, #4]
    unsigned char* p = test1;
20000034:	2308      	movs	r3, #8
20000036:	18fb      	adds	r3, r7, r3
20000038:	61fb      	str	r3, [r7, #28]
    ascii_gotoxy(1, 1);
2000003a:	2101      	movs	r1, #1
2000003c:	2001      	movs	r0, #1
2000003e:	f000 fac1 	bl	200005c4 <ascii_gotoxy>
    while(*p != 0){
20000042:	e007      	b.n	20000054 <main+0x44>
        ascii_write_char(*p);
20000044:	69fb      	ldr	r3, [r7, #28]
20000046:	781b      	ldrb	r3, [r3, #0]
20000048:	0018      	movs	r0, r3
2000004a:	f000 fae5 	bl	20000618 <ascii_write_char>
        p++;
2000004e:	69fb      	ldr	r3, [r7, #28]
20000050:	3301      	adds	r3, #1
20000052:	61fb      	str	r3, [r7, #28]
    while(*p != 0){
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	781b      	ldrb	r3, [r3, #0]
20000058:	2b00      	cmp	r3, #0
2000005a:	d1f3      	bne.n	20000044 <main+0x34>
    }
    p = test2;
2000005c:	003b      	movs	r3, r7
2000005e:	61fb      	str	r3, [r7, #28]
    ascii_gotoxy(2, 1);
20000060:	2101      	movs	r1, #1
20000062:	2002      	movs	r0, #2
20000064:	f000 faae 	bl	200005c4 <ascii_gotoxy>
    while(*p != 0){
20000068:	e007      	b.n	2000007a <main+0x6a>
        ascii_write_char(*p);
2000006a:	69fb      	ldr	r3, [r7, #28]
2000006c:	781b      	ldrb	r3, [r3, #0]
2000006e:	0018      	movs	r0, r3
20000070:	f000 fad2 	bl	20000618 <ascii_write_char>
        p++;
20000074:	69fb      	ldr	r3, [r7, #28]
20000076:	3301      	adds	r3, #1
20000078:	61fb      	str	r3, [r7, #28]
    while(*p != 0){
2000007a:	69fb      	ldr	r3, [r7, #28]
2000007c:	781b      	ldrb	r3, [r3, #0]
2000007e:	2b00      	cmp	r3, #0
20000080:	d1f3      	bne.n	2000006a <main+0x5a>
    }
    
    for(int x = 0; x < 8; x++){
20000082:	2300      	movs	r3, #0
20000084:	61bb      	str	r3, [r7, #24]
20000086:	e00b      	b.n	200000a0 <main+0x90>
        pixel(x + 8, 20, 1);
20000088:	69bb      	ldr	r3, [r7, #24]
2000008a:	b2db      	uxtb	r3, r3
2000008c:	3308      	adds	r3, #8
2000008e:	b2db      	uxtb	r3, r3
20000090:	2201      	movs	r2, #1
20000092:	2114      	movs	r1, #20
20000094:	0018      	movs	r0, r3
20000096:	f000 fce9 	bl	20000a6c <pixel>
    for(int x = 0; x < 8; x++){
2000009a:	69bb      	ldr	r3, [r7, #24]
2000009c:	3301      	adds	r3, #1
2000009e:	61bb      	str	r3, [r7, #24]
200000a0:	69bb      	ldr	r3, [r7, #24]
200000a2:	2b07      	cmp	r3, #7
200000a4:	ddf0      	ble.n	20000088 <main+0x78>
    }
}
200000a6:	46c0      	nop			; (mov r8, r8)
200000a8:	46bd      	mov	sp, r7
200000aa:	b009      	add	sp, #36	; 0x24
200000ac:	bd90      	pop	{r4, r7, pc}
200000ae:	46c0      	nop			; (mov r8, r8)
200000b0:	20000d80 	andcs	r0, r0, r0, lsl #27
200000b4:	20000d90 	mulcs	r0, r0, sp

200000b8 <app_init>:

void app_init(){
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
	__asm volatile( 
		" LDR R0, =0x08000209\n"
		" BLX R0\n"
		);
#endif // usbdm
    setup_for_ascii_display();
200000bc:	f000 f936 	bl	2000032c <setup_for_ascii_display>
    graphic_initialize();
200000c0:	f000 fb4f 	bl	20000762 <graphic_initialize>
}
200000c4:	46c0      	nop			; (mov r8, r8)
200000c6:	46bd      	mov	sp, r7
200000c8:	bd80      	pop	{r7, pc}
200000ca:	46c0      	nop			; (mov r8, r8)

200000cc <setup_for_keypad>:
#include "gpio.h"
#include "delay_interrupt.h"
#include <stdint.h>

void setup_for_keypad(GPIO* _gpio) {
200000cc:	b580      	push	{r7, lr}
200000ce:	b082      	sub	sp, #8
200000d0:	af00      	add	r7, sp, #0
200000d2:	6078      	str	r0, [r7, #4]
	// Sätt pinnar 15-12 till utportar
	// och pinnar 11-8 till inportar.
    _gpio->moder &= 0x0000FFFF;
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	681b      	ldr	r3, [r3, #0]
200000d8:	041b      	lsls	r3, r3, #16
200000da:	0c1a      	lsrs	r2, r3, #16
200000dc:	687b      	ldr	r3, [r7, #4]
200000de:	601a      	str	r2, [r3, #0]
    _gpio->moder |= 0x5500FFFF;
200000e0:	687b      	ldr	r3, [r7, #4]
200000e2:	681b      	ldr	r3, [r3, #0]
200000e4:	4a11      	ldr	r2, [pc, #68]	; (2000012c <setup_for_keypad+0x60>)
200000e6:	431a      	orrs	r2, r3
200000e8:	687b      	ldr	r3, [r7, #4]
200000ea:	601a      	str	r2, [r3, #0]

	// Sätt pinnar 15-12 till "push-pull"
	// och pinnar 11-8 till "open drain".
    _gpio->otyper &= 0xFFFF00FF;
200000ec:	687b      	ldr	r3, [r7, #4]
200000ee:	889b      	ldrh	r3, [r3, #4]
200000f0:	22ff      	movs	r2, #255	; 0xff
200000f2:	4013      	ands	r3, r2
200000f4:	b29a      	uxth	r2, r3
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	809a      	strh	r2, [r3, #4]
    _gpio->otyper |= 0x00000F00;
200000fa:	687b      	ldr	r3, [r7, #4]
200000fc:	889b      	ldrh	r3, [r3, #4]
200000fe:	22f0      	movs	r2, #240	; 0xf0
20000100:	0112      	lsls	r2, r2, #4
20000102:	4313      	orrs	r3, r2
20000104:	b29a      	uxth	r2, r3
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	809a      	strh	r2, [r3, #4]

	// Sätt pinnar 15-12 till "floating"
	// och pinnar 11-8 till "pull-down"
    _gpio->pupdr &= 0x0000FFFF;
2000010a:	687b      	ldr	r3, [r7, #4]
2000010c:	68db      	ldr	r3, [r3, #12]
2000010e:	041b      	lsls	r3, r3, #16
20000110:	0c1a      	lsrs	r2, r3, #16
20000112:	687b      	ldr	r3, [r7, #4]
20000114:	60da      	str	r2, [r3, #12]
    _gpio->pupdr |= 0x00AA0000;
20000116:	687b      	ldr	r3, [r7, #4]
20000118:	68db      	ldr	r3, [r3, #12]
2000011a:	22aa      	movs	r2, #170	; 0xaa
2000011c:	0412      	lsls	r2, r2, #16
2000011e:	431a      	orrs	r2, r3
20000120:	687b      	ldr	r3, [r7, #4]
20000122:	60da      	str	r2, [r3, #12]
}
20000124:	46c0      	nop			; (mov r8, r8)
20000126:	46bd      	mov	sp, r7
20000128:	b002      	add	sp, #8
2000012a:	bd80      	pop	{r7, pc}
2000012c:	5500ffff 	strpl	pc, [r0, #-4095]	; 0xfffff001

20000130 <setup_for_seg_disp>:

void setup_for_seg_disp(GPIO* _gpio) {
20000130:	b580      	push	{r7, lr}
20000132:	b082      	sub	sp, #8
20000134:	af00      	add	r7, sp, #0
20000136:	6078      	str	r0, [r7, #4]
	// Sätt pinnar 7-0 till utportar
	_gpio->moder &= 0xFFFF0000;
20000138:	687b      	ldr	r3, [r7, #4]
2000013a:	681b      	ldr	r3, [r3, #0]
2000013c:	0c1b      	lsrs	r3, r3, #16
2000013e:	041a      	lsls	r2, r3, #16
20000140:	687b      	ldr	r3, [r7, #4]
20000142:	601a      	str	r2, [r3, #0]
	_gpio->moder |= 0x00005555;
20000144:	687b      	ldr	r3, [r7, #4]
20000146:	681b      	ldr	r3, [r3, #0]
20000148:	4a11      	ldr	r2, [pc, #68]	; (20000190 <setup_for_seg_disp+0x60>)
2000014a:	431a      	orrs	r2, r3
2000014c:	687b      	ldr	r3, [r7, #4]
2000014e:	601a      	str	r2, [r3, #0]

	// Sätt pinnar 7-0 till "push-pull"
	_gpio->otyper &= 0xFFFFFF00;
20000150:	687b      	ldr	r3, [r7, #4]
20000152:	889b      	ldrh	r3, [r3, #4]
20000154:	22ff      	movs	r2, #255	; 0xff
20000156:	4393      	bics	r3, r2
20000158:	b29a      	uxth	r2, r3
2000015a:	687b      	ldr	r3, [r7, #4]
2000015c:	809a      	strh	r2, [r3, #4]
	_gpio->otyper |= 0x000000FF;
2000015e:	687b      	ldr	r3, [r7, #4]
20000160:	889b      	ldrh	r3, [r3, #4]
20000162:	22ff      	movs	r2, #255	; 0xff
20000164:	4313      	orrs	r3, r2
20000166:	b29a      	uxth	r2, r3
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	809a      	strh	r2, [r3, #4]

	// Sätter pinnar 4-0 till "pull-down"
	_gpio->pupdr &= 0xFFFFFF00;
2000016c:	687b      	ldr	r3, [r7, #4]
2000016e:	68db      	ldr	r3, [r3, #12]
20000170:	22ff      	movs	r2, #255	; 0xff
20000172:	4393      	bics	r3, r2
20000174:	001a      	movs	r2, r3
20000176:	687b      	ldr	r3, [r7, #4]
20000178:	60da      	str	r2, [r3, #12]
	_gpio->pupdr |= 0x000000AA;
2000017a:	687b      	ldr	r3, [r7, #4]
2000017c:	68db      	ldr	r3, [r3, #12]
2000017e:	22aa      	movs	r2, #170	; 0xaa
20000180:	431a      	orrs	r2, r3
20000182:	687b      	ldr	r3, [r7, #4]
20000184:	60da      	str	r2, [r3, #12]
}
20000186:	46c0      	nop			; (mov r8, r8)
20000188:	46bd      	mov	sp, r7
2000018a:	b002      	add	sp, #8
2000018c:	bd80      	pop	{r7, pc}
2000018e:	46c0      	nop			; (mov r8, r8)
20000190:	00005555 	andeq	r5, r0, r5, asr r5

20000194 <keyb>:

unsigned char keyb(void) {
20000194:	b590      	push	{r4, r7, lr}
20000196:	b087      	sub	sp, #28
20000198:	af00      	add	r7, sp, #0
	unsigned char keys[] = {
2000019a:	1d3b      	adds	r3, r7, #4
2000019c:	4a1f      	ldr	r2, [pc, #124]	; (2000021c <keyb+0x88>)
2000019e:	ca13      	ldmia	r2!, {r0, r1, r4}
200001a0:	c313      	stmia	r3!, {r0, r1, r4}
200001a2:	6812      	ldr	r2, [r2, #0]
200001a4:	601a      	str	r2, [r3, #0]
		4,  5,  6,  11,
		7,  8,  9,  12,
		14, 0,  15, 13
	};
	unsigned char row, col;
	for(row = 0; row < 4; row++) {
200001a6:	2317      	movs	r3, #23
200001a8:	18fb      	adds	r3, r7, r3
200001aa:	2200      	movs	r2, #0
200001ac:	701a      	strb	r2, [r3, #0]
200001ae:	e02a      	b.n	20000206 <keyb+0x72>
		deactivate_rows(GPIO_D);
200001b0:	4b1b      	ldr	r3, [pc, #108]	; (20000220 <keyb+0x8c>)
200001b2:	0018      	movs	r0, r3
200001b4:	f000 f886 	bl	200002c4 <deactivate_rows>
		activate_row(GPIO_D, row);
200001b8:	2317      	movs	r3, #23
200001ba:	18fb      	adds	r3, r7, r3
200001bc:	781b      	ldrb	r3, [r3, #0]
200001be:	4a18      	ldr	r2, [pc, #96]	; (20000220 <keyb+0x8c>)
200001c0:	0019      	movs	r1, r3
200001c2:	0010      	movs	r0, r2
200001c4:	f000 f856 	bl	20000274 <activate_row>
		col = read_col(GPIO_D);
200001c8:	2316      	movs	r3, #22
200001ca:	18fc      	adds	r4, r7, r3
200001cc:	4b14      	ldr	r3, [pc, #80]	; (20000220 <keyb+0x8c>)
200001ce:	0018      	movs	r0, r3
200001d0:	f000 f883 	bl	200002da <read_col>
200001d4:	0003      	movs	r3, r0
200001d6:	7023      	strb	r3, [r4, #0]
		if(col != 0xFF) {
200001d8:	2316      	movs	r3, #22
200001da:	18fb      	adds	r3, r7, r3
200001dc:	781b      	ldrb	r3, [r3, #0]
200001de:	2bff      	cmp	r3, #255	; 0xff
200001e0:	d00a      	beq.n	200001f8 <keyb+0x64>
			return keys[ 4 * row + col];
200001e2:	2317      	movs	r3, #23
200001e4:	18fb      	adds	r3, r7, r3
200001e6:	781b      	ldrb	r3, [r3, #0]
200001e8:	009a      	lsls	r2, r3, #2
200001ea:	2316      	movs	r3, #22
200001ec:	18fb      	adds	r3, r7, r3
200001ee:	781b      	ldrb	r3, [r3, #0]
200001f0:	18d3      	adds	r3, r2, r3
200001f2:	1d3a      	adds	r2, r7, #4
200001f4:	5cd3      	ldrb	r3, [r2, r3]
200001f6:	e00c      	b.n	20000212 <keyb+0x7e>
	for(row = 0; row < 4; row++) {
200001f8:	2317      	movs	r3, #23
200001fa:	18fb      	adds	r3, r7, r3
200001fc:	781a      	ldrb	r2, [r3, #0]
200001fe:	2317      	movs	r3, #23
20000200:	18fb      	adds	r3, r7, r3
20000202:	3201      	adds	r2, #1
20000204:	701a      	strb	r2, [r3, #0]
20000206:	2317      	movs	r3, #23
20000208:	18fb      	adds	r3, r7, r3
2000020a:	781b      	ldrb	r3, [r3, #0]
2000020c:	2b03      	cmp	r3, #3
2000020e:	d9cf      	bls.n	200001b0 <keyb+0x1c>
		}
	}
	return 0xFF;
20000210:	23ff      	movs	r3, #255	; 0xff
}
20000212:	0018      	movs	r0, r3
20000214:	46bd      	mov	sp, r7
20000216:	b007      	add	sp, #28
20000218:	bd90      	pop	{r4, r7, pc}
2000021a:	46c0      	nop			; (mov r8, r8)
2000021c:	20000d98 	mulcs	r0, r8, sp
20000220:	40020c00 	andmi	r0, r2, r0, lsl #24

20000224 <out7seg>:

void out7seg(GPIO* _gpio, unsigned char c) {
20000224:	b590      	push	{r4, r7, lr}
20000226:	b08b      	sub	sp, #44	; 0x2c
20000228:	af00      	add	r7, sp, #0
2000022a:	6078      	str	r0, [r7, #4]
2000022c:	000a      	movs	r2, r1
2000022e:	1cfb      	adds	r3, r7, #3
20000230:	701a      	strb	r2, [r3, #0]
    unsigned short result[] = {
20000232:	2308      	movs	r3, #8
20000234:	18fb      	adds	r3, r7, r3
20000236:	4a0e      	ldr	r2, [pc, #56]	; (20000270 <out7seg+0x4c>)
20000238:	ca13      	ldmia	r2!, {r0, r1, r4}
2000023a:	c313      	stmia	r3!, {r0, r1, r4}
2000023c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000023e:	c313      	stmia	r3!, {r0, r1, r4}
20000240:	ca03      	ldmia	r2!, {r0, r1}
20000242:	c303      	stmia	r3!, {r0, r1}
		0x5E, // D
		0x80, // E
		0x76  // F
	};

    if(c > 0xF) {
20000244:	1cfb      	adds	r3, r7, #3
20000246:	781b      	ldrb	r3, [r3, #0]
20000248:	2b0f      	cmp	r3, #15
2000024a:	d903      	bls.n	20000254 <out7seg+0x30>
		_gpio->odrLow = 0x00;
2000024c:	687b      	ldr	r3, [r7, #4]
2000024e:	2200      	movs	r2, #0
20000250:	751a      	strb	r2, [r3, #20]
    } else {
		_gpio->odrLow = result[c];
    }
}
20000252:	e008      	b.n	20000266 <out7seg+0x42>
		_gpio->odrLow = result[c];
20000254:	1cfb      	adds	r3, r7, #3
20000256:	781a      	ldrb	r2, [r3, #0]
20000258:	2308      	movs	r3, #8
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	0052      	lsls	r2, r2, #1
2000025e:	5ad3      	ldrh	r3, [r2, r3]
20000260:	b2da      	uxtb	r2, r3
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	751a      	strb	r2, [r3, #20]
}
20000266:	46c0      	nop			; (mov r8, r8)
20000268:	46bd      	mov	sp, r7
2000026a:	b00b      	add	sp, #44	; 0x2c
2000026c:	bd90      	pop	{r4, r7, pc}
2000026e:	46c0      	nop			; (mov r8, r8)
20000270:	20000da8 	andcs	r0, r0, r8, lsr #27

20000274 <activate_row>:

void activate_row(GPIO* _gpio, unsigned char row) {
20000274:	b580      	push	{r7, lr}
20000276:	b082      	sub	sp, #8
20000278:	af00      	add	r7, sp, #0
2000027a:	6078      	str	r0, [r7, #4]
2000027c:	000a      	movs	r2, r1
2000027e:	1cfb      	adds	r3, r7, #3
20000280:	701a      	strb	r2, [r3, #0]
	switch(row){
20000282:	1cfb      	adds	r3, r7, #3
20000284:	781b      	ldrb	r3, [r3, #0]
20000286:	2b01      	cmp	r3, #1
20000288:	d00c      	beq.n	200002a4 <activate_row+0x30>
2000028a:	dc02      	bgt.n	20000292 <activate_row+0x1e>
2000028c:	2b00      	cmp	r3, #0
2000028e:	d005      	beq.n	2000029c <activate_row+0x28>
		case 0: _gpio->odrHigh = 0x10; break;
		case 1: _gpio->odrHigh = 0x20; break;
		case 2: _gpio->odrHigh = 0x40; break;
		case 3: _gpio->odrHigh = 0x80; break;
	}
}
20000290:	e014      	b.n	200002bc <activate_row+0x48>
	switch(row){
20000292:	2b02      	cmp	r3, #2
20000294:	d00a      	beq.n	200002ac <activate_row+0x38>
20000296:	2b03      	cmp	r3, #3
20000298:	d00c      	beq.n	200002b4 <activate_row+0x40>
}
2000029a:	e00f      	b.n	200002bc <activate_row+0x48>
		case 0: _gpio->odrHigh = 0x10; break;
2000029c:	687b      	ldr	r3, [r7, #4]
2000029e:	2210      	movs	r2, #16
200002a0:	755a      	strb	r2, [r3, #21]
200002a2:	e00b      	b.n	200002bc <activate_row+0x48>
		case 1: _gpio->odrHigh = 0x20; break;
200002a4:	687b      	ldr	r3, [r7, #4]
200002a6:	2220      	movs	r2, #32
200002a8:	755a      	strb	r2, [r3, #21]
200002aa:	e007      	b.n	200002bc <activate_row+0x48>
		case 2: _gpio->odrHigh = 0x40; break;
200002ac:	687b      	ldr	r3, [r7, #4]
200002ae:	2240      	movs	r2, #64	; 0x40
200002b0:	755a      	strb	r2, [r3, #21]
200002b2:	e003      	b.n	200002bc <activate_row+0x48>
		case 3: _gpio->odrHigh = 0x80; break;
200002b4:	687b      	ldr	r3, [r7, #4]
200002b6:	2280      	movs	r2, #128	; 0x80
200002b8:	755a      	strb	r2, [r3, #21]
200002ba:	46c0      	nop			; (mov r8, r8)
}
200002bc:	46c0      	nop			; (mov r8, r8)
200002be:	46bd      	mov	sp, r7
200002c0:	b002      	add	sp, #8
200002c2:	bd80      	pop	{r7, pc}

200002c4 <deactivate_rows>:

void deactivate_rows(GPIO* _gpio) {
200002c4:	b580      	push	{r7, lr}
200002c6:	b082      	sub	sp, #8
200002c8:	af00      	add	r7, sp, #0
200002ca:	6078      	str	r0, [r7, #4]
	_gpio->odrHigh = 0x00;
200002cc:	687b      	ldr	r3, [r7, #4]
200002ce:	2200      	movs	r2, #0
200002d0:	755a      	strb	r2, [r3, #21]
}
200002d2:	46c0      	nop			; (mov r8, r8)
200002d4:	46bd      	mov	sp, r7
200002d6:	b002      	add	sp, #8
200002d8:	bd80      	pop	{r7, pc}

200002da <read_col>:

unsigned char read_col(GPIO* _gpio) {
200002da:	b580      	push	{r7, lr}
200002dc:	b082      	sub	sp, #8
200002de:	af00      	add	r7, sp, #0
200002e0:	6078      	str	r0, [r7, #4]
	if(_gpio->idrHigh & 0x01) return 0;
200002e2:	687b      	ldr	r3, [r7, #4]
200002e4:	7c5b      	ldrb	r3, [r3, #17]
200002e6:	001a      	movs	r2, r3
200002e8:	2301      	movs	r3, #1
200002ea:	4013      	ands	r3, r2
200002ec:	d001      	beq.n	200002f2 <read_col+0x18>
200002ee:	2300      	movs	r3, #0
200002f0:	e018      	b.n	20000324 <read_col+0x4a>
	if(_gpio->idrHigh & 0x02) return 1;
200002f2:	687b      	ldr	r3, [r7, #4]
200002f4:	7c5b      	ldrb	r3, [r3, #17]
200002f6:	001a      	movs	r2, r3
200002f8:	2302      	movs	r3, #2
200002fa:	4013      	ands	r3, r2
200002fc:	d001      	beq.n	20000302 <read_col+0x28>
200002fe:	2301      	movs	r3, #1
20000300:	e010      	b.n	20000324 <read_col+0x4a>
	if(_gpio->idrHigh & 0x04) return 2;
20000302:	687b      	ldr	r3, [r7, #4]
20000304:	7c5b      	ldrb	r3, [r3, #17]
20000306:	001a      	movs	r2, r3
20000308:	2304      	movs	r3, #4
2000030a:	4013      	ands	r3, r2
2000030c:	d001      	beq.n	20000312 <read_col+0x38>
2000030e:	2302      	movs	r3, #2
20000310:	e008      	b.n	20000324 <read_col+0x4a>
	if(_gpio->idrHigh & 0x08) return 3;
20000312:	687b      	ldr	r3, [r7, #4]
20000314:	7c5b      	ldrb	r3, [r3, #17]
20000316:	001a      	movs	r2, r3
20000318:	2308      	movs	r3, #8
2000031a:	4013      	ands	r3, r2
2000031c:	d001      	beq.n	20000322 <read_col+0x48>
2000031e:	2303      	movs	r3, #3
20000320:	e000      	b.n	20000324 <read_col+0x4a>
	return 0xFF;
20000322:	23ff      	movs	r3, #255	; 0xff
}
20000324:	0018      	movs	r0, r3
20000326:	46bd      	mov	sp, r7
20000328:	b002      	add	sp, #8
2000032a:	bd80      	pop	{r7, pc}

2000032c <setup_for_ascii_display>:

void setup_for_ascii_display() {
2000032c:	b580      	push	{r7, lr}
2000032e:	af00      	add	r7, sp, #0
	// Sätt alla pinnar till utportar.
	GPIO_E->moder = 0x55555555;
20000330:	4b05      	ldr	r3, [pc, #20]	; (20000348 <setup_for_ascii_display+0x1c>)
20000332:	4a06      	ldr	r2, [pc, #24]	; (2000034c <setup_for_ascii_display+0x20>)
20000334:	601a      	str	r2, [r3, #0]

	// Sätt utportar till "push/pull".
	//GPIO_E->otyper = 0x00000000;

	// Sätt utportars hastighet till medium.
	GPIO_E->ospeedr = 0x55555555;
20000336:	4b04      	ldr	r3, [pc, #16]	; (20000348 <setup_for_ascii_display+0x1c>)
20000338:	4a04      	ldr	r2, [pc, #16]	; (2000034c <setup_for_ascii_display+0x20>)
2000033a:	609a      	str	r2, [r3, #8]
	//GPIO_E->ospeedr = 0x00000000;

	// inportar är "pull-up"
	//GPIO_E->pupdr = 0x55550000;

	ascii_init();
2000033c:	f000 f808 	bl	20000350 <ascii_init>
}
20000340:	46c0      	nop			; (mov r8, r8)
20000342:	46bd      	mov	sp, r7
20000344:	bd80      	pop	{r7, pc}
20000346:	46c0      	nop			; (mov r8, r8)
20000348:	40021000 	andmi	r1, r2, r0
2000034c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000350 <ascii_init>:

void ascii_init(void) {
20000350:	b580      	push	{r7, lr}
20000352:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80)
20000354:	46c0      	nop			; (mov r8, r8)
20000356:	f000 f8bd 	bl	200004d4 <ascii_read_status>
2000035a:	0003      	movs	r3, r0
2000035c:	001a      	movs	r2, r3
2000035e:	2380      	movs	r3, #128	; 0x80
20000360:	4013      	ands	r3, r2
20000362:	2b80      	cmp	r3, #128	; 0x80
20000364:	d0f7      	beq.n	20000356 <ascii_init+0x6>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
20000366:	2014      	movs	r0, #20
20000368:	f000 fc7e 	bl	20000c68 <delay_mikro>
	// Function Set - 2 rader, 5x8 punkters tecken.
	ascii_write_cmd(0x38);
2000036c:	2038      	movs	r0, #56	; 0x38
2000036e:	f000 f887 	bl	20000480 <ascii_write_cmd>
	delay_mikro(39);
20000372:	2027      	movs	r0, #39	; 0x27
20000374:	f000 fc78 	bl	20000c68 <delay_mikro>


	while((ascii_read_status() & 0x80) == 0x80)
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	f000 f8ab 	bl	200004d4 <ascii_read_status>
2000037e:	0003      	movs	r3, r0
20000380:	001a      	movs	r2, r3
20000382:	2380      	movs	r3, #128	; 0x80
20000384:	4013      	ands	r3, r2
20000386:	2b80      	cmp	r3, #128	; 0x80
20000388:	d0f7      	beq.n	2000037a <ascii_init+0x2a>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
2000038a:	2014      	movs	r0, #20
2000038c:	f000 fc6c 	bl	20000c68 <delay_mikro>
	// Tänd display, tänd markör ("cursor"), konstant visning.
	ascii_write_cmd(0x0E);
20000390:	200e      	movs	r0, #14
20000392:	f000 f875 	bl	20000480 <ascii_write_cmd>
	delay_mikro(39);
20000396:	2027      	movs	r0, #39	; 0x27
20000398:	f000 fc66 	bl	20000c68 <delay_mikro>

	while((ascii_read_status() & 0x80) == 0x80)
2000039c:	46c0      	nop			; (mov r8, r8)
2000039e:	f000 f899 	bl	200004d4 <ascii_read_status>
200003a2:	0003      	movs	r3, r0
200003a4:	001a      	movs	r2, r3
200003a6:	2380      	movs	r3, #128	; 0x80
200003a8:	4013      	ands	r3, r2
200003aa:	2b80      	cmp	r3, #128	; 0x80
200003ac:	d0f7      	beq.n	2000039e <ascii_init+0x4e>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
200003ae:	2014      	movs	r0, #20
200003b0:	f000 fc5a 	bl	20000c68 <delay_mikro>
	// Clear display.
	ascii_write_cmd(0x01);
200003b4:	2001      	movs	r0, #1
200003b6:	f000 f863 	bl	20000480 <ascii_write_cmd>
	delay_mikro(39);
200003ba:	2027      	movs	r0, #39	; 0x27
200003bc:	f000 fc54 	bl	20000c68 <delay_mikro>

	while((ascii_read_status() & 0x80) == 0x80)
200003c0:	46c0      	nop			; (mov r8, r8)
200003c2:	f000 f887 	bl	200004d4 <ascii_read_status>
200003c6:	0003      	movs	r3, r0
200003c8:	001a      	movs	r2, r3
200003ca:	2380      	movs	r3, #128	; 0x80
200003cc:	4013      	ands	r3, r2
200003ce:	2b80      	cmp	r3, #128	; 0x80
200003d0:	d0f7      	beq.n	200003c2 <ascii_init+0x72>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
200003d2:	2014      	movs	r0, #20
200003d4:	f000 fc48 	bl	20000c68 <delay_mikro>
	// Adressering med "increment", inget skift av adressbuffern.
	ascii_write_cmd(0x04);
200003d8:	2004      	movs	r0, #4
200003da:	f000 f851 	bl	20000480 <ascii_write_cmd>
	delay_mikro(39);
200003de:	2027      	movs	r0, #39	; 0x27
200003e0:	f000 fc42 	bl	20000c68 <delay_mikro>
}
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	46bd      	mov	sp, r7
200003e8:	bd80      	pop	{r7, pc}

200003ea <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x) {
200003ea:	b580      	push	{r7, lr}
200003ec:	b084      	sub	sp, #16
200003ee:	af00      	add	r7, sp, #0
200003f0:	0002      	movs	r2, r0
200003f2:	1dfb      	adds	r3, r7, #7
200003f4:	701a      	strb	r2, [r3, #0]
	//GPIO_E->odrLow |= x;

	unsigned char c;
	c = GPIO_E->odrLow;
200003f6:	4a0d      	ldr	r2, [pc, #52]	; (2000042c <ascii_ctrl_bit_set+0x42>)
200003f8:	230f      	movs	r3, #15
200003fa:	18fb      	adds	r3, r7, r3
200003fc:	7d12      	ldrb	r2, [r2, #20]
200003fe:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20000400:	1dfa      	adds	r2, r7, #7
20000402:	230f      	movs	r3, #15
20000404:	18fb      	adds	r3, r7, r3
20000406:	7812      	ldrb	r2, [r2, #0]
20000408:	781b      	ldrb	r3, [r3, #0]
2000040a:	4313      	orrs	r3, r2
2000040c:	b2da      	uxtb	r2, r3
2000040e:	230f      	movs	r3, #15
20000410:	18fb      	adds	r3, r7, r3
20000412:	2104      	movs	r1, #4
20000414:	430a      	orrs	r2, r1
20000416:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
20000418:	4a04      	ldr	r2, [pc, #16]	; (2000042c <ascii_ctrl_bit_set+0x42>)
2000041a:	230f      	movs	r3, #15
2000041c:	18fb      	adds	r3, r7, r3
2000041e:	781b      	ldrb	r3, [r3, #0]
20000420:	7513      	strb	r3, [r2, #20]
}
20000422:	46c0      	nop			; (mov r8, r8)
20000424:	46bd      	mov	sp, r7
20000426:	b004      	add	sp, #16
20000428:	bd80      	pop	{r7, pc}
2000042a:	46c0      	nop			; (mov r8, r8)
2000042c:	40021000 	andmi	r1, r2, r0

20000430 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x) {
20000430:	b580      	push	{r7, lr}
20000432:	b084      	sub	sp, #16
20000434:	af00      	add	r7, sp, #0
20000436:	0002      	movs	r2, r0
20000438:	1dfb      	adds	r3, r7, #7
2000043a:	701a      	strb	r2, [r3, #0]
	//GPIO_E->odrLow &= (~x);

	unsigned char c;
	c = GPIO_E->odrLow;
2000043c:	4a0f      	ldr	r2, [pc, #60]	; (2000047c <ascii_ctrl_bit_clear+0x4c>)
2000043e:	230f      	movs	r3, #15
20000440:	18fb      	adds	r3, r7, r3
20000442:	7d12      	ldrb	r2, [r2, #20]
20000444:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20000446:	1dfb      	adds	r3, r7, #7
20000448:	781b      	ldrb	r3, [r3, #0]
2000044a:	b25b      	sxtb	r3, r3
2000044c:	43db      	mvns	r3, r3
2000044e:	b25b      	sxtb	r3, r3
20000450:	220f      	movs	r2, #15
20000452:	18ba      	adds	r2, r7, r2
20000454:	7812      	ldrb	r2, [r2, #0]
20000456:	b252      	sxtb	r2, r2
20000458:	4013      	ands	r3, r2
2000045a:	b25b      	sxtb	r3, r3
2000045c:	2204      	movs	r2, #4
2000045e:	4313      	orrs	r3, r2
20000460:	b25a      	sxtb	r2, r3
20000462:	230f      	movs	r3, #15
20000464:	18fb      	adds	r3, r7, r3
20000466:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
20000468:	4a04      	ldr	r2, [pc, #16]	; (2000047c <ascii_ctrl_bit_clear+0x4c>)
2000046a:	230f      	movs	r3, #15
2000046c:	18fb      	adds	r3, r7, r3
2000046e:	781b      	ldrb	r3, [r3, #0]
20000470:	7513      	strb	r3, [r2, #20]
}
20000472:	46c0      	nop			; (mov r8, r8)
20000474:	46bd      	mov	sp, r7
20000476:	b004      	add	sp, #16
20000478:	bd80      	pop	{r7, pc}
2000047a:	46c0      	nop			; (mov r8, r8)
2000047c:	40021000 	andmi	r1, r2, r0

20000480 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
20000480:	b580      	push	{r7, lr}
20000482:	b082      	sub	sp, #8
20000484:	af00      	add	r7, sp, #0
20000486:	0002      	movs	r2, r0
20000488:	1dfb      	adds	r3, r7, #7
2000048a:	701a      	strb	r2, [r3, #0]
	// Doesn't wait or check for the status flag...
	ascii_ctrl_bit_clear(B_RS);
2000048c:	2001      	movs	r0, #1
2000048e:	f7ff ffcf 	bl	20000430 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000492:	2002      	movs	r0, #2
20000494:	f7ff ffcc 	bl	20000430 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000498:	1dfb      	adds	r3, r7, #7
2000049a:	781b      	ldrb	r3, [r3, #0]
2000049c:	0018      	movs	r0, r3
2000049e:	f000 f861 	bl	20000564 <ascii_write_controller>
}
200004a2:	46c0      	nop			; (mov r8, r8)
200004a4:	46bd      	mov	sp, r7
200004a6:	b002      	add	sp, #8
200004a8:	bd80      	pop	{r7, pc}

200004aa <ascii_write_data>:

void ascii_write_data(unsigned char data) {
200004aa:	b580      	push	{r7, lr}
200004ac:	b082      	sub	sp, #8
200004ae:	af00      	add	r7, sp, #0
200004b0:	0002      	movs	r2, r0
200004b2:	1dfb      	adds	r3, r7, #7
200004b4:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200004b6:	2001      	movs	r0, #1
200004b8:	f7ff ff97 	bl	200003ea <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200004bc:	2002      	movs	r0, #2
200004be:	f7ff ffb7 	bl	20000430 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
200004c2:	1dfb      	adds	r3, r7, #7
200004c4:	781b      	ldrb	r3, [r3, #0]
200004c6:	0018      	movs	r0, r3
200004c8:	f000 f84c 	bl	20000564 <ascii_write_controller>
}
200004cc:	46c0      	nop			; (mov r8, r8)
200004ce:	46bd      	mov	sp, r7
200004d0:	b002      	add	sp, #8
200004d2:	bd80      	pop	{r7, pc}

200004d4 <ascii_read_status>:

unsigned char ascii_read_status(void) {
200004d4:	b590      	push	{r4, r7, lr}
200004d6:	b083      	sub	sp, #12
200004d8:	af00      	add	r7, sp, #0
	unsigned char read_value;

	// Sätt pinnar 15-8 till ingångar.
	GPIO_E->moder &= 0x0000FFFF;
200004da:	4b0e      	ldr	r3, [pc, #56]	; (20000514 <ascii_read_status+0x40>)
200004dc:	4a0d      	ldr	r2, [pc, #52]	; (20000514 <ascii_read_status+0x40>)
200004de:	6812      	ldr	r2, [r2, #0]
200004e0:	0412      	lsls	r2, r2, #16
200004e2:	0c12      	lsrs	r2, r2, #16
200004e4:	601a      	str	r2, [r3, #0]

	ascii_ctrl_bit_clear(B_RS);
200004e6:	2001      	movs	r0, #1
200004e8:	f7ff ffa2 	bl	20000430 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
200004ec:	2002      	movs	r0, #2
200004ee:	f7ff ff7c 	bl	200003ea <ascii_ctrl_bit_set>
	read_value = ascii_read_controller();
200004f2:	1dfc      	adds	r4, r7, #7
200004f4:	f000 f84e 	bl	20000594 <ascii_read_controller>
200004f8:	0003      	movs	r3, r0
200004fa:	7023      	strb	r3, [r4, #0]

	// Sätt pinnar 15-8 till utgångar igen.
	GPIO_E->moder |= 0x55550000;
200004fc:	4b05      	ldr	r3, [pc, #20]	; (20000514 <ascii_read_status+0x40>)
200004fe:	4a05      	ldr	r2, [pc, #20]	; (20000514 <ascii_read_status+0x40>)
20000500:	6812      	ldr	r2, [r2, #0]
20000502:	4905      	ldr	r1, [pc, #20]	; (20000518 <ascii_read_status+0x44>)
20000504:	430a      	orrs	r2, r1
20000506:	601a      	str	r2, [r3, #0]

	return read_value;
20000508:	1dfb      	adds	r3, r7, #7
2000050a:	781b      	ldrb	r3, [r3, #0]
}
2000050c:	0018      	movs	r0, r3
2000050e:	46bd      	mov	sp, r7
20000510:	b003      	add	sp, #12
20000512:	bd90      	pop	{r4, r7, pc}
20000514:	40021000 	andmi	r1, r2, r0
20000518:	55550000 	ldrbpl	r0, [r5, #-0]

2000051c <ascii_read_data>:

unsigned char ascii_read_data(void) {
2000051c:	b590      	push	{r4, r7, lr}
2000051e:	b083      	sub	sp, #12
20000520:	af00      	add	r7, sp, #0
	unsigned char read_value;

	// Sätt pinnar 15-8 till ingångar.
	GPIO_E->moder &= 0x0000FFFF;
20000522:	4b0e      	ldr	r3, [pc, #56]	; (2000055c <ascii_read_data+0x40>)
20000524:	4a0d      	ldr	r2, [pc, #52]	; (2000055c <ascii_read_data+0x40>)
20000526:	6812      	ldr	r2, [r2, #0]
20000528:	0412      	lsls	r2, r2, #16
2000052a:	0c12      	lsrs	r2, r2, #16
2000052c:	601a      	str	r2, [r3, #0]

	ascii_ctrl_bit_set(B_RS);
2000052e:	2001      	movs	r0, #1
20000530:	f7ff ff5b 	bl	200003ea <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000534:	2002      	movs	r0, #2
20000536:	f7ff ff58 	bl	200003ea <ascii_ctrl_bit_set>
	read_value = ascii_read_controller();
2000053a:	1dfc      	adds	r4, r7, #7
2000053c:	f000 f82a 	bl	20000594 <ascii_read_controller>
20000540:	0003      	movs	r3, r0
20000542:	7023      	strb	r3, [r4, #0]

	// Sätt pinnar 15-8 till utgångar igen.
	GPIO_E->moder |= 0xFFFF0000;
20000544:	4b05      	ldr	r3, [pc, #20]	; (2000055c <ascii_read_data+0x40>)
20000546:	4a05      	ldr	r2, [pc, #20]	; (2000055c <ascii_read_data+0x40>)
20000548:	6812      	ldr	r2, [r2, #0]
2000054a:	4905      	ldr	r1, [pc, #20]	; (20000560 <ascii_read_data+0x44>)
2000054c:	430a      	orrs	r2, r1
2000054e:	601a      	str	r2, [r3, #0]

	return read_value;
20000550:	1dfb      	adds	r3, r7, #7
20000552:	781b      	ldrb	r3, [r3, #0]
}
20000554:	0018      	movs	r0, r3
20000556:	46bd      	mov	sp, r7
20000558:	b003      	add	sp, #12
2000055a:	bd90      	pop	{r4, r7, pc}
2000055c:	40021000 	andmi	r1, r2, r0
20000560:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

20000564 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
20000564:	b580      	push	{r7, lr}
20000566:	b082      	sub	sp, #8
20000568:	af00      	add	r7, sp, #0
2000056a:	0002      	movs	r2, r0
2000056c:	1dfb      	adds	r3, r7, #7
2000056e:	701a      	strb	r2, [r3, #0]
	// Delay40ns is redundant
	ascii_ctrl_bit_set(B_E);
20000570:	2040      	movs	r0, #64	; 0x40
20000572:	f7ff ff3a 	bl	200003ea <ascii_ctrl_bit_set>
	GPIO_E->odrHigh = byte;
20000576:	4a06      	ldr	r2, [pc, #24]	; (20000590 <ascii_write_controller+0x2c>)
20000578:	1dfb      	adds	r3, r7, #7
2000057a:	781b      	ldrb	r3, [r3, #0]
2000057c:	7553      	strb	r3, [r2, #21]
	delay_250ns();
2000057e:	f000 fb44 	bl	20000c0a <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20000582:	2040      	movs	r0, #64	; 0x40
20000584:	f7ff ff54 	bl	20000430 <ascii_ctrl_bit_clear>
	// Delay10ns is redundant
}
20000588:	46c0      	nop			; (mov r8, r8)
2000058a:	46bd      	mov	sp, r7
2000058c:	b002      	add	sp, #8
2000058e:	bd80      	pop	{r7, pc}
20000590:	40021000 	andmi	r1, r2, r0

20000594 <ascii_read_controller>:

unsigned char ascii_read_controller(void) {
20000594:	b580      	push	{r7, lr}
20000596:	b082      	sub	sp, #8
20000598:	af00      	add	r7, sp, #0
	unsigned char read_value;
	ascii_ctrl_bit_set(B_E);
2000059a:	2040      	movs	r0, #64	; 0x40
2000059c:	f7ff ff25 	bl	200003ea <ascii_ctrl_bit_set>
	delay_500ns();
200005a0:	f000 fb40 	bl	20000c24 <delay_500ns>
	read_value = GPIO_E->idrHigh;
200005a4:	4a06      	ldr	r2, [pc, #24]	; (200005c0 <ascii_read_controller+0x2c>)
200005a6:	1dfb      	adds	r3, r7, #7
200005a8:	7c52      	ldrb	r2, [r2, #17]
200005aa:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200005ac:	2040      	movs	r0, #64	; 0x40
200005ae:	f7ff ff3f 	bl	20000430 <ascii_ctrl_bit_clear>
	return read_value;
200005b2:	1dfb      	adds	r3, r7, #7
200005b4:	781b      	ldrb	r3, [r3, #0]
}
200005b6:	0018      	movs	r0, r3
200005b8:	46bd      	mov	sp, r7
200005ba:	b002      	add	sp, #8
200005bc:	bd80      	pop	{r7, pc}
200005be:	46c0      	nop			; (mov r8, r8)
200005c0:	40021000 	andmi	r1, r2, r0

200005c4 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y) {
200005c4:	b580      	push	{r7, lr}
200005c6:	b084      	sub	sp, #16
200005c8:	af00      	add	r7, sp, #0
200005ca:	6078      	str	r0, [r7, #4]
200005cc:	6039      	str	r1, [r7, #0]
	if(!(y == 1 || y == 2)) return;
200005ce:	683b      	ldr	r3, [r7, #0]
200005d0:	2b01      	cmp	r3, #1
200005d2:	d002      	beq.n	200005da <ascii_gotoxy+0x16>
200005d4:	683b      	ldr	r3, [r7, #0]
200005d6:	2b02      	cmp	r3, #2
200005d8:	d11a      	bne.n	20000610 <ascii_gotoxy+0x4c>
	unsigned char address = x - 1;
200005da:	687b      	ldr	r3, [r7, #4]
200005dc:	b2da      	uxtb	r2, r3
200005de:	230f      	movs	r3, #15
200005e0:	18fb      	adds	r3, r7, r3
200005e2:	3a01      	subs	r2, #1
200005e4:	701a      	strb	r2, [r3, #0]
	if(y == 2){
200005e6:	683b      	ldr	r3, [r7, #0]
200005e8:	2b02      	cmp	r3, #2
200005ea:	d106      	bne.n	200005fa <ascii_gotoxy+0x36>
		address += 0x40;
200005ec:	230f      	movs	r3, #15
200005ee:	18fb      	adds	r3, r7, r3
200005f0:	220f      	movs	r2, #15
200005f2:	18ba      	adds	r2, r7, r2
200005f4:	7812      	ldrb	r2, [r2, #0]
200005f6:	3240      	adds	r2, #64	; 0x40
200005f8:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
200005fa:	230f      	movs	r3, #15
200005fc:	18fb      	adds	r3, r7, r3
200005fe:	781b      	ldrb	r3, [r3, #0]
20000600:	2280      	movs	r2, #128	; 0x80
20000602:	4252      	negs	r2, r2
20000604:	4313      	orrs	r3, r2
20000606:	b2db      	uxtb	r3, r3
20000608:	0018      	movs	r0, r3
2000060a:	f7ff ff39 	bl	20000480 <ascii_write_cmd>
2000060e:	e000      	b.n	20000612 <ascii_gotoxy+0x4e>
	if(!(y == 1 || y == 2)) return;
20000610:	46c0      	nop			; (mov r8, r8)
}
20000612:	46bd      	mov	sp, r7
20000614:	b004      	add	sp, #16
20000616:	bd80      	pop	{r7, pc}

20000618 <ascii_write_char>:

void ascii_write_char(unsigned char c) {
20000618:	b580      	push	{r7, lr}
2000061a:	b082      	sub	sp, #8
2000061c:	af00      	add	r7, sp, #0
2000061e:	0002      	movs	r2, r0
20000620:	1dfb      	adds	r3, r7, #7
20000622:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80)
20000624:	46c0      	nop			; (mov r8, r8)
20000626:	f7ff ff55 	bl	200004d4 <ascii_read_status>
2000062a:	0003      	movs	r3, r0
2000062c:	001a      	movs	r2, r3
2000062e:	2380      	movs	r3, #128	; 0x80
20000630:	4013      	ands	r3, r2
20000632:	2b80      	cmp	r3, #128	; 0x80
20000634:	d0f7      	beq.n	20000626 <ascii_write_char+0xe>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(8);
20000636:	2008      	movs	r0, #8
20000638:	f000 fb16 	bl	20000c68 <delay_mikro>
	ascii_write_data(c);
2000063c:	1dfb      	adds	r3, r7, #7
2000063e:	781b      	ldrb	r3, [r3, #0]
20000640:	0018      	movs	r0, r3
20000642:	f7ff ff32 	bl	200004aa <ascii_write_data>
	delay_mikro(43);
20000646:	202b      	movs	r0, #43	; 0x2b
20000648:	f000 fb0e 	bl	20000c68 <delay_mikro>
	//delay_mikro(100000);
}
2000064c:	46c0      	nop			; (mov r8, r8)
2000064e:	46bd      	mov	sp, r7
20000650:	b002      	add	sp, #8
20000652:	bd80      	pop	{r7, pc}

20000654 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x) {
20000654:	b580      	push	{r7, lr}
20000656:	b084      	sub	sp, #16
20000658:	af00      	add	r7, sp, #0
2000065a:	0002      	movs	r2, r0
2000065c:	1dfb      	adds	r3, r7, #7
2000065e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
20000660:	4a12      	ldr	r2, [pc, #72]	; (200006ac <graphic_ctrl_bit_set+0x58>)
20000662:	230f      	movs	r3, #15
20000664:	18fb      	adds	r3, r7, r3
20000666:	7d12      	ldrb	r2, [r2, #20]
20000668:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
2000066a:	230f      	movs	r3, #15
2000066c:	18fb      	adds	r3, r7, r3
2000066e:	220f      	movs	r2, #15
20000670:	18ba      	adds	r2, r7, r2
20000672:	7812      	ldrb	r2, [r2, #0]
20000674:	2104      	movs	r1, #4
20000676:	438a      	bics	r2, r1
20000678:	701a      	strb	r2, [r3, #0]
	c |= (~B_SELECT & x);
2000067a:	1dfb      	adds	r3, r7, #7
2000067c:	781b      	ldrb	r3, [r3, #0]
2000067e:	b25b      	sxtb	r3, r3
20000680:	2204      	movs	r2, #4
20000682:	4393      	bics	r3, r2
20000684:	b25a      	sxtb	r2, r3
20000686:	230f      	movs	r3, #15
20000688:	18fb      	adds	r3, r7, r3
2000068a:	781b      	ldrb	r3, [r3, #0]
2000068c:	b25b      	sxtb	r3, r3
2000068e:	4313      	orrs	r3, r2
20000690:	b25a      	sxtb	r2, r3
20000692:	230f      	movs	r3, #15
20000694:	18fb      	adds	r3, r7, r3
20000696:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
20000698:	4a04      	ldr	r2, [pc, #16]	; (200006ac <graphic_ctrl_bit_set+0x58>)
2000069a:	230f      	movs	r3, #15
2000069c:	18fb      	adds	r3, r7, r3
2000069e:	781b      	ldrb	r3, [r3, #0]
200006a0:	7513      	strb	r3, [r2, #20]
}
200006a2:	46c0      	nop			; (mov r8, r8)
200006a4:	46bd      	mov	sp, r7
200006a6:	b004      	add	sp, #16
200006a8:	bd80      	pop	{r7, pc}
200006aa:	46c0      	nop			; (mov r8, r8)
200006ac:	40021000 	andmi	r1, r2, r0

200006b0 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
200006b0:	b580      	push	{r7, lr}
200006b2:	b084      	sub	sp, #16
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
200006bc:	4a11      	ldr	r2, [pc, #68]	; (20000704 <graphic_ctrl_bit_clear+0x54>)
200006be:	230f      	movs	r3, #15
200006c0:	18fb      	adds	r3, r7, r3
200006c2:	7d12      	ldrb	r2, [r2, #20]
200006c4:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
200006c6:	230f      	movs	r3, #15
200006c8:	18fb      	adds	r3, r7, r3
200006ca:	220f      	movs	r2, #15
200006cc:	18ba      	adds	r2, r7, r2
200006ce:	7812      	ldrb	r2, [r2, #0]
200006d0:	2104      	movs	r1, #4
200006d2:	438a      	bics	r2, r1
200006d4:	701a      	strb	r2, [r3, #0]
	c &= ~x;
200006d6:	1dfb      	adds	r3, r7, #7
200006d8:	781b      	ldrb	r3, [r3, #0]
200006da:	b25b      	sxtb	r3, r3
200006dc:	43db      	mvns	r3, r3
200006de:	b25b      	sxtb	r3, r3
200006e0:	220f      	movs	r2, #15
200006e2:	18ba      	adds	r2, r7, r2
200006e4:	7812      	ldrb	r2, [r2, #0]
200006e6:	b252      	sxtb	r2, r2
200006e8:	4013      	ands	r3, r2
200006ea:	b25a      	sxtb	r2, r3
200006ec:	230f      	movs	r3, #15
200006ee:	18fb      	adds	r3, r7, r3
200006f0:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
200006f2:	4a04      	ldr	r2, [pc, #16]	; (20000704 <graphic_ctrl_bit_clear+0x54>)
200006f4:	230f      	movs	r3, #15
200006f6:	18fb      	adds	r3, r7, r3
200006f8:	781b      	ldrb	r3, [r3, #0]
200006fa:	7513      	strb	r3, [r2, #20]
}
200006fc:	46c0      	nop			; (mov r8, r8)
200006fe:	46bd      	mov	sp, r7
20000700:	b004      	add	sp, #16
20000702:	bd80      	pop	{r7, pc}
20000704:	40021000 	andmi	r1, r2, r0

20000708 <select_controller>:

void select_controller(uint8_t controller) {
20000708:	b580      	push	{r7, lr}
2000070a:	b082      	sub	sp, #8
2000070c:	af00      	add	r7, sp, #0
2000070e:	0002      	movs	r2, r0
20000710:	1dfb      	adds	r3, r7, #7
20000712:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000714:	1dfb      	adds	r3, r7, #7
20000716:	781b      	ldrb	r3, [r3, #0]
20000718:	2b08      	cmp	r3, #8
2000071a:	d00c      	beq.n	20000736 <select_controller+0x2e>
2000071c:	dc02      	bgt.n	20000724 <select_controller+0x1c>
2000071e:	2b00      	cmp	r3, #0
20000720:	d005      	beq.n	2000072e <select_controller+0x26>
			break;
		case B_CS1|B_CS2 :
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
20000722:	e01a      	b.n	2000075a <select_controller+0x52>
	switch(controller){
20000724:	2b10      	cmp	r3, #16
20000726:	d00d      	beq.n	20000744 <select_controller+0x3c>
20000728:	2b18      	cmp	r3, #24
2000072a:	d012      	beq.n	20000752 <select_controller+0x4a>
}
2000072c:	e015      	b.n	2000075a <select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
2000072e:	2018      	movs	r0, #24
20000730:	f7ff ffbe 	bl	200006b0 <graphic_ctrl_bit_clear>
			break;
20000734:	e011      	b.n	2000075a <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1);
20000736:	2008      	movs	r0, #8
20000738:	f7ff ff8c 	bl	20000654 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
2000073c:	2010      	movs	r0, #16
2000073e:	f7ff ffb7 	bl	200006b0 <graphic_ctrl_bit_clear>
			break;
20000742:	e00a      	b.n	2000075a <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS2);
20000744:	2010      	movs	r0, #16
20000746:	f7ff ff85 	bl	20000654 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS1);
2000074a:	2008      	movs	r0, #8
2000074c:	f7ff ffb0 	bl	200006b0 <graphic_ctrl_bit_clear>
			break;
20000750:	e003      	b.n	2000075a <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
20000752:	2018      	movs	r0, #24
20000754:	f7ff ff7e 	bl	20000654 <graphic_ctrl_bit_set>
			break;
20000758:	46c0      	nop			; (mov r8, r8)
}
2000075a:	46c0      	nop			; (mov r8, r8)
2000075c:	46bd      	mov	sp, r7
2000075e:	b002      	add	sp, #8
20000760:	bd80      	pop	{r7, pc}

20000762 <graphic_initialize>:

void graphic_initialize(void) {
20000762:	b580      	push	{r7, lr}
20000764:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000766:	2040      	movs	r0, #64	; 0x40
20000768:	f7ff ff74 	bl	20000654 <graphic_ctrl_bit_set>
	delay_mikro(10);
2000076c:	200a      	movs	r0, #10
2000076e:	f000 fa7b 	bl	20000c68 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000772:	2078      	movs	r0, #120	; 0x78
20000774:	f7ff ff9c 	bl	200006b0 <graphic_ctrl_bit_clear>
	delay_mikro(30);
20000778:	201e      	movs	r0, #30
2000077a:	f000 fa75 	bl	20000c68 <delay_mikro>
	graphic_ctrl_bit_set(B_RST);
2000077e:	2020      	movs	r0, #32
20000780:	f7ff ff68 	bl	20000654 <graphic_ctrl_bit_set>
	delay_mikro(100);
20000784:	2064      	movs	r0, #100	; 0x64
20000786:	f000 fa6f 	bl	20000c68 <delay_mikro>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
2000078a:	2118      	movs	r1, #24
2000078c:	203e      	movs	r0, #62	; 0x3e
2000078e:	f000 f8d3 	bl	20000938 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000792:	2118      	movs	r1, #24
20000794:	203f      	movs	r0, #63	; 0x3f
20000796:	f000 f8cf 	bl	20000938 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000079a:	2118      	movs	r1, #24
2000079c:	20c0      	movs	r0, #192	; 0xc0
2000079e:	f000 f8cb 	bl	20000938 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200007a2:	2118      	movs	r1, #24
200007a4:	2040      	movs	r0, #64	; 0x40
200007a6:	f000 f8c7 	bl	20000938 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200007aa:	2118      	movs	r1, #24
200007ac:	20b8      	movs	r0, #184	; 0xb8
200007ae:	f000 f8c3 	bl	20000938 <graphic_write_command>
	select_controller(0);
200007b2:	2000      	movs	r0, #0
200007b4:	f7ff ffa8 	bl	20000708 <select_controller>
}
200007b8:	46c0      	nop			; (mov r8, r8)
200007ba:	46bd      	mov	sp, r7
200007bc:	bd80      	pop	{r7, pc}

200007be <graphic_wait_ready>:

void graphic_wait_ready(void) {
200007be:	b580      	push	{r7, lr}
200007c0:	b082      	sub	sp, #8
200007c2:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200007c4:	2040      	movs	r0, #64	; 0x40
200007c6:	f7ff ff73 	bl	200006b0 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
200007ca:	4b14      	ldr	r3, [pc, #80]	; (2000081c <graphic_wait_ready+0x5e>)
200007cc:	4a14      	ldr	r2, [pc, #80]	; (20000820 <graphic_wait_ready+0x62>)
200007ce:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200007d0:	2001      	movs	r0, #1
200007d2:	f7ff ff6d 	bl	200006b0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200007d6:	2002      	movs	r0, #2
200007d8:	f7ff ff3c 	bl	20000654 <graphic_ctrl_bit_set>
	delay_500ns();
200007dc:	f000 fa22 	bl	20000c24 <delay_500ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
200007e0:	2040      	movs	r0, #64	; 0x40
200007e2:	f7ff ff37 	bl	20000654 <graphic_ctrl_bit_set>
		delay_500ns();
200007e6:	f000 fa1d 	bl	20000c24 <delay_500ns>
		c = GPIO_E->idrHigh & LCD_BUSY;
200007ea:	4b0c      	ldr	r3, [pc, #48]	; (2000081c <graphic_wait_ready+0x5e>)
200007ec:	7c5b      	ldrb	r3, [r3, #17]
200007ee:	b2da      	uxtb	r2, r3
200007f0:	1dfb      	adds	r3, r7, #7
200007f2:	217f      	movs	r1, #127	; 0x7f
200007f4:	438a      	bics	r2, r1
200007f6:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200007f8:	2040      	movs	r0, #64	; 0x40
200007fa:	f7ff ff59 	bl	200006b0 <graphic_ctrl_bit_clear>
		delay_500ns();
200007fe:	f000 fa11 	bl	20000c24 <delay_500ns>
		if( c == 0 ) break;
20000802:	1dfb      	adds	r3, r7, #7
20000804:	781b      	ldrb	r3, [r3, #0]
20000806:	2b00      	cmp	r3, #0
20000808:	d000      	beq.n	2000080c <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000080a:	e7e9      	b.n	200007e0 <graphic_wait_ready+0x22>
		if( c == 0 ) break;
2000080c:	46c0      	nop			; (mov r8, r8)
	}
	GPIO_E->moder = 0x55555555; // 15-0 outputs
2000080e:	4b03      	ldr	r3, [pc, #12]	; (2000081c <graphic_wait_ready+0x5e>)
20000810:	4a04      	ldr	r2, [pc, #16]	; (20000824 <graphic_wait_ready+0x66>)
20000812:	601a      	str	r2, [r3, #0]
}
20000814:	46c0      	nop			; (mov r8, r8)
20000816:	46bd      	mov	sp, r7
20000818:	b002      	add	sp, #8
2000081a:	bd80      	pop	{r7, pc}
2000081c:	40021000 	andmi	r1, r2, r0
20000820:	00005555 	andeq	r5, r0, r5, asr r5
20000824:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000828 <graphic_read>:

uint8_t graphic_read(uint8_t controller) {
20000828:	b580      	push	{r7, lr}
2000082a:	b084      	sub	sp, #16
2000082c:	af00      	add	r7, sp, #0
2000082e:	0002      	movs	r2, r0
20000830:	1dfb      	adds	r3, r7, #7
20000832:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000834:	2040      	movs	r0, #64	; 0x40
20000836:	f7ff ff3b 	bl	200006b0 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555;
2000083a:	4b1c      	ldr	r3, [pc, #112]	; (200008ac <graphic_read+0x84>)
2000083c:	4a1c      	ldr	r2, [pc, #112]	; (200008b0 <graphic_read+0x88>)
2000083e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
20000840:	2002      	movs	r0, #2
20000842:	f7ff ff07 	bl	20000654 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RS);
20000846:	2001      	movs	r0, #1
20000848:	f7ff ff04 	bl	20000654 <graphic_ctrl_bit_set>
	select_controller(controller);
2000084c:	1dfb      	adds	r3, r7, #7
2000084e:	781b      	ldrb	r3, [r3, #0]
20000850:	0018      	movs	r0, r3
20000852:	f7ff ff59 	bl	20000708 <select_controller>
	delay_500ns();
20000856:	f000 f9e5 	bl	20000c24 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000085a:	2040      	movs	r0, #64	; 0x40
2000085c:	f7ff fefa 	bl	20000654 <graphic_ctrl_bit_set>
	delay_500ns();
20000860:	f000 f9e0 	bl	20000c24 <delay_500ns>
	uint8_t rv = GPIO_E->idrHigh;
20000864:	4a11      	ldr	r2, [pc, #68]	; (200008ac <graphic_read+0x84>)
20000866:	230f      	movs	r3, #15
20000868:	18fb      	adds	r3, r7, r3
2000086a:	7c52      	ldrb	r2, [r2, #17]
2000086c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000086e:	2040      	movs	r0, #64	; 0x40
20000870:	f7ff ff1e 	bl	200006b0 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x55555555;
20000874:	4b0d      	ldr	r3, [pc, #52]	; (200008ac <graphic_read+0x84>)
20000876:	4a0f      	ldr	r2, [pc, #60]	; (200008b4 <graphic_read+0x8c>)
20000878:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1) {
2000087a:	1dfb      	adds	r3, r7, #7
2000087c:	781b      	ldrb	r3, [r3, #0]
2000087e:	2b08      	cmp	r3, #8
20000880:	d104      	bne.n	2000088c <graphic_read+0x64>
		select_controller(B_CS1);
20000882:	2008      	movs	r0, #8
20000884:	f7ff ff40 	bl	20000708 <select_controller>
		graphic_wait_ready();
20000888:	f7ff ff99 	bl	200007be <graphic_wait_ready>
	}
	if(controller == B_CS2){
2000088c:	1dfb      	adds	r3, r7, #7
2000088e:	781b      	ldrb	r3, [r3, #0]
20000890:	2b10      	cmp	r3, #16
20000892:	d104      	bne.n	2000089e <graphic_read+0x76>
		select_controller(B_CS2);
20000894:	2010      	movs	r0, #16
20000896:	f7ff ff37 	bl	20000708 <select_controller>
		graphic_wait_ready();
2000089a:	f7ff ff90 	bl	200007be <graphic_wait_ready>
	}
	// graphic_read = RV (what???)
	return rv;
2000089e:	230f      	movs	r3, #15
200008a0:	18fb      	adds	r3, r7, r3
200008a2:	781b      	ldrb	r3, [r3, #0]
}
200008a4:	0018      	movs	r0, r3
200008a6:	46bd      	mov	sp, r7
200008a8:	b004      	add	sp, #16
200008aa:	bd80      	pop	{r7, pc}
200008ac:	40021000 	andmi	r1, r2, r0
200008b0:	00005555 	andeq	r5, r0, r5, asr r5
200008b4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200008b8 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
200008b8:	b580      	push	{r7, lr}
200008ba:	b082      	sub	sp, #8
200008bc:	af00      	add	r7, sp, #0
200008be:	0002      	movs	r2, r0
200008c0:	1dfb      	adds	r3, r7, #7
200008c2:	701a      	strb	r2, [r3, #0]
200008c4:	1dbb      	adds	r3, r7, #6
200008c6:	1c0a      	adds	r2, r1, #0
200008c8:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrHigh = value;
200008ca:	4a1a      	ldr	r2, [pc, #104]	; (20000934 <graphic_write+0x7c>)
200008cc:	1dfb      	adds	r3, r7, #7
200008ce:	781b      	ldrb	r3, [r3, #0]
200008d0:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
200008d2:	1dbb      	adds	r3, r7, #6
200008d4:	781b      	ldrb	r3, [r3, #0]
200008d6:	0018      	movs	r0, r3
200008d8:	f7ff ff16 	bl	20000708 <select_controller>
	delay_500ns();
200008dc:	f000 f9a2 	bl	20000c24 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200008e0:	2040      	movs	r0, #64	; 0x40
200008e2:	f7ff feb7 	bl	20000654 <graphic_ctrl_bit_set>
	delay_500ns();
200008e6:	f000 f99d 	bl	20000c24 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200008ea:	2040      	movs	r0, #64	; 0x40
200008ec:	f7ff fee0 	bl	200006b0 <graphic_ctrl_bit_clear>
	if(controller & B_CS1) {
200008f0:	1dbb      	adds	r3, r7, #6
200008f2:	781b      	ldrb	r3, [r3, #0]
200008f4:	2208      	movs	r2, #8
200008f6:	4013      	ands	r3, r2
200008f8:	d004      	beq.n	20000904 <graphic_write+0x4c>
		select_controller(B_CS1);
200008fa:	2008      	movs	r0, #8
200008fc:	f7ff ff04 	bl	20000708 <select_controller>
		graphic_wait_ready();
20000900:	f7ff ff5d 	bl	200007be <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20000904:	1dbb      	adds	r3, r7, #6
20000906:	781b      	ldrb	r3, [r3, #0]
20000908:	2210      	movs	r2, #16
2000090a:	4013      	ands	r3, r2
2000090c:	d004      	beq.n	20000918 <graphic_write+0x60>
		select_controller(B_CS2);
2000090e:	2010      	movs	r0, #16
20000910:	f7ff fefa 	bl	20000708 <select_controller>
		graphic_wait_ready();
20000914:	f7ff ff53 	bl	200007be <graphic_wait_ready>
	}
	GPIO_E->odrHigh = 0;
20000918:	4b06      	ldr	r3, [pc, #24]	; (20000934 <graphic_write+0x7c>)
2000091a:	2200      	movs	r2, #0
2000091c:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
2000091e:	2040      	movs	r0, #64	; 0x40
20000920:	f7ff fe98 	bl	20000654 <graphic_ctrl_bit_set>
	select_controller(0);
20000924:	2000      	movs	r0, #0
20000926:	f7ff feef 	bl	20000708 <select_controller>
}
2000092a:	46c0      	nop			; (mov r8, r8)
2000092c:	46bd      	mov	sp, r7
2000092e:	b002      	add	sp, #8
20000930:	bd80      	pop	{r7, pc}
20000932:	46c0      	nop			; (mov r8, r8)
20000934:	40021000 	andmi	r1, r2, r0

20000938 <graphic_write_command>:

void graphic_write_command(uint8_t commandToWrite, uint8_t controller) {
20000938:	b580      	push	{r7, lr}
2000093a:	b082      	sub	sp, #8
2000093c:	af00      	add	r7, sp, #0
2000093e:	0002      	movs	r2, r0
20000940:	1dfb      	adds	r3, r7, #7
20000942:	701a      	strb	r2, [r3, #0]
20000944:	1dbb      	adds	r3, r7, #6
20000946:	1c0a      	adds	r2, r1, #0
20000948:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000094a:	2040      	movs	r0, #64	; 0x40
2000094c:	f7ff feb0 	bl	200006b0 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000950:	1dbb      	adds	r3, r7, #6
20000952:	781b      	ldrb	r3, [r3, #0]
20000954:	0018      	movs	r0, r3
20000956:	f7ff fed7 	bl	20000708 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000095a:	2003      	movs	r0, #3
2000095c:	f7ff fea8 	bl	200006b0 <graphic_ctrl_bit_clear>
	graphic_write(commandToWrite, controller);
20000960:	1dbb      	adds	r3, r7, #6
20000962:	781a      	ldrb	r2, [r3, #0]
20000964:	1dfb      	adds	r3, r7, #7
20000966:	781b      	ldrb	r3, [r3, #0]
20000968:	0011      	movs	r1, r2
2000096a:	0018      	movs	r0, r3
2000096c:	f7ff ffa4 	bl	200008b8 <graphic_write>
}
20000970:	46c0      	nop			; (mov r8, r8)
20000972:	46bd      	mov	sp, r7
20000974:	b002      	add	sp, #8
20000976:	bd80      	pop	{r7, pc}

20000978 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller) {
20000978:	b580      	push	{r7, lr}
2000097a:	b082      	sub	sp, #8
2000097c:	af00      	add	r7, sp, #0
2000097e:	0002      	movs	r2, r0
20000980:	1dfb      	adds	r3, r7, #7
20000982:	701a      	strb	r2, [r3, #0]
20000984:	1dbb      	adds	r3, r7, #6
20000986:	1c0a      	adds	r2, r1, #0
20000988:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000098a:	2040      	movs	r0, #64	; 0x40
2000098c:	f7ff fe90 	bl	200006b0 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000990:	1dbb      	adds	r3, r7, #6
20000992:	781b      	ldrb	r3, [r3, #0]
20000994:	0018      	movs	r0, r3
20000996:	f7ff feb7 	bl	20000708 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000099a:	2001      	movs	r0, #1
2000099c:	f7ff fe5a 	bl	20000654 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200009a0:	2002      	movs	r0, #2
200009a2:	f7ff fe85 	bl	200006b0 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200009a6:	1dbb      	adds	r3, r7, #6
200009a8:	781a      	ldrb	r2, [r3, #0]
200009aa:	1dfb      	adds	r3, r7, #7
200009ac:	781b      	ldrb	r3, [r3, #0]
200009ae:	0011      	movs	r1, r2
200009b0:	0018      	movs	r0, r3
200009b2:	f7ff ff81 	bl	200008b8 <graphic_write>
}
200009b6:	46c0      	nop			; (mov r8, r8)
200009b8:	46bd      	mov	sp, r7
200009ba:	b002      	add	sp, #8
200009bc:	bd80      	pop	{r7, pc}

200009be <graphic_read_data>:

uint8_t graphic_read_data(unsigned char controller) {
200009be:	b580      	push	{r7, lr}
200009c0:	b082      	sub	sp, #8
200009c2:	af00      	add	r7, sp, #0
200009c4:	0002      	movs	r2, r0
200009c6:	1dfb      	adds	r3, r7, #7
200009c8:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
200009ca:	1dfb      	adds	r3, r7, #7
200009cc:	781b      	ldrb	r3, [r3, #0]
200009ce:	0018      	movs	r0, r3
200009d0:	f7ff ff2a 	bl	20000828 <graphic_read>
	return graphic_read(controller);
200009d4:	1dfb      	adds	r3, r7, #7
200009d6:	781b      	ldrb	r3, [r3, #0]
200009d8:	0018      	movs	r0, r3
200009da:	f7ff ff25 	bl	20000828 <graphic_read>
200009de:	0003      	movs	r3, r0
}
200009e0:	0018      	movs	r0, r3
200009e2:	46bd      	mov	sp, r7
200009e4:	b002      	add	sp, #8
200009e6:	bd80      	pop	{r7, pc}

200009e8 <graphic_clear_screen>:

void graphic_clear_screen(void) {
200009e8:	b580      	push	{r7, lr}
200009ea:	b082      	sub	sp, #8
200009ec:	af00      	add	r7, sp, #0
	uint8_t page, add;
	for(page = 0; page < 8; page++){
200009ee:	1dfb      	adds	r3, r7, #7
200009f0:	2200      	movs	r2, #0
200009f2:	701a      	strb	r2, [r3, #0]
200009f4:	e023      	b.n	20000a3e <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE	| page, B_CS1|B_CS2);
200009f6:	1dfb      	adds	r3, r7, #7
200009f8:	781b      	ldrb	r3, [r3, #0]
200009fa:	2248      	movs	r2, #72	; 0x48
200009fc:	4252      	negs	r2, r2
200009fe:	4313      	orrs	r3, r2
20000a00:	b2db      	uxtb	r3, r3
20000a02:	2118      	movs	r1, #24
20000a04:	0018      	movs	r0, r3
20000a06:	f7ff ff97 	bl	20000938 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD	| 0, 	B_CS1|B_CS2);
20000a0a:	2118      	movs	r1, #24
20000a0c:	2040      	movs	r0, #64	; 0x40
20000a0e:	f7ff ff93 	bl	20000938 <graphic_write_command>
		for(add = 0; add < 64; add++){
20000a12:	1dbb      	adds	r3, r7, #6
20000a14:	2200      	movs	r2, #0
20000a16:	701a      	strb	r2, [r3, #0]
20000a18:	e008      	b.n	20000a2c <graphic_clear_screen+0x44>
			graphic_write_data(0,B_CS1|B_CS2);
20000a1a:	2118      	movs	r1, #24
20000a1c:	2000      	movs	r0, #0
20000a1e:	f7ff ffab 	bl	20000978 <graphic_write_data>
		for(add = 0; add < 64; add++){
20000a22:	1dbb      	adds	r3, r7, #6
20000a24:	781a      	ldrb	r2, [r3, #0]
20000a26:	1dbb      	adds	r3, r7, #6
20000a28:	3201      	adds	r2, #1
20000a2a:	701a      	strb	r2, [r3, #0]
20000a2c:	1dbb      	adds	r3, r7, #6
20000a2e:	781b      	ldrb	r3, [r3, #0]
20000a30:	2b3f      	cmp	r3, #63	; 0x3f
20000a32:	d9f2      	bls.n	20000a1a <graphic_clear_screen+0x32>
	for(page = 0; page < 8; page++){
20000a34:	1dfb      	adds	r3, r7, #7
20000a36:	781a      	ldrb	r2, [r3, #0]
20000a38:	1dfb      	adds	r3, r7, #7
20000a3a:	3201      	adds	r2, #1
20000a3c:	701a      	strb	r2, [r3, #0]
20000a3e:	1dfb      	adds	r3, r7, #7
20000a40:	781b      	ldrb	r3, [r3, #0]
20000a42:	2b07      	cmp	r3, #7
20000a44:	d9d7      	bls.n	200009f6 <graphic_clear_screen+0xe>
		}
	}
}
20000a46:	46c0      	nop			; (mov r8, r8)
20000a48:	46bd      	mov	sp, r7
20000a4a:	b002      	add	sp, #8
20000a4c:	bd80      	pop	{r7, pc}

20000a4e <setup_for_graphic_display>:

void setup_for_graphic_display(void){
20000a4e:	b580      	push	{r7, lr}
20000a50:	af00      	add	r7, sp, #0
	GPIO_E->moder = 0x55555555;
20000a52:	4b04      	ldr	r3, [pc, #16]	; (20000a64 <setup_for_graphic_display+0x16>)
20000a54:	4a04      	ldr	r2, [pc, #16]	; (20000a68 <setup_for_graphic_display+0x1a>)
20000a56:	601a      	str	r2, [r3, #0]
	GPIO_E->ospeedr = 0x55555555;
20000a58:	4b02      	ldr	r3, [pc, #8]	; (20000a64 <setup_for_graphic_display+0x16>)
20000a5a:	4a03      	ldr	r2, [pc, #12]	; (20000a68 <setup_for_graphic_display+0x1a>)
20000a5c:	609a      	str	r2, [r3, #8]
}
20000a5e:	46c0      	nop			; (mov r8, r8)
20000a60:	46bd      	mov	sp, r7
20000a62:	bd80      	pop	{r7, pc}
20000a64:	40021000 	andmi	r1, r2, r0
20000a68:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000a6c <pixel>:

void pixel(unsigned char x, unsigned char y, unsigned char set) {
20000a6c:	b590      	push	{r4, r7, lr}
20000a6e:	b085      	sub	sp, #20
20000a70:	af00      	add	r7, sp, #0
20000a72:	0004      	movs	r4, r0
20000a74:	0008      	movs	r0, r1
20000a76:	0011      	movs	r1, r2
20000a78:	1dfb      	adds	r3, r7, #7
20000a7a:	1c22      	adds	r2, r4, #0
20000a7c:	701a      	strb	r2, [r3, #0]
20000a7e:	1dbb      	adds	r3, r7, #6
20000a80:	1c02      	adds	r2, r0, #0
20000a82:	701a      	strb	r2, [r3, #0]
20000a84:	1d7b      	adds	r3, r7, #5
20000a86:	1c0a      	adds	r2, r1, #0
20000a88:	701a      	strb	r2, [r3, #0]
	// Kontrollera att x och y är i tillåtna intervall. 
	if(x > 128 || x < 1 || y > 64 || y < 1) return;
20000a8a:	1dfb      	adds	r3, r7, #7
20000a8c:	781b      	ldrb	r3, [r3, #0]
20000a8e:	2b80      	cmp	r3, #128	; 0x80
20000a90:	d900      	bls.n	20000a94 <pixel+0x28>
20000a92:	e0aa      	b.n	20000bea <pixel+0x17e>
20000a94:	1dfb      	adds	r3, r7, #7
20000a96:	781b      	ldrb	r3, [r3, #0]
20000a98:	2b00      	cmp	r3, #0
20000a9a:	d100      	bne.n	20000a9e <pixel+0x32>
20000a9c:	e0a5      	b.n	20000bea <pixel+0x17e>
20000a9e:	1dbb      	adds	r3, r7, #6
20000aa0:	781b      	ldrb	r3, [r3, #0]
20000aa2:	2b40      	cmp	r3, #64	; 0x40
20000aa4:	d900      	bls.n	20000aa8 <pixel+0x3c>
20000aa6:	e0a0      	b.n	20000bea <pixel+0x17e>
20000aa8:	1dbb      	adds	r3, r7, #6
20000aaa:	781b      	ldrb	r3, [r3, #0]
20000aac:	2b00      	cmp	r3, #0
20000aae:	d100      	bne.n	20000ab2 <pixel+0x46>
20000ab0:	e09b      	b.n	20000bea <pixel+0x17e>
	if(set != 0 && set != 1) return;
20000ab2:	1d7b      	adds	r3, r7, #5
20000ab4:	781b      	ldrb	r3, [r3, #0]
20000ab6:	2b00      	cmp	r3, #0
20000ab8:	d004      	beq.n	20000ac4 <pixel+0x58>
20000aba:	1d7b      	adds	r3, r7, #5
20000abc:	781b      	ldrb	r3, [r3, #0]
20000abe:	2b01      	cmp	r3, #1
20000ac0:	d000      	beq.n	20000ac4 <pixel+0x58>
20000ac2:	e094      	b.n	20000bee <pixel+0x182>
	
	uint8_t index = (y - 1) / 8;
20000ac4:	1dbb      	adds	r3, r7, #6
20000ac6:	781b      	ldrb	r3, [r3, #0]
20000ac8:	3b01      	subs	r3, #1
20000aca:	2b00      	cmp	r3, #0
20000acc:	da00      	bge.n	20000ad0 <pixel+0x64>
20000ace:	3307      	adds	r3, #7
20000ad0:	10db      	asrs	r3, r3, #3
20000ad2:	001a      	movs	r2, r3
20000ad4:	230d      	movs	r3, #13
20000ad6:	18fb      	adds	r3, r7, r3
20000ad8:	701a      	strb	r2, [r3, #0]
	uint8_t mask;
	mask = 1 << ( (y - 1) % 8);
20000ada:	1dbb      	adds	r3, r7, #6
20000adc:	781b      	ldrb	r3, [r3, #0]
20000ade:	3b01      	subs	r3, #1
20000ae0:	4a45      	ldr	r2, [pc, #276]	; (20000bf8 <pixel+0x18c>)
20000ae2:	4013      	ands	r3, r2
20000ae4:	d504      	bpl.n	20000af0 <pixel+0x84>
20000ae6:	3b01      	subs	r3, #1
20000ae8:	2208      	movs	r2, #8
20000aea:	4252      	negs	r2, r2
20000aec:	4313      	orrs	r3, r2
20000aee:	3301      	adds	r3, #1
20000af0:	001a      	movs	r2, r3
20000af2:	2301      	movs	r3, #1
20000af4:	4093      	lsls	r3, r2
20000af6:	001a      	movs	r2, r3
20000af8:	230f      	movs	r3, #15
20000afa:	18fb      	adds	r3, r7, r3
20000afc:	701a      	strb	r2, [r3, #0]
	if(set == 0){
20000afe:	1d7b      	adds	r3, r7, #5
20000b00:	781b      	ldrb	r3, [r3, #0]
20000b02:	2b00      	cmp	r3, #0
20000b04:	d106      	bne.n	20000b14 <pixel+0xa8>
		mask = ~mask; // biten ska nollställas
20000b06:	230f      	movs	r3, #15
20000b08:	18fb      	adds	r3, r7, r3
20000b0a:	220f      	movs	r2, #15
20000b0c:	18ba      	adds	r2, r7, r2
20000b0e:	7812      	ldrb	r2, [r2, #0]
20000b10:	43d2      	mvns	r2, r2
20000b12:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t controller;
	
	// Bestäm fysiska koordinater och välj styrkrets
	if(x > 64){
20000b14:	1dfb      	adds	r3, r7, #7
20000b16:	781b      	ldrb	r3, [r3, #0]
20000b18:	2b40      	cmp	r3, #64	; 0x40
20000b1a:	d909      	bls.n	20000b30 <pixel+0xc4>
		controller = B_CS2;
20000b1c:	230e      	movs	r3, #14
20000b1e:	18fb      	adds	r3, r7, r3
20000b20:	2210      	movs	r2, #16
20000b22:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000b24:	1dfb      	adds	r3, r7, #7
20000b26:	1dfa      	adds	r2, r7, #7
20000b28:	7812      	ldrb	r2, [r2, #0]
20000b2a:	3a41      	subs	r2, #65	; 0x41
20000b2c:	701a      	strb	r2, [r3, #0]
20000b2e:	e008      	b.n	20000b42 <pixel+0xd6>
	}else{
		controller = B_CS1;
20000b30:	230e      	movs	r3, #14
20000b32:	18fb      	adds	r3, r7, r3
20000b34:	2208      	movs	r2, #8
20000b36:	701a      	strb	r2, [r3, #0]
		x = x - 1;
20000b38:	1dfb      	adds	r3, r7, #7
20000b3a:	1dfa      	adds	r2, r7, #7
20000b3c:	7812      	ldrb	r2, [r2, #0]
20000b3e:	3a01      	subs	r2, #1
20000b40:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x, controller);
20000b42:	1dfb      	adds	r3, r7, #7
20000b44:	781b      	ldrb	r3, [r3, #0]
20000b46:	2240      	movs	r2, #64	; 0x40
20000b48:	4313      	orrs	r3, r2
20000b4a:	b2da      	uxtb	r2, r3
20000b4c:	230e      	movs	r3, #14
20000b4e:	18fb      	adds	r3, r7, r3
20000b50:	781b      	ldrb	r3, [r3, #0]
20000b52:	0019      	movs	r1, r3
20000b54:	0010      	movs	r0, r2
20000b56:	f7ff feef 	bl	20000938 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000b5a:	230d      	movs	r3, #13
20000b5c:	18fb      	adds	r3, r7, r3
20000b5e:	781b      	ldrb	r3, [r3, #0]
20000b60:	2248      	movs	r2, #72	; 0x48
20000b62:	4252      	negs	r2, r2
20000b64:	4313      	orrs	r3, r2
20000b66:	b2da      	uxtb	r2, r3
20000b68:	230e      	movs	r3, #14
20000b6a:	18fb      	adds	r3, r7, r3
20000b6c:	781b      	ldrb	r3, [r3, #0]
20000b6e:	0019      	movs	r1, r3
20000b70:	0010      	movs	r0, r2
20000b72:	f7ff fee1 	bl	20000938 <graphic_write_command>
	uint8_t temp = graphic_read_data(controller);
20000b76:	230c      	movs	r3, #12
20000b78:	18fc      	adds	r4, r7, r3
20000b7a:	230e      	movs	r3, #14
20000b7c:	18fb      	adds	r3, r7, r3
20000b7e:	781b      	ldrb	r3, [r3, #0]
20000b80:	0018      	movs	r0, r3
20000b82:	f7ff ff1c 	bl	200009be <graphic_read_data>
20000b86:	0003      	movs	r3, r0
20000b88:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000b8a:	1dfb      	adds	r3, r7, #7
20000b8c:	781b      	ldrb	r3, [r3, #0]
20000b8e:	2240      	movs	r2, #64	; 0x40
20000b90:	4313      	orrs	r3, r2
20000b92:	b2da      	uxtb	r2, r3
20000b94:	230e      	movs	r3, #14
20000b96:	18fb      	adds	r3, r7, r3
20000b98:	781b      	ldrb	r3, [r3, #0]
20000b9a:	0019      	movs	r1, r3
20000b9c:	0010      	movs	r0, r2
20000b9e:	f7ff fecb 	bl	20000938 <graphic_write_command>
	
	if(set == 1){
20000ba2:	1d7b      	adds	r3, r7, #5
20000ba4:	781b      	ldrb	r3, [r3, #0]
20000ba6:	2b01      	cmp	r3, #1
20000ba8:	d10a      	bne.n	20000bc0 <pixel+0x154>
		mask = mask | temp;
20000baa:	230f      	movs	r3, #15
20000bac:	18fb      	adds	r3, r7, r3
20000bae:	220f      	movs	r2, #15
20000bb0:	18b9      	adds	r1, r7, r2
20000bb2:	220c      	movs	r2, #12
20000bb4:	18ba      	adds	r2, r7, r2
20000bb6:	7809      	ldrb	r1, [r1, #0]
20000bb8:	7812      	ldrb	r2, [r2, #0]
20000bba:	430a      	orrs	r2, r1
20000bbc:	701a      	strb	r2, [r3, #0]
20000bbe:	e009      	b.n	20000bd4 <pixel+0x168>
	}else{
		mask = mask & temp;
20000bc0:	230f      	movs	r3, #15
20000bc2:	18fb      	adds	r3, r7, r3
20000bc4:	220f      	movs	r2, #15
20000bc6:	18ba      	adds	r2, r7, r2
20000bc8:	210c      	movs	r1, #12
20000bca:	1879      	adds	r1, r7, r1
20000bcc:	7812      	ldrb	r2, [r2, #0]
20000bce:	7809      	ldrb	r1, [r1, #0]
20000bd0:	400a      	ands	r2, r1
20000bd2:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);	
20000bd4:	230e      	movs	r3, #14
20000bd6:	18fb      	adds	r3, r7, r3
20000bd8:	781a      	ldrb	r2, [r3, #0]
20000bda:	230f      	movs	r3, #15
20000bdc:	18fb      	adds	r3, r7, r3
20000bde:	781b      	ldrb	r3, [r3, #0]
20000be0:	0011      	movs	r1, r2
20000be2:	0018      	movs	r0, r3
20000be4:	f7ff fec8 	bl	20000978 <graphic_write_data>
20000be8:	e002      	b.n	20000bf0 <pixel+0x184>
	if(x > 128 || x < 1 || y > 64 || y < 1) return;
20000bea:	46c0      	nop			; (mov r8, r8)
20000bec:	e000      	b.n	20000bf0 <pixel+0x184>
	if(set != 0 && set != 1) return;
20000bee:	46c0      	nop			; (mov r8, r8)
20000bf0:	46bd      	mov	sp, r7
20000bf2:	b005      	add	sp, #20
20000bf4:	bd90      	pop	{r4, r7, pc}
20000bf6:	46c0      	nop			; (mov r8, r8)
20000bf8:	80000007 	andhi	r0, r0, r7

20000bfc <delay_interrupt_init>:

volatile int systick_flag = 1;
static volatile int delay_counter = 0;
static int mikro;

void delay_interrupt_init(void){
20000bfc:	b580      	push	{r7, lr}
20000bfe:	af00      	add	r7, sp, #0
    init_systick_interrupt_handler();
20000c00:	f000 f886 	bl	20000d10 <init_systick_interrupt_handler>
}
20000c04:	46c0      	nop			; (mov r8, r8)
20000c06:	46bd      	mov	sp, r7
20000c08:	bd80      	pop	{r7, pc}

20000c0a <delay_250ns>:

void delay_250ns(void){
20000c0a:	b580      	push	{r7, lr}
20000c0c:	af00      	add	r7, sp, #0
    systick_flag = 0;
20000c0e:	4b04      	ldr	r3, [pc, #16]	; (20000c20 <delay_250ns+0x16>)
20000c10:	2200      	movs	r2, #0
20000c12:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 4);   
20000c14:	202a      	movs	r0, #42	; 0x2a
20000c16:	f000 f863 	bl	20000ce0 <start_delay>
}
20000c1a:	46c0      	nop			; (mov r8, r8)
20000c1c:	46bd      	mov	sp, r7
20000c1e:	bd80      	pop	{r7, pc}
20000c20:	20000d7c 	andcs	r0, r0, ip, ror sp

20000c24 <delay_500ns>:

void delay_500ns(void){
20000c24:	b580      	push	{r7, lr}
20000c26:	af00      	add	r7, sp, #0
    systick_flag = 0;
20000c28:	4b04      	ldr	r3, [pc, #16]	; (20000c3c <delay_500ns+0x18>)
20000c2a:	2200      	movs	r2, #0
20000c2c:	601a      	str	r2, [r3, #0]
    start_delay(MIKRO_SECOND_PULSES / 2);   
20000c2e:	2054      	movs	r0, #84	; 0x54
20000c30:	f000 f856 	bl	20000ce0 <start_delay>
}
20000c34:	46c0      	nop			; (mov r8, r8)
20000c36:	46bd      	mov	sp, r7
20000c38:	bd80      	pop	{r7, pc}
20000c3a:	46c0      	nop			; (mov r8, r8)
20000c3c:	20000d7c 	andcs	r0, r0, ip, ror sp

20000c40 <delay_1mikro>:

void delay_1mikro(void){
20000c40:	b580      	push	{r7, lr}
20000c42:	af00      	add	r7, sp, #0
    start_delay(MIKRO_SECOND_PULSES);
20000c44:	20a8      	movs	r0, #168	; 0xa8
20000c46:	f000 f84b 	bl	20000ce0 <start_delay>
}
20000c4a:	46c0      	nop			; (mov r8, r8)
20000c4c:	46bd      	mov	sp, r7
20000c4e:	bd80      	pop	{r7, pc}

20000c50 <delay_1milli>:

void delay_1milli(void){
20000c50:	b580      	push	{r7, lr}
20000c52:	af00      	add	r7, sp, #0
#ifndef SIMULATOR
    start_delay(MIKRO_SECOND_PULSES * 1000);
20000c54:	4b03      	ldr	r3, [pc, #12]	; (20000c64 <delay_1milli+0x14>)
20000c56:	0018      	movs	r0, r3
20000c58:	f000 f842 	bl	20000ce0 <start_delay>
#else
    start_delay(MIKRO_SECOND_PULSES);
#endif
}
20000c5c:	46c0      	nop			; (mov r8, r8)
20000c5e:	46bd      	mov	sp, r7
20000c60:	bd80      	pop	{r7, pc}
20000c62:	46c0      	nop			; (mov r8, r8)
20000c64:	00029040 	andeq	r9, r2, r0, asr #32

20000c68 <delay_mikro>:

void delay_mikro(unsigned int count){
20000c68:	b580      	push	{r7, lr}
20000c6a:	b082      	sub	sp, #8
20000c6c:	af00      	add	r7, sp, #0
20000c6e:	6078      	str	r0, [r7, #4]
    if(count == 0)return;
20000c70:	687b      	ldr	r3, [r7, #4]
20000c72:	2b00      	cmp	r3, #0
20000c74:	d00b      	beq.n	20000c8e <delay_mikro+0x26>
    delay_counter = count;
20000c76:	687a      	ldr	r2, [r7, #4]
20000c78:	4b07      	ldr	r3, [pc, #28]	; (20000c98 <delay_mikro+0x30>)
20000c7a:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
20000c7c:	4b07      	ldr	r3, [pc, #28]	; (20000c9c <delay_mikro+0x34>)
20000c7e:	2200      	movs	r2, #0
20000c80:	601a      	str	r2, [r3, #0]
    mikro = 1;
20000c82:	4b07      	ldr	r3, [pc, #28]	; (20000ca0 <delay_mikro+0x38>)
20000c84:	2201      	movs	r2, #1
20000c86:	601a      	str	r2, [r3, #0]
    delay_1mikro();
20000c88:	f7ff ffda 	bl	20000c40 <delay_1mikro>
20000c8c:	e000      	b.n	20000c90 <delay_mikro+0x28>
    if(count == 0)return;
20000c8e:	46c0      	nop			; (mov r8, r8)
}
20000c90:	46bd      	mov	sp, r7
20000c92:	b002      	add	sp, #8
20000c94:	bd80      	pop	{r7, pc}
20000c96:	46c0      	nop			; (mov r8, r8)
20000c98:	20000d74 	andcs	r0, r0, r4, ror sp
20000c9c:	20000d7c 	andcs	r0, r0, ip, ror sp
20000ca0:	20000d78 	andcs	r0, r0, r8, ror sp

20000ca4 <delay_milli>:

void delay_milli(unsigned int count){
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b082      	sub	sp, #8
20000ca8:	af00      	add	r7, sp, #0
20000caa:	6078      	str	r0, [r7, #4]
    if(count == 0) return;
20000cac:	687b      	ldr	r3, [r7, #4]
20000cae:	2b00      	cmp	r3, #0
20000cb0:	d00b      	beq.n	20000cca <delay_milli+0x26>
    delay_counter = count;
20000cb2:	687a      	ldr	r2, [r7, #4]
20000cb4:	4b07      	ldr	r3, [pc, #28]	; (20000cd4 <delay_milli+0x30>)
20000cb6:	601a      	str	r2, [r3, #0]
    systick_flag = 0;
20000cb8:	4b07      	ldr	r3, [pc, #28]	; (20000cd8 <delay_milli+0x34>)
20000cba:	2200      	movs	r2, #0
20000cbc:	601a      	str	r2, [r3, #0]
    mikro = 0;
20000cbe:	4b07      	ldr	r3, [pc, #28]	; (20000cdc <delay_milli+0x38>)
20000cc0:	2200      	movs	r2, #0
20000cc2:	601a      	str	r2, [r3, #0]
    delay_1milli();
20000cc4:	f7ff ffc4 	bl	20000c50 <delay_1milli>
20000cc8:	e000      	b.n	20000ccc <delay_milli+0x28>
    if(count == 0) return;
20000cca:	46c0      	nop			; (mov r8, r8)
}
20000ccc:	46bd      	mov	sp, r7
20000cce:	b002      	add	sp, #8
20000cd0:	bd80      	pop	{r7, pc}
20000cd2:	46c0      	nop			; (mov r8, r8)
20000cd4:	20000d74 	andcs	r0, r0, r4, ror sp
20000cd8:	20000d7c 	andcs	r0, r0, ip, ror sp
20000cdc:	20000d78 	andcs	r0, r0, r8, ror sp

20000ce0 <start_delay>:

void start_delay(unsigned int pulses){
20000ce0:	b580      	push	{r7, lr}
20000ce2:	b082      	sub	sp, #8
20000ce4:	af00      	add	r7, sp, #0
20000ce6:	6078      	str	r0, [r7, #4]
    SYSTICK.ctrl = 0;
20000ce8:	4b08      	ldr	r3, [pc, #32]	; (20000d0c <start_delay+0x2c>)
20000cea:	2200      	movs	r2, #0
20000cec:	601a      	str	r2, [r3, #0]
    SYSTICK.load = pulses-1;
20000cee:	4b07      	ldr	r3, [pc, #28]	; (20000d0c <start_delay+0x2c>)
20000cf0:	687a      	ldr	r2, [r7, #4]
20000cf2:	3a01      	subs	r2, #1
20000cf4:	605a      	str	r2, [r3, #4]
    SYSTICK.val = 0;
20000cf6:	4b05      	ldr	r3, [pc, #20]	; (20000d0c <start_delay+0x2c>)
20000cf8:	2200      	movs	r2, #0
20000cfa:	609a      	str	r2, [r3, #8]
    SYSTICK.ctrlFirstByte = 7;
20000cfc:	4b03      	ldr	r3, [pc, #12]	; (20000d0c <start_delay+0x2c>)
20000cfe:	2207      	movs	r2, #7
20000d00:	701a      	strb	r2, [r3, #0]
}
20000d02:	46c0      	nop			; (mov r8, r8)
20000d04:	46bd      	mov	sp, r7
20000d06:	b002      	add	sp, #8
20000d08:	bd80      	pop	{r7, pc}
20000d0a:	46c0      	nop			; (mov r8, r8)
20000d0c:	e000e010 	and	lr, r0, r0, lsl r0

20000d10 <init_systick_interrupt_handler>:

void init_systick_interrupt_handler(void){
20000d10:	b580      	push	{r7, lr}
20000d12:	af00      	add	r7, sp, #0
    *((void(**)(void))0x2001C03C) = systick_interrupt_handler;
20000d14:	4b02      	ldr	r3, [pc, #8]	; (20000d20 <init_systick_interrupt_handler+0x10>)
20000d16:	4a03      	ldr	r2, [pc, #12]	; (20000d24 <init_systick_interrupt_handler+0x14>)
20000d18:	601a      	str	r2, [r3, #0]
}
20000d1a:	46c0      	nop			; (mov r8, r8)
20000d1c:	46bd      	mov	sp, r7
20000d1e:	bd80      	pop	{r7, pc}
20000d20:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000d24:	20000d29 	andcs	r0, r0, r9, lsr #26

20000d28 <systick_interrupt_handler>:

void systick_interrupt_handler(void){
20000d28:	b580      	push	{r7, lr}
20000d2a:	af00      	add	r7, sp, #0
    SYSTICK.ctrl = 0;
20000d2c:	4b0d      	ldr	r3, [pc, #52]	; (20000d64 <systick_interrupt_handler+0x3c>)
20000d2e:	2200      	movs	r2, #0
20000d30:	601a      	str	r2, [r3, #0]
    delay_counter--;
20000d32:	4b0d      	ldr	r3, [pc, #52]	; (20000d68 <systick_interrupt_handler+0x40>)
20000d34:	681b      	ldr	r3, [r3, #0]
20000d36:	1e5a      	subs	r2, r3, #1
20000d38:	4b0b      	ldr	r3, [pc, #44]	; (20000d68 <systick_interrupt_handler+0x40>)
20000d3a:	601a      	str	r2, [r3, #0]
    if(delay_counter > 0){
20000d3c:	4b0a      	ldr	r3, [pc, #40]	; (20000d68 <systick_interrupt_handler+0x40>)
20000d3e:	681b      	ldr	r3, [r3, #0]
20000d40:	2b00      	cmp	r3, #0
20000d42:	dd09      	ble.n	20000d58 <systick_interrupt_handler+0x30>
        if(mikro){
20000d44:	4b09      	ldr	r3, [pc, #36]	; (20000d6c <systick_interrupt_handler+0x44>)
20000d46:	681b      	ldr	r3, [r3, #0]
20000d48:	2b00      	cmp	r3, #0
20000d4a:	d002      	beq.n	20000d52 <systick_interrupt_handler+0x2a>
            delay_1mikro();
20000d4c:	f7ff ff78 	bl	20000c40 <delay_1mikro>
            delay_1milli();
        }
    } else {
        systick_flag = 1;
    }
20000d50:	e005      	b.n	20000d5e <systick_interrupt_handler+0x36>
            delay_1milli();
20000d52:	f7ff ff7d 	bl	20000c50 <delay_1milli>
20000d56:	e002      	b.n	20000d5e <systick_interrupt_handler+0x36>
        systick_flag = 1;
20000d58:	4b05      	ldr	r3, [pc, #20]	; (20000d70 <systick_interrupt_handler+0x48>)
20000d5a:	2201      	movs	r2, #1
20000d5c:	601a      	str	r2, [r3, #0]
20000d5e:	46c0      	nop			; (mov r8, r8)
20000d60:	46bd      	mov	sp, r7
20000d62:	bd80      	pop	{r7, pc}
20000d64:	e000e010 	and	lr, r0, r0, lsl r0
20000d68:	20000d74 	andcs	r0, r0, r4, ror sp
20000d6c:	20000d78 	andcs	r0, r0, r8, ror sp
20000d70:	20000d7c 	andcs	r0, r0, ip, ror sp

20000d74 <delay_counter>:
20000d74:	00000000 	andeq	r0, r0, r0

20000d78 <mikro>:
20000d78:	00000000 	andeq	r0, r0, r0

20000d7c <systick_flag>:
20000d7c:	00000001 	andeq	r0, r0, r1
20000d80:	6f6d754c 	svcvs	0x006d754c
20000d84:	68636f20 	stmdavs	r3!, {r5, r8, r9, sl, fp, sp, lr}^
20000d88:	74614c20 	strbtvc	r4, [r1], #-3104	; 0xfffff3e0
20000d8c:	00736574 	rsbseq	r6, r3, r4, ror r5
20000d90:	65666143 	strbvs	r6, [r6, #-323]!	; 0xfffffebd
20000d94:	00000000 	andeq	r0, r0, r0
20000d98:	0a030201 	beq	200c15a4 <systick_flag+0xc0828>
20000d9c:	0b060504 	bleq	201821b4 <systick_flag+0x181438>
20000da0:	0c090807 	stceq	8, cr0, [r9], {7}
20000da4:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000d74 <delay_counter>
20000da8:	0006003f 	andeq	r0, r6, pc, lsr r0
20000dac:	004f005b 	subeq	r0, pc, fp, asr r0	; <UNPREDICTABLE>
20000db0:	006d0066 	rsbeq	r0, sp, r6, rrx
20000db4:	0007007d 	andeq	r0, r7, sp, ror r0
20000db8:	006f007f 	rsbeq	r0, pc, pc, ror r0	; <UNPREDICTABLE>
20000dbc:	007c0077 	rsbseq	r0, ip, r7, ror r0
20000dc0:	005e0058 	subseq	r0, lr, r8, asr r0
20000dc4:	00760080 	rsbseq	r0, r6, r0, lsl #1

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000107 	andeq	r0, r0, r7, lsl #2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	0001070c 	andeq	r0, r1, ip, lsl #14
	...
  20:	06010200 	streq	r0, [r1], -r0, lsl #4
  24:	0000009a 	muleq	r0, sl, r0
  28:	98080102 	stmdals	r8, {r1, r8}
  2c:	02000000 	andeq	r0, r0, #0
  30:	00fd0502 	rscseq	r0, sp, r2, lsl #10
  34:	02020000 	andeq	r0, r2, #0
  38:	0000af07 	andeq	sl, r0, r7, lsl #30
  3c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
  40:	000000f4 	strdeq	r0, [r0], -r4
  44:	cc070402 	cfstrsgt	mvf0, [r7], {2}
  48:	02000000 	andeq	r0, r0, #0
  4c:	00ef0508 	rsceq	r0, pc, r8, lsl #10
  50:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  54:	0000c707 	andeq	ip, r0, r7, lsl #14
  58:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
  5c:	00746e69 	rsbseq	r6, r4, r9, ror #28
  60:	d1070402 	tstle	r7, r2, lsl #8
  64:	04000000 	streq	r0, [r0], #-0
  68:	000000a6 	andeq	r0, r0, r6, lsr #1
  6c:	00b82901 	adcseq	r2, r8, r1, lsl #18
  70:	00122000 	andseq	r2, r2, r0
  74:	9c010000 	stcls	0, cr0, [r1], {-0}
  78:	0000c205 	andeq	ip, r0, r5, lsl #4
  7c:	10120100 	andsne	r0, r2, r0, lsl #2
  80:	a8200000 	stmdage	r0!, {}	; <UNPREDICTABLE>
  84:	01000000 	mrseq	r0, (UNDEF: 0)
  88:	0000cc9c 	muleq	r0, ip, ip
  8c:	016c0600 	cmneq	ip, r0, lsl #12
  90:	15010000 	strne	r0, [r1, #-0]
  94:	000000cc 	andeq	r0, r0, ip, asr #1
  98:	06589102 	ldrbeq	r9, [r8], -r2, lsl #2
  9c:	00000172 	andeq	r0, r0, r2, ror r1
  a0:	00e31601 	rsceq	r1, r3, r1, lsl #12
  a4:	91020000 	mrsls	r0, (UNDEF: 2)
  a8:	00700750 	rsbseq	r0, r0, r0, asr r7
  ac:	00f31701 	rscseq	r1, r3, r1, lsl #14
  b0:	91020000 	mrsls	r0, (UNDEF: 2)
  b4:	0082086c 	addeq	r0, r2, ip, ror #16
  b8:	00242000 	eoreq	r2, r4, r0
  bc:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
  c0:	59240100 	stmdbpl	r4!, {r8}
  c4:	02000000 	andeq	r0, r0, #0
  c8:	00006891 	muleq	r0, r1, r8
  cc:	00002809 	andeq	r2, r0, r9, lsl #16
  d0:	0000dc00 	andeq	sp, r0, r0, lsl #24
  d4:	00dc0a00 	sbcseq	r0, ip, r0, lsl #20
  d8:	000f0000 	andeq	r0, pc, r0
  dc:	de070402 	cdple	4, 0, cr0, cr7, cr2, {0}
  e0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	000000f3 	strdeq	r0, [r0], -r3
  ec:	0000dc0a 	andeq	sp, r0, sl, lsl #24
  f0:	0b000400 	bleq	10f8 <startup-0x1fffef08>
  f4:	00002804 	andeq	r2, r0, r4, lsl #16
  f8:	00e70c00 	rsceq	r0, r7, r0, lsl #24
  fc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 100:	20000000 	andcs	r0, r0, r0
 104:	0000000c 	andeq	r0, r0, ip
 108:	ee009c01 	cdp	12, 0, cr9, cr0, cr1, {0}
 10c:	04000006 	streq	r0, [r0], #-6
 110:	0000b400 	andeq	fp, r0, r0, lsl #8
 114:	00010400 	andeq	r0, r1, r0, lsl #8
 118:	0c000000 	stceq	0, cr0, [r0], {-0}
 11c:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 120:	200000cc 	andcs	r0, r0, ip, asr #1
 124:	00000b30 	andeq	r0, r0, r0, lsr fp
 128:	000000c9 	andeq	r0, r0, r9, asr #1
 12c:	9a060102 	bls	18053c <startup-0x1fe7fac4>
 130:	03000000 	movweq	r0, #0
 134:	0000028e 	andeq	r0, r0, lr, lsl #5
 138:	00332b02 	eorseq	r2, r3, r2, lsl #22
 13c:	01020000 	mrseq	r0, (UNDEF: 2)
 140:	00009808 	andeq	r9, r0, r8, lsl #16
 144:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
 148:	000000fd 	strdeq	r0, [r0], -sp
 14c:	0001cd03 	andeq	ip, r1, r3, lsl #26
 150:	4c390200 	lfmmi	f0, 4, [r9], #-0
 154:	02000000 	andeq	r0, r0, #0
 158:	00af0702 	adceq	r0, pc, r2, lsl #14
 15c:	04020000 	streq	r0, [r2], #-0
 160:	0000f405 	andeq	pc, r0, r5, lsl #8
 164:	01c20300 	biceq	r0, r2, r0, lsl #6
 168:	4f020000 	svcmi	0x00020000
 16c:	00000065 	andeq	r0, r0, r5, rrx
 170:	cc070402 	cfstrsgt	mvf0, [r7], {2}
 174:	02000000 	andeq	r0, r0, #0
 178:	00ef0508 	rsceq	r0, pc, r8, lsl #10
 17c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 180:	0000c707 	andeq	ip, r0, r7, lsl #14
 184:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
 188:	00746e69 	rsbseq	r6, r4, r9, ror #28
 18c:	d1070402 	tstle	r7, r2, lsl #8
 190:	03000000 	movweq	r0, #0
 194:	00000290 	muleq	r0, r0, r2
 198:	00281803 	eoreq	r1, r8, r3, lsl #16
 19c:	cf030000 	svcgt	0x00030000
 1a0:	03000001 	movweq	r0, #1
 1a4:	00004124 	andeq	r4, r0, r4, lsr #2
 1a8:	01c40300 	biceq	r0, r4, r0, lsl #6
 1ac:	30030000 	andcc	r0, r3, r0
 1b0:	0000005a 	andeq	r0, r0, sl, asr r0
 1b4:	1d041805 	stcne	8, cr1, [r4, #-20]	; 0xffffffec
 1b8:	00000136 	andeq	r0, r0, r6, lsr r1
 1bc:	00048b06 	andeq	r8, r4, r6, lsl #22
 1c0:	9e1e0400 	cfmulsls	mvf0, mvf14, mvf0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	00020306 	andeq	r0, r2, r6, lsl #6
 1cc:	931f0400 	tstls	pc, #0, 8
 1d0:	04000000 	streq	r0, [r0], #-0
 1d4:	00023c06 	andeq	r3, r2, r6, lsl #24
 1d8:	93200400 	nopls	{0}	; <UNPREDICTABLE>
 1dc:	06000000 	streq	r0, [r0], -r0
 1e0:	00024706 	andeq	r4, r2, r6, lsl #14
 1e4:	9e210400 	cdpls	4, 2, cr0, cr1, cr0, {0}
 1e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 1ec:	00044c06 	andeq	r4, r4, r6, lsl #24
 1f0:	9e220400 	cdpls	4, 2, cr0, cr2, cr0, {0}
 1f4:	0c000000 	stceq	0, cr0, [r0], {-0}
 1f8:	00017806 	andeq	r7, r1, r6, lsl #16
 1fc:	88230400 	stmdahi	r3!, {sl}
 200:	10000000 	andne	r0, r0, r0
 204:	00038906 	andeq	r8, r3, r6, lsl #18
 208:	88240400 	stmdahi	r4!, {sl}
 20c:	11000000 	mrsne	r0, (UNDEF: 0)
 210:	00035706 	andeq	r5, r3, r6, lsl #14
 214:	93250400 			; <UNDEFINED> instruction: 0x93250400
 218:	12000000 	andne	r0, r0, #0
 21c:	0004b106 	andeq	fp, r4, r6, lsl #2
 220:	88260400 	stmdahi	r6!, {sl}
 224:	14000000 	strne	r0, [r0], #-0
 228:	0004a906 	andeq	sl, r4, r6, lsl #18
 22c:	88270400 	stmdahi	r7!, {sl}
 230:	15000000 	strne	r0, [r0, #-0]
 234:	00018506 	andeq	r8, r1, r6, lsl #10
 238:	93280400 			; <UNDEFINED> instruction: 0x93280400
 23c:	16000000 	strne	r0, [r0], -r0
 240:	03520300 	cmpeq	r2, #0, 6
 244:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
 248:	000000a9 	andeq	r0, r0, r9, lsr #1
 24c:	00017f07 	andeq	r7, r1, r7, lsl #30
 250:	01900100 	orrseq	r0, r0, r0, lsl #2
 254:	20000a6c 	andcs	r0, r0, ip, ror #20
 258:	00000190 	muleq	r0, r0, r1
 25c:	01bd9c01 			; <UNDEFINED> instruction: 0x01bd9c01
 260:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
 264:	01900100 	orrseq	r0, r0, r0, lsl #2
 268:	00000033 	andeq	r0, r0, r3, lsr r0
 26c:	08679102 	stmdaeq	r7!, {r1, r8, ip, pc}^
 270:	90010079 	andls	r0, r1, r9, ror r0
 274:	00003301 	andeq	r3, r0, r1, lsl #6
 278:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 27c:	74657308 	strbtvc	r7, [r5], #-776	; 0xfffffcf8
 280:	01900100 	orrseq	r0, r0, r0, lsl #2
 284:	00000033 	andeq	r0, r0, r3, lsr r0
 288:	09659102 	stmdbeq	r5!, {r1, r8, ip, pc}^
 28c:	00000191 	muleq	r0, r1, r1
 290:	88019501 	stmdahi	r1, {r0, r8, sl, ip, pc}
 294:	02000000 	andeq	r0, r0, #0
 298:	47096d91 			; <UNDEFINED> instruction: 0x47096d91
 29c:	01000004 	tsteq	r0, r4
 2a0:	00880196 	umulleq	r0, r8, r6, r1
 2a4:	91020000 	mrsls	r0, (UNDEF: 2)
 2a8:	03b6096f 			; <UNDEFINED> instruction: 0x03b6096f
 2ac:	9c010000 	stcls	0, cr0, [r1], {-0}
 2b0:	00008801 	andeq	r8, r0, r1, lsl #16
 2b4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 2b8:	00019709 	andeq	r9, r1, r9, lsl #14
 2bc:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
 2c0:	00000088 	andeq	r0, r0, r8, lsl #1
 2c4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 2c8:	0003910a 	andeq	r9, r3, sl, lsl #2
 2cc:	018b0100 	orreq	r0, fp, r0, lsl #2
 2d0:	20000a4e 	andcs	r0, r0, lr, asr #20
 2d4:	0000001e 	andeq	r0, r0, lr, lsl r0
 2d8:	ee079c01 	cdp	12, 0, cr9, cr7, cr1, {0}
 2dc:	01000001 	tsteq	r0, r1
 2e0:	09e80180 	stmibeq	r8!, {r7, r8}^
 2e4:	00662000 	rsbeq	r2, r6, r0
 2e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 2ec:	00000204 	andeq	r0, r0, r4, lsl #4
 2f0:	00024f09 	andeq	r4, r2, r9, lsl #30
 2f4:	01810100 	orreq	r0, r1, r0, lsl #2
 2f8:	00000088 	andeq	r0, r0, r8, lsl #1
 2fc:	0b779102 	bleq	1de470c <startup-0x1e21b8f4>
 300:	00646461 	rsbeq	r6, r4, r1, ror #8
 304:	88018101 	stmdahi	r1, {r0, r8, pc}
 308:	02000000 	andeq	r0, r0, #0
 30c:	0c007691 	stceq	6, cr7, [r0], {145}	; 0x91
 310:	00000277 	andeq	r0, r0, r7, ror r2
 314:	88017b01 	stmdahi	r1, {r0, r8, r9, fp, ip, sp, lr}
 318:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
 31c:	2a200009 	bcs	800348 <startup-0x1f7ffcb8>
 320:	01000000 	mrseq	r0, (UNDEF: 0)
 324:	00022e9c 	muleq	r2, ip, lr
 328:	03b60d00 			; <UNDEFINED> instruction: 0x03b60d00
 32c:	7b010000 	blvc	40334 <startup-0x1ffbfccc>
 330:	00003301 	andeq	r3, r0, r1, lsl #6
 334:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 338:	02980700 	addseq	r0, r8, #0, 14
 33c:	73010000 	movwvc	r0, #4096	; 0x1000
 340:	00097801 	andeq	r7, r9, r1, lsl #16
 344:	00004620 	andeq	r4, r0, r0, lsr #12
 348:	639c0100 	orrsvs	r0, ip, #0, 2
 34c:	0d000002 	stceq	0, cr0, [r0, #-8]
 350:	00000284 	andeq	r0, r0, r4, lsl #5
 354:	88017301 	stmdahi	r1, {r0, r8, r9, ip, sp, lr}
 358:	02000000 	andeq	r0, r0, #0
 35c:	b60d7791 			; <UNDEFINED> instruction: 0xb60d7791
 360:	01000003 	tsteq	r0, r3
 364:	00880173 	addeq	r0, r8, r3, ror r1
 368:	91020000 	mrsls	r0, (UNDEF: 2)
 36c:	d8070076 	stmdale	r7, {r1, r2, r4, r5, r6}
 370:	01000001 	tsteq	r0, r1
 374:	0938016c 	ldmdbeq	r8!, {r2, r3, r5, r6, r8}
 378:	00402000 	subeq	r2, r0, r0
 37c:	9c010000 	stcls	0, cr0, [r1], {-0}
 380:	00000298 	muleq	r0, r8, r2
 384:	0004650d 	andeq	r6, r4, sp, lsl #10
 388:	016c0100 	cmneq	ip, r0, lsl #2
 38c:	00000088 	andeq	r0, r0, r8, lsl #1
 390:	0d779102 	ldfeqp	f1, [r7, #-8]!
 394:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
 398:	88016c01 	stmdahi	r1, {r0, sl, fp, sp, lr}
 39c:	02000000 	andeq	r0, r0, #0
 3a0:	07007691 			; <UNDEFINED> instruction: 0x07007691
 3a4:	000002dc 	ldrdeq	r0, [r0], -ip
 3a8:	b8015801 	stmdalt	r1, {r0, fp, ip, lr}
 3ac:	80200008 	eorhi	r0, r0, r8
 3b0:	01000000 	mrseq	r0, (UNDEF: 0)
 3b4:	0002cd9c 	muleq	r2, ip, sp
 3b8:	020f0d00 	andeq	r0, pc, #0, 26
 3bc:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 3c0:	00008801 	andeq	r8, r0, r1, lsl #16
 3c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3c8:	0003b60d 	andeq	fp, r3, sp, lsl #12
 3cc:	01580100 	cmpeq	r8, r0, lsl #2
 3d0:	00000088 	andeq	r0, r0, r8, lsl #1
 3d4:	00769102 	rsbseq	r9, r6, r2, lsl #2
 3d8:	00022f0c 	andeq	r2, r2, ip, lsl #30
 3dc:	01400100 	mrseq	r0, (UNDEF: 80)
 3e0:	00000088 	andeq	r0, r0, r8, lsl #1
 3e4:	20000828 	andcs	r0, r0, r8, lsr #16
 3e8:	00000090 	muleq	r0, r0, r0
 3ec:	03059c01 	movweq	r9, #23553	; 0x5c01
 3f0:	b60d0000 	strlt	r0, [sp], -r0
 3f4:	01000003 	tsteq	r0, r3
 3f8:	00880140 	addeq	r0, r8, r0, asr #2
 3fc:	91020000 	mrsls	r0, (UNDEF: 2)
 400:	76720b6f 	ldrbtvc	r0, [r2], -pc, ror #22
 404:	01490100 	mrseq	r0, (UNDEF: 89)
 408:	00000088 	andeq	r0, r0, r8, lsl #1
 40c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 410:	00040e07 	andeq	r0, r4, r7, lsl #28
 414:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
 418:	200007be 			; <UNDEFINED> instruction: 0x200007be
 41c:	0000006a 	andeq	r0, r0, sl, rrx
 420:	03299c01 			; <UNDEFINED> instruction: 0x03299c01
 424:	630b0000 	movwvs	r0, #45056	; 0xb000
 428:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
 42c:	00000088 	andeq	r0, r0, r8, lsl #1
 430:	00779102 	rsbseq	r9, r7, r2, lsl #2
 434:	0004520e 	andeq	r5, r4, lr, lsl #4
 438:	011f0100 	tsteq	pc, r0, lsl #2
 43c:	20000762 	andcs	r0, r0, r2, ror #14
 440:	0000005c 	andeq	r0, r0, ip, asr r0
 444:	d3079c01 	movwle	r9, #31745	; 0x7c01
 448:	01000003 	tsteq	r0, r3
 44c:	0708010c 	streq	r0, [r8, -ip, lsl #2]
 450:	005a2000 	subseq	r2, sl, r0
 454:	9c010000 	stcls	0, cr0, [r1], {-0}
 458:	00000361 	andeq	r0, r0, r1, ror #6
 45c:	0003b60d 	andeq	fp, r3, sp, lsl #12
 460:	010c0100 	mrseq	r0, (UNDEF: 28)
 464:	00000088 	andeq	r0, r0, r8, lsl #1
 468:	00779102 	rsbseq	r9, r7, r2, lsl #2
 46c:	0002c50f 	andeq	ip, r2, pc, lsl #10
 470:	01040100 	mrseq	r0, (UNDEF: 20)
 474:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 478:	00000058 	andeq	r0, r0, r8, asr r0
 47c:	03929c01 	orrseq	r9, r2, #256	; 0x100
 480:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
 484:	01040100 	mrseq	r0, (UNDEF: 20)
 488:	00000088 	andeq	r0, r0, r8, lsl #1
 48c:	0b6f9102 	bleq	1be489c <startup-0x1e41b764>
 490:	05010063 	streq	r0, [r1, #-99]	; 0xffffff9d
 494:	00008801 	andeq	r8, r0, r1, lsl #16
 498:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 49c:	03631000 	cmneq	r3, #0
 4a0:	fc010000 	stc2	0, cr0, [r1], {-0}
 4a4:	20000654 	andcs	r0, r0, r4, asr r6
 4a8:	0000005c 	andeq	r0, r0, ip, asr r0
 4ac:	03c09c01 	biceq	r9, r0, #256	; 0x100
 4b0:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
 4b4:	88fc0100 	ldmhi	ip!, {r8}^
 4b8:	02000000 	andeq	r0, r0, #0
 4bc:	63126f91 	tstvs	r2, #580	; 0x244
 4c0:	88fd0100 	ldmhi	sp!, {r8}^
 4c4:	02000000 	andeq	r0, r0, #0
 4c8:	13007791 	movwne	r7, #1937	; 0x791
 4cc:	00000378 	andeq	r0, r0, r8, ror r3
 4d0:	0618f301 	ldreq	pc, [r8], -r1, lsl #6
 4d4:	003c2000 	eorseq	r2, ip, r0
 4d8:	9c010000 	stcls	0, cr0, [r1], {-0}
 4dc:	000003e2 	andeq	r0, r0, r2, ror #7
 4e0:	01006311 	tsteq	r0, r1, lsl r3
 4e4:	000033f3 	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
 4e8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4ec:	02221300 	eoreq	r1, r2, #0, 6
 4f0:	ea010000 	b	404f8 <startup-0x1ffbfb08>
 4f4:	200005c4 	andcs	r0, r0, r4, asr #11
 4f8:	00000054 	andeq	r0, r0, r4, asr r0
 4fc:	041e9c01 	ldreq	r9, [lr], #-3073	; 0xfffff3ff
 500:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
 504:	7aea0100 	bvc	ffa8090c <systick_flag+0xdfa7fb90>
 508:	02000000 	andeq	r0, r0, #0
 50c:	79116c91 	ldmdbvc	r1, {r0, r4, r7, sl, fp, sp, lr}
 510:	7aea0100 	bvc	ffa80918 <systick_flag+0xdfa7fb9c>
 514:	02000000 	andeq	r0, r0, #0
 518:	64146891 	ldrvs	r6, [r4], #-2193	; 0xfffff76f
 51c:	01000002 	tsteq	r0, r2
 520:	000033ec 	andeq	r3, r0, ip, ror #7
 524:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 528:	03ab1500 			; <UNDEFINED> instruction: 0x03ab1500
 52c:	e1010000 	mrs	r0, (UNDEF: 1)
 530:	00000033 	andeq	r0, r0, r3, lsr r0
 534:	20000594 	mulcs	r0, r4, r5
 538:	00000030 	andeq	r0, r0, r0, lsr r0
 53c:	04469c01 	strbeq	r9, [r6], #-3073	; 0xfffff3ff
 540:	0a140000 	beq	500548 <startup-0x1faffab8>
 544:	01000002 	tsteq	r0, r2
 548:	000033e2 	andeq	r3, r0, r2, ror #7
 54c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 550:	04741300 	ldrbteq	r1, [r4], #-768	; 0xfffffd00
 554:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
 558:	20000564 	andcs	r0, r0, r4, ror #10
 55c:	00000030 	andeq	r0, r0, r0, lsr r0
 560:	046a9c01 	strbteq	r9, [sl], #-3073	; 0xfffff3ff
 564:	42160000 	andsmi	r0, r6, #0
 568:	01000004 	tsteq	r0, r4
 56c:	000033d8 	ldrdeq	r3, [r0], -r8
 570:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 574:	04911500 	ldreq	r1, [r1], #1280	; 0x500
 578:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
 57c:	00000033 	andeq	r0, r0, r3, lsr r0
 580:	2000051c 	andcs	r0, r0, ip, lsl r5
 584:	00000048 	andeq	r0, r0, r8, asr #32
 588:	04929c01 	ldreq	r9, [r2], #3073	; 0xc01
 58c:	0a140000 	beq	500594 <startup-0x1faffa6c>
 590:	01000002 	tsteq	r0, r2
 594:	000033c9 	andeq	r3, r0, r9, asr #7
 598:	6f910200 	svcvs	0x00910200
 59c:	03c11500 	biceq	r1, r1, #0, 10
 5a0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
 5a4:	00000033 	andeq	r0, r0, r3, lsr r0
 5a8:	200004d4 	ldrdcs	r0, [r0], -r4
 5ac:	00000048 	andeq	r0, r0, r8, asr #32
 5b0:	04ba9c01 	ldrteq	r9, [sl], #3073	; 0xc01
 5b4:	0a140000 	beq	5005bc <startup-0x1faffa44>
 5b8:	01000002 	tsteq	r0, r2
 5bc:	000033b9 			; <UNDEFINED> instruction: 0x000033b9
 5c0:	6f910200 	svcvs	0x00910200
 5c4:	03f61300 	mvnseq	r1, #0, 6
 5c8:	b2010000 	andlt	r0, r1, #0
 5cc:	200004aa 	andcs	r0, r0, sl, lsr #9
 5d0:	0000002a 	andeq	r0, r0, sl, lsr #32
 5d4:	04de9c01 	ldrbeq	r9, [lr], #3073	; 0xc01
 5d8:	84160000 	ldrhi	r0, [r6], #-0
 5dc:	01000002 	tsteq	r0, r2
 5e0:	000033b2 			; <UNDEFINED> instruction: 0x000033b2
 5e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5e8:	04b81300 	ldrteq	r1, [r8], #768	; 0x300
 5ec:	ab010000 	blge	405f4 <startup-0x1ffbfa0c>
 5f0:	20000480 	andcs	r0, r0, r0, lsl #9
 5f4:	0000002a 	andeq	r0, r0, sl, lsr #32
 5f8:	05029c01 	streq	r9, [r2, #-3073]	; 0xfffff3ff
 5fc:	e6160000 	ldr	r0, [r6], -r0
 600:	01000001 	tsteq	r0, r1
 604:	000033ab 	andeq	r3, r0, fp, lsr #7
 608:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 60c:	02b01000 	adcseq	r1, r0, #0
 610:	a2010000 	andge	r0, r1, #0
 614:	20000430 	andcs	r0, r0, r0, lsr r4
 618:	00000050 	andeq	r0, r0, r0, asr r0
 61c:	05309c01 	ldreq	r9, [r0, #-3073]!	; 0xfffff3ff
 620:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
 624:	33a20100 			; <UNDEFINED> instruction: 0x33a20100
 628:	02000000 	andeq	r0, r0, #0
 62c:	63126f91 	tstvs	r2, #580	; 0x244
 630:	33a50100 			; <UNDEFINED> instruction: 0x33a50100
 634:	02000000 	andeq	r0, r0, #0
 638:	10007791 	mulne	r0, r1, r7
 63c:	000001af 	andeq	r0, r0, pc, lsr #3
 640:	03ea9901 	mvneq	r9, #16384	; 0x4000
 644:	00462000 	subeq	r2, r6, r0
 648:	9c010000 	stcls	0, cr0, [r1], {-0}
 64c:	0000055e 	andeq	r0, r0, lr, asr r5
 650:	01007811 	tsteq	r0, r1, lsl r8
 654:	00003399 	muleq	r0, r9, r3
 658:	6f910200 	svcvs	0x00910200
 65c:	01006312 	tsteq	r0, r2, lsl r3
 660:	0000339c 	muleq	r0, ip, r3
 664:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 668:	026c1700 	rsbeq	r1, ip, #0, 14
 66c:	7a010000 	bvc	40674 <startup-0x1ffbf98c>
 670:	20000350 	andcs	r0, r0, r0, asr r3
 674:	0000009a 	muleq	r0, sl, r0
 678:	2a179c01 	bcs	5e7684 <startup-0x1fa1897c>
 67c:	01000004 	tsteq	r0, r4
 680:	00032c67 	andeq	r2, r3, r7, ror #24
 684:	00002420 	andeq	r2, r0, r0, lsr #8
 688:	189c0100 	ldmne	ip, {r8}
 68c:	00000421 	andeq	r0, r0, r1, lsr #8
 690:	00335f01 	eorseq	r5, r3, r1, lsl #30
 694:	02da0000 	sbcseq	r0, sl, #0
 698:	00522000 	subseq	r2, r2, r0
 69c:	9c010000 	stcls	0, cr0, [r1], {-0}
 6a0:	000005a8 	andeq	r0, r0, r8, lsr #11
 6a4:	0002ea16 	andeq	lr, r2, r6, lsl sl
 6a8:	a85f0100 	ldmdage	pc, {r8}^	; <UNPREDICTABLE>
 6ac:	02000005 	andeq	r0, r0, #5
 6b0:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
 6b4:	00013604 	andeq	r3, r1, r4, lsl #12
 6b8:	02541000 	subseq	r1, r4, #0
 6bc:	5b010000 	blpl	406c4 <startup-0x1ffbf93c>
 6c0:	200002c4 	andcs	r0, r0, r4, asr #5
 6c4:	00000016 	andeq	r0, r0, r6, lsl r0
 6c8:	05d29c01 	ldrbeq	r9, [r2, #3073]	; 0xc01
 6cc:	ea160000 	b	5806d4 <startup-0x1fa7f92c>
 6d0:	01000002 	tsteq	r0, r2
 6d4:	0005a85b 	andeq	sl, r5, fp, asr r8
 6d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 6dc:	02151000 	andseq	r1, r5, #0
 6e0:	52010000 	andpl	r0, r1, #0
 6e4:	20000274 	andcs	r0, r0, r4, ror r2
 6e8:	00000050 	andeq	r0, r0, r0, asr r0
 6ec:	06049c01 	streq	r9, [r4], -r1, lsl #24
 6f0:	ea160000 	b	5806f8 <startup-0x1fa7f908>
 6f4:	01000002 	tsteq	r0, r2
 6f8:	0005a852 	andeq	sl, r5, r2, asr r8
 6fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 700:	776f7211 			; <UNDEFINED> instruction: 0x776f7211
 704:	33520100 	cmpcc	r2, #0, 2
 708:	02000000 	andeq	r0, r0, #0
 70c:	10007391 	mulne	r0, r1, r3
 710:	000004a1 	andeq	r0, r0, r1, lsr #9
 714:	02243701 	eoreq	r3, r4, #262144	; 0x40000
 718:	00502000 	subseq	r2, r0, r0
 71c:	9c010000 	stcls	0, cr0, [r1], {-0}
 720:	00000642 	andeq	r0, r0, r2, asr #12
 724:	0002ea16 	andeq	lr, r2, r6, lsl sl
 728:	a8370100 	ldmdage	r7!, {r8}
 72c:	02000005 	andeq	r0, r0, #5
 730:	63114c91 	tstvs	r1, #37120	; 0x9100
 734:	33370100 	teqcc	r7, #0, 2
 738:	02000000 	andeq	r0, r0, #0
 73c:	07144b91 			; <UNDEFINED> instruction: 0x07144b91
 740:	01000004 	tsteq	r0, r4
 744:	00064238 	andeq	r4, r6, r8, lsr r2
 748:	50910200 	addspl	r0, r1, r0, lsl #4
 74c:	004c1a00 	subeq	r1, ip, r0, lsl #20
 750:	06520000 	ldrbeq	r0, [r2], -r0
 754:	521b0000 	andspl	r0, fp, #0
 758:	0f000006 	svceq	0x00000006
 75c:	07040200 	streq	r0, [r4, -r0, lsl #4]
 760:	000000de 	ldrdeq	r0, [r0], -lr
 764:	00028915 	andeq	r8, r2, r5, lsl r9
 768:	33240100 			; <UNDEFINED> instruction: 0x33240100
 76c:	94000000 	strls	r0, [r0], #-0
 770:	90200001 	eorls	r0, r0, r1
 774:	01000000 	mrseq	r0, (UNDEF: 0)
 778:	00069d9c 	muleq	r6, ip, sp
 77c:	02ab1400 	adceq	r1, fp, #0, 8
 780:	25010000 	strcs	r0, [r1, #-0]
 784:	0000069d 	muleq	r0, sp, r6
 788:	125c9102 	subsne	r9, ip, #-2147483648	; 0x80000000
 78c:	00776f72 	rsbseq	r6, r7, r2, ror pc
 790:	00332b01 	eorseq	r2, r3, r1, lsl #22
 794:	91020000 	mrsls	r0, (UNDEF: 2)
 798:	6f63126f 	svcvs	0x0063126f
 79c:	2b01006c 	blcs	40954 <startup-0x1ffbf6ac>
 7a0:	00000033 	andeq	r0, r0, r3, lsr r0
 7a4:	006e9102 	rsbeq	r9, lr, r2, lsl #2
 7a8:	0000331a 	andeq	r3, r0, sl, lsl r3
 7ac:	0006ad00 	andeq	sl, r6, r0, lsl #26
 7b0:	06521b00 	ldrbeq	r1, [r2], -r0, lsl #22
 7b4:	000f0000 	andeq	r0, pc, r0
 7b8:	00019c10 	andeq	r9, r1, r0, lsl ip
 7bc:	30160100 	andscc	r0, r6, r0, lsl #2
 7c0:	64200001 	strtvs	r0, [r0], #-1
 7c4:	01000000 	mrseq	r0, (UNDEF: 0)
 7c8:	0006d19c 	muleq	r6, ip, r1
 7cc:	02ea1600 	rsceq	r1, sl, #0, 12
 7d0:	16010000 	strne	r0, [r1], -r0
 7d4:	000005a8 	andeq	r0, r0, r8, lsr #11
 7d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 7dc:	0003e51c 	andeq	lr, r3, ip, lsl r5
 7e0:	cc050100 	stfgts	f0, [r5], {-0}
 7e4:	64200000 	strtvs	r0, [r0], #-0
 7e8:	01000000 	mrseq	r0, (UNDEF: 0)
 7ec:	02ea169c 	rsceq	r1, sl, #156, 12	; 0x9c00000
 7f0:	05010000 	streq	r0, [r1, #-0]
 7f4:	000005a8 	andeq	r0, r0, r8, lsr #11
 7f8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 7fc:	00021300 	andeq	r1, r2, r0, lsl #6
 800:	b4000400 	strlt	r0, [r0], #-1024	; 0xfffffc00
 804:	04000002 	streq	r0, [r0], #-2
 808:	00000001 	andeq	r0, r0, r1
 80c:	05410c00 	strbeq	r0, [r1, #-3072]	; 0xfffff400
 810:	0bfc0000 	bleq	fff00818 <systick_flag+0xdfeffa9c>
 814:	01782000 	cmneq	r8, r0
 818:	03b50000 			; <UNDEFINED> instruction: 0x03b50000
 81c:	01020000 	mrseq	r0, (UNDEF: 2)
 820:	00009a06 	andeq	r9, r0, r6, lsl #20
 824:	08010200 	stmdaeq	r1, {r9}
 828:	00000098 	muleq	r0, r8, r0
 82c:	fd050202 	stc2	2, cr0, [r5, #-8]
 830:	02000000 	andeq	r0, r0, #0
 834:	00af0702 	adceq	r0, pc, r2, lsl #14
 838:	04020000 	streq	r0, [r2], #-0
 83c:	0000f405 	andeq	pc, r0, r5, lsl #8
 840:	07040200 	streq	r0, [r4, -r0, lsl #4]
 844:	000000cc 	andeq	r0, r0, ip, asr #1
 848:	ef050802 	svc	0x00050802
 84c:	02000000 	andeq	r0, r0, #0
 850:	00c70708 	sbceq	r0, r7, r8, lsl #14
 854:	04030000 	streq	r0, [r3], #-0
 858:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 85c:	00590400 	subseq	r0, r9, r0, lsl #8
 860:	04020000 	streq	r0, [r2], #-0
 864:	0000d107 	andeq	sp, r0, r7, lsl #2
 868:	02040500 	andeq	r0, r4, #0, 10
 86c:	0000a507 	andeq	sl, r0, r7, lsl #10
 870:	050a0600 	streq	r0, [sl, #-1536]	; 0xfffffa00
 874:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 878:	00000028 	andeq	r0, r0, r8, lsr #32
 87c:	05180600 	ldreq	r0, [r8, #-1536]	; 0xfffffa00
 880:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
 884:	00000028 	andeq	r0, r0, r8, lsr #32
 888:	06120601 	ldreq	r0, [r2], -r1, lsl #12
 88c:	0a020000 	beq	80894 <startup-0x1ff7f76c>
 890:	00000028 	andeq	r0, r0, r8, lsr #32
 894:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
 898:	0b020000 	bleq	808a0 <startup-0x1ff7f760>
 89c:	00000028 	andeq	r0, r0, r8, lsr #32
 8a0:	04070003 	streq	r0, [r7], #-3
 8a4:	00be0502 	adcseq	r0, lr, r2, lsl #10
 8a8:	da080000 	ble	2008b0 <startup-0x1fdff750>
 8ac:	02000005 	andeq	r0, r0, #5
 8b0:	00006506 	andeq	r6, r0, r6, lsl #10
 8b4:	006c0900 	rsbeq	r0, ip, r0, lsl #18
 8b8:	0a000000 	beq	8c0 <startup-0x1ffff740>
 8bc:	00000538 	andeq	r0, r0, r8, lsr r5
 8c0:	f5040210 			; <UNDEFINED> instruction: 0xf5040210
 8c4:	0b000000 	bleq	8cc <startup-0x1ffff734>
 8c8:	000000a5 	andeq	r0, r0, r5, lsr #1
 8cc:	04f90600 	ldrbteq	r0, [r9], #1536	; 0x600
 8d0:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 8d4:	00000065 	andeq	r0, r0, r5, rrx
 8d8:	61760c04 	cmnvs	r6, r4, lsl #24
 8dc:	0f02006c 	svceq	0x0002006c
 8e0:	00000065 	andeq	r0, r0, r5, rrx
 8e4:	060c0608 	streq	r0, [ip], -r8, lsl #12
 8e8:	10020000 	andne	r0, r2, r0
 8ec:	00000065 	andeq	r0, r0, r5, rrx
 8f0:	ea0d000c 	b	340928 <startup-0x1fcbf6d8>
 8f4:	02000004 	andeq	r0, r0, #4
 8f8:	0000be11 	andeq	fp, r0, r1, lsl lr
 8fc:	04c80e00 	strbeq	r0, [r8], #3584	; 0xe00
 900:	03010000 	movweq	r0, #4096	; 0x1000
 904:	00000060 	andeq	r0, r0, r0, rrx
 908:	0d7c0305 	ldcleq	3, cr0, [ip, #-20]!	; 0xffffffec
 90c:	df0f2000 	svcle	0x000f2000
 910:	01000005 	tsteq	r0, r5
 914:	00006004 	andeq	r6, r0, r4
 918:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
 91c:	0f20000d 	svceq	0x0020000d
 920:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
 924:	00590501 	subseq	r0, r9, r1, lsl #10
 928:	03050000 	movweq	r0, #20480	; 0x5000
 92c:	20000d78 	andcs	r0, r0, r8, ror sp
 930:	00062510 	andeq	r2, r6, r0, lsl r5
 934:	283c0100 	ldmdacs	ip!, {r8}
 938:	4c20000d 	stcmi	0, cr0, [r0], #-52	; 0xffffffcc
 93c:	01000000 	mrseq	r0, (UNDEF: 0)
 940:	0620119c 			; <UNDEFINED> instruction: 0x0620119c
 944:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
 948:	20000d10 	andcs	r0, r0, r0, lsl sp
 94c:	00000018 	andeq	r0, r0, r8, lsl r0
 950:	bb129c01 	bllt	4a795c <startup-0x1fb586a4>
 954:	01000005 	tsteq	r0, r5
 958:	000ce031 	andeq	lr, ip, r1, lsr r0
 95c:	00003020 	andeq	r3, r0, r0, lsr #32
 960:	799c0100 	ldmibvc	ip, {r8}
 964:	13000001 	movwne	r0, #1
 968:	000005d3 	ldrdeq	r0, [r0], -r3
 96c:	00653101 	rsbeq	r3, r5, r1, lsl #2
 970:	91020000 	mrsls	r0, (UNDEF: 2)
 974:	2c140074 	ldccs	0, cr0, [r4], {116}	; 0x74
 978:	01000005 	tsteq	r0, r5
 97c:	000ca429 	andeq	sl, ip, r9, lsr #8
 980:	00003c20 	andeq	r3, r0, r0, lsr #24
 984:	9d9c0100 	ldflss	f0, [ip]
 988:	13000001 	movwne	r0, #1
 98c:	00000606 	andeq	r0, r0, r6, lsl #12
 990:	00652901 	rsbeq	r2, r5, r1, lsl #18
 994:	91020000 	mrsls	r0, (UNDEF: 2)
 998:	fe140074 	mrc2	0, 0, r0, cr4, cr4, {3}
 99c:	01000004 	tsteq	r0, r4
 9a0:	000c6821 	andeq	r6, ip, r1, lsr #16
 9a4:	00003c20 	andeq	r3, r0, r0, lsr #24
 9a8:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
 9ac:	13000001 	movwne	r0, #1
 9b0:	00000606 	andeq	r0, r0, r6, lsl #12
 9b4:	00652101 	rsbeq	r2, r5, r1, lsl #2
 9b8:	91020000 	mrsls	r0, (UNDEF: 2)
 9bc:	ed100074 	ldc	0, cr0, [r0, #-464]	; 0xfffffe30
 9c0:	01000005 	tsteq	r0, r5
 9c4:	000c5019 	andeq	r5, ip, r9, lsl r0
 9c8:	00001820 	andeq	r1, r0, r0, lsr #16
 9cc:	109c0100 	addsne	r0, ip, r0, lsl #2
 9d0:	000005ae 	andeq	r0, r0, lr, lsr #11
 9d4:	0c401501 	cfstr64eq	mvdx1, [r0], {1}
 9d8:	00102000 	andseq	r2, r0, r0
 9dc:	9c010000 	stcls	0, cr0, [r1], {-0}
 9e0:	0005c710 	andeq	ip, r5, r0, lsl r7
 9e4:	24100100 	ldrcs	r0, [r0], #-256	; 0xffffff00
 9e8:	1c20000c 	stcne	0, cr0, [r0], #-48	; 0xffffffd0
 9ec:	01000000 	mrseq	r0, (UNDEF: 0)
 9f0:	05fa109c 	ldrbeq	r1, [sl, #156]!	; 0x9c
 9f4:	0b010000 	bleq	409fc <startup-0x1ffbf604>
 9f8:	20000c0a 	andcs	r0, r0, sl, lsl #24
 9fc:	0000001a 	andeq	r0, r0, sl, lsl r0
 a00:	d5109c01 	ldrle	r9, [r0, #-3073]	; 0xfffff3ff
 a04:	01000004 	tsteq	r0, r4
 a08:	000bfc07 	andeq	pc, fp, r7, lsl #24
 a0c:	00000e20 	andeq	r0, r0, r0, lsr #28
 a10:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	0b002403 	bleq	9030 <startup-0x1fff6fd0>
  20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  24:	04000008 	streq	r0, [r0], #-8
  28:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  2c:	0b3a0e03 	bleq	e83840 <startup-0x1f17c7c0>
  30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  34:	06120111 			; <UNDEFINED> instruction: 0x06120111
  38:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  3c:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
  40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  50:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  54:	00130119 	andseq	r0, r3, r9, lsl r1
  58:	00340600 	eorseq	r0, r4, r0, lsl #12
  5c:	0b3a0e03 	bleq	e83870 <startup-0x1f17c790>
  60:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  64:	00001802 	andeq	r1, r0, r2, lsl #16
  68:	03003407 	movweq	r3, #1031	; 0x407
  6c:	3b0b3a08 	blcc	2ce894 <startup-0x1fd3176c>
  70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  74:	08000018 	stmdaeq	r0, {r3, r4}
  78:	0111010b 	tsteq	r1, fp, lsl #2
  7c:	00000612 	andeq	r0, r0, r2, lsl r6
  80:	49010109 	stmdbmi	r1, {r0, r3, r8}
  84:	00130113 	andseq	r0, r3, r3, lsl r1
  88:	00210a00 	eoreq	r0, r1, r0, lsl #20
  8c:	0b2f1349 	bleq	bc4db8 <startup-0x1f43b248>
  90:	0f0b0000 	svceq	0x000b0000
  94:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  98:	0c000013 	stceq	0, cr0, [r0], {19}
  9c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  a0:	0b3a0e03 	bleq	e838b4 <startup-0x1f17c74c>
  a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  b0:	00000019 	andeq	r0, r0, r9, lsl r0
  b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  b8:	030b130e 	movweq	r1, #45838	; 0xb30e
  bc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  c0:	00171006 	andseq	r1, r7, r6
  c4:	00240200 	eoreq	r0, r4, r0, lsl #4
  c8:	0b3e0b0b 	bleq	f82cfc <startup-0x1f07d304>
  cc:	00000e03 	andeq	r0, r0, r3, lsl #28
  d0:	03001603 	movweq	r1, #1539	; 0x603
  d4:	3b0b3a0e 	blcc	2ce914 <startup-0x1fd316ec>
  d8:	0013490b 	andseq	r4, r3, fp, lsl #18
  dc:	00240400 	eoreq	r0, r4, r0, lsl #8
  e0:	0b3e0b0b 	bleq	f82d14 <startup-0x1f07d2ec>
  e4:	00000803 	andeq	r0, r0, r3, lsl #16
  e8:	0b011305 	bleq	44d04 <startup-0x1ffbb2fc>
  ec:	3b0b3a0b 	blcc	2ce920 <startup-0x1fd316e0>
  f0:	0013010b 	andseq	r0, r3, fp, lsl #2
  f4:	000d0600 	andeq	r0, sp, r0, lsl #12
  f8:	0b3a0e03 	bleq	e8390c <startup-0x1f17c6f4>
  fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 100:	00000b38 	andeq	r0, r0, r8, lsr fp
 104:	3f012e07 	svccc	0x00012e07
 108:	3a0e0319 	bcc	380d74 <startup-0x1fc7f28c>
 10c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 110:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 114:	96184006 	ldrls	r4, [r8], -r6
 118:	13011942 	movwne	r1, #6466	; 0x1942
 11c:	05080000 	streq	r0, [r8, #-0]
 120:	3a080300 	bcc	200d28 <startup-0x1fdff2d8>
 124:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 128:	00180213 	andseq	r0, r8, r3, lsl r2
 12c:	00340900 	eorseq	r0, r4, r0, lsl #18
 130:	0b3a0e03 	bleq	e83944 <startup-0x1f17c6bc>
 134:	1349053b 	movtne	r0, #38203	; 0x953b
 138:	00001802 	andeq	r1, r0, r2, lsl #16
 13c:	3f002e0a 	svccc	0x00002e0a
 140:	3a0e0319 	bcc	380dac <startup-0x1fc7f254>
 144:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 148:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 14c:	97184006 	ldrls	r4, [r8, -r6]
 150:	00001942 	andeq	r1, r0, r2, asr #18
 154:	0300340b 	movweq	r3, #1035	; 0x40b
 158:	3b0b3a08 	blcc	2ce980 <startup-0x1fd31680>
 15c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 160:	0c000018 	stceq	0, cr0, [r0], {24}
 164:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 168:	0b3a0e03 	bleq	e8397c <startup-0x1f17c684>
 16c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 170:	01111349 	tsteq	r1, r9, asr #6
 174:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 178:	01194296 			; <UNDEFINED> instruction: 0x01194296
 17c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 180:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 184:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 188:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 18c:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 190:	03193f00 	tsteq	r9, #0, 30
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	11192705 	tstne	r9, r5, lsl #14
 19c:	40061201 	andmi	r1, r6, r1, lsl #4
 1a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 1a8:	03193f01 	tsteq	r9, #1, 30
 1ac:	3b0b3a0e 	blcc	2ce9ec <startup-0x1fd31614>
 1b0:	11192705 	tstne	r9, r5, lsl #14
 1b4:	40061201 	andmi	r1, r6, r1, lsl #4
 1b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1bc:	00001301 	andeq	r1, r0, r1, lsl #6
 1c0:	3f012e10 	svccc	0x00012e10
 1c4:	3a0e0319 	bcc	380e30 <startup-0x1fc7f1d0>
 1c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1d0:	97184006 	ldrls	r4, [r8, -r6]
 1d4:	13011942 	movwne	r1, #6466	; 0x1942
 1d8:	05110000 	ldreq	r0, [r1, #-0]
 1dc:	3a080300 	bcc	200de4 <startup-0x1fdff21c>
 1e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e4:	00180213 	andseq	r0, r8, r3, lsl r2
 1e8:	00341200 	eorseq	r1, r4, r0, lsl #4
 1ec:	0b3a0803 	bleq	e82200 <startup-0x1f17de00>
 1f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1f4:	00001802 	andeq	r1, r0, r2, lsl #16
 1f8:	3f012e13 	svccc	0x00012e13
 1fc:	3a0e0319 	bcc	380e68 <startup-0x1fc7f198>
 200:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 204:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 208:	96184006 	ldrls	r4, [r8], -r6
 20c:	13011942 	movwne	r1, #6466	; 0x1942
 210:	34140000 	ldrcc	r0, [r4], #-0
 214:	3a0e0300 	bcc	380e1c <startup-0x1fc7f1e4>
 218:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 21c:	00180213 	andseq	r0, r8, r3, lsl r2
 220:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 224:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 228:	0b3b0b3a 	bleq	ec2f18 <startup-0x1f13d0e8>
 22c:	13491927 	movtne	r1, #39207	; 0x9927
 230:	06120111 			; <UNDEFINED> instruction: 0x06120111
 234:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 238:	00130119 	andseq	r0, r3, r9, lsl r1
 23c:	00051600 	andeq	r1, r5, r0, lsl #12
 240:	0b3a0e03 	bleq	e83a54 <startup-0x1f17c5ac>
 244:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 248:	00001802 	andeq	r1, r0, r2, lsl #16
 24c:	3f002e17 	svccc	0x00002e17
 250:	3a0e0319 	bcc	380ebc <startup-0x1fc7f144>
 254:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 258:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 25c:	96184006 	ldrls	r4, [r8], -r6
 260:	00001942 	andeq	r1, r0, r2, asr #18
 264:	3f012e18 	svccc	0x00012e18
 268:	3a0e0319 	bcc	380ed4 <startup-0x1fc7f12c>
 26c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 270:	11134919 	tstne	r3, r9, lsl r9
 274:	40061201 	andmi	r1, r6, r1, lsl #4
 278:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 27c:	00001301 	andeq	r1, r0, r1, lsl #6
 280:	0b000f19 	bleq	3eec <startup-0x1fffc114>
 284:	0013490b 	andseq	r4, r3, fp, lsl #18
 288:	01011a00 	tsteq	r1, r0, lsl #20
 28c:	13011349 	movwne	r1, #4937	; 0x1349
 290:	211b0000 	tstcs	fp, r0
 294:	2f134900 	svccs	0x00134900
 298:	1c00000b 	stcne	0, cr0, [r0], {11}
 29c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2a0:	0b3a0e03 	bleq	e83ab4 <startup-0x1f17c54c>
 2a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2b0:	00000019 	andeq	r0, r0, r9, lsl r0
 2b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2b8:	030b130e 	movweq	r1, #45838	; 0xb30e
 2bc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 2c0:	00171006 	andseq	r1, r7, r6
 2c4:	00240200 	eoreq	r0, r4, r0, lsl #4
 2c8:	0b3e0b0b 	bleq	f82efc <startup-0x1f07d104>
 2cc:	00000e03 	andeq	r0, r0, r3, lsl #28
 2d0:	0b002403 	bleq	92e4 <startup-0x1fff6d1c>
 2d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2d8:	04000008 	streq	r0, [r0], #-8
 2dc:	13490035 	movtne	r0, #36917	; 0x9035
 2e0:	13050000 	movwne	r0, #20480	; 0x5000
 2e4:	3a0b0b01 	bcc	2c2ef0 <startup-0x1fd3d110>
 2e8:	010b3b0b 	tsteq	fp, fp, lsl #22
 2ec:	06000013 			; <UNDEFINED> instruction: 0x06000013
 2f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 2f4:	0b3b0b3a 	bleq	ec2fe4 <startup-0x1f13d01c>
 2f8:	0b381349 	bleq	e05024 <startup-0x1f1fafdc>
 2fc:	17070000 	strne	r0, [r7, -r0]
 300:	3a0b0b01 	bcc	2c2f0c <startup-0x1fd3d0f4>
 304:	010b3b0b 	tsteq	fp, fp, lsl #22
 308:	08000013 	stmdaeq	r0, {r0, r1, r4}
 30c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 310:	0b3b0b3a 	bleq	ec3000 <startup-0x1f13d000>
 314:	00001349 	andeq	r1, r0, r9, asr #6
 318:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 31c:	0a000013 	beq	370 <startup-0x1ffffc90>
 320:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 324:	0b3a0b0b 	bleq	e82f58 <startup-0x1f17d0a8>
 328:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 32c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 330:	38134900 	ldmdacc	r3, {r8, fp, lr}
 334:	0c00000b 	stceq	0, cr0, [r0], {11}
 338:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 33c:	0b3b0b3a 	bleq	ec302c <startup-0x1f13cfd4>
 340:	0b381349 	bleq	e0506c <startup-0x1f1faf94>
 344:	160d0000 	strne	r0, [sp], -r0
 348:	3a0e0300 	bcc	380f50 <startup-0x1fc7f0b0>
 34c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 350:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 354:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 358:	0b3b0b3a 	bleq	ec3048 <startup-0x1f13cfb8>
 35c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 360:	00001802 	andeq	r1, r0, r2, lsl #16
 364:	0300340f 	movweq	r3, #1039	; 0x40f
 368:	3b0b3a0e 	blcc	2ceba8 <startup-0x1fd31458>
 36c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 370:	10000018 	andne	r0, r0, r8, lsl r0
 374:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 378:	0b3a0e03 	bleq	e83b8c <startup-0x1f17c474>
 37c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 380:	06120111 			; <UNDEFINED> instruction: 0x06120111
 384:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 388:	11000019 	tstne	r0, r9, lsl r0
 38c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 390:	0b3a0e03 	bleq	e83ba4 <startup-0x1f17c45c>
 394:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 398:	06120111 			; <UNDEFINED> instruction: 0x06120111
 39c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3a0:	12000019 	andne	r0, r0, #25
 3a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3a8:	0b3a0e03 	bleq	e83bbc <startup-0x1f17c444>
 3ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3b8:	00130119 	andseq	r0, r3, r9, lsl r1
 3bc:	00051300 	andeq	r1, r5, r0, lsl #6
 3c0:	0b3a0e03 	bleq	e83bd4 <startup-0x1f17c42c>
 3c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3c8:	00001802 	andeq	r1, r0, r2, lsl #16
 3cc:	3f012e14 	svccc	0x00012e14
 3d0:	3a0e0319 	bcc	38103c <startup-0x1fc7efc4>
 3d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3dc:	96184006 	ldrls	r4, [r8], -r6
 3e0:	13011942 	movwne	r1, #6466	; 0x1942
 3e4:	Address 0x000003e4 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000ba 	strheq	r0, [r0], -sl
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	010b0002 	tsteq	fp, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000cc 	andcs	r0, r0, ip, asr #1
  3c:	00000b30 	andeq	r0, r0, r0, lsr fp
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	07fd0002 	ldrbeq	r0, [sp, r2]!
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000bfc 	strdcs	r0, [r0], -ip
  5c:	00000178 	andeq	r0, r0, r8, ror r1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000ca 	andcs	r0, r0, sl, asr #1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000c5 	andeq	r0, r0, r5, asr #1
   4:	007b0002 	rsbseq	r0, fp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	7468616c 	strbtvc	r6, [r8], #-364	; 0xfffffe94
  28:	442f6769 	strtmi	r6, [pc], #-1897	; 30 <startup-0x1fffffd0>
  2c:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
  30:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
  34:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
  38:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
  3c:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
  40:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
  44:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; fffffeb8 <systick_flag+0xdffff13c>
  48:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
  4c:	31305441 	teqcc	r0, r1, asr #8
  50:	616d2d37 	cmnvs	sp, r7, lsr sp
  54:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
  58:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  5c:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
  60:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
  64:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
  68:	2f736573 	svccs	0x00736573
  6c:	6f6f7073 	svcvs	0x006f7073
  70:	765f7970 			; <UNDEFINED> instruction: 0x765f7970
  74:	73000033 	movwvc	r0, #51	; 0x33
  78:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  7c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  80:	00000100 	andeq	r0, r0, r0, lsl #2
  84:	02050000 	andeq	r0, r5, #0
  88:	20000000 	andcs	r0, r0, r0
  8c:	025e131a 	subseq	r1, lr, #1744830464	; 0x68000000
  90:	01010003 	tsteq	r1, r3
  94:	10020500 	andne	r0, r2, r0, lsl #10
  98:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  9c:	303d0111 	eorscc	r0, sp, r1, lsl r1
  a0:	4b3d6775 	blmi	f59e7c <startup-0x1f0a6184>
  a4:	4e3a5921 	vaddmi.f16	s10, s20, s3	; <UNPREDICTABLE>
  a8:	59214b2f 	stmdbpl	r1!, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
  ac:	02004f3a 	andeq	r4, r0, #58, 30	; 0xe8
  b0:	003d0304 	eorseq	r0, sp, r4, lsl #6
  b4:	8f030402 	svchi	0x00030402
  b8:	01040200 	mrseq	r0, R12_usr
  bc:	3f063c06 	svccc	0x00063c06
  c0:	2f2f3692 	svccs	0x002f3692
  c4:	01000302 	tsteq	r0, r2, lsl #6
  c8:	0002e801 	andeq	lr, r2, r1, lsl #16
  cc:	1d000200 	sfmne	f0, 4, [r0, #-0]
  d0:	02000001 	andeq	r0, r0, #1
  d4:	0d0efb01 	vstreq	d15, [lr, #-4]
  d8:	01010100 	mrseq	r0, (UNDEF: 17)
  dc:	00000001 	andeq	r0, r0, r1
  e0:	01000001 	tsteq	r0, r1
  e4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6a9 <systick_flag+0xdfffe92d>
  e8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  ec:	68616c2f 	stmdavs	r1!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
  f0:	2f676974 	svccs	0x00676974
  f4:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
  f8:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
  fc:	6f4d2f73 	svcvs	0x004d2f73
 100:	41442d70 	hvcmi	17104	; 0x42d0
 104:	37313054 			; <UNDEFINED> instruction: 0x37313054
 108:	73616d2d 	cmnvc	r1, #2880	; 0xb40
 10c:	2f726574 	svccs	0x00726574
 110:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 114:	30544144 	subscc	r4, r4, r4, asr #2
 118:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 11c:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 120:	614c2f72 	hvcvs	49906	; 0xc2f2
 124:	61207362 			; <UNDEFINED> instruction: 0x61207362
 128:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 12c:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 130:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 134:	6f70732f 	svcvs	0x0070732f
 138:	5f79706f 	svcpl	0x0079706f
 13c:	63003376 	movwvs	r3, #886	; 0x376
 140:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 144:	70706165 	rsbsvc	r6, r0, r5, ror #2
 148:	646f635c 	strbtvs	r6, [pc], #-860	; 150 <startup-0x1ffffeb0>
 14c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 150:	6f745c65 	svcvs	0x00745c65
 154:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 158:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 15c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 160:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 164:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 168:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 16c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 170:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 174:	616d5c65 	cmnvs	sp, r5, ror #24
 178:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 17c:	3a630065 	bcc	18c0318 <startup-0x1e73fce8>
 180:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 184:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 188:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 18c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 190:	6f6f745c 	svcvs	0x006f745c
 194:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 198:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 19c:	615c6d72 	cmpvs	ip, r2, ror sp
 1a0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 1a4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 1a8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 1ac:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 1b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 1b4:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 1b8:	70670000 	rsbvc	r0, r7, r0
 1bc:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 1c0:	00000100 	andeq	r0, r0, r0, lsl #2
 1c4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 1c8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 1cc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 1d0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 1d4:	00000200 	andeq	r0, r0, r0, lsl #4
 1d8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 1dc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 1e0:	00030068 	andeq	r0, r3, r8, rrx
 1e4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 1e8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 1ec:	00000001 	andeq	r0, r0, r1
 1f0:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
 1f4:	16200000 	strtne	r0, [r0], -r0
 1f8:	756a674d 	strbvc	r6, [sl, #-1869]!	; 0xfffff8b3
 1fc:	68756786 	ldmdavs	r5!, {r1, r2, r7, r8, r9, sl, sp, lr}^
 200:	7569674c 	strbvc	r6, [r9, #-1868]!	; 0xfffff8b4
 204:	76677577 			; <UNDEFINED> instruction: 0x76677577
 208:	4b596d3d 	blmi	165b704 <startup-0x1e9a48fc>
 20c:	00598383 	subseq	r8, r9, r3, lsl #7
 210:	a7020402 	strge	r0, [r2, -r2, lsl #8]
 214:	01040200 	mrseq	r0, R12_usr
 218:	60067406 	andvs	r7, r6, r6, lsl #8
 21c:	01040200 	mrseq	r0, R12_usr
 220:	03759221 	cmneq	r5, #268435458	; 0x10000002
 224:	404b9013 	submi	r9, fp, r3, lsl r0
 228:	7576921e 	ldrbvc	r9, [r6, #-542]!	; 0xfffffde2
 22c:	207a037a 	rsbscs	r0, sl, sl, ror r3
 230:	4b4b1b50 	blmi	12c6f78 <startup-0x1ed39088>
 234:	4b4c4c4b 	blmi	1313368 <startup-0x1ececc98>
 238:	004b4c3d 	subeq	r4, fp, sp, lsr ip
 23c:	06010402 	streq	r0, [r1], -r2, lsl #8
 240:	002f0666 	eoreq	r0, pc, r6, ror #12
 244:	06010402 	streq	r0, [r1], -r2, lsl #8
 248:	002f0666 	eoreq	r0, pc, r6, ror #12
 24c:	06010402 	streq	r0, [r1], -r2, lsl #8
 250:	002f0666 	eoreq	r0, pc, r6, ror #12
 254:	06010402 	streq	r0, [r1], -r2, lsl #8
 258:	212f0666 			; <UNDEFINED> instruction: 0x212f0666
 25c:	4442304c 	strbmi	r3, [r2], #-76	; 0xffffffb4
 260:	002f842f 	eoreq	r8, pc, pc, lsr #8
 264:	06010402 	streq	r0, [r1], -r2, lsl #8
 268:	3e840620 	cdpcc	6, 8, cr0, cr4, cr0, {1}
 26c:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
 270:	20060104 	andcs	r0, r6, r4, lsl #2
 274:	3d3e8406 	cfldrscc	mvf8, [lr, #-24]!	; 0xffffffe8
 278:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 27c:	06200601 	strteq	r0, [r0], -r1, lsl #12
 280:	3e3d3e84 	cdpcc	14, 3, cr3, cr13, cr4, {4}
 284:	01040200 	mrseq	r0, R12_usr
 288:	84062006 	strhi	r2, [r6], #-6
 28c:	3e3d3d3e 	mrccc	13, 1, r3, cr13, cr14, {1}
 290:	59bb596a 	ldmibpl	fp!, {r1, r3, r5, r6, r8, fp, ip, lr}
 294:	08596a76 	ldmdaeq	r9, {r1, r2, r4, r5, r6, r9, fp, sp, lr}^
 298:	68765913 	ldmdavs	r6!, {r0, r1, r4, r8, fp, ip, lr}^
 29c:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
 2a0:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 2a4:	3d68404c 	stclcc	0, cr4, [r8, #-304]!	; 0xfffffed0
 2a8:	2f685b3d 	svccs	0x00685b3d
 2ac:	3d684084 	stclcc	0, cr4, [r8, #-528]!	; 0xfffffdf0
 2b0:	2f685b3d 	svccs	0x00685b3d
 2b4:	4b3d6884 	blmi	f5a4cc <startup-0x1f0a5b34>
 2b8:	3e683e2f 	cdpcc	14, 6, cr3, cr8, cr15, {1}
 2bc:	3d4b2f3d 	stclcc	15, cr2, [fp, #-244]	; 0xffffff0c
 2c0:	0059762f 	subseq	r7, r9, pc, lsr #12
 2c4:	06010402 	streq	r0, [r1], -r2, lsl #8
 2c8:	673d063c 			; <UNDEFINED> instruction: 0x673d063c
 2cc:	26a7763d 			; <UNDEFINED> instruction: 0x26a7763d
 2d0:	0200673e 	andeq	r6, r0, #16252928	; 0xf80000
 2d4:	20060104 	andcs	r0, r6, r4, lsl #2
 2d8:	593d8406 	ldmdbpl	sp!, {r1, r2, sl, pc}
 2dc:	59684c3e 	stmdbpl	r8!, {r1, r2, r3, r4, r5, sl, fp, lr}^
 2e0:	7659e583 	ldrbvc	lr, [r9], -r3, lsl #11
 2e4:	d7835968 	strle	r5, [r3, r8, ror #18]
 2e8:	03676859 	cmneq	r7, #5832704	; 0x590000
 2ec:	70037410 	andvc	r7, r3, r0, lsl r4
 2f0:	4a100320 	bmi	400f78 <startup-0x1fbff088>
 2f4:	3d207203 	sfmcc	f7, 4, [r0, #-12]!
 2f8:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 2fc:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 300:	3d2f4c22 	stccc	12, cr4, [pc, #-136]!	; 280 <startup-0x1ffffd80>
 304:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 308:	4b4b4b3d 	blmi	12d3004 <startup-0x1ed2cffc>
 30c:	3e3d4b4b 	vsubcc.f64	d4, d13, d11
 310:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 314:	2f3d303d 	svccs	0x003d303d
 318:	452f3d75 	strmi	r3, [pc, #-3445]!	; fffff5ab <systick_flag+0xdfffe82f>
 31c:	a03d2225 	eorsge	r2, sp, r5, lsr #4
 320:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
 324:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 328:	3d3d592f 			; <UNDEFINED> instruction: 0x3d3d592f
 32c:	4b303d4b 	blmi	c0f860 <startup-0x1f3f07a0>
 330:	a03d313d 	eorsge	r3, sp, sp, lsr r1
 334:	2f594b91 	svccs	0x00594b91
 338:	593d2f3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 33c:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 340:	3d3d3d30 	ldccc	13, cr3, [sp, #-192]!	; 0xffffff40
 344:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
 348:	914c833d 	cmpls	ip, sp, lsr r3
 34c:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 350:	59674c83 	stmdbpl	r7!, {r0, r1, r7, sl, fp, lr}^
 354:	4b3e4c67 	blmi	f934f8 <startup-0x1f06cb08>
 358:	02004b9f 	andeq	r4, r0, #162816	; 0x27c00
 35c:	004b0304 	subeq	r0, fp, r4, lsl #6
 360:	49030402 	stmdbmi	r3, {r1, sl}
 364:	01040200 	mrseq	r0, R12_usr
 368:	02005806 	andeq	r5, r0, #393216	; 0x60000
 36c:	47060204 	strmi	r0, [r6, -r4, lsl #4]
 370:	01040200 	mrseq	r0, R12_usr
 374:	51065806 	tstpl	r6, r6, lsl #16
 378:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
 37c:	0200e676 	andeq	lr, r0, #123731968	; 0x7600000
 380:	58060104 	stmdapl	r6, {r2, r8}
 384:	02040200 	andeq	r0, r4, #0, 4
 388:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 38c:	59065803 	stmdbpl	r6, {r0, r1, fp, ip, lr}
 390:	01040200 	mrseq	r0, R12_usr
 394:	5a064a06 	bpl	192bb4 <startup-0x1fe6d44c>
 398:	4b2108ae 	blmi	842658 <startup-0x1f7bd9a8>
 39c:	684b4b7a 	stmdavs	fp, {r1, r3, r4, r5, r6, r8, r9, fp, lr}^
 3a0:	d7bb5a4b 	ldrle	r5, [fp, fp, asr #20]!
 3a4:	ae4bbc9f 	mcrge	12, 2, fp, cr11, cr15, {4}
 3a8:	ac6203a0 	stclge	3, cr0, [r2], #-640	; 0xfffffd80
 3ac:	201e032f 	andscs	r0, lr, pc, lsr #6
 3b0:	01000602 	tsteq	r0, r2, lsl #12
 3b4:	0000d701 	andeq	sp, r0, r1, lsl #14
 3b8:	90000200 	andls	r0, r0, r0, lsl #4
 3bc:	02000000 	andeq	r0, r0, #0
 3c0:	0d0efb01 	vstreq	d15, [lr, #-4]
 3c4:	01010100 	mrseq	r0, (UNDEF: 17)
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	01000001 	tsteq	r0, r1
 3d0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff995 <systick_flag+0xdfffec19>
 3d4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3d8:	68616c2f 	stmdavs	r1!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
 3dc:	2f676974 	svccs	0x00676974
 3e0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
 3e4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 3e8:	6f4d2f73 	svcvs	0x004d2f73
 3ec:	41442d70 	hvcmi	17104	; 0x42d0
 3f0:	37313054 			; <UNDEFINED> instruction: 0x37313054
 3f4:	73616d2d 	cmnvc	r1, #2880	; 0xb40
 3f8:	2f726574 	svccs	0x00726574
 3fc:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 400:	30544144 	subscc	r4, r4, r4, asr #2
 404:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 408:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 40c:	614c2f72 	hvcvs	49906	; 0xc2f2
 410:	61207362 			; <UNDEFINED> instruction: 0x61207362
 414:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 418:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 41c:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 420:	6f70732f 	svcvs	0x0070732f
 424:	5f79706f 	svcpl	0x0079706f
 428:	00003376 	andeq	r3, r0, r6, ror r3
 42c:	616c6564 	cmnvs	ip, r4, ror #10
 430:	6e695f79 	mcrvs	15, 3, r5, cr9, cr9, {3}
 434:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 438:	2e747075 	mrccs	0, 3, r7, cr4, cr5, {3}
 43c:	00010063 	andeq	r0, r1, r3, rrx
 440:	73797300 	cmnvc	r9, #0, 6
 444:	6b636974 	blvs	18daa1c <startup-0x1e7255e4>
 448:	0100682e 	tsteq	r0, lr, lsr #16
 44c:	00000000 	andeq	r0, r0, r0
 450:	0bfc0205 	bleq	fff00c6c <systick_flag+0xdfeffef0>
 454:	2f182000 	svccs	0x00182000
 458:	3d2f3e2f 	stccc	14, cr3, [pc, #-188]!	; 3a4 <startup-0x1ffffc5c>
 45c:	3d2f5a3d 	vstmdbcc	pc!, {s10-s70}
 460:	3d2f683d 	stccc	8, cr6, [pc, #-244]!	; 374 <startup-0x1ffffc8c>
 464:	684e303e 	stmdavs	lr, {r1, r2, r3, r4, r5, ip, sp}^
 468:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
 46c:	a025383d 	eorge	r3, r5, sp, lsr r8
 470:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
 474:	a025383d 	eorge	r3, r5, sp, lsr r8
 478:	3d4b3d4b 	stclcc	13, cr3, [fp, #-300]	; 0xfffffed4
 47c:	3d2f763d 	stccc	6, cr7, [pc, #-244]!	; 390 <startup-0x1ffffc70>
 480:	593d2f76 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, sp}
 484:	1b354b4b 	blne	d531b8 <startup-0x1f2ace48>
 488:	023e1e33 	eorseq	r1, lr, #816	; 0x330
 48c:	0101000b 	tsteq	r1, fp

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20393943 	eorscs	r3, r9, r3, asr #18
   8:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
   c:	30322031 	eorscc	r2, r2, r1, lsr r0
  10:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  14:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  18:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  1c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  24:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  28:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  2c:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  30:	6172622d 	cmnvs	r2, sp, lsr #4
  34:	2068636e 	rsbcs	r6, r8, lr, ror #6
  38:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  3c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  40:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  44:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  48:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  4c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  50:	616d2d20 	cmnvs	sp, r0, lsr #26
  54:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  58:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  5c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  60:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  64:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  68:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  6c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  70:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  74:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  78:	616d2d20 	cmnvs	sp, r0, lsr #26
  7c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  80:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  84:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  88:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  8c:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  90:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  94:	00393963 	eorseq	r3, r9, r3, ror #18
  98:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  9c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  a0:	61686320 	cmnvs	r8, r0, lsr #6
  a4:	70610072 	rsbvc	r0, r1, r2, ror r0
  a8:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
  ac:	73007469 	movwvc	r7, #1129	; 0x469
  b0:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
  b4:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  b8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  bc:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  c0:	616d0074 	smcvs	53252	; 0xd004
  c4:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
  c8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  cc:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  d0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  d4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  d8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  dc:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
  e0:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
  e4:	73006570 	movwvc	r6, #1392	; 0x570
  e8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  ec:	6c007075 	stcvs	0, cr7, [r0], {117}	; 0x75
  f0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  f4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  f8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  fc:	6f687300 	svcvs	0x00687300
 100:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 104:	4300746e 	movwmi	r7, #1134	; 0x46e
 108:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 10c:	2f737265 	svccs	0x00737265
 110:	7468616c 	strbtvc	r6, [r8], #-364	; 0xfffffe94
 114:	442f6769 	strtmi	r6, [pc], #-1897	; 11c <startup-0x1ffffee4>
 118:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
 11c:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
 120:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 124:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 128:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
 12c:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
 130:	4d2f7265 	sfmmi	f7, 4, [pc, #-404]!	; ffffffa4 <systick_flag+0xdffff228>
 134:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 138:	31305441 	teqcc	r0, r1, asr #8
 13c:	616d2d37 	cmnvs	sp, r7, lsr sp
 140:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 144:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 148:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 14c:	78652064 	stmdavc	r5!, {r2, r5, r6, sp}^
 150:	69637265 	stmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 154:	2f736573 	svccs	0x00736573
 158:	6f6f7073 	svcvs	0x006f7073
 15c:	765f7970 			; <UNDEFINED> instruction: 0x765f7970
 160:	74732f33 	ldrbtvc	r2, [r3], #-3891	; 0xfffff0cd
 164:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 168:	00632e70 	rsbeq	r2, r3, r0, ror lr
 16c:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 170:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
 174:	00327473 	eorseq	r7, r2, r3, ror r4
 178:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
 17c:	7000776f 	andvc	r7, r0, pc, ror #14
 180:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 184:	72646f00 	rsbvc	r6, r4, #0, 30
 188:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 18c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 190:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 194:	74007865 	strvc	r7, [r0], #-2149	; 0xfffff79b
 198:	00706d65 	rsbseq	r6, r0, r5, ror #26
 19c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
 1a0:	6f665f70 	svcvs	0x00665f70
 1a4:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
 1a8:	69645f67 	stmdbvs	r4!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 1ac:	61007073 	tstvs	r0, r3, ror r0
 1b0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1b4:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1b8:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1bc:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 1c0:	5f5f0074 	svcpl	0x005f0074
 1c4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 1c8:	745f3233 	ldrbvc	r3, [pc], #-563	; 1d0 <startup-0x1ffffe30>
 1cc:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff2d4 <systick_flag+0xdfffe558>
 1d0:	31746e69 	cmncc	r4, r9, ror #28
 1d4:	00745f36 	rsbseq	r5, r4, r6, lsr pc
 1d8:	70617267 	rsbvc	r7, r1, r7, ror #4
 1dc:	5f636968 	svcpl	0x00636968
 1e0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 1e4:	6f635f65 	svcvs	0x00635f65
 1e8:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 1ec:	72670064 	rsbvc	r0, r7, #100	; 0x64
 1f0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1f4:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 1f8:	5f726165 	svcpl	0x00726165
 1fc:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 200:	6f006e65 	svcvs	0x00006e65
 204:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 208:	65720072 	ldrbvs	r0, [r2, #-114]!	; 0xffffff8e
 20c:	765f6461 	ldrbvc	r6, [pc], -r1, ror #8
 210:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 214:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 218:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 21c:	6f725f65 	svcvs	0x00725f65
 220:	73610077 	cmnvc	r1, #119	; 0x77
 224:	5f696963 	svcpl	0x00696963
 228:	6f746f67 	svcvs	0x00746f67
 22c:	67007978 	smlsdxvs	r0, r8, r9, r7
 230:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 234:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 238:	00646165 	rsbeq	r6, r4, r5, ror #2
 23c:	6552746f 	ldrbvs	r7, [r2, #-1135]	; 0xfffffb91
 240:	76726573 			; <UNDEFINED> instruction: 0x76726573
 244:	6f006465 	svcvs	0x00006465
 248:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 24c:	70007264 	andvc	r7, r0, r4, ror #4
 250:	00656761 	rsbeq	r6, r5, r1, ror #14
 254:	63616564 	cmnvs	r1, #100, 10	; 0x19000000
 258:	61766974 	cmnvs	r6, r4, ror r9
 25c:	725f6574 	subsvc	r6, pc, #116, 10	; 0x1d000000
 260:	0073776f 	rsbseq	r7, r3, pc, ror #14
 264:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 268:	00737365 	rsbseq	r7, r3, r5, ror #6
 26c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 270:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 274:	67007469 	strvs	r7, [r0, -r9, ror #8]
 278:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 27c:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 280:	5f646165 	svcpl	0x00646165
 284:	61746164 	cmnvs	r4, r4, ror #2
 288:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 28c:	5f5f0062 	svcpl	0x005f0062
 290:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 294:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 298:	70617267 	rsbvc	r7, r1, r7, ror #4
 29c:	5f636968 	svcpl	0x00636968
 2a0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2a4:	61645f65 	cmnvs	r4, r5, ror #30
 2a8:	6b006174 	blvs	18880 <startup-0x1ffe7780>
 2ac:	00737965 	rsbseq	r7, r3, r5, ror #18
 2b0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 2b4:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 2b8:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 2bc:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 2c0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2c4:	61726700 	cmnvs	r2, r0, lsl #14
 2c8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2cc:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2d0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2d4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 2d8:	00726165 	rsbseq	r6, r2, r5, ror #2
 2dc:	70617267 	rsbvc	r7, r1, r7, ror #4
 2e0:	5f636968 	svcpl	0x00636968
 2e4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2e8:	675f0065 	ldrbvs	r0, [pc, -r5, rrx]
 2ec:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 2f0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8b5 <systick_flag+0xdfffeb39>
 2f4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 2f8:	68616c2f 	stmdavs	r1!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
 2fc:	2f676974 	svccs	0x00676974
 300:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
 304:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 308:	6f4d2f73 	svcvs	0x004d2f73
 30c:	41442d70 	hvcmi	17104	; 0x42d0
 310:	37313054 			; <UNDEFINED> instruction: 0x37313054
 314:	73616d2d 	cmnvc	r1, #2880	; 0xb40
 318:	2f726574 	svccs	0x00726574
 31c:	2d706f4d 	ldclcs	15, cr6, [r0, #-308]!	; 0xfffffecc
 320:	30544144 	subscc	r4, r4, r4, asr #2
 324:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 328:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 32c:	614c2f72 	hvcvs	49906	; 0xc2f2
 330:	61207362 			; <UNDEFINED> instruction: 0x61207362
 334:	6520646e 	strvs	r6, [r0, #-1134]!	; 0xfffffb92
 338:	63726578 	cmnvs	r2, #120, 10	; 0x1e000000
 33c:	73657369 	cmnvc	r5, #-1543503871	; 0xa4000001
 340:	6f70732f 	svcvs	0x0070732f
 344:	5f79706f 	svcpl	0x0079706f
 348:	672f3376 			; <UNDEFINED> instruction: 0x672f3376
 34c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 350:	50470063 	subpl	r0, r7, r3, rrx
 354:	69004f49 	stmdbvs	r0, {r0, r3, r6, r8, r9, sl, fp, lr}
 358:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
 35c:	76726573 			; <UNDEFINED> instruction: 0x76726573
 360:	67006465 	strvs	r6, [r0, -r5, ror #8]
 364:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 368:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 36c:	5f6c7274 	svcpl	0x006c7274
 370:	5f746962 	svcpl	0x00746962
 374:	00746573 	rsbseq	r6, r4, r3, ror r5
 378:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 37c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 380:	5f657469 	svcpl	0x00657469
 384:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 388:	72646900 	rsbvc	r6, r4, #0, 18
 38c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 390:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 394:	665f7075 			; <UNDEFINED> instruction: 0x665f7075
 398:	675f726f 	ldrbvs	r7, [pc, -pc, ror #4]
 39c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3a0:	645f6369 	ldrbvs	r6, [pc], #-873	; 3a8 <startup-0x1ffffc58>
 3a4:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 3a8:	61007961 	tstvs	r0, r1, ror #18
 3ac:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3b0:	6165725f 	cmnvs	r5, pc, asr r2
 3b4:	6f635f64 	svcvs	0x00635f64
 3b8:	6f72746e 	svcvs	0x0072746e
 3bc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 3c0:	63736100 	cmnvs	r3, #0, 2
 3c4:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 3c8:	5f646165 	svcpl	0x00646165
 3cc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 3d0:	73007375 	movwvc	r7, #885	; 0x375
 3d4:	63656c65 	cmnvs	r5, #25856	; 0x6500
 3d8:	6f635f74 	svcvs	0x00635f74
 3dc:	6f72746e 	svcvs	0x0072746e
 3e0:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 3e4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 3e8:	665f7075 			; <UNDEFINED> instruction: 0x665f7075
 3ec:	6b5f726f 	blvs	17dcdb0 <startup-0x1e823250>
 3f0:	61707965 	cmnvs	r0, r5, ror #18
 3f4:	73610064 	cmnvc	r1, #100	; 0x64
 3f8:	5f696963 	svcpl	0x00696963
 3fc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 400:	61645f65 	cmnvs	r4, r5, ror #30
 404:	72006174 	andvc	r6, r0, #116, 2
 408:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 40c:	72670074 	rsbvc	r0, r7, #116	; 0x74
 410:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 414:	61775f63 	cmnvs	r7, r3, ror #30
 418:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 41c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 420:	61657200 	cmnvs	r5, r0, lsl #4
 424:	6f635f64 	svcvs	0x00635f64
 428:	6573006c 	ldrbvs	r0, [r3, #-108]!	; 0xffffff94
 42c:	5f707574 	svcpl	0x00707574
 430:	5f726f66 	svcpl	0x00726f66
 434:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 438:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 43c:	616c7073 	smcvs	50947	; 0xc703
 440:	79620079 	stmdbvc	r2!, {r0, r3, r4, r5, r6}^
 444:	6d006574 	cfstr32vs	mvfx6, [r0, #-464]	; 0xfffffe30
 448:	006b7361 	rsbeq	r7, fp, r1, ror #6
 44c:	64707570 	ldrbtvs	r7, [r0], #-1392	; 0xfffffa90
 450:	72670072 	rsbvc	r0, r7, #114	; 0x72
 454:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 458:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 45c:	61697469 	cmnvs	r9, r9, ror #8
 460:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 464:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 46c <startup-0x1ffffb94>
 468:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 46c:	72576f54 	subsvc	r6, r7, #84, 30	; 0x150
 470:	00657469 	rsbeq	r7, r5, r9, ror #8
 474:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 478:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 47c:	5f657469 	svcpl	0x00657469
 480:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 484:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 488:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
 48c:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 490:	63736100 	cmnvs	r3, #0, 2
 494:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 498:	5f646165 	svcpl	0x00646165
 49c:	61746164 	cmnvs	r4, r4, ror #2
 4a0:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 4a4:	67657337 			; <UNDEFINED> instruction: 0x67657337
 4a8:	72646f00 	rsbvc	r6, r4, #0, 30
 4ac:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 4b0:	72646f00 	rsbvc	r6, r4, #0, 30
 4b4:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 4b8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4bc:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 4c0:	5f657469 	svcpl	0x00657469
 4c4:	00646d63 	rsbeq	r6, r4, r3, ror #26
 4c8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 4cc:	5f6b6369 	svcpl	0x006b6369
 4d0:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 4d4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4d8:	695f7961 	ldmdbvs	pc, {r0, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
 4dc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 4e0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
 4e4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 4e8:	59530074 	ldmdbpl	r3, {r2, r4, r5, r6}^
 4ec:	43495453 	movtmi	r5, #37971	; 0x9453
 4f0:	54535f4b 	ldrbpl	r5, [r3], #-3915	; 0xfffff0b5
 4f4:	54435552 	strbpl	r5, [r3], #-1362	; 0xfffffaae
 4f8:	616f6c00 	cmnvs	pc, r0, lsl #24
 4fc:	65640064 	strbvs	r0, [r4, #-100]!	; 0xffffff9c
 500:	5f79616c 	svcpl	0x0079616c
 504:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 508:	7463006f 	strbtvc	r0, [r3], #-111	; 0xffffff91
 50c:	69466c72 	stmdbvs	r6, {r1, r4, r5, r6, sl, fp, sp, lr}^
 510:	42747372 	rsbsmi	r7, r4, #-939524095	; 0xc8000001
 514:	00657479 	rsbeq	r7, r5, r9, ror r4
 518:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
 51c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 520:	65720031 	ldrbvs	r0, [r2, #-49]!	; 0xffffffcf
 524:	76726573 			; <UNDEFINED> instruction: 0x76726573
 528:	00326465 	eorseq	r6, r2, r5, ror #8
 52c:	616c6564 	cmnvs	ip, r4, ror #10
 530:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 534:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 538:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
 53c:	6b636974 	blvs	18dab14 <startup-0x1e7254ec>
 540:	2f3a4300 	svccs	0x003a4300
 544:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 548:	616c2f73 	smcvs	49907	; 0xc2f3
 54c:	67697468 	strbvs	r7, [r9, -r8, ror #8]!
 550:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
 554:	616f6c6e 	cmnvs	pc, lr, ror #24
 558:	4d2f7364 	stcmi	3, cr7, [pc, #-400]!	; 3d0 <startup-0x1ffffc30>
 55c:	442d706f 	strtmi	r7, [sp], #-111	; 0xffffff91
 560:	31305441 	teqcc	r0, r1, asr #8
 564:	616d2d37 	cmnvs	sp, r7, lsr sp
 568:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 56c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 570:	5441442d 	strbpl	r4, [r1], #-1069	; 0xfffffbd3
 574:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
 578:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
 57c:	4c2f7265 	sfmmi	f7, 4, [pc], #-404	; 3f0 <startup-0x1ffffc10>
 580:	20736261 	rsbscs	r6, r3, r1, ror #4
 584:	20646e61 	rsbcs	r6, r4, r1, ror #28
 588:	72657865 	rsbvc	r7, r5, #6619136	; 0x650000
 58c:	65736963 	ldrbvs	r6, [r3, #-2403]!	; 0xfffff69d
 590:	70732f73 	rsbsvc	r2, r3, r3, ror pc
 594:	79706f6f 	ldmdbvc	r0!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 598:	2f33765f 	svccs	0x0033765f
 59c:	616c6564 	cmnvs	ip, r4, ror #10
 5a0:	6e695f79 	mcrvs	15, 3, r5, cr9, cr9, {3}
 5a4:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 5a8:	2e747075 	mrccs	0, 3, r7, cr4, cr5, {3}
 5ac:	65640063 	strbvs	r0, [r4, #-99]!	; 0xffffff9d
 5b0:	5f79616c 	svcpl	0x0079616c
 5b4:	6b696d31 	blvs	1a5ba80 <startup-0x1e5a4580>
 5b8:	73006f72 	movwvc	r6, #3954	; 0xf72
 5bc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 5c0:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 5c4:	64007961 	strvs	r7, [r0], #-2401	; 0xfffff69f
 5c8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 5cc:	3030355f 	eorscc	r3, r0, pc, asr r5
 5d0:	7000736e 	andvc	r7, r0, lr, ror #6
 5d4:	65736c75 	ldrbvs	r6, [r3, #-3189]!	; 0xfffff38b
 5d8:	74630073 	strbtvc	r0, [r3], #-115	; 0xffffff8d
 5dc:	64006c72 	strvs	r6, [r0], #-3186	; 0xfffff38e
 5e0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 5e4:	756f635f 	strbvc	r6, [pc, #-863]!	; 28d <startup-0x1ffffd73>
 5e8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 5ec:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 5f0:	315f7961 	cmpcc	pc, r1, ror #18
 5f4:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 5f8:	65640069 	strbvs	r0, [r4, #-105]!	; 0xffffff97
 5fc:	5f79616c 	svcpl	0x0079616c
 600:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 604:	6f630073 	svcvs	0x00630073
 608:	00746e75 	rsbseq	r6, r4, r5, ror lr
 60c:	696c6163 	stmdbvs	ip!, {r0, r1, r5, r6, r8, sp, lr}^
 610:	74630062 	strbtvc	r0, [r3], #-98	; 0xffffff9e
 614:	68546c72 	ldmdavs	r4, {r1, r4, r5, r6, sl, fp, sp, lr}^
 618:	42647269 	rsbmi	r7, r4, #-1879048186	; 0x90000006
 61c:	00657479 	rsbeq	r7, r5, r9, ror r4
 620:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 624:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
 628:	6b636974 	blvs	18dac00 <startup-0x1e725400>
 62c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 630:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 634:	685f7470 	ldmdavs	pc, {r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 638:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 63c:	Address 0x0000063c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000000a8 	andeq	r0, r0, r8, lsr #1
  30:	400c0e41 	andmi	r0, ip, r1, asr #28
  34:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  38:	018e4002 	orreq	r4, lr, r2
  3c:	41300e41 	teqmi	r0, r1, asr #28
  40:	0000070d 	andeq	r0, r0, sp, lsl #14
  44:	00000018 	andeq	r0, r0, r8, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	200000b8 	strhcs	r0, [r0], -r8
  50:	00000012 	andeq	r0, r0, r2, lsl r0
  54:	40080e41 	andmi	r0, r8, r1, asr #28
  58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  5c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  60:	0000000c 	andeq	r0, r0, ip
  64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  68:	7c020001 	stcvc	0, cr0, [r2], {1}
  6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000060 	andeq	r0, r0, r0, rrx
  78:	200000cc 	andcs	r0, r0, ip, asr #1
  7c:	00000064 	andeq	r0, r0, r4, rrx
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000060 	andeq	r0, r0, r0, rrx
  98:	20000130 	andcs	r0, r0, r0, lsr r1
  9c:	00000064 	andeq	r0, r0, r4, rrx
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	00000020 	andeq	r0, r0, r0, lsr #32
  b4:	00000060 	andeq	r0, r0, r0, rrx
  b8:	20000194 	mulcs	r0, r4, r1
  bc:	00000090 	muleq	r0, r0, r0
  c0:	400c0e41 	andmi	r0, ip, r1, asr #28
  c4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  c8:	018e4002 	orreq	r4, lr, r2
  cc:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  d0:	0000070d 	andeq	r0, r0, sp, lsl #14
  d4:	00000020 	andeq	r0, r0, r0, lsr #32
  d8:	00000060 	andeq	r0, r0, r0, rrx
  dc:	20000224 	andcs	r0, r0, r4, lsr #4
  e0:	00000050 	andeq	r0, r0, r0, asr r0
  e4:	400c0e41 	andmi	r0, ip, r1, asr #28
  e8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  ec:	018e4002 	orreq	r4, lr, r2
  f0:	41380e41 	teqmi	r8, r1, asr #28
  f4:	0000070d 	andeq	r0, r0, sp, lsl #14
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000060 	andeq	r0, r0, r0, rrx
 100:	20000274 	andcs	r0, r0, r4, ror r2
 104:	00000050 	andeq	r0, r0, r0, asr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000060 	andeq	r0, r0, r0, rrx
 120:	200002c4 	andcs	r0, r0, r4, asr #5
 124:	00000016 	andeq	r0, r0, r6, lsl r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000060 	andeq	r0, r0, r0, rrx
 140:	200002da 	ldrdcs	r0, [r0], -sl
 144:	00000052 	andeq	r0, r0, r2, asr r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	00000018 	andeq	r0, r0, r8, lsl r0
 15c:	00000060 	andeq	r0, r0, r0, rrx
 160:	2000032c 	andcs	r0, r0, ip, lsr #6
 164:	00000024 	andeq	r0, r0, r4, lsr #32
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 174:	00000018 	andeq	r0, r0, r8, lsl r0
 178:	00000060 	andeq	r0, r0, r0, rrx
 17c:	20000350 	andcs	r0, r0, r0, asr r3
 180:	0000009a 	muleq	r0, sl, r0
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000060 	andeq	r0, r0, r0, rrx
 198:	200003ea 	andcs	r0, r0, sl, ror #7
 19c:	00000046 	andeq	r0, r0, r6, asr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000060 	andeq	r0, r0, r0, rrx
 1b8:	20000430 	andcs	r0, r0, r0, lsr r4
 1bc:	00000050 	andeq	r0, r0, r0, asr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000060 	andeq	r0, r0, r0, rrx
 1d8:	20000480 	andcs	r0, r0, r0, lsl #9
 1dc:	0000002a 	andeq	r0, r0, sl, lsr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000060 	andeq	r0, r0, r0, rrx
 1f8:	200004aa 	andcs	r0, r0, sl, lsr #9
 1fc:	0000002a 	andeq	r0, r0, sl, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	00000020 	andeq	r0, r0, r0, lsr #32
 214:	00000060 	andeq	r0, r0, r0, rrx
 218:	200004d4 	ldrdcs	r0, [r0], -r4
 21c:	00000048 	andeq	r0, r0, r8, asr #32
 220:	400c0e41 	andmi	r0, ip, r1, asr #28
 224:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 228:	018e4002 	orreq	r4, lr, r2
 22c:	41180e41 	tstmi	r8, r1, asr #28
 230:	0000070d 	andeq	r0, r0, sp, lsl #14
 234:	00000020 	andeq	r0, r0, r0, lsr #32
 238:	00000060 	andeq	r0, r0, r0, rrx
 23c:	2000051c 	andcs	r0, r0, ip, lsl r5
 240:	00000048 	andeq	r0, r0, r8, asr #32
 244:	400c0e41 	andmi	r0, ip, r1, asr #28
 248:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 24c:	018e4002 	orreq	r4, lr, r2
 250:	41180e41 	tstmi	r8, r1, asr #28
 254:	0000070d 	andeq	r0, r0, sp, lsl #14
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000060 	andeq	r0, r0, r0, rrx
 260:	20000564 	andcs	r0, r0, r4, ror #10
 264:	00000030 	andeq	r0, r0, r0, lsr r0
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	100e4101 	andne	r4, lr, r1, lsl #2
 274:	00070d41 	andeq	r0, r7, r1, asr #26
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000060 	andeq	r0, r0, r0, rrx
 280:	20000594 	mulcs	r0, r4, r5
 284:	00000030 	andeq	r0, r0, r0, lsr r0
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	100e4101 	andne	r4, lr, r1, lsl #2
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000060 	andeq	r0, r0, r0, rrx
 2a0:	200005c4 	andcs	r0, r0, r4, asr #11
 2a4:	00000054 	andeq	r0, r0, r4, asr r0
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000060 	andeq	r0, r0, r0, rrx
 2c0:	20000618 	andcs	r0, r0, r8, lsl r6
 2c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000060 	andeq	r0, r0, r0, rrx
 2e0:	20000654 	andcs	r0, r0, r4, asr r6
 2e4:	0000005c 	andeq	r0, r0, ip, asr r0
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	00000060 	andeq	r0, r0, r0, rrx
 300:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 304:	00000058 	andeq	r0, r0, r8, asr r0
 308:	40080e41 	andmi	r0, r8, r1, asr #28
 30c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 310:	180e4101 	stmdane	lr, {r0, r8, lr}
 314:	00070d41 	andeq	r0, r7, r1, asr #26
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	00000060 	andeq	r0, r0, r0, rrx
 320:	20000708 	andcs	r0, r0, r8, lsl #14
 324:	0000005a 	andeq	r0, r0, sl, asr r0
 328:	40080e41 	andmi	r0, r8, r1, asr #28
 32c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 330:	100e4101 	andne	r4, lr, r1, lsl #2
 334:	00070d41 	andeq	r0, r7, r1, asr #26
 338:	00000018 	andeq	r0, r0, r8, lsl r0
 33c:	00000060 	andeq	r0, r0, r0, rrx
 340:	20000762 	andcs	r0, r0, r2, ror #14
 344:	0000005c 	andeq	r0, r0, ip, asr r0
 348:	40080e41 	andmi	r0, r8, r1, asr #28
 34c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 350:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 354:	0000001c 	andeq	r0, r0, ip, lsl r0
 358:	00000060 	andeq	r0, r0, r0, rrx
 35c:	200007be 			; <UNDEFINED> instruction: 0x200007be
 360:	0000006a 	andeq	r0, r0, sl, rrx
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	100e4101 	andne	r4, lr, r1, lsl #2
 370:	00070d41 	andeq	r0, r7, r1, asr #26
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	00000060 	andeq	r0, r0, r0, rrx
 37c:	20000828 	andcs	r0, r0, r8, lsr #16
 380:	00000090 	muleq	r0, r0, r0
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	180e4101 	stmdane	lr, {r0, r8, lr}
 390:	00070d41 	andeq	r0, r7, r1, asr #26
 394:	0000001c 	andeq	r0, r0, ip, lsl r0
 398:	00000060 	andeq	r0, r0, r0, rrx
 39c:	200008b8 			; <UNDEFINED> instruction: 0x200008b8
 3a0:	00000080 	andeq	r0, r0, r0, lsl #1
 3a4:	40080e41 	andmi	r0, r8, r1, asr #28
 3a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3ac:	100e4101 	andne	r4, lr, r1, lsl #2
 3b0:	00070d41 	andeq	r0, r7, r1, asr #26
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000060 	andeq	r0, r0, r0, rrx
 3bc:	20000938 	andcs	r0, r0, r8, lsr r9
 3c0:	00000040 	andeq	r0, r0, r0, asr #32
 3c4:	40080e41 	andmi	r0, r8, r1, asr #28
 3c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3cc:	100e4101 	andne	r4, lr, r1, lsl #2
 3d0:	00070d41 	andeq	r0, r7, r1, asr #26
 3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d8:	00000060 	andeq	r0, r0, r0, rrx
 3dc:	20000978 	andcs	r0, r0, r8, ror r9
 3e0:	00000046 	andeq	r0, r0, r6, asr #32
 3e4:	40080e41 	andmi	r0, r8, r1, asr #28
 3e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3ec:	100e4101 	andne	r4, lr, r1, lsl #2
 3f0:	00070d41 	andeq	r0, r7, r1, asr #26
 3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f8:	00000060 	andeq	r0, r0, r0, rrx
 3fc:	200009be 			; <UNDEFINED> instruction: 0x200009be
 400:	0000002a 	andeq	r0, r0, sl, lsr #32
 404:	40080e41 	andmi	r0, r8, r1, asr #28
 408:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 40c:	100e4101 	andne	r4, lr, r1, lsl #2
 410:	00070d41 	andeq	r0, r7, r1, asr #26
 414:	0000001c 	andeq	r0, r0, ip, lsl r0
 418:	00000060 	andeq	r0, r0, r0, rrx
 41c:	200009e8 	andcs	r0, r0, r8, ror #19
 420:	00000066 	andeq	r0, r0, r6, rrx
 424:	40080e41 	andmi	r0, r8, r1, asr #28
 428:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 42c:	100e4101 	andne	r4, lr, r1, lsl #2
 430:	00070d41 	andeq	r0, r7, r1, asr #26
 434:	00000018 	andeq	r0, r0, r8, lsl r0
 438:	00000060 	andeq	r0, r0, r0, rrx
 43c:	20000a4e 	andcs	r0, r0, lr, asr #20
 440:	0000001e 	andeq	r0, r0, lr, lsl r0
 444:	40080e41 	andmi	r0, r8, r1, asr #28
 448:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 44c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 450:	00000020 	andeq	r0, r0, r0, lsr #32
 454:	00000060 	andeq	r0, r0, r0, rrx
 458:	20000a6c 	andcs	r0, r0, ip, ror #20
 45c:	00000190 	muleq	r0, r0, r1
 460:	400c0e41 	andmi	r0, ip, r1, asr #28
 464:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 468:	018e4002 	orreq	r4, lr, r2
 46c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 470:	0000070d 	andeq	r0, r0, sp, lsl #14
 474:	0000000c 	andeq	r0, r0, ip
 478:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 47c:	7c020001 	stcvc	0, cr0, [r2], {1}
 480:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 484:	00000018 	andeq	r0, r0, r8, lsl r0
 488:	00000474 	andeq	r0, r0, r4, ror r4
 48c:	20000bfc 	strdcs	r0, [r0], -ip
 490:	0000000e 	andeq	r0, r0, lr
 494:	40080e41 	andmi	r0, r8, r1, asr #28
 498:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 49c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4a0:	00000018 	andeq	r0, r0, r8, lsl r0
 4a4:	00000474 	andeq	r0, r0, r4, ror r4
 4a8:	20000c0a 	andcs	r0, r0, sl, lsl #24
 4ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 4b0:	40080e41 	andmi	r0, r8, r1, asr #28
 4b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4bc:	00000018 	andeq	r0, r0, r8, lsl r0
 4c0:	00000474 	andeq	r0, r0, r4, ror r4
 4c4:	20000c24 	andcs	r0, r0, r4, lsr #24
 4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4cc:	40080e41 	andmi	r0, r8, r1, asr #28
 4d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4d8:	00000018 	andeq	r0, r0, r8, lsl r0
 4dc:	00000474 	andeq	r0, r0, r4, ror r4
 4e0:	20000c40 	andcs	r0, r0, r0, asr #24
 4e4:	00000010 	andeq	r0, r0, r0, lsl r0
 4e8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	00000474 	andeq	r0, r0, r4, ror r4
 4fc:	20000c50 	andcs	r0, r0, r0, asr ip
 500:	00000018 	andeq	r0, r0, r8, lsl r0
 504:	40080e41 	andmi	r0, r8, r1, asr #28
 508:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 50c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	00000474 	andeq	r0, r0, r4, ror r4
 518:	20000c68 	andcs	r0, r0, r8, ror #24
 51c:	0000003c 	andeq	r0, r0, ip, lsr r0
 520:	40080e41 	andmi	r0, r8, r1, asr #28
 524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 528:	100e4101 	andne	r4, lr, r1, lsl #2
 52c:	00070d41 	andeq	r0, r7, r1, asr #26
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	00000474 	andeq	r0, r0, r4, ror r4
 538:	20000ca4 	andcs	r0, r0, r4, lsr #25
 53c:	0000003c 	andeq	r0, r0, ip, lsr r0
 540:	40080e41 	andmi	r0, r8, r1, asr #28
 544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 548:	100e4101 	andne	r4, lr, r1, lsl #2
 54c:	00070d41 	andeq	r0, r7, r1, asr #26
 550:	0000001c 	andeq	r0, r0, ip, lsl r0
 554:	00000474 	andeq	r0, r0, r4, ror r4
 558:	20000ce0 	andcs	r0, r0, r0, ror #25
 55c:	00000030 	andeq	r0, r0, r0, lsr r0
 560:	40080e41 	andmi	r0, r8, r1, asr #28
 564:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 568:	100e4101 	andne	r4, lr, r1, lsl #2
 56c:	00070d41 	andeq	r0, r7, r1, asr #26
 570:	00000018 	andeq	r0, r0, r8, lsl r0
 574:	00000474 	andeq	r0, r0, r4, ror r4
 578:	20000d10 	andcs	r0, r0, r0, lsl sp
 57c:	00000018 	andeq	r0, r0, r8, lsl r0
 580:	40080e41 	andmi	r0, r8, r1, asr #28
 584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 588:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 58c:	00000018 	andeq	r0, r0, r8, lsl r0
 590:	00000474 	andeq	r0, r0, r4, ror r4
 594:	20000d28 	andcs	r0, r0, r8, lsr #26
 598:	0000004c 	andeq	r0, r0, ip, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
